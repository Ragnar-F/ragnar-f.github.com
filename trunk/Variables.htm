<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Variablen und Ausdrücke</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="../forum/rss.php">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Variablen und Ausdrücke</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Variables">Variablen</a></li>
  <li><a href="#Expressions">Ausdrücke</a></li>
  <li><a href="#Operators">Operatoren in Ausdrücken</a><a href="#env"></a></li>
  <li><a href="#BuiltIn">Interne Variablen</a></li>
  <li><a href="#env">Vergleich von Umgebungsvariablen und normalen Variablen</a></li>
  <li><a href="#cap">Kapazität und Speicher einer Variable</a></li>
</ul>
<h2 id="Intro"><a name="Variables"></a>Variablen</h2>
<p><strong>Variablentypen</strong>: AutoHotkey hat keine direkt definierte Variablentypen. Wenn eine Variable nur Ziffern enthält (optional mit einem Dezimalpunkt), dann wird sie automatisch als Zahl interpretiert, sobald sie von einer mathematischen Operation oder von einem Vergleich benötigt wird. Zur Verbesserung der Performance werden die Zahlen intern zwischengespeichert, um Konvertierungen von/in Strings zu vermeiden.</p>
<p><strong>Gültigkeitsbereiche und Deklarationen von Variablen</strong>: Mit Ausnahme von <a href="Functions.htm#Locals">lokalen Variablen</a> in Funktionen sind alle Variablen global; das heißt, dass deren Inhalt jederzeit vom Script gelesen oder geändert werden kann. Außer den genannten Ausnahmen auf der <a href="Functions.htm#Global">Funktionsseite</a> werden Variablen nicht deklariert; sie entstehen, sobald sie verwendet werden (und jede Variable beginnt leer).</p>
<p><strong>Variablennamen</strong>: Variablen sind nicht von der Groß- und Kleinschreibung abhängig (zum Beispiel ist <em>AktuellesDatum</em> das Gleiche wie <em>aktuellesdatum</em>). Variablennamen dürfen bis zu 253 Zeichen lang sein und aus Buchstaben, Zahlen und folgenden Satzzeichen bestehen: # _ @ $</p>
<p>Aufgrund von Stilkonventionen ist es generell besser, Variablen nur mit Buchstaben, Zahlen und Unterstriche zu benennen (zum Beispiel: <em>PositionZeiger</em>, <em>Gesamt_Elemente</em> und <em>Eintrag_ist_gültig</em>). Dieser Stil ermöglicht Menschen, die mit anderen Programmiersprachen vertraut sind, das Script besser zu verstehen. Sobald außerdem dieselben Stilkonventionen von anderen Sprachen in AutoHotkey verwendet werden, ist es dadurch möglicherweise einfacher, eigene Scripts erneut zu lesen.</p>
<p>Auch wenn ein Variablenname vollständig aus Ziffern bestehen kann, sollte das in der Regel nur für <a href="Scripts.htm#cmd">eingehende Befehlszeilenparameter</a> verwendet werden. Solche numerischen Namen können nicht in <a href="#Expressions">Ausdrücken</a> verwendet werden, weil sie dort als Zahlen anstatt als Variablen betrachtet werden.</p>
<p>Da die Wörter <em>AND</em>, <em>OR</em> und <em>NOT</em> als <a href="#Operators">Operatoren</a> in Ausdrücken benutzt werden, sollten sie in der Regel nicht als Variablennamen verwendet werden. Solche Namen in einem Ausdruck verhindern eine angemessene Auswertung.</p>
<p><strong>Werte in Variablen speichern</strong>: Für das Speichern eines Strings oder einer Zahl in eine Variable gibt es zwei Methoden: traditionell und Ausdruck. Die traditionelle Methode verwendet den <a href="commands/SetEnv.htm">Gleichheitszeichenoperator (=)</a>, um direkte Strings <strong>ohne Anführungszeichen</strong> oder Variablen mit umschließenden Prozentzeichen zuzuweisen. Zum Beispiel:</p>
<pre>EigeneZahl = 123
EigenerString = Das ist ein direkter String.
KopieVonVar = %Var%  <em>; Beim Verwenden des Operators "=" werden Prozentzeichen benötigt, um den Inhalt einer Variable abzurufen.</em></pre>
<p> Im Gegensatz dazu verwendet die Ausdrucksmethode den <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a> zum Speichern von Zahlen, Strings <strong>in Anführungszeichen</strong>  und andere Arten von <a href="#Expressions">Ausdrücken</a>. Die folgenden Beispiele sind funktionsgemäß mit den vorherigen Beispielen identisch:</p>
<pre>EigeneZahl := 123
EigenerString := "Das ist ein direkter String."
KopieVonVar := Var  <em>; Im Gegensatz zum oberen Äquivalent werden Prozentzeichen nicht beim Operator ":=" verwendet.</em></pre>
<p>Die letztere Methode wird aufgrund der Eindeutigkeit bevorzugt, außerdem unterstützt sie eine <a href="#Expressions">Ausdruckssyntax</a>, die nahezu identisch mit der Syntax vieler anderer Sprachen ist.</p>
<p>Wie wahrscheinlich bereits vermutet, gibt es zwei Methoden, um den Inhalt einer Variable zu leeren:</p>
<pre>EigeneVar =
EigeneVar := ""</pre>
<p>Die nebeneinanderliegenden Anführungszeichen sollten nur mit dem Operator ":=" verwendet werden, da ansonsten beim Operator "=" zwei direkte Anführungszeichen in die Variable gespeichert werden würden.</p>
<p><strong>Die Inhalte von Variablen abrufen</strong>: Im Gegensatz zu den oben genannten Methoden gibt es auch zwei Methoden zum Abrufen von Werten: traditionell und Ausdruck. Für die traditionelle Methode muss jeder Variablenname in Prozentzeichen gesetzt werden, um den Inhalt abzurufen. Zum Beispiel:</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a> Die Variable namens Var enthält %Var%.
KopieVonVar = %Var%</pre>
<p>Im Gegensatz dazu werden bei der Ausdrucksmethode die Prozentzeichen um den Variablennamen weggelassen, dafür aber mit Anführungszeichen umschlossen. Die folgenden Beispiele sind Äquivalente der vorherigen Beispiele:</p>
<pre>MsgBox <strong>%</strong> "Die Variable namens Var enthält " . Var . "."  <em>; Ein Punkt wird verwendet, um zwei Strings zu verketten (verbinden).</em>
KopieVonVar := Var</pre>
<p>In der MsgBox-Zeile darüber wird ein Prozent- und Leerzeichen verwendet, um den Parameter vom traditionellen Modus auf den Ausdrucksmodus zu wechseln. Das ist notwendig, weil die traditionelle Methode standardmäßig von allen Befehlen verwendet wird (wenn nicht anders beschrieben). Allerdings akzeptieren bestimmte Parameter von einigen Befehlen bereits Ausdrücke, dabei ist das führende Prozentzeichen erlaubt, aber nicht notwendig. Die folgenden drei Beispiele verhalten sich identisch, da der erste Parameter von <a href="commands/Sleep.htm">Sleep</a> ausdrucksfähig ist:</p>
<pre>Sleep MillisekundenWarten
Sleep %MillisekundenWarten%
Sleep % MillisekundenWarten</pre>
<p><strong>Vergleich von Variablen</strong>: Siehe den unteren Abschnitt "Ausdrücke" für wichtige Hinweise über die verschiedenen Arten von Vergleichen, insbesondere darüber, wann die Klammern verwendet werden sollen.</p>
<h2 id="Expressions">Ausdrücke</h2>
<p>Ausdrücke werden verwendet, um eine oder mehrere Operationen mit mehreren Variablen, direkte Strings und/oder direkte Zahlen durchzuführen.</p>
<p>Variablennamen werden in einem Ausdruck nicht von Prozentzeichen umschlossen (außer für Arrays und anderen <a href="#ref">Doppelreferenzen</a>). Folglich müssen Strings in Anführungszeichen gesetzt werden, um sie von Variablen zu unterscheiden. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung > 100 or Fundfarbe <> "Blau")
    MsgBox Die Einstellung ist zu hoch oder falsche Farbe vorhanden.</pre>
<p>Im obigen Beispiel erscheint "Blau" in Anführungszeichen, weil es sich hierbei um einen String handelt. Um ein <em>tatsächliches</em> Anführungszeichen innerhalb eines Strings einzufügen, verwendet zwei aufeinanderfolgende Anführungszeichen wie in diesem Beispiel zweimal gezeigt: "Sie sagte: <span class="red">""</span>Ein Apfel am Tag.<span class="red">""</span>"</p>
<p><strong>Wichtig</strong>: Eine If-Anweisung mit einem Ausdruck unterscheidet sich von einer <a href="commands/IfEqual.htm">traditionellen If-Anweisung</a> wie <em>If Fundfarbe <> Blau</em>, wenn das Zeichen nach dem Wort "If" eine offene Klammer ist. Obwohl dies in der Regel dadurch erreicht wird, den kompletten Ausdruck in Klammern zu setzen, ist dies beispielsweise auch mit <em>If (x > 0) and (y > 0)</em> möglich. Darüber hinaus kann die offene Klammer komplett weggelassen werden, wenn das erste Element nach dem Wort "If" ein <a href="Functions.htm">Funktionsaufruf</a> oder ein Operator wie "not" oder "!" ist.</p>
<p><strong>Leere Strings</strong>: Um einen leeren String in einem Ausdruck anzugeben, verwendet zwei aufeinanderfolgende Anführungszeichen. Zum Beispiel ist die Anweisung <em>if (EigeneVar <> "")</em> wahr, wenn <em>EigeneVar</em> nicht leer ist. Allerdings werden zwei aufeinanderfolgende Anführungszeichen in einer <a href="commands/IfEqual.htm">traditionellen If-Anweisung</a> direkt behandelt. Zum Beispiel ist die Anweisung <em>if EigeneVar = ""</em> nur wahr, wenn <em>EigeneVar</em> zwei Anführungszeichen enthält. Um daher zu überprüfen, ob eine Variable in einer traditionellen If-Anweisung leer ist, verwendet = oder <> mit nichts auf der rechten Seite, wie in diesem Beispiel: <em>if Var =</em></p>
<p>Zusätzlich ergibt ein ungültiger Ausdruck wie (x +* 3) einen leeren String.</p>
<p><strong>Das Ergebnis eines Ausdrucks speichern</strong>: Um ein Ergebnis einer Variable zuzuweisen, verwendet den <a href="commands/SetExpression.htm">Operator ":="</a>. Zum Beispiel:</p>
<pre>Nettopreis := Preis * (1 - Rabatt/100)</pre>
<p><strong>Boolesche Werte</strong>: Sobald ein Ausdruck wahr oder falsch gewertet werden soll (wie z. B. eine IF-Anweisung), dann wird ein leeres Ergebnis oder ein Ergebnis mit 0 als falsch angesehen, alle anderen Ergebnisse ansonsten als wahr. Zum Beispiel ist die Anweisung "if Elementzählung" nur falsch, wenn Elementzählung leer oder 0 ist. Ebenso ergibt die Anweisung "if not Elementzählung" das Gegenteil.</p>
<p>Operatoren wie NOT/AND/OR/>/=/< erzeugen automatisch einen wahren oder falschen Wert: sie ergeben eine 1 für wahr und 0 für falsch. Im folgenden Ausdruck wird der <em>Fertig</em>-Variable zum Beispiel eine 1 zugewiesen, wenn eine der beiden Bedingungen erfüllt ist:</p>
<pre>Fertig := A_Index > 5 or Gefunden</pre>
<p>Wie bereits oben angedeutet kann eine Variable dazu verwendet werden, einen falschen Wert zu beinhalten, indem sie einfach leer gemacht oder ihr eine 0 zugewiesen wird. Der Vorteil davon ist, dass die Kurzanweisung "if Fertig" zur Überprüfung verwendet werden kann, ob die Fertig-Variable wahr oder falsch ist.</p>
<p><a name="True"></a><a name="False"></a>Die Wörter <em>True</em> und <em>False</em> sind interne Variablen, die eine 1 und eine 0 enthalten. Sie können verwendet werden, um ein Script besser lesbar zumachen, z. B.:</p>
<pre>Zeichengenauigkeit := false
Suchfortsetzung := true</pre>
<p><strong>Integer und Fließkommazahlen</strong>: Innerhalb eines Ausdrucks werden Zahlen als Fließkommazahlen angesehen, sobald sie einen Dezimalpunkt enthalten, ansonsten sind sie Integer. Sobald bei den meisten Operatoren wie Addition und Multiplikation eine der Eingaben eine Fließkommazahl ist, dann ist das Ergebnis auch eine Fließkommazahl.</p>
<p>Innerhalb von Ausdrücken sowie auch Nicht-Ausdrücken können Zahlen im hexadezimalen oder dezimalen Format geschrieben werden. Hexadezimalzahlen beginnen mit dem 0x-Präfix. Zum Beispiel ist <em>Sleep 0xFF</em> gleichwertig mit <em>Sleep 255</em>. Seit v1.0.46.11 werden Fließkommazahlen in wissenschaftlichen Notationen erkannt; aber nur, wenn sie einen Dezimalpunkt enthalten (z. B. 1<strong>.</strong>0e4 und -2<strong>.</strong>1E-4).</p>
<p><strong>Einen Ausdruck erzwingen</strong>: Ein Ausdruck kann in einen Parameter verwendet werden, der so etwas nicht direkt unterstützt (mit Ausnahme einer Ausgabe- oder Eingabevariable wie z. B. in <a href="commands/StringLen.htm">StringLen</a>), sobald der Ausdruck ein Prozent- und Leerzeichen (oder Tabulator) davor hat. Diese Technik wird häufig verwendet, um auf <a href="misc/Arrays.htm">Arrays</a> zuzugreifen. Zum Beispiel:</p>
<pre><a href="commands/FileAppend.htm">FileAppend</a>, <strong>%</strong> EigenerArray%i%, Eigene Datei.txt
<a href="commands/MsgBox.htm">MsgBox</a> <strong>%</strong> "Die Variable EigeneVar enthält " . EigeneVar . "."
<a href="commands/Loop.htm">Loop</a> <strong>%</strong> Iterationen + 1
<a href="commands/WinSet.htm">WinSet</a>, Transparent, <strong>%</strong> X + 100
<a href="commands/WinSet.htm">Control</a>, Choose, <strong>%</strong> AktuelleAuswahl - 1</pre>
<h2 id="Operators">Operatoren in Ausdrücken</h2>
<p> Operatoren mit gleicher Priorität wie multiplizieren (*) und dividieren (/) werden von links nach rechts ausgewertet, sofern nicht anders unten angegeben. Im Gegensatz dazu wird ein Operator mit niedrigerer Priorität wie addieren (+) erst <em>nach</em> einem höheren Operator wie multiplizieren (*) ausgewertet. Zum Beispiel wird 3 + 2 * 2 als 3 + (2 * 2) ausgewertet. Klammern können verwendet werden, um die Priorität wie in diesem Beispiel zu überschreiben: (3 + 2) * 2</p>
<p>Soweit nicht anders unten angegeben wird jeder leere Wert (String) in einer mathematischen Operation <strong>nicht</strong> als 0 angesehen. Stattdessen wird es als Fehler behandelt, wodurch dieser Teil des Ausdrucks zu einem leeren String ausgewertet wird. Wenn zum Beispiel die Variable X leer ist, dann ergibt der Ausdruck X+1 einen leeren Wert anstelle von 1.</p>
<h3>Ausdrucksoperatoren (in absteigender Priorität)</h3>
<table class="info">
  <tr id="ref">
    <td align="center" style="white-space:nowrap"><strong>%Var%</strong></td>
    <td><p>Sobald eine Variable innerhalb eines Ausdrucks von Prozentzeichen umschlossen ist (z. B. %Var%), dann wird davon ausgegangen, dass sie den Namen oder Teilnamen einer anderen Variable <u>enthält</u> (falls so eine Variable nicht vorhanden ist, wird %Var% in einen leeren String aufgelöst). Das wird häufig dazu verwendet, auf <a href="misc/Arrays.htm#pseudo">Pseudo-Array</a>-Elemente wie im folgenden Beispiel zu verweisen:</p>
      <pre>Var := EigenerArray%A_Index% + 100</pre>
      <p>Aus Gründen der Abwärtskompatibilität behandeln Befehlsparameter, die ein Ausdruck sein können, einen isolierten Namen in Prozentzeichen (z. B. %Var%, aber nicht Array%i%) als wären keine Prozentzeichen vorhanden. Das kann verhindert werden, indem die Referenz von Klammern umschlossen wird; z. B. <code>Sleep (%Var%)</code></p>
      <p><span class="ver">[AHK_L 52+]:</span> Zusätzlich zu den normalen Variablen kann %Var% in eine <a href="#env">Umgebungsvariable</a>, die Zwischenablage oder eine <a href="#BuiltIn">reservierte/schreibgeschützte Variable</a> aufgelöst werden. Vor Revision 52 ergab %Var% in diesen Fällen eine leeren String.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>x.y</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> <strong>Auf ein Objekt zugreifen</strong>. Abrufen oder Setzen eines Werts, oder Aufrufen einer Methode von Objekt <i>x</i>, wobei <i>y</i> ein direkter Wert ist. Siehe <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>.</td>
  </tr>
  <tr id="IncDec">
    <td align="center"><strong>++<br> --</strong></td>
    <td><strong>Pre- und Post-Inkrement/Dekrement</strong>. Addiert oder subtrahiert eine Variable um 1 (aber in den Versionen vor 1.0.46 können sie sich nur auf einer Zeile befinden; keine anderen Operatoren dürfen vorhanden sein). Der Operator kann entweder vor oder hinter dem Variablennamen stehen. Wenn er <em>vor</em> dem Namen steht, dann wird die Operation sofort durchgeführt und das Ergebnis von der nächsten Operation verwendet. Zum Beispiel wird mit <em>Variable := ++X</em> die Variable X sofort erhöht und danach der <em>Variable</em> zugewiesen. Sobald der Operator <em>hinter</em> dem Variablennamen steht, wird die Operation durchgeführt, <em>nachdem</em> die Variable von der nächsten Operation verwendet wurde. Zum Beispiel wird mit <em>Variable := X++</em> die Variable X erst nach der Zuweisung des aktuellen X-Werts auf die <em>Variable</em> erhöht. Aufgrund der Abwärtskompatibilität behandeln die Operatoren ++ und -- leere Variablen als 0, aber nur, wenn sie auf einer Zeile alleine sind; zum Beispiel erzeugen <em>y := 1, ++x</em> als auch <em>MsgBox % ++x</em> ein leeres Ergebnis, falls x leer ist.</td>
  </tr>
  <tr id="pow">
    <td align="center"><strong>**</strong></td>
    <td><strong>Potenz</strong>. Sowohl die Basis als auch der Exponent können einen Dezimalpunkt enthalten. Wenn der Exponent negativ ist, dann wird das Ergebnis zur Fließkommazahl formatiert, selbst wenn die Basis und der Exponent Integer sind. Da ** eine höhere Priorität als ein einstelliges Minuszeichen hat, wird -2**2 wie -(2**2) ausgewertet und somit -4 ergeben. Um daher eine direkte negative Zahl zu potenzieren, muss sie in Klammern wie (-2)**2 gesetzt werden. Hinweis: Eine negative Basis, kombiniert mit einem gebrochenen Exponenten wie (-2)**0.5, wird nicht unterstützt; dadurch ist das Ergebnis ein leerer String. Aber sowohl (-2)**2 als auch (-2)**2.0 werden unterstützt.</td>
  </tr>
  <tr id="unary">
    <td align="center"><strong>-<br> !<br> ~<br> & *</strong></td>
    <td><p><strong>Einstelliges Minuszeichen (-)</strong>: Auch wenn hier das gleiche Symbol vom Subtraktionsoperator verwendet wird, gilt ein einstelliges Minuszeichen nur für ein Element oder Teilausdruck wie in diesem Beispiel zweimal gezeigt: <em><strong>-</strong>(3 / <strong>-</strong>x)</em>. Zusätzlich werden alle einstelligen Pluszeichen (+) innerhalb eines Ausdrucks ignoriert.</p>
      <p><strong>Logisches NICHT (!)</strong>: Wenn der Operand leer oder 0 ist, dann ist das Ergebnis bei einem logischen NICHT eine 1, also "wahr". Ansonsten ist das Ergebnis eine 0 (falsch). Zum Beispiel: <em>!x or !(y and z)</em>. Hinweis: Das Wort NOT ist gleichbedeutend mit <strong>!</strong>, außer dass <strong>!</strong> eine höhere Priorität hat. Seit v1.0.46 sind aufeinanderfolgende einstellige Operatoren wie <em><strong>!!</strong>Var</em> erlaubt, weil sie von rechts nach links ausgewertet werden.</p>
      <p><strong>Bitweises NICHT (~)</strong>: Dadurch wird jedes Bit des Operanden umgekehrt. Wenn der Operand eine Fließkommazahl ist, dann wird sie vor der Berechnung auf einen Integer gekürzt. Wenn der Operand zwischen 0 und 4294967295 (0xffffffff) liegt, dann wird diese Zahl als ein <u>unsigned</u> 32-Bit-Wert behandelt. Ansonsten wird diese Zahl als ein <u>signed</u> 64-Bit-Wert behandelt. Zum Beispiel wird ~0xf0f zu 0xfffff0f0 (4294963440) ausgewertet.</p>
      <p><a name="amp"></a><strong>Adresse (&)</strong>: <em>&EigeneVar</em> ermittelt die Adresse des Speicherinhalts von <em>EigeneVar</em>, die typischerweise bei <a href="commands/DllCall.htm#struct">DllCall-Strukturen</a> verwendet wird. <em>&EigeneVar</em> deaktiviert außerdem das Zwischenspeichern von Binärzahlen in dieser Variable, wodurch die Performance verringert wird, wenn sie jemals für Berechnungen oder numerische Vergleiche gebraucht wird. Das Zwischenspeichern einer Variable wird wieder aktiviert, sobald sich ihre Adresse ändert (z. B. durch <a href="commands/VarSetCapacity.htm">VarSetCapacity()</a>).</p>
      <p><strong>Dereferenzierung (*)</strong>: Bei <em>*Ausdruck</em> wird angenommen, dass der <em>Ausdruck</em> in eine numerische Speicheradresse aufgelöst wird; dabei wird das Byte auf dieser Adresse als eine Zahl zwischen 0 und 255 ermittelt (0 wird immer abgerufen, sobald die Adresse 0 ist; jede andere ungültige Adresse sollte vermieden werden, weil ansonsten das Script abstürzen kann). Allerdings ist <a href="Functions.htm#NumGet">NumGet()</a> beim Abrufen von binären Zahlen besser geeignet.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>*<br> /<br> //</strong></td>
    <td><p><strong>Multiplizieren (*)</strong>: Das Ergebnis ist ein Integer, wenn beide Eingaben Integer sind, ansonsten ist es eine Fließkommazahl.</p>
      <p><a name="divide"></a><strong>Echtes Dividieren (/)</strong>: Im Gegensatz zu <a href="commands/EnvDiv.htm">EnvDiv</a> ergibt die echte Division eine Fließkommazahl, selbst wenn beide Eingaben Integer sind. Zum Beispiel ergibt 3/2 eine 1.5 anstelle von 1, und 4/2 ergibt 2.0 anstelle von 2.</p>
      <p><strong><a name="FloorDivide"></a>Floor-Dividieren (//)</strong>: Der Doppel-Schrägstrich-Operator verwendet Integer-Division für eine hohe Performance, wenn die zwei Eingaben Integer sind. Zum Beispiel ergibt 5//3 eine 1 und 5//-3 eine -1. Wenn eine der beiden Eingaben eine Fließkommazahl ist, dann erfolgt eine Fließkomma-Division, außerdem wird das Ergebnis auf den nächsten linken Integer gekürzt. Zum Beispiel ergibt 5//30 eine 10 und 50//-3 eine -20. Auch wenn das Ergebnis dieser Fließkomma-Division ein Integer ist, enthält es eine Fließkommazahl, die als solches angesehen wird, sobald es anderweitig verwendet wird. Für Modulo, siehe <a href="Functions.htm#Mod">mod()</a>.</p>
    <p> Die Operatoren <a href="commands/EnvMult.htm">*=</a> und <a href="commands/EnvDiv.htm">/=</a> Operatoren sind Abkürzungen für das Multiplizieren oder Dividieren des Werts in einer Variable mit einem anderen Wert. Zum Beispiel erzeugt <em>Var*=2</em> das gleiche Ergebnis wie <em>Var:=Var*2</em> (obwohl das Vorherige bessere Performance erzielt).</p>
    <p>Division durch 0 ergibt ein leeres Ergebnis (leerer String).</p></td>
  </tr>
  <tr>
    <td align="center"><strong>+<br> - </strong></td>
    <td><p><strong>Addieren (+)</strong> und <strong>Subtrahieren (-)</strong>. Außerdem sind die Operatoren <strong><a href="commands/EnvAdd.htm">+=</a></strong> und <strong><a href="commands/EnvSub.htm">-=</a></strong> Abkürzungen für das Erhöhen oder Verringern einer Variable. Zum Beispiel erzeugt <em>Var+=2</em> das gleiche Ergebnis wie <em>Var:=Var+2</em> (obwohl das Vorherige bessere Performance erzielt). Ebenso kann der Wert einer Variable um 1 erhöht oder verringert werden, wenn <a href="#IncDec"><a href="#IncDec">Var++, Var--, ++Var oder --Var</a></a> verwendet wird.</p>
    </td>
  </tr>
  <tr id="bitwise">
    <td align="center"><strong><<<br> >> </strong></td>
    <td><strong>Bitweise Verschiebung nach links (<<)</strong> und <strong>nach rechts (>>)</strong>. Anwendungsbeispiel: <em>Wert1 << Wert2</em>. Jede Fließkommazahl wird vor der Berechnung auf einen Integer gekürzt. Bitweise Verschiebung nach links (<strong><<</strong>) ist gleichbedeutend mit dem Multiplizieren von <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>". Bitweise Verschiebung nach rechts (<strong>>></strong>) ist gleichbedeutend mit dem Dividieren von <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" und Abrunden des Ergebnisses auf den nächsten Integer; zum Beispiel ergibt -3>>1 eine -2.</td>
  </tr>
  <tr>
    <td align="center"><strong>&<br> ^<br> |</strong></td>
    <td><strong>Bitweises UND (&)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von den oben genannten drei Zeichen hat <strong>&</strong> die höchste und <strong>|</strong> die niedrigste Priorität. Jede Fließkommazahl wird vor der Berechnung auf einen Integer gekürzt.</td>
  </tr>
  <tr id="concat">
    <td align="center"><strong>.</strong></td>
    <td><p><strong>Verkettung</strong>. Mit dem Punkt-Operator können zwei Elemente zu einem String kombiniert werden (es muss mindestens ein Leerzeichen auf jeder Seite des Punkts vorhanden sein). Der Punkt kann auch weggelassen werden, um dasselbe Ergebnis zu erzielen (außer bei Zweideutigkeiten wie <em>x <strong>-</strong>y</em>, oder wenn das rechte Element führende ++ oder -- hat). Sobald der Punkt weggelassen wird, sollte mindestens ein Leerzeichen zwischen den Elementen vorhanden sein.<br> Beispiel (Ausdrucksmethode): Var := "Die Farbe ist " <strong>.</strong> Fundfarbe<br> Beispiel (traditionelle Methode): &nbsp;Var = Die Farbe ist %Fundfarbe%</p>
        <p> Teilausdrücke können auch verkettet werden. Zum Beispiel: <em>Var := "Der Nettopreis ist " <strong>.</strong>  Preis * (1 - Rabatt/100)</em></p>
        <p>Eine Zeile, die mit einem Punkt (oder mit jedem anderen Operator) beginnt, wird automatisch an die darüberliegende Zeile <a href="Scripts.htm#continuation">angehängt</a>.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>>&nbsp;&nbsp;&nbsp;<<br> >= <=</strong></td>
    <td><strong>Größer (>)</strong>, <strong>kleiner (<)</strong>, <strong>größer gleich (>=)</strong> und <strong>kleiner gleich (<=)</strong>. Wenn eine der beiden Eingaben keine Zahl ist, dann werden beide in alphabetischer Reihenfolge verglichen (in diesem Fall wird ein direkter String in Anführungszeichen wie "55" immer als nicht-numerisch angesehen). Der Vergleich ist erst von der Groß- bzw. Kleinschreibung abhängig, wenn <a href="commands/StringCaseSense.htm">StringCaseSense</a> aktiv ist. Siehe auch: <a href="commands/Sort.htm">Sort</a></td>
  </tr>
  <tr id="equal">
    <td align="center"><strong>=<br> ==<br> <> != </strong></td>
    <td><strong>Gleich (=) </strong>, <strong>zeichengenau gleich (==) </strong> und <strong>ungleich (<></strong> oder <strong>!=)</strong>. Die Operatoren <strong>!=</strong> und <strong><></strong> sind funktionsgemäß identisch. Der Operator <strong>==</strong> verhält sich identisch zu <strong>=</strong>, es sei denn, eine der beiden Eingaben ist keine Zahl, in diesem Fall ist <strong>==</strong> immer von der Groß- und Kleinschreibung abhängig und <strong>=</strong> immer nicht von der Groß- und Kleinschreibung abhängig (abhängig von <a href="commands/StringCaseSense.htm">StringCaseSense</a>). Im Gegensatz dazu beachten <strong><></strong> und <strong>!=</strong> den Befehl <a href="commands/StringCaseSense.htm">StringCaseSense</a>. Hinweis: In diesem Fall wird ein direkter String in Anführungszeichen wie "55" immer als nicht-numerisch angesehen.</td>
  </tr>
  <tr>
    <td align="center"><strong>NOT</strong></td>
    <td><strong>Logisches NICHT</strong>. Das Gleiche wie der <strong>!</strong>-Operator, nur mit geringerer Priorität. Zum Beispiel ist <em>not (x = 3 or y = 3)</em> das Gleiche wie <em> <strong>!</strong>(x = 3 or y = 3)</em></td>
  </tr>
  <tr>
    <td align="center"><strong>AND<br> && </strong></td>
    <td>Beide sind ein <strong>logisches UND</strong>. Zum Beispiel: <em>x > 3 and x < 10</em>. Zur Verbesserung der Performance wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewandt. Außerdem wird eine Zeile, die mit AND/OR/&&/|| (oder mit jedem anderen Operator) beginnt, automatisch an die darüberliegende Zeile <a href="Scripts.htm#continuation">angehängt</a>.</td>
  </tr>
  <tr>
    <td align="center"><strong>OR<br> || </strong></td>
    <td>Beide sind ein <strong>logisches ODER</strong>. Zum Beispiel: <em>x <= 3 or x >= 10</em>.  Zur Verbesserung der Performance wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewandt.</td>
  </tr>
  <tr id="ternary">
    <td align="center"><strong>?:<br></strong></td>
    <td><strong>Ternärer Operator</strong> <span class="ver">[v1.0.46+].</span> Dieser Operator ist die Kurzfassung einer <a href="commands/IfExpression.htm">If-Else-Anweisung</a>. Es wird die Bedingung auf der linken Seite ausgewertet, um festzustellen, welche der beiden Verzweigungen das Endergebnis ist. Zum Beispiel wird mit <strong><em>Variable := x>y ? 2 : 3</em></strong> eine 2 in die <em>Variable</em> gespeichert, wenn x größer als y ist; ansonsten wird eine 3 gespeichert. Zur Verbesserung der Performance wird nur die gewinnende Verzweigung ausgewertet (siehe <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a>). <strong>Hinweis</strong>: Aus Gründen der Kompatibilität muss das Fragezeichen mindestens ein Leerzeichen auf jeder Seite haben (das kann in einer zukünftigen Version behoben werden).</td>
  </tr>
  <tr id="AssignOp">
    <td align="center"><strong>:=<br> +=<br> -=<br> *=<br> /=<br> //=<br> .=<br> |=<br> &=<br> ^=<br> >>=<br> <<=<br></strong>
    </td>
    <td><p><strong>Zuweisung</strong>. Führt eine Operation auf den Inhalt einer Variable aus und speichert das Ergebnis wieder in dieselbe Variable (aber in den Versionen vor 1.0.46 konnten diese nur als Operator ganz links auf der Zeile verwendet werden, außerdem wurden nur die ersten fünf Operatoren unterstützt). Der einfachste Zuweisungsoperator ist <a href="commands/SetExpression.htm">Doppelpunkt-Gleich (:=)</a>, der das Ergebnis eines Ausdrucks in eine Variable speichert. Für die Beschreibung anderer Operatoren, siehe weiter unten. Zum Beispiel führt <em>Variable //= 2</em> eine <a href="#FloorDivide">Floor-Division</a> aus, um die <em>Variable</em> mit 2 zu teilen, danach wird das Ergebnis wieder in die <em>Variable</em> gespeichert. Ebenso ist <em>Variable <strong>.=</strong> "abc"</em> gleichwertig mit <em>Variable := Variable <strong>.</strong> "abc"</em>.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Folglich wird mit einer Zeile wie <em>Variable1 := Variable2 := 0</em> zuerst der <em>Variable2</em> eine 0 zugewiesen und danach der <em>Variable1</em> die <em>Variable2</em> zugewiesen.</p>
    <p>Sobald eine Zuweisung als Eingabe für einen anderen Operator verwendet wird, ist der Wert die Variable selbst. Zum Beispiel ist der Ausdruck <em>(Variable+=2) > 50</em> wahr, wenn der gerade erhöhte Wert in der <em>Variable</em> größer als 50 ist. Dadurch kann eine Zuweisung mittels <a href="Functions.htm#ByRef">ByRef</a> übergeben oder ihre <a href="#amp">Adresse</a> übernommen werden; zum Beispiel: <em>&(x:="abc")</em>.</p>
    <p>Die Priorität des Zuweisungsoperators wird automatisch erhöht, um ein Syntaxfehler zu unterdrücken oder intuitiveres Verhalten bereitzustellen. Zum Beispiel: <em>not x:=y</em> wird wie <em>not (x:=y)</em> ausgewertet. Ebenso wird <em>++Var := X</em> wie <em>++(Var := X)</em> ausgewertet; und <em> Z>0 ? X:=2 : Y:=2</em> wie <em>Z>0 ? (X:=2) : (Y:=2) ausgewertet.</em></p>
    <p>Bekannte Einschränkungen, verursacht durch die Abwärtskompatibilität (diese können in einer zukünftigen Version behoben werden): 1) Sobald "<strong>/=</strong>" der Operator ganz links in einem Ausdruck ist und nicht zu einem <a href="#comma">Ausdruck mit mehreren Anweisungen</a> gehört, dann erfolgt die <a href="#FloorDivide">Floor-Division</a>, es sei denn, eine der Eingaben ist eine Fließkommazahl (ansonsten wird bei "<strong>/=</strong>" die <a href="#divide">echte Division</a> durchgeführt); 2) <a href="commands/EnvAdd.htm">Datum/Zeit-Berechnung</a> wird nur von "<strong>+=</strong>" und "<strong>-=</strong>" unterstützt, wenn dieser Operator ganz links auf der Zeile ist; 3) Die Operatoren "<strong>+=</strong>", "<strong>-=</strong>" und "*=" behandeln leere Variablen als 0, aber nur solange sie alleine auf einer Zeile stehen; zum Beispiel erzeugen sowohl "<em>y:=1, x+=1</em>" als auch "<em>MsgBox % x-=3</em>" ein leeres Ergebnis, sobald x leer ist.</p></td>
  </tr>
  <tr id="comma">
    <td align="center"><strong>,</strong></td>
    <td><p><strong>Komma (mehrere Anweisungen)</strong> <span class="ver">[v1.0.46+]</span>. Kommas können verwendet werden, um mehrere Teilausdrücke auf einer Zeile zu schreiben. Das wird häufig dazu verwendet, mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren.  Zum Beispiel: <em>x:=1<strong>,</strong> y+=2<strong>,</strong> ++index, func()</em>. Solche Anweisungen werden von links nach rechts ausgeführt. Hinweis: Eine Zeile, die mit einem Komma (oder mit jedem anderen Operator) beginnt, wird automatisch an die darüberliegende Zeile <a href="Scripts.htm#continuation">angehängt</a>. Siehe auch: <a href="#CommaPerf">Komma-Performance</a>.</p>
      <p>Seit v1.0.46.01 wird das Gleichheitszeichen als <a href="commands/SetExpression.htm">Zuweisung (:=)</a> behandelt, sobald unmittelbar nach einem Komma eine Variable und ein Gleichheitszeichen erfolgen. Die folgende Beispiele sind Zuweisungen: <em>x:=1, y=2, a=b=c</em></p></td>
  </tr>
  <tr>
    <td align="center"><p><strong>mod()<br> round()<br> abs()</strong></p>      </td>
    <td>Das sind interne mathematische Funktionen, die <a href="Functions.htm#Math">hier</a> beschrieben werden.</td>
  </tr>
  <tr>
    <td align="center"><strong>func.()</strong></td>
    <td><p><span class="ver">[AHK_L 48+]:</span> Versucht, eine Methode des Objekts <i>func</i> ohne Namen aufzurufen. Vereinbarungsgemäß ist das die Standard-Methode des Objekts. Wenn <i>func</i> kein Objekt enthält, dann wird stattdessen das <a href="Objects.htm#Default_Base_Object">Standard-Basis-Objekt</a> aufgerufen.</p>
    <p><span class="ver">[v1.0.95+]:</span> Wenn <i>func</i> ein Funktionsname enthält, dann wird die genannte Funktion aufgerufen.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>F(<i>p</i>*)</strong></td>
    <td><span class="ver">[AHK_L 60+]:</span> Siehe <a href="Functions.htm#Variadic">Variadische Funktionen</a>.</td>
  </tr>
  <tr>
    <td align="center"><strong>x[y]</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> <strong>Auf ein Objekt zugreifen</strong>. Abrufen oder Setzen eines Werts, oder Aufrufen einer Methode von Objekt <i>x</i>, wobei <i>y</i> eine Parameterliste oder ein berechneter Methodenname ist. Siehe <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntax</a> und <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>.</td>
  </tr>
</table>
<p><strong><br> Performance</strong>: <a name="CommaPerf" id="CommaPerf"></a>Seit v1.0.48  ist der Komma-Operator in der Regel schneller als das Schreiben von getrennten Ausdrücken, besonders beim Zuweisen einer Variable in eine andere (z. B. x:=y, a:=b). Die Performance wird weiter verbessert, wenn mehr und mehr Ausdrücke in einem einzigen Ausdruck kombiniert werden; zum Beispiel kann ein Geschwindigkeitszuwachs von 35 % erreicht werden, wenn fünf oder zehn einfache Ausdrücke in einem Ausdruck kombiniert werden.</p>

<h2 id="BuiltIn">Interne Variablen</h2>
<p>Die folgenden Variablen sind im Programm integriert und können von jedem Script abgerufen werden. Mit Ausnahme von <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a> und <a href="#CommandLine">Befehlszeilenparametern</a> sind diese Variablen schreibgeschützt; das heißt, dass deren Inhalt nicht direkt vom Script geändert werden kann.</p>
<h3>Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Script-Eigenschaften: <a href="#CommandLine">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Script-Einstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#BatchLines">A_BatchLines</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...mehr...)</a> </li>
  <li>Abwesenheit des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a></li>
  <li>GUI-Fenster und Menüleisten: <a href="#Gui">A_Gui</a>, <a href="#GuiControl">A_GuiControl</a>, <a href="#GuiEvent">A_GuiEvent</a>, <a href="#EventInfo">A_EventInfo</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#ThisMenuItem">A_ThisMenuItem</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Cursor">A_Cursor</a>, <a href="#Caret">A_CaretX</a>, <a href="#Caret">A_CaretY</a>, <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3>Sonderzeichen</h3>
<table class="info">
  <tr id="Space">
    <td>A_Space</td>
    <td>Diese Variable enthält ein einzelnes Leerzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> für weitere Details.</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>Diese Variable enthält ein einzelnes Tabulatorzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="prop">Script-Eigenschaften</h3>
<table class="info">
  <tr id="CommandLine">
    <td>1, 2, 3, etc. </td>
    <td>Diese Variablen werden automatisch erstellt, sobald ein Script mit Befehlszeilenparametern gestartet wird. Sie können wie normale Variablennamen geändert oder abgerufen werden (zum Beispiel: %1%). Darüber hinaus enthält %0% die Anzahl an übergebenen Parametern (0 wenn keine). Weitere Informationen können bei <a href="Scripts.htm#cmd">Befehlszeilenparameter</a> gefunden werden.</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td>Das aktuelle Arbeitsverzeichnis des Scripts, wo auf Dateien standardmäßig zugegriffen wird. Der letzte Backslash ist nur enthalten, wenn es ein Hauptverzeichnis ist. Zwei Beispiele: C:\ and C:\Eigene Dokumente. Verwendet <a href="commands/SetWorkingDir.htm">SetWorkingDir</a>, um das Arbeitsverzeichnis zu ändern.</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>Der vollständige Pfad des Verzeichnisses, wo sich das aktuelle Script befindet. Aus Gründen der Abwärtskompatibilität mit AutoIt-v2 ist der letzte Backslash <strong>nur bei .aut-Scripts enthalten</strong> (selbst für Hauptverzeichnisse). Zum Beispiel bei <strong>.aut</strong>-Scripts: C:\Eigene Dokumente\.</td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td>Der Dateiname des aktuellen Scripts, ohne Pfad, z. B. EigenesScript.ahk.</td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>Die Kombination der beiden oben genannten Variablen, um die komplette Dateispezifikation des Scripts zu erhalten, z. B. C:\Eigene Dokumente\EigenesScript.ahk.</td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd<br><span class="ver">[v1.1.01+]</span></td>
    <td>Die eindeutige ID (HWND/Handle) des versteckten Script-Hauptfensters.</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>Die Nummer der aktuell ausgeführten Zeile im Script (oder einer <a href="commands/_Include.htm">#Include-Datei</a>). Diese Zeilennummer entspricht der Zeilennummer in <a href="commands/ListLines.htm">ListLines</a>; sie kann wie in diesem Beispiel nützlich für Fehlermeldungen sein: MsgBox Konnte nicht in die Log-Datei schreiben (Zeilennummer %A_LineNumber%).</p>
    <p>  Da ein <a href="Scripts.htm#ahk2exe">kompiliertes Script</a> alle <a href="commands/_Include.htm">#Include-Dateien</a> zu einem großen Script zusammenführt, unterscheidet sich die Zeilennummerierung möglicherweise vom unkompilierten Modus.</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>Der vollständige Pfad und Name der Datei in Bezug auf <a href="#LineNumber">A_LineNumber</a>, die das Gleiche wie <a href="#ScriptFullPath">A_ScriptFullPath</a> enthält, es sei denn, die Zeile gehört einer <a href="commands/_Include.htm">#Include-Datei</a> eines unkompilierten Scripts.</td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc<br> <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgeführt wird (ansonsten leer); zum Beispiel: EigeneFunktion. Siehe auch: <a href="Functions.htm#IsFunc">IsFunc()</a> </td>
  </tr>
  <tr id="ThisLabel">
    <td>A_ThisLabel<br> <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name des Labels (Subroutine), das gerade ausgeführt wird (ansonsten leer); zum Beispiel: EigenesLabel. Diese Variable wird aktualisiert, sobald das Script <a href="commands/Gosub.htm">Gosub</a>/<a href="commands/Return.htm">Return</a> oder <a href="commands/Goto.htm">Goto</a> ausführt. Sie wird auch bei automatisch aufgerufene Labels wie <a href="commands/SetTimer.htm">Timers</a>, <a href="commands/Gui.htm#DefaultWin">GUI-Threads</a>, <a href="commands/Menu.htm">Menüpunkte</a>, <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="misc/Clipboard.htm#OnClipboardChange">OnClipboardChange</a> und <a href="commands/OnExit.htm">OnExit</a> aktualisiert; allerdings wird A_ThisLabel nicht aktualisiert, wenn die Ausführung in so einem Label "hineinfällt"; sobald das passiert, erhält A_ThisLabel den vorherigen Wert. Siehe auch: <a href="#ThisHotkey">A_ThisHotkey</a> und <a href="Functions.htm#IsLabel">IsLabel()</a> </td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>Bei Versionen vor 1.0.22 ist diese Variable leer. Ansonsten enthält sie die Version von AutoHotkey, die das Script ausführt, wie z. B. 1.0.22. Im Falle eines <a href="Scripts.htm#ahk2exe">kompilierten Scripts</a> wird die ursprünglich verwendete Version gemeldet, womit es kompiliert wurde. Durch das Format der Versionsnummer kann ein Script mit ">" oder ">=" prüfen, ob A_AhkVersion größer als eine minimale Versionsnummer wie im diesen Beispiel ist: if A_AhkVersion >= 1.0.25.07</td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td><p>Für unkompilierte Scripts: Der vollständige Pfad und Name der EXE-Datei, die das aktuelle Script gerade ausführt. Zum Beispiel: C:\Programme\AutoHotkey\AutoHotkey.exe</p>
    <p>Für <a href="Scripts.htm#ahk2exe">kompilierte Scripts</a>: Das gleiche wie oben, nur dass das AutoHotkey-Verzeichnis mithilfe des Registrierungseintrags <em>HKEY_LOCAL_MACHINE\SOFTWARE\AutoHotkey\InstallDir</em> ermittelt wird. Wenn kein Eintrag gefunden wird, dann ist A_AhkPath leer.</p></td>
  </tr>
  <tr>
  <tr id="IsUnicode">
    <td>A_IsUnicode</td>
    <td>In Unicode-Versionen enthält diese Variable eine 1 (wahr). In ANSI-Versionen ist sie unbestimmt, daher falsch.</td>
  </tr>
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td>Enthält eine 1, wenn das Script als eine <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgeführt wird, ansonsten nichts.</td>
  </tr>
  <tr id="ExitReason">
    <td>A_ExitReason</td>
    <td>Der aktuellste Grund, wodurch das Script beendet wurde. Die Variable ist leer, es sei denn, das Script hat eine <a href="commands/OnExit.htm">OnExit</a>-Subroutine, die zurzeit ausgeführt wird oder mindestens einmal durch einen Exit-Versuch aufgerufen wurde. Siehe <a href="commands/OnExit.htm">OnExit</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>Aktuelles 4-stelliges Jahr (z. B. 2004). Gleichbedeutend mit A_Year. Hinweis: Um eine formatierte Zeit oder ein formatiertes Datum in Abhängigkeit des Gebietsschemas oder der Sprache abzurufen, verwendet "<a href="commands/FormatTime.htm">FormatTime</a>, Ausgabevariable" (Zeit und langes Datum) oder "<a href="commands/FormatTime.htm">FormatTime</a>, Ausgabevariable,, LongDate" (ermittelt ein Datum im langen Format).</td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>Aktueller zweistelliger Monat (01-12). Gleichbedeutend mit A_Mon.</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>Aktueller zweistelliger Tag des Monats (01-31). Gleichbedeutend mit A_MDay.</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>Aktueller vollständiger Monatsname in der aktuellen Sprache des Benutzers, z. B. Juli</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>Aktueller abgekürzter Monatsname in der aktuellen Sprache des Benutzers, z. B. Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>Aktueller vollständiger Wochentagsname in der aktuellen Sprache des Benutzers, z. B. Sonntag</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>Aktueller abgekürzter Wochentagsname in der aktuellen Sprache des Benutzers, z. B. So</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>Aktueller einstelliger Wochentag (1-7). 1 ist Sonntag in allen Gebietsschemen.</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>Aktueller Tag des Jahres (1-366). Der Wert wird nicht mit Nullen aufgefüllt, z. B. wird 9 abgerufen, nicht 009. Ein Wert kann wie folgt mit Nullen aufgefüllt werden: <a href="commands/FormatTime.htm">FormatTime</a>, Ausgabevariable, , YDay0 </td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>Aktuelles Jahr und Wochennummer (z. B. 200453) nach ISO 8601. Um das Jahr von der Woche zu trennen, verwendet <em><a href="commands/StringLeft.htm">StringLeft</a>, Jahr, A_YWeek, 4</em> und <em><a href="commands/StringLeft.htm">StringRight</a>, Woche, A_YWeek, 2</em>. Genaue Definition von A_YWeek: Wenn die Woche den 1. Januar, sowie vier oder mehr Tage des neuen Jahres hat, dann wird sie als Woche 1 betrachtet. Ansonsten ist sie die letzte Woche des vorherigen Jahres und die nachfolgende Woche die Woche 1.</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>Aktuelle zweistellige Stunde (00-23) im 24-Stunden-Format. Um die Stunde im 12-Stunden-Format sowie die Indikatoren AM bzw. PM abzurufen, befolgt dieses Beispiel: <a href="commands/FormatTime.htm">FormatTime</a>, Ausgabevariable, , h:mm:ss tt </td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>Aktuelle zweistellige Minute (00-59).</p>    </td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>Aktuelle zweistellige Sekunde (00-59).</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>Aktuelle dreistellige Millisekunde (000-999). Um die führenden Nullen zu entfernen, befolgt dieses Beispiel: Millisekunden := A_MSec + 0</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>Die aktuelle Ortszeit im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. Hinweis: Datum- und Zeitberechnung kann mithilfe von <a href="commands/EnvAdd.htm">EnvAdd</a> und <a href="commands/EnvSub.htm">EnvSub</a> durchgeführt werden. Außerdem kann <a href="commands/FormatTime.htm">FormatTime</a> das Datum und/oder Zeit in Bezug auf das aktuelle Gebietsschema oder den aktuellen Einstellungen formatieren.</td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td>Die koordinierte Weltzeit (UTC) im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grundsätzlich das Gleiche wie


 Greenwich Mean Time

(GMT).</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>Ruft die Anzahl der Millisekunden ab, die seit dem Systemstart verstrichen sind. Wenn A_TickCount in eine Variable gespeichert wird, dann kann die verstrichene Zeit später gemessen werden, indem die Variable vom neuesten A_TickCount-Wert abgezogen wird. Zum Beispiel:</p>
        <pre>Startzeit := A_TickCount
Sleep, 1000
Ablaufzeit := A_TickCount - Startzeit
MsgBox,  %Ablaufzeit% Millisekunden sind verstrichen.</pre>
<p>Falls eine höhere Genauigkeit als 10 ms von A_TickCount benötigt wird, verwendet <a href="commands/DllCall.htm#QPC">QueryPerformanceCounter()</a>.</p>
</td>
  </tr>
</table>
<h3 id="settings">Script-Einstellungen</h3>
<table class="info">
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Enthält 1, wenn das Script <a href="commands/Suspend.htm">unterbrochen</a> ist, andernfalls 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused<br> <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält 1, wenn der <a href="misc/Threads.htm">Thread</a> unmittelbar unterhalb des aktuellen Threads <a href="commands/Pause.htm">pausiert</a> ist. Ansonsten enthält die Variable eine 0.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical<br> <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält 0, wenn <a href="commands/Critical.htm">Critical</a> für den <a href="misc/Threads.htm">aktuellen Thread</a> deaktiviert ist. Ansonsten enthält sie ein Integer größer als 0, nämlich die <a href="commands/Critical.htm#Interval">Nachrichtenüberprüfungsfrequenz</a> von Critical. Da "Critical 0" den kritischen Status entfernt, kann der aktuelle Status von Critical mithilfe von <em>Alt_IsCritical := A_IsCritical</em> gespeichert und später mit <em>Critical% Alt_IsCritical%</em> wiederhergestellt werden.</td>
  </tr>
  <tr id="BatchLines">
    <td>A_BatchLines</td>
    <td>(gleichbedeutend mit A_NumBatchLines) Der aktuell gesetzte Wert von <a href="commands/SetBatchLines.htm">SetBatchLines</a>. Beispiele: 200 oder 10ms (je nach Format).</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td>Der aktuell gesetzte Modus von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>: 1, 2, 3 oder RegEx.</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td>Die aktuell gesetzte Übereinstimmungsgeschwindigkeit (schnell oder langsam) von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>.</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>.</td>
  </tr>
  <tr id="AutoTrim">
    <td>A_AutoTrim</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/AutoTrim.htm">AutoTrim</a>. </td>
  </tr>
  <tr id="StringCaseSense">
    <td>A_StringCaseSense</td>
    <td>Der aktuell gesetzte Modus (On, Off oder Locale) von <a href="commands/StringCaseSense.htm">StringCaseSense</a>. </td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td><span class="ver">[AHK_L 46+]</span> Enthält die Standardkodierung für verschiedene Befehle; siehe <a href="commands/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr id="FormatInteger">
    <td>A_FormatInteger</td>
    <td>Das aktuell gesetzte Integer-Format (H oder D) von <a href="commands/SetFormat.htm">SetFormat</a>. <span class="ver">[AHK_L 42+]:</span> Kann auch ein kleingeschriebenes h enthalten.</td>
  </tr>
  <tr id="FormatFloat">
    <td>A_FormatFloat</td>
    <td>Das aktuell gesetzte Fließkommazahlenformat von <a href="commands/SetFormat.htm">SetFormat</a>. </td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> (immer dezimal, nicht hexadezimal). Diese Verzögerung gilt für den traditionellen SendEvent-Modus, nicht für <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>.</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetWinDelay.htm">SetWinDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetControlDelay.htm">SetControlDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetMouseDelay.htm">SetMouseDelay</a> (immer dezimal, nicht hexadezimal). Diese Verzögerung gilt für den traditionellen SendEvent-Modus, nicht für <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>.</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td>Die aktuell gesetzte Geschwindigkeit von <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td>Enthält eine 1, wenn das Tray-Icon zurzeit versteckt ist, andernfalls 0. Das Icon kann mithilfe von <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> oder des <a href="commands/Menu.htm">Menu</a>-Befehls versteckt werden.</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td>Leer, es sei denn, ein benutzerdefinierter ToolTip wurde für das Tray-Icon mithilfe von <em><em><a href="commands/Menu.htm"><em>Menu</em></a>, Tray, Tip</em></em> angegeben, in diesem Fall enthält die Variable den Text des ToolTips. </td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td>Leer, es sei denn, ein Tray-Icon wurde mithilfe von <a href="commands/Menu.htm"><em>Menu</em></a><em>, tray, icon</em> angegeben, in diesem Fall enthält die Variable den vollständigen Pfad und Name der Icon-Datei. <strong>Bekannte Einschränkung:</strong> Dieser Pfad kann falsch sein, falls das Script ursprünglich einen relativen Pfad zu einer DLL-Systemdatei übergab; zum Beispiel <em>Menu, Tray, Icon, user32.dll, 2</em>.</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>Leer, wenn A_IconFile leer ist. Ansonsten enthält sie die Nummer des Icons in A_IconFile (typischerweise 1).</td>
  </tr>
</table>
<h3>Abwesenheit des Benutzers </h3>
<table class="info">
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit der letzten Tastatur-, Maus- oder sonstige Eingabe verstrichen sind. Dadurch kann festgestellt werden, ob der Benutzer abwesend ist. Diese Variable ist leer, es sei denn, das Betriebssystem ist Windows 2000, XP oder höher. Physische Benutzereingaben sowie künstlich erzeugte Eingaben von <strong>beliebigen</strong> Programmen oder Scripts (z. B. der <a href="commands/Send.htm">Send</a>- oder <a href="commands/MouseMove.htm">MouseMove</a>-Befehl) setzen diesen Wert wieder auf 0. Da dieser Wert in Zehnerschritten erhöht wird, sollte nicht überprüft werden, ob der Wert einem anderen Wert entspricht. Überprüft stattdessen, ob der Wert größer oder kleiner als ein anderer Wert ist. Zum Beispiel: IfGreater, A_TimeIdle, 600000, MsgBox, Die letzte Tastatur- oder Mausaktivität erfolgte vor ca. 10 Minuten. </td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td><p>Ähnlich wie oben, es werden jedoch künstliche Tastatureingaben und/oder Mausklicks ignoriert, sobald der entsprechende Hook (<a href="commands/_InstallKeybdHook.htm">Tastatur</a> oder <a href="commands/_InstallMouseHook.htm">Maus</a>) installiert wird; das heißt, dass die Variable nur auf physische Ereignisse reagiert. Dadurch wird verhindert, dass simulierte Tastatureingaben und Mausklicks fälschlicherweise die Anwesenheit des Benutzers anzeigen. Falls kein Hook installiert ist, dann ist diese Variable gleichbedeutend mit A_TimeIdle. Wenn nur ein Hook installiert ist, dann beeinflusst nur diese Art von physischer Eingabe die interne Variable A_TimeIdlePhysical (die Eingabe von einem anderen/nicht installierten Hook, sowohl physische als auch künstliche, hat kein Effekt).</p>    </td>
  </tr>
</table>
<h3>GUI-Fenster und Menüleisten</h3>
<table class="info">
  <tr id="Gui">
    <td>A_Gui</td>
    <td>Die <a href="commands/Gui.htm">GUI</a>-Fensternummer, welche den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Diese Variable ist leer, es sei denn, ein GUI-Steuerelement, ein Menüleistenpunkt oder ein Ereignis wie GuiClose/GuiEscape hat den aktuellen Thread gestartet.</td>
  </tr>
  <tr id="GuiControl">
    <td>A_GuiControl</td>
    <td>Der zugewiesene Variablenname des GUI-Steuerelements, welcher den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Fehlt dem Steuerelement eine <a href="commands/Gui.htm#Events">zugewiesene Variable</a>, dann enthält A_GuiControl stattdessen die ersten 63 Zeichen des Textes/der Bezeichnung (wird häufiger benutzt, damit nicht jeder Schaltfläche ein Variablennamen zugewiesen werden muss). A_GuiControl ist leer, sobald: 1) A_Gui leer ist; 2) ein GUI-Menüleistenpunkt oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat; 3) dem Steuerelement eine zugewiesene Variable sowie eine Bezeichnung fehlt; oder 4) das Steuerelement nicht länger vorhanden ist, welches den aktuellen Thread ursprünglich gestartet hat (z. B. durch <a href="commands/Gui.htm#Destroy">Gui Destroy</a>).</td>
  </tr>
  <tr id="GuiWidth">
    <td>A_GuiWidth<br> A_GuiHeight</td>
    <td>Diese Variablen enthalten die Breite und Höhe des GUI-Fensters, wenn sie in einer <a href="commands/Gui.htm#GuiSize">GuiSize-Subroutine</a> verwendet werden. Sie beziehen sich auf den Client-Bereich des GUI-Fensters, ohne Titelleiste, Menüleiste und Rahmen.</td>
  </tr>
  <tr id="GuiX">
    <td><a name="GuiY" id="GuiY"></a>A_GuiX<br> A_GuiY</td>
    <td>Diese Variablen enthalten die X- und Y-Koordinaten für <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>- und <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>-Ereignisse. Die Koordinaten beziehen sich auf die linke obere Ecke des Fensters.</td>
  </tr>
  <tr>
    <td>A_GuiEvent<br><span class="small80">or A_GuiControlEvent</span></td>
    <td><p><a name="GuiControlEvent"></a><a name="GuiEvent"></a>Der Typ des Ereignisses, welches den <a href="misc/Threads.htm"><a href="misc/Threads.htm"><a href="misc/Threads.htm">aktuellen Thread</a></a></a> gestartet hat. Falls der Thread nicht mithilfe einer <a href="commands/Gui.htm">GUI-Aktion</a> gestartet wurde, dann ist diese Variable leer. Ansonsten enthält sie einen der folgenden Strings:</p>
      <p><strong>Normal</strong>: Das Ereignis wurde durch einen Linksklick oder durch Tastatureingaben ausgelöst (Pfeiltasten, Tabulatortaste, Leertaste, unterstrichene Tastenkombination und so weiter). Dieser Wert wird auch bei Menüleistenpunkte und Sonderereignisse wie GuiClose und GuiEscape verwendet.</p>
      <p><strong>DoubleClick</strong>: Das Ereignis wurde durch einen Doppelklick ausgelöst. Hinweis: Der erste Klick des Doppelklicks verursacht weiterhin das Ereignis "<em>Normal</em>", das zuerst empfangen wird. Mit anderen Worten wird die Subroutine zweimal ausgeführt: beim ersten und danach beim zweiten Klick.</p>
      <p><strong>RightClick</strong>: Gilt nur für <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/ListView.htm">ListViews</a> und <a href="commands/TreeView.htm">TreeViews</a>.</p>
      <p><strong>Kontextabhängige Werte: </strong>Für weitere Details, siehe <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#Slider">Slider</a>, <a href="commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="commands/ListView.htm">ListView</a> und <a href="commands/TreeView.htm">TreeView</a>.</p>
    </td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>Enthält zusätzliche Informationen über die folgenden Ereignisse:</p>
      <ul>
        <li>Das <a href="misc/Clipboard.htm#OnClipboardChange">OnClipboardChange</a>-Label</li>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
        <li><a href="commands/RegisterCallback.htm">RegisterCallback()</a></li>
        <li><a href="commands/Gui.htm#label">GUI-Ereignisse</a>, nämlich <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#ListBox">ListBox</a>, <a href="commands/ListView.htm">ListView</a>, <a href="commands/TreeView.htm">TreeView</a> und <a href="commands/GuiControls.htm#StatusBar">StatusBar</a>. Falls keine zusätzlichen Informationen über ein Ereignis vorhanden sind, dann enthält A_EventInfo eine 0.</li>
      </ul></td>
  </tr>
</table>
<p>Hinweis: Im Gegensatz zu Variablen wie A_ThisHotkey behält jeder <a href="misc/Threads.htm">Thread</a> seinen eigenen Wert für A_Gui, A_GuiControl, A_GuiX/Y, A_GuiEvent und A_EventInfo. Sobald deshalb ein Thread von einem anderen Thread unterbrochen und danach fortgesetzt wird, dann werden weiterhin die ursprünglichen/richtigen Werte für diese Variablen verwendet.</p>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte </h3>
<table class="info">
  <tr id="ThisMenuItem">
    <td>A_ThisMenuItem</td>
    <td>Der Name des zuletzt ausgewählten <a href="commands/Menu.htm">benutzerdefinierten Menüpunkts</a> (ansonsten leer).</td>
  </tr>
  <tr id="ThisMenu">
    <td>A_ThisMenu</td>
    <td>Enthält den Namen des Menüs, in dem A_ThisMenuItem ausgewählt wurde.</td>
  </tr>
  <tr id="ThisMenuItemPos">
    <td>A_ThisMenuItemPos</td>
    <td>Eine Nummer, die die <u>aktuelle</u> Position von A_ThisMenuItem in A_ThisMenu kennzeichnet. Für das erste Element die Nummer 1, für das zweite Element die Nummer 2, usw. Trennlinien werden mitgezählt. Diese Variable ist leer, sobald A_ThisMenuItem leer oder nicht länger in A_ThisMenu vorhanden ist. Sie ist auch leer, wenn A_ThisMenu selbst nicht mehr existiert.</td>
  </tr>
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>Der Tastenname des zuletzt ausgeführten <a href="Hotkeys.htm">Hotkeys</a> oder <a href="Hotstrings.htm">Hotstrings ohne Automatisches Ersetzen</a> (ansonsten leer), z. B. #z. Dieser Wert ändert sich, sobald der <a href="misc/Threads.htm">aktuelle Thread</a> durch einen anderen Hotkey unterbrochen wird, deshalb sollte sichergestellt werden, diesen Wert sofort in eine andere Variable zu kopieren, falls der Bedarf besteht, den ursprünglichen Wert später in einer Subroutine zu verwenden.</p>
      <p>Wenn ein Hotkey zuerst erstellt wird (entweder mit einem <a href="commands/Hotkey.htm">Hotkey-Befehl</a> oder einem <a href="Hotkeys.htm">Label mit zwei Doppelpunkten</a>), dann entsteht aus dem Tastennamen und der Reihenfolge der Modifikatoren ein permanenter Name des Hotkeys. Siehe auch: <a href="#ThisLabel">A_ThisLabel</a></p></td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>Das Gleiche wie oben, aber für den vorherigen Hotkey. Ansonsten ist sie leer. </td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td><span class="ver">[v1.1.01+]:</span> Der Name der letzten Taste, die vor dem Drücken oder Loslassen der aktuellsten Taste gedrückt wurde, oder ein leerer String, falls kein geeigneter Tastendruck im Tastenverlauf gefunden werden kann. Alle erzeugten Eingaben von AutoHotkey-Scripts werden ignoriert. Damit diese Variable verwendet werden kann, muss der <a href="commands/_InstallKeybdHook.htm">Tastatur</a>- oder <a href="commands/_InstallMouseHook.htm">Maus</a>-Hook installiert und der <a href="commands/KeyHistory.htm">Tastenverlauf</a> aktiviert sein.</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit dem Drücken von A_ThisHotkey verstrichen sind. Sie enthält eine -1, sobald A_ThisHotkey leer ist.</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit dem Drücken von A_PriorHotkey verstrichen sind.  Sie enthält eine -1, sobald A_PriorHotkey leer ist.</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>Das <a href="Hotstrings.htm#EndChars">Endzeichen</a>, welches vom Benutzer gedrückt wurde, um den aktuellsten <a href="Hotstrings.htm">Hotstring ohne Automatisches Ersetzen</a> auszulösen. Wenn kein Endzeichen benötigt wurde (wegen der *-Option), dann wird diese Variable leer gemacht.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen </h3>
<table class="info">
  <tr>
    <td>ComSpec<br> <span class="ver">[v1.0.43.08+]</span></td>
    <td><a name="ComSpec" id="ComSpec"></a>Enthält denselben String wie die ComSpec-Umgebungsvariable (z. B. C:\Windows\system32\cmd.exe). Diese Variable wird oft mit <a href="commands/Run.htm">Run/RunWait</a> verwendet. Hinweis: Das Präfix A_ ist bei dieser Variable nicht vorhanden.</td>
  </tr>
  <tr id="Temp">
    <td>A_Temp<br> <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfad und Name des Ordners, der temporäre Dateien enthält (z. B. C:\DOCUME~1\Benutzername\LOCALS~1\Temp). Der Pfad wird von einem der folgenden Orten abgerufen (in dieser Reihenfolge): 1) die <a href="#env">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) das Windows-Verzeichnis. <a href="#WorkingDir">A_WorkingDir</a> in Windows 9x, wenn weder TMP noch TEMP existiert.</td>
  </tr>
  <tr>
    <td>A_OSType</td>
    <td> <a name="OSType"></a>Der Typ des aktuell ausgeführten Betriebssystems.&nbsp; Entweder WIN32_WINDOWS (d. h. Windows 95/98/ME) oder WIN32_NT (d. h. Windows NT4/2000/XP/2003/Vista/7).</td>
  </tr>
  <tr>
    <td>A_OSVersion</td>
    <td> <p><a name="OSVersion"></a>Einer der folgenden Strings: WIN_7 <span class="ver">[benötigt AHK_L 42+]</span>, WIN_VISTA <span class="ver">[benötigt v1.0.44.13+]</span>, WIN_2003, WIN_XP, WIN_2000, WIN_NT4, WIN_95, WIN_98, WIN_ME. Zum Beispiel:</p>
      <pre>If A_OSVersion in WIN_NT4,WIN_95,WIN_98,WIN_ME  <em>; Hinweis: Keine Leerzeichen um Kommas.</em>
{
    MsgBox Dieser Script benötigt Windows 2000/XP oder höher.
    ExitApp
}</pre></td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td><span class="ver">[AHK_L 42+]:</span> Enthält die Größe eines Pointers in Bytes. Entweder 4 (32-Bit) oder 8 (64-Bit).</td>
  </tr>
  <tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>Die Standardsprache des Systems, die ein <a href="misc/Languages.htm">vierstelliger Code</a> ist.</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>Der Name des Computers, wie im Netzwerk angezeigt. </td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>Der Anmeldename des Benutzers, der dieses Script gestartet hat. </td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Das Windows-Verzeichnis. Zum Beispiel: C:\Windows</td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles<br> oder ProgramFiles</td>
    <td>Das Programmverzeichnis (z. B. C:\Programme). Seit v1.0.43.08 kann das Präfix A_ weggelassen werden, um den Wechsel auf <a href="commands/_NoEnv.htm">#NoEnv</a> zu erleichtern.</td>
  </tr>
  <tr id="AppData">
    <td>A_AppData<br> <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfad und Name des Ordners mit anwendungsspezifischen Daten des aktuellen Benutzers. Zum Beispiel: C:\Dokumente und Einstellungen\Benutzername\Anwendungsdaten</td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon<br> <span class="ver">[v1.0.43.09+]</span></td>
    <td>Der vollständige Pfad und Name des Ordners mit anwendungsspezifischen Daten aller Benutzer.</td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>Der vollständige Pfad und Name des Ordners mit den Desktop-Dateien des aktuellen Benutzers.</td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>Der vollständige Pfad und Name des Ordners mit den Desktop-Dateien aller Benutzer.</td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>Der vollständige Pfad und Name des Startmenüordners vom aktuellen Benutzer.</td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>Der vollständige Pfad und Name des Startmenüordners aller Benutzer.</td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>Der vollständige Pfad und Name des Programmordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>Der vollständige Pfad und Name des Programmordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>Der vollständige Pfad und Name des Autostart-Ordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>Der vollständige Pfad und Name des Autostart-Ordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>Der vollständige Pfad und Name von "Eigene Dokumente" des aktuellen Benutzers. In Gegensatz zu den anderen Variablen ist hier der letzte Backslash nicht vorhanden, falls der Ordner das Hauptverzeichnis ist. Zum Beispiel enthält sie in diesem Fall M: anstelle von M:\</td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Wenn der aktuelle Benutzer Administratorrechte hat, dann enthält diese Variable eine 1. Ansonsten enthält sie eine 0. In Windows 95/98/Me enthält diese Variable immer eine 1.</p>
    <p><a name="RequireAdmin" id="RequireAdmin"></a>In Windows Vista oder höher benötigen einige Scripts möglicherweise Administratorrechte, damit sie richtig funktionieren (z. B. ein Script, das mit Prozessen oder Fenster interagiert, die als Administrator ausgeführt werden). Fügt dafür das Folgende am Anfang des Scripts hinzu:</p>
    <pre>if not A_IsAdmin
{
   Run *RunAs "%A_ScriptFullPath%"  <em>; Benötigt v1.0.92.01+</em>
   ExitApp
}</pre></td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br> A_ScreenHeight</p>    </td>
    <td><p>Die Breite und Höhe des primären Monitors in Pixel (z. B. 1024 und 768).</p>
      <p>Um die Abmessungen von anderen Monitoren zu erfassen, verwendet <a href="commands/SysGet.htm">SysGet</a>.</p>
      <p>Um stattdessen die Breite und Höhe des gesamten Desktops zu ermitteln (auch wenn es sich über mehrere Monitore erstreckt), verwendet das folgende Beispiel (in Windows 95/NT jedoch werden beide folgende Variablen auf 0 gesetzt):<br> <a href="commands/SysGet.htm">SysGet</a>, VirtuelleBreite, 78<br> <a href="commands/SysGet.htm">SysGet</a>, VirtuelleHöhe, 79</p>
    <p>Darüber hinaus kann <a href="commands/SysGet.htm">SysGet</a> verwendet werden, um den Arbeitsbereich eines Monitors zu erfassen, der möglicherweise kleiner als die Gesamtfläche des Monitors ist, weil die Taskleiste und andere registrierte Desktop-Werkzeugleisten ausgeschlossen werden.</p></td>
  </tr>
  <tr id="IPAddress">
    <td>A_IPAddress1 bis 4 </td>
    <td>Die IP-Adressen der ersten 4 Netzwerkadaptern im Computer.</td>
  </tr>
</table>
<h3>Sonstiges</h3>
<table class="info">
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>Der Typ des angezeigten Mauszeigers. Sie enthält einen der folgenden Wörter: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Abkürzungen bei den Size-Mauszeigern sind Himmelsrichtungen, z. B. NESW = NorthEast+SouthWest (Nordosten+Südwesten). Die handförmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p>
      <p>Bekannte Einschränkung in Windows 95: Wenn der Variableninhalt mehrmals schnell aufgerufen wird (d. h. alle 500 ms oder schneller), dann ist der Benutzer wahrscheinlich nicht mehr in der Lage, einen Doppelklick durchzuführen. Es ist keine Übergangslösung bekannt.<br>
    </p></td>
  </tr>
  <tr id="Caret">
    <td>A_CaretX<br> A_CaretY</td>
    <td><p>Die aktuellen X- und Y-Koordinaten des Text-Cursors (Einfügemarke). Die Koordinaten beziehen sich auf das aktive Fenster, es sei denn, <a href="commands/CoordMode.htm">CoordMode</a> wird verwendet, damit sie sich auf den ganzen Bildschirm beziehen. Wenn kein aktives Fenster vorhanden ist oder die Cursor-Position nicht ermittelt werden kann, dann sind diese Variablen leer.</p>
      <p>Mit dem folgenden Script ist es möglich, beim Bewegen des Text-Cursors dessen aktuelle Position in einem ToolTip anzuzeigen. Beachtet, dass einige Fenster (z. B. bestimmte Versionen von MS Word) immer die gleiche Cursor-Position melden, unabhängig von ihrer aktuellen Position.</p>
      <p>#Persistent<br> SetTimer, Cursorüberwachung, 100<br> Return<br> Cursorüberwachung:<br> ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20<br> Return</p>
      <p>Wenn der Variableninhalt mehrmals schnell aufgerufen wird (d. h. alle 500 ms oder schneller), dann ist der Benutzer wahrscheinlich nicht mehr in der Lage, einen Doppelklick durchzuführen. Es ist keine Übergangslösung bekannt.</p></td>
  </tr>
  <tr>
    <td>Clipboard</td>
    <td>Der Inhalt der Zwischenablage, die gelesen oder beschrieben werden kann. Siehe <a href="misc/Clipboard.htm">Clipboard</a> für mehr Details.</td>
  </tr>
  <tr>
    <td>ClipboardAll</td>
    <td>Der gesamte Inhalt der Zwischenablage (z. B. Formatierung und Text). Siehe <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>.</td>
  </tr>
  <tr>
    <td>ErrorLevel</td>
    <td>Siehe <a href="misc/ErrorLevel.htm">ErrorLevel</a>.</td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td>Das Ergebnis der GetLastError()-Systemfunktion oder des letzten COM-Objektaufrufs. Weitere Informationen können in <a href="commands/DllCall.htm#LastError">DllCall()</a> und <a href="commands/Run.htm#LastError">Run/RunWait</a> gefunden werden.</td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr id="Index">
    <td>A_Index</td>
    <td>Enthält die Nummer des aktuellen Schleifendurchlaufs (ein 64-Bit-Integer). Zum Beispiel enthält diese Variable die Nummer 1, wenn das Script den Schleifenkörper zum ersten Mal ausführt. Weitere Informationen können in <a href="commands/Loop.htm">Loop</a> oder <a href="commands/While.htm">While-Schleife</a> gefunden werden.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc. </td>
    <td>Diese und andere verwandte Variablen sind nur innerhalb einer <a href="commands/LoopFile.htm">Datei-Schleife</a> gültig.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc. </td>
    <td>Diese und andere verwandte Variablen sind nur innerhalb einer <a href="commands/LoopReg.htm">Registrierung-Schleife</a> gültig.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="commands/LoopReadFile.htm">dateilesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="commands/LoopParse.htm">Parsing-Schleife</a>. </td>
  </tr>
</table>

<h2 id="env">Vergleich von Umgebungsvariablen und normalen Variablen</h2>
<p>Umgebungsvariablen werden vom Betriebssystem verwaltet. Diese können in der Eingabeaufforderung aufgelistet werden, indem SET eingegeben und die Eingabetaste gedrückt wird.</p>
<p>Mithilfe von <a href="commands/EnvSet.htm">EnvSet</a> kann ein Script eine neue Umgebungsvariable erstellen oder den Inhalt einer bestehenden Umgebungsvariable ändern. Allerdings sind solche Ergänzungen und Änderungen nicht öffentlich; sie werden nicht vom Rest des Systems erkannt. Eine Ausnahme bildet ein Script, das <a href="commands/Run.htm">Run</a> oder <a href="commands/Run.htm">RunWait</a> verwendet, um ein Programm auszuführen (oder auch ein anderes Script): solche Programme erben die Umgebungsvariablen des übergeordneten Scripts einschließlich der privaten Umgebungsvariablen.</p>
<p>Seit v1.0.43.08 ist es empfehlenswert, dass alle neuen Scripts die Umgebungsvariablen wie <em>Path</em> mithilfe des folgenden Beispiels abrufen:</p>
<pre><a href="commands/EnvGet.htm">EnvGet, Ausgabevariable, Path</a>  <em>; Zur Erläuterung, siehe <a href="commands/_NoEnv.htm">#NoEnv</a>.</em></pre>
<h2 id="cap">Kapazität und Speicher einer Variable</h2>
<ul>
  <li>Jede Variable kann bis zu 64 MB Text enthalten (dieses Limit kann mit <a href="commands/_MaxMem.htm">#MaxMem</a> erhöht werden).</li>
  <li>Sobald einer Variable ein neuer String übergeben wird, der länger als der aktuelle Inhalt ist, dann wird automatisch zusätzlicher Systemspeicher reserviert.</li>
  <li>Der Speicher einer großen Variable kann freigegeben werden, wenn ihr nichts zugewiesen wird (z. B. Variable = "").</li>
  <li>Es können beliebige viele Variablen erstellt werden. Das Programm ist so konzipiert, mehrere Millionen Variablen ohne deutlichen Rückgang der Performance zu unterstützen.</li>
  <li>Befehle, Funktionen und Ausdrücke, die numerische Eingaben akzeptieren, unterstützen generell eine Genauigkeit von 15 Ziffern für Fließkommazahlen. Für Integer werden 64-Bit signed Werte von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF) unterstützt. Alle Integer-Konstanten außerhalb dieses Bereichs werden nicht unterstützt und führen möglicherweise zu widersprüchlichen Ergebnissen. Im Gegensatz dazu werden arithmetische Operationen auf Integer bei Überlauf entgegengesetzt (z. B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>
