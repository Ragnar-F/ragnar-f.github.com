<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Variablen und Ausdr&uuml;cke</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="../forum/rss.php">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Variablen und Ausdr&uuml;cke</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Variables">Variablen</a></li>
  <li><a href="#Expressions">Ausdr&uuml;cke</a></li>
  <li><a href="#Operators">Operatoren in Ausdr&uuml;cken</a><a href="#env"></a></li>
  <li><a href="#BuiltIn">Interne Variablen</a></li>
  <li><a href="#env">Vergleich von Umgebungsvariablen und normalen Variablen</a></li>
  <li><a href="#cap">Kapazit&auml;t und Speicher einer Variable</a></li>
</ul>
<h2 id="Intro"><a name="Variables"></a>Variablen</h2>
<p><strong>Variablentypen</strong>: AutoHotkey hat keine direkt definierte Variablentypen. Wenn eine Variable nur Ziffern enth&auml;lt (optional mit einem Dezimalpunkt), dann wird sie automatisch als Zahl interpretiert, sobald sie von einer mathematischen Operation oder von einem Vergleich ben&ouml;tigt wird. Zur Verbesserung der Performance werden die Zahlen intern zwischengespeichert, um Konvertierungen von/in Strings zu vermeiden.</p>
<p><strong>G&uuml;ltigkeitsbereiche und Deklarationen von Variablen</strong>: Mit Ausnahme von <a href="Functions.htm#Locals">lokalen Variablen</a> in Funktionen sind alle Variablen global; das hei&szlig;t, dass deren Inhalt jederzeit vom Script gelesen oder ge&auml;ndert werden kann. Au&szlig;er den genannten Ausnahmen auf der <a href="Functions.htm#Global">Funktionsseite</a> werden Variablen nicht deklariert; sie entstehen, sobald sie verwendet werden (und jede Variable beginnt leer).</p>
<p><strong>Variablennamen</strong>: Variablen sind nicht von der Gro&szlig;- und Kleinschreibung abh&auml;ngig (zum Beispiel ist <em>AktuellesDatum</em> das Gleiche wie <em>aktuellesdatum</em>). Variablennamen d&uuml;rfen bis zu 253 Zeichen lang sein und aus Buchstaben, Zahlen und folgenden Satzzeichen bestehen: # _ @ $</p>
<p>Aufgrund von Stilkonventionen ist es generell besser, Variablen nur mit Buchstaben, Zahlen und Unterstriche zu benennen (zum Beispiel: <em>PositionZeiger</em>, <em>Gesamt_Elemente</em> und <em>Eintrag_ist_g&uuml;ltig</em>). Dieser Stil erm&ouml;glicht Menschen, die mit anderen Programmiersprachen vertraut sind, das Script besser zu verstehen. Sobald au&szlig;erdem dieselben Stilkonventionen von anderen Sprachen in AutoHotkey verwendet werden, ist es dadurch m&ouml;glicherweise einfacher, eigene Scripts erneut zu lesen.</p>
<p>Auch wenn ein Variablenname vollst&auml;ndig aus Ziffern bestehen kann, sollte das in der Regel nur f&uuml;r <a href="Scripts.htm#cmd">eingehende Befehlszeilenparameter</a> verwendet werden. Solche numerischen Namen k&ouml;nnen nicht in <a href="#Expressions">Ausdr&uuml;cken</a> verwendet werden, weil sie dort als Zahlen anstatt als Variablen betrachtet werden.</p>
<p>Da die W&ouml;rter <em>AND</em>, <em>OR</em> und <em>NOT</em> als <a href="#Operators">Operatoren</a> in Ausdr&uuml;cken benutzt werden, sollten sie in der Regel nicht als Variablennamen verwendet werden. Solche Namen in einem Ausdruck verhindern eine angemessene Auswertung.</p>
<p><strong>Werte in Variablen speichern</strong>: F&uuml;r das Speichern eines Strings oder einer Zahl in eine Variable gibt es zwei Methoden: traditionell und Ausdruck. Die traditionelle Methode verwendet den <a href="commands/SetEnv.htm">Gleichheitszeichenoperator (=)</a>, um direkte Strings <strong>ohne Anf&uuml;hrungszeichen</strong> oder Variablen mit umschlie&szlig;enden Prozentzeichen zuzuweisen. Zum Beispiel:</p>
<pre>EigeneZahl = 123
EigenerString = Das ist ein direkter String.
KopieVonVar = %Var%  <em>; Beim Verwenden des Operators &quot;=&quot; werden Prozentzeichen ben&ouml;tigt, um den Inhalt einer Variable abzurufen.</em></pre>
<p> Im Gegensatz dazu verwendet die Ausdrucksmethode den <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a> zum Speichern von Zahlen, Strings <strong>in Anf&uuml;hrungszeichen</strong>  und andere Arten von <a href="#Expressions">Ausdr&uuml;cken</a>. Die folgenden Beispiele sind funktionsgem&auml;&szlig; mit den vorherigen Beispielen identisch:</p>
<pre>EigeneZahl := 123
EigenerString := &quot;Das ist ein direkter String.&quot;
KopieVonVar := Var  <em>; Im Gegensatz zum oberen &Auml;quivalent werden Prozentzeichen nicht beim Operator &quot;:=&quot; verwendet.</em></pre>
<p>Die letztere Methode wird aufgrund der Eindeutigkeit bevorzugt, au&szlig;erdem unterst&uuml;tzt sie eine <a href="#Expressions">Ausdruckssyntax</a>, die nahezu identisch mit der Syntax vieler anderer Sprachen ist.</p>
<p>Wie wahrscheinlich bereits vermutet, gibt es zwei Methoden, um den Inhalt einer Variable zu leeren:</p>
<pre>EigeneVar =
EigeneVar := &quot;&quot;</pre>
<p>Die nebeneinanderliegenden Anf&uuml;hrungszeichen sollten nur mit dem Operator &quot;:=&quot; verwendet werden, da ansonsten beim Operator &quot;=&quot; zwei direkte Anf&uuml;hrungszeichen in die Variable gespeichert werden w&uuml;rden.</p>
<p><strong>Die Inhalte von Variablen abrufen</strong>: Im Gegensatz zu den oben genannten Methoden gibt es auch zwei Methoden zum Abrufen von Werten: traditionell und Ausdruck. F&uuml;r die traditionelle Methode muss jeder Variablenname in Prozentzeichen gesetzt werden, um den Inhalt abzurufen. Zum Beispiel:</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a> Die Variable namens Var enth&auml;lt %Var%.
KopieVonVar = %Var%</pre>
<p>Im Gegensatz dazu werden bei der Ausdrucksmethode die Prozentzeichen um den Variablennamen weggelassen, daf&uuml;r aber mit Anf&uuml;hrungszeichen umschlossen. Die folgenden Beispiele sind &Auml;quivalente der vorherigen Beispiele:</p>
<pre>MsgBox <strong>%</strong> &quot;Die Variable namens Var enth&auml;lt &quot; . Var . &quot;.&quot;  <em>; Ein Punkt wird verwendet, um zwei Strings zu verketten (verbinden).</em>
KopieVonVar := Var</pre>
<p>In der MsgBox-Zeile dar&uuml;ber wird ein Prozent- und Leerzeichen verwendet, um den Parameter vom traditionellen Modus auf den Ausdrucksmodus zu wechseln. Das ist notwendig, weil die traditionelle Methode standardm&auml;&szlig;ig von allen Befehlen verwendet wird (wenn nicht anders beschrieben). Allerdings akzeptieren bestimmte Parameter von einigen Befehlen bereits Ausdr&uuml;cke, dabei ist das f&uuml;hrende Prozentzeichen erlaubt, aber nicht notwendig. Die folgenden drei Beispiele verhalten sich identisch, da der erste Parameter von <a href="commands/Sleep.htm">Sleep</a> ausdrucksf&auml;hig ist:</p>
<pre>Sleep MillisekundenWarten
Sleep %MillisekundenWarten%
Sleep % MillisekundenWarten</pre>
<p><strong>Vergleich von Variablen</strong>: Siehe den unteren Abschnitt &quot;Ausdr&uuml;cke&quot; f&uuml;r wichtige Hinweise &uuml;ber die verschiedenen Arten von Vergleichen, insbesondere dar&uuml;ber, wann die Klammern verwendet werden sollen.</p>
<h2 id="Expressions">Ausdr&uuml;cke</h2>
<p>Ausdr&uuml;cke werden verwendet, um eine oder mehrere Operationen mit mehreren Variablen, direkte Strings und/oder direkte Zahlen durchzuf&uuml;hren.</p>
<p>Variablennamen werden in einem Ausdruck nicht von Prozentzeichen umschlossen (au&szlig;er f&uuml;r Arrays und anderen <a href="#ref">Doppelreferenzen</a>). Folglich m&uuml;ssen Strings in Anf&uuml;hrungszeichen gesetzt werden, um sie von Variablen zu unterscheiden. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung &gt; 100 or Fundfarbe &lt;&gt; &quot;Blau&quot;)
    MsgBox Die Einstellung ist zu hoch oder falsche Farbe vorhanden.</pre>
<p>Im obigen Beispiel erscheint &quot;Blau&quot; in Anf&uuml;hrungszeichen, weil es sich hierbei um einen String handelt. Um ein <em>tats&auml;chliches</em> Anf&uuml;hrungszeichen innerhalb eines Strings einzuf&uuml;gen, verwendet zwei aufeinanderfolgende Anf&uuml;hrungszeichen wie in diesem Beispiel zweimal gezeigt: &quot;Sie sagte: <span class="red">&quot;&quot;</span>Ein Apfel am Tag.<span class="red">&quot;&quot;</span>&quot;</p>
<p><strong>Wichtig</strong>: Eine If-Anweisung mit einem Ausdruck unterscheidet sich von einer <a href="commands/IfEqual.htm">traditionellen If-Anweisung</a> wie <em>If Fundfarbe &lt;&gt; Blau</em>, wenn das Zeichen nach dem Wort &quot;If&quot; eine offene Klammer ist. Obwohl dies in der Regel dadurch erreicht wird, den kompletten Ausdruck in Klammern zu setzen, ist dies beispielsweise auch mit <em>If (x &gt; 0) and (y &gt; 0)</em> m&ouml;glich. Dar&uuml;ber hinaus kann die offene Klammer komplett weggelassen werden, wenn das erste Element nach dem Wort &quot;If&quot; ein <a href="Functions.htm">Funktionsaufruf</a> oder ein Operator wie &quot;not&quot; oder &quot;!&quot; ist.</p>
<p><strong>Leere Strings</strong>: Um einen leeren String in einem Ausdruck anzugeben, verwendet zwei aufeinanderfolgende Anf&uuml;hrungszeichen. Zum Beispiel ist die Anweisung <em>if (EigeneVar &lt;&gt; &quot;&quot;)</em> wahr, wenn <em>EigeneVar</em> nicht leer ist. Allerdings werden zwei aufeinanderfolgende Anf&uuml;hrungszeichen in einer <a href="commands/IfEqual.htm">traditionellen If-Anweisung</a> direkt behandelt. Zum Beispiel ist die Anweisung <em>if EigeneVar = &quot;&quot;</em> nur wahr, wenn <em>EigeneVar</em> zwei Anf&uuml;hrungszeichen enth&auml;lt. Um daher zu &uuml;berpr&uuml;fen, ob eine Variable in einer traditionellen If-Anweisung leer ist, verwendet = oder &lt;&gt; mit nichts auf der rechten Seite, wie in diesem Beispiel: <em>if Var =</em></p>
<p>Zus&auml;tzlich ergibt ein ung&uuml;ltiger Ausdruck wie (x +* 3) einen leeren String.</p>
<p><strong>Das Ergebnis eines Ausdrucks speichern</strong>: Um ein Ergebnis einer Variable zuzuweisen, verwendet den <a href="commands/SetExpression.htm">Operator &quot;:=&quot;</a>. Zum Beispiel:</p>
<pre>Nettopreis := Preis * (1 - Rabatt/100)</pre>
<p><strong>Boolesche Werte</strong>: Sobald ein Ausdruck wahr oder falsch gewertet werden soll (wie z. B. eine IF-Anweisung), dann wird ein leeres Ergebnis oder ein Ergebnis mit 0 als falsch angesehen, alle anderen Ergebnisse ansonsten als wahr. Zum Beispiel ist die Anweisung &quot;if Elementz&auml;hlung&quot; nur falsch, wenn Elementz&auml;hlung leer oder 0 ist. Ebenso ergibt die Anweisung &quot;if not Elementz&auml;hlung&quot; das Gegenteil.</p>
<p>Operatoren wie NOT/AND/OR/&gt;/=/&lt; erzeugen automatisch einen wahren oder falschen Wert: sie ergeben eine 1 f&uuml;r wahr und 0 f&uuml;r falsch. Im folgenden Ausdruck wird der <em>Fertig</em>-Variable zum Beispiel eine 1 zugewiesen, wenn eine der beiden Bedingungen erf&uuml;llt ist:</p>
<pre>Fertig := A_Index &gt; 5 or Gefunden</pre>
<p>Wie bereits oben angedeutet kann eine Variable dazu verwendet werden, einen falschen Wert zu beinhalten, indem sie einfach leer gemacht oder ihr eine 0 zugewiesen wird. Der Vorteil davon ist, dass die Kurzanweisung &quot;if Fertig&quot; zur &Uuml;berpr&uuml;fung verwendet werden kann, ob die Fertig-Variable wahr oder falsch ist.</p>
<p><a name="True"></a><a name="False"></a>Die W&ouml;rter <em>True</em> und <em>False</em> sind interne Variablen, die eine 1 und eine 0 enthalten. Sie k&ouml;nnen verwendet werden, um ein Script besser lesbar zumachen, z. B.:</p>
<pre>Zeichengenauigkeit := false
Suchfortsetzung := true</pre>
<p><strong>Integer und Flie&szlig;kommazahlen</strong>: Innerhalb eines Ausdrucks werden Zahlen als Flie&szlig;kommazahlen angesehen, sobald sie einen Dezimalpunkt enthalten, ansonsten sind sie Integer. Sobald bei den meisten Operatoren wie Addition und Multiplikation eine der Eingaben eine Flie&szlig;kommazahl ist, dann ist das Ergebnis auch eine Flie&szlig;kommazahl.</p>
<p>Innerhalb von Ausdr&uuml;cken sowie auch Nicht-Ausdr&uuml;cken k&ouml;nnen Zahlen im hexadezimalen oder dezimalen Format geschrieben werden. Hexadezimalzahlen beginnen mit dem 0x-Pr&auml;fix. Zum Beispiel ist <em>Sleep 0xFF</em> gleichwertig mit <em>Sleep 255</em>. Seit v1.0.46.11 werden Flie&szlig;kommazahlen in wissenschaftlichen Notationen erkannt; aber nur, wenn sie einen Dezimalpunkt enthalten (z. B. 1<strong>.</strong>0e4 und -2<strong>.</strong>1E-4).</p>
<p><strong>Einen Ausdruck erzwingen</strong>: Ein Ausdruck kann in einen Parameter verwendet werden, der so etwas nicht direkt unterst&uuml;tzt (mit Ausnahme einer Ausgabe- oder Eingabevariable wie z. B. in <a href="commands/StringLen.htm">StringLen</a>), sobald der Ausdruck ein Prozent- und Leerzeichen (oder Tabulator) davor hat. Diese Technik wird h&auml;ufig verwendet, um auf <a href="misc/Arrays.htm">Arrays</a> zuzugreifen. Zum Beispiel:</p>
<pre><a href="commands/FileAppend.htm">FileAppend</a>, <strong>%</strong> EigenerArray%i%, Eigene Datei.txt
<a href="commands/MsgBox.htm">MsgBox</a> <strong>%</strong> &quot;Die Variable EigeneVar enth&auml;lt &quot; . EigeneVar . &quot;.&quot;
<a href="commands/Loop.htm">Loop</a> <strong>%</strong> Iterationen + 1
<a href="commands/WinSet.htm">WinSet</a>, Transparent, <strong>%</strong> X + 100
<a href="commands/WinSet.htm">Control</a>, Choose, <strong>%</strong> AktuelleAuswahl - 1</pre>
<h2 id="Operators">Operatoren in Ausdr&uuml;cken</h2>
<p> Operatoren mit gleicher Priorit&auml;t wie multiplizieren (*) und dividieren (/) werden von links nach rechts ausgewertet, sofern nicht anders unten angegeben. Im Gegensatz dazu wird ein Operator mit niedrigerer Priorit&auml;t wie addieren (+) erst <em>nach</em> einem h&ouml;heren Operator wie multiplizieren (*) ausgewertet. Zum Beispiel wird 3 + 2 * 2 als 3 + (2 * 2) ausgewertet. Klammern k&ouml;nnen verwendet werden, um die Priorit&auml;t wie in diesem Beispiel zu &uuml;berschreiben: (3 + 2) * 2</p>
<p>Soweit nicht anders unten angegeben wird jeder leere Wert (String) in einer mathematischen Operation <strong>nicht</strong> als 0 angesehen. Stattdessen wird es als Fehler behandelt, wodurch dieser Teil des Ausdrucks zu einem leeren String ausgewertet wird. Wenn zum Beispiel die Variable X leer ist, dann ergibt der Ausdruck X+1 einen leeren Wert anstelle von 1.</p>
<h3>Ausdrucksoperatoren (in absteigender Priorit&auml;t)</h3>
<table class="info">
  <tr>
    <td align="center" style="white-space:nowrap"><strong>%Var%</strong></td>
    <td><p><a name="ref"></a>Sobald eine Variable innerhalb eines Ausdrucks von Prozentzeichen umschlossen ist (z. B. %Var%), dann wird davon ausgegangen, dass sie den Namen oder Teilnamen einer anderen Variable <u>enth&auml;lt</u> (falls so eine Variable nicht vorhanden ist, wird %Var% in einen leeren String aufgel&ouml;st). Das wird h&auml;ufig dazu verwendet, auf <a href="misc/Arrays.htm#pseudo">Pseudo-Array</a>-Elemente wie im folgenden Beispiel zu verweisen:</p>
      <pre>Var := EigenerArray%A_Index% + 100</pre>
      <p>Aus Gr&uuml;nden der Abw&auml;rtskompatibilit&auml;t behandeln Befehlsparameter, die ein Ausdruck sein k&ouml;nnen, einen isolierten Namen in Prozentzeichen (z. B. %Var%, aber nicht Array%i%) als w&auml;ren keine Prozentzeichen vorhanden. Das kann verhindert werden, indem die Referenz von Klammern umschlossen wird; z. B. <code>Sleep (%Var%)</code></p>
      <p><span class="ver">[AHK_L 52+]:</span> Zus&auml;tzlich zu den normalen Variablen kann %Var% in eine <a href="#env">Umgebungsvariable</a>, die Zwischenablage oder eine <a href="#BuiltIn">reservierte/schreibgesch&uuml;tzte Variable</a> aufgel&ouml;st werden. Vor Revision 52 ergab %Var% in diesen F&auml;llen eine leeren String.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>x.y</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> <strong>Auf ein Objekt zugreifen</strong>. Abrufen oder Setzen eines Werts, oder Aufrufen einer Methode von Objekt <i>x</i>, wobei <i>y</i> ein direkter Wert ist. Siehe <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>.</td>
  </tr>
  <tr>
    <td align="center"><strong>++<br> --</strong></td>
    <td><strong><a name="IncDec"></a>Pre- und Post-Inkrement/Dekrement</strong>. Addiert oder subtrahiert eine Variable um 1 (aber in den Versionen vor 1.0.46 k&ouml;nnen sie sich nur auf einer Zeile befinden; keine anderen Operatoren d&uuml;rfen vorhanden sein). Der Operator kann entweder vor oder hinter dem Variablennamen stehen. Wenn er <em>vor</em> dem Namen steht, dann wird die Operation sofort durchgef&uuml;hrt und das Ergebnis von der n&auml;chsten Operation verwendet. Zum Beispiel wird mit <em>Variable := ++X</em> die Variable X sofort erh&ouml;ht und danach der <em>Variable</em> zugewiesen. Sobald der Operator <em>hinter</em> dem Variablennamen steht, wird die Operation durchgef&uuml;hrt, <em>nachdem</em> die Variable von der n&auml;chsten Operation verwendet wurde. Zum Beispiel wird mit <em>Variable := X++</em> die Variable X erst nach der Zuweisung des aktuellen X-Werts auf die <em>Variable</em> erh&ouml;ht. Aufgrund der Abw&auml;rtskompatibilit&auml;t behandeln die Operatoren ++ und -- leere Variablen als 0, aber nur, wenn sie auf einer Zeile alleine sind; zum Beispiel erzeugen <em>y := 1, ++x</em> als auch <em>MsgBox % ++x</em> ein leeres Ergebnis, falls x leer ist.</td>
  </tr>
  <tr>
    <td align="center"><strong>**</strong></td>
    <td><a name="pow"></a><strong>Potenz</strong>. Sowohl die Basis als auch der Exponent k&ouml;nnen einen Dezimalpunkt enthalten. Wenn der Exponent negativ ist, dann wird das Ergebnis zur Flie&szlig;kommazahl formatiert, selbst wenn die Basis und der Exponent Integer sind. Da ** eine h&ouml;here Priorit&auml;t als ein einstelliges Minuszeichen hat, wird -2**2 wie -(2**2) ausgewertet und somit -4 ergeben. Um daher eine direkte negative Zahl zu potenzieren, muss sie in Klammern wie (-2)**2 gesetzt werden. Hinweis: Eine negative Basis, kombiniert mit einem gebrochenen Exponenten wie (-2)**0.5, wird nicht unterst&uuml;tzt; dadurch ist das Ergebnis ein leerer String. Aber sowohl (-2)**2 als auch (-2)**2.0 werden unterst&uuml;tzt.</td>
  </tr>
  <tr>
    <td align="center"><strong>-<br> !<br> ~<br> &amp; *</strong></td>
    <td><p><strong><a name="unary"></a>Einstelliges Minuszeichen (-)</strong>: Auch wenn hier das gleiche Symbol vom Subtraktionsoperator verwendet wird, gilt ein einstelliges Minuszeichen nur f&uuml;r ein Element oder Teilausdruck wie in diesem Beispiel zweimal gezeigt: <em><strong>-</strong>(3 / <strong>-</strong>x)</em>. Zus&auml;tzlich werden alle einstelligen Pluszeichen (+) innerhalb eines Ausdrucks ignoriert.</p>
      <p><strong>Logisches NICHT (!)</strong>: Wenn der Operand leer oder 0 ist, dann ist das Ergebnis bei einem logischen NICHT eine 1, also &quot;wahr&quot;. Ansonsten ist das Ergebnis eine 0 (falsch). Zum Beispiel: <em>!x or !(y and z)</em>. Hinweis: Das Wort NOT ist gleichbedeutend mit <strong>!</strong>, au&szlig;er dass <strong>!</strong> eine h&ouml;here Priorit&auml;t hat. Seit v1.0.46 sind aufeinanderfolgende einstellige Operatoren wie <em><strong>!!</strong>Var</em> erlaubt, weil sie von rechts nach links ausgewertet werden.</p>
      <p><strong>Bitweises NICHT (~)</strong>: Dadurch wird jedes Bit des Operanden umgekehrt. Wenn der Operand eine Flie&szlig;kommazahl ist, dann wird sie vor der Berechnung auf einen Integer gek&uuml;rzt. Wenn der Operand zwischen 0 und 4294967295 (0xffffffff) liegt, dann wird diese Zahl als ein <u>unsigned</u> 32-Bit-Wert behandelt. Ansonsten wird diese Zahl als ein <u>signed</u> 64-Bit-Wert behandelt. Zum Beispiel wird ~0xf0f zu 0xfffff0f0 (4294963440) ausgewertet.</p>
      <p><a name="amp"></a><strong>Adresse (&amp;)</strong>: <em>&amp;EigeneVar</em> ermittelt die Adresse des Speicherinhalts von <em>EigeneVar</em>, die typischerweise bei <a href="commands/DllCall.htm#struct">DllCall-Strukturen</a> verwendet wird. <em>&amp;EigeneVar</em> deaktiviert au&szlig;erdem das Zwischenspeichern von Bin&auml;rzahlen in dieser Variable, wodurch die Performance verringert wird, wenn sie jemals f&uuml;r Berechnungen oder numerische Vergleiche gebraucht wird. Das Zwischenspeichern einer Variable wird wieder aktiviert, sobald sich ihre Adresse &auml;ndert (z. B. durch <a href="commands/VarSetCapacity.htm">VarSetCapacity()</a>).</p>
      <p><strong>Dereferenzierung (*)</strong>: Bei <em>*Ausdruck</em> wird angenommen, dass der <em>Ausdruck</em> in eine numerische Speicheradresse aufgel&ouml;st wird; dabei wird das Byte auf dieser Adresse als eine Zahl zwischen 0 und 255 ermittelt (0 wird immer abgerufen, sobald die Adresse 0 ist; jede andere ung&uuml;ltige Adresse sollte vermieden werden, weil ansonsten das Script abst&uuml;rzen kann). Allerdings ist <a href="Functions.htm#NumGet">NumGet()</a> beim Abrufen von bin&auml;ren Zahlen besser geeignet.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>*<br> /<br> //</strong></td>
    <td><p><strong>Multiplizieren (*)</strong>: Das Ergebnis ist ein Integer, wenn beide Eingaben Integer sind, ansonsten ist es eine Flie&szlig;kommazahl.</p>
      <p><a name="divide"></a><strong>Echtes Dividieren (/)</strong>: Im Gegensatz zu <a href="commands/EnvDiv.htm">EnvDiv</a> ergibt die echte Division eine Flie&szlig;kommazahl, selbst wenn beide Eingaben Integer sind. Zum Beispiel ergibt 3/2 eine 1.5 anstelle von 1, und 4/2 ergibt 2.0 anstelle von 2.</p>
      <p><strong><a name="FloorDivide"></a>Floor-Dividieren (//)</strong>: Der Doppel-Schr&auml;gstrich-Operator verwendet Integer-Division f&uuml;r eine hohe Performance, wenn die zwei Eingaben Integer sind. Zum Beispiel ergibt 5//3 eine 1 und 5//-3 eine -1. Wenn eine der beiden Eingaben eine Flie&szlig;kommazahl ist, dann erfolgt eine Flie&szlig;komma-Division, au&szlig;erdem wird das Ergebnis auf den n&auml;chsten linken Integer gek&uuml;rzt. Zum Beispiel ergibt 5//30 eine 10 und 50//-3 eine -20. Auch wenn das Ergebnis dieser Flie&szlig;komma-Division ein Integer ist, enth&auml;lt es eine Flie&szlig;kommazahl, die als solches angesehen wird, sobald es anderweitig verwendet wird. F&uuml;r Modulo, siehe <a href="Functions.htm#Mod">mod()</a>.</p>
    <p> Die Operatoren <a href="commands/EnvMult.htm">*=</a> und <a href="commands/EnvDiv.htm">/=</a> Operatoren sind Abk&uuml;rzungen f&uuml;r das Multiplizieren oder Dividieren des Werts in einer Variable mit einem anderen Wert. Zum Beispiel erzeugt <em>Var*=2</em> das gleiche Ergebnis wie <em>Var:=Var*2</em> (obwohl das Vorherige bessere Performance erzielt).</p>
    <p>Division durch 0 ergibt ein leeres Ergebnis (leerer String).</p></td>
  </tr>
  <tr>
    <td align="center"><strong>+<br> - </strong></td>
    <td><p><strong>Addieren (+)</strong> und <strong>Subtrahieren (-)</strong>. Au&szlig;erdem sind die Operatoren <strong><a href="commands/EnvAdd.htm">+=</a></strong> und <strong><a href="commands/EnvSub.htm">-=</a></strong> Abk&uuml;rzungen f&uuml;r das Erh&ouml;hen oder Verringern einer Variable. Zum Beispiel erzeugt <em>Var+=2</em> das gleiche Ergebnis wie <em>Var:=Var+2</em> (obwohl das Vorherige bessere Performance erzielt). Ebenso kann der Wert einer Variable um 1 erh&ouml;ht oder verringert werden, wenn <a href="#IncDec"><a href="#IncDec">Var++, Var--, ++Var oder --Var</a></a> verwendet wird.</p>
    </td>
  </tr>
  <tr>
    <td align="center"><strong>&lt;&lt;<br> &gt;&gt; </strong></td>
    <td><a name="bitwise"></a><strong>Bitweise Verschiebung nach links (&lt;&lt;)</strong> und <strong>nach rechts (&gt;&gt;)</strong>. Anwendungsbeispiel: <em>Wert1 &lt;&lt; Wert2</em>. Jede Flie&szlig;kommazahl wird vor der Berechnung auf einen Integer gek&uuml;rzt. Bitweise Verschiebung nach links (<strong>&lt;&lt;</strong>) ist gleichbedeutend mit dem Multiplizieren von <em>Wert1</em> mit &quot;2, potenziert um <em>Wert2</em>&quot;. Bitweise Verschiebung nach rechts (<strong>&gt;&gt;</strong>) ist gleichbedeutend mit dem Dividieren von <em>Wert1</em> mit &quot;2, potenziert um <em>Wert2</em>&quot; und Abrunden des Ergebnisses auf den n&auml;chsten Integer; zum Beispiel ergibt -3&gt;&gt;1 eine -2.</td>
  </tr>
  <tr>
    <td align="center"><strong>&amp;<br> ^<br> |</strong></td>
    <td><strong>Bitweises UND (&amp;)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von den oben genannten drei Zeichen hat <strong>&amp;</strong> die h&ouml;chste und <strong>|</strong> die niedrigste Priorit&auml;t. Jede Flie&szlig;kommazahl wird vor der Berechnung auf einen Integer gek&uuml;rzt.</td>
  </tr>
  <tr>
    <td align="center"><strong>.</strong></td>
    <td><p><a name="concat"></a><strong>Verkettung</strong>. Mit dem Punkt-Operator k&ouml;nnen zwei Elemente zu einem String kombiniert werden (es muss mindestens ein Leerzeichen auf jeder Seite des Punkts vorhanden sein). Der Punkt kann auch weggelassen werden, um dasselbe Ergebnis zu erzielen (au&szlig;er bei Zweideutigkeiten wie <em>x <strong>-</strong>y</em>, oder wenn das rechte Element f&uuml;hrende ++ oder -- hat). Sobald der Punkt weggelassen wird, sollte mindestens ein Leerzeichen zwischen den Elementen vorhanden sein.<br> Beispiel (Ausdrucksmethode): Var := &quot;Die Farbe ist &quot; <strong>.</strong> Fundfarbe<br> Beispiel (traditionelle Methode): &nbsp;Var = Die Farbe ist %Fundfarbe%</p>
        <p> Teilausdr&uuml;cke k&ouml;nnen auch verkettet werden. Zum Beispiel: <em>Var := &quot;Der Nettopreis ist &quot; <strong>.</strong>  Preis * (1 - Rabatt/100)</em></p>
        <p>Eine Zeile, die mit einem Punkt (oder mit jedem anderen Operator) beginnt, wird automatisch an die dar&uuml;berliegende Zeile <a href="Scripts.htm#continuation">angeh&auml;ngt</a>.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>&gt;&nbsp;&nbsp;&nbsp;&lt;<br> &gt;= &lt;=</strong></td>
    <td><strong>Gr&ouml;&szlig;er (&gt;)</strong>, <strong>kleiner (&lt;)</strong>, <strong>gr&ouml;&szlig;er gleich (&gt;=)</strong> und <strong>kleiner gleich (&lt;=)</strong>. Wenn eine der beiden Eingaben keine Zahl ist, dann werden beide in alphabetischer Reihenfolge verglichen (in diesem Fall wird ein direkter String in Anf&uuml;hrungszeichen wie &quot;55&quot; immer als nicht-numerisch angesehen). Der Vergleich ist erst von der Gro&szlig;- bzw. Kleinschreibung abh&auml;ngig, wenn <a href="commands/StringCaseSense.htm">StringCaseSense</a> aktiv ist. Siehe auch: <a href="commands/Sort.htm">Sort</a></td>
  </tr>
  <tr>
    <td align="center"><strong>=<br> ==<br> &lt;&gt; != </strong></td>
    <td><a name="equal"></a><strong>Gleich (=) </strong>, <strong>zeichengenau gleich (==) </strong> und <strong>ungleich (&lt;&gt;</strong> oder <strong>!=)</strong>. Die Operatoren <strong>!=</strong> und <strong>&lt;&gt;</strong> sind funktionsgem&auml;&szlig; identisch. Der Operator <strong>==</strong> verh&auml;lt sich identisch zu <strong>=</strong>, es sei denn, eine der beiden Eingaben ist keine Zahl, in diesem Fall ist <strong>==</strong> immer von der Gro&szlig;- und Kleinschreibung abh&auml;ngig und <strong>=</strong> immer nicht von der Gro&szlig;- und Kleinschreibung abh&auml;ngig (abh&auml;ngig von <a href="commands/StringCaseSense.htm">StringCaseSense</a>). Im Gegensatz dazu beachten <strong>&lt;&gt;</strong> und <strong>!=</strong> den Befehl <a href="commands/StringCaseSense.htm">StringCaseSense</a>. Hinweis: In diesem Fall wird ein direkter String in Anf&uuml;hrungszeichen wie &quot;55&quot; immer als nicht-numerisch angesehen.</td>
  </tr>
  <tr>
    <td align="center"><strong>NOT</strong></td>
    <td><strong>Logisches NICHT</strong>. Das Gleiche wie der <strong>!</strong>-Operator, nur mit geringerer Priorit&auml;t. Zum Beispiel ist <em>not (x = 3 or y = 3)</em> das Gleiche wie <em> <strong>!</strong>(x = 3 or y = 3)</em></td>
  </tr>
  <tr>
    <td align="center"><strong>AND<br> &amp;&amp; </strong></td>
    <td>Beide sind ein <strong>logisches UND</strong>. Zum Beispiel: <em>x &gt; 3 and x &lt; 10</em>. Zur Verbesserung der Performance wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewandt. Au&szlig;erdem wird eine Zeile, die mit AND/OR/&amp;&amp;/|| (oder mit jedem anderen Operator) beginnt, automatisch an die dar&uuml;berliegende Zeile <a href="Scripts.htm#continuation">angeh&auml;ngt</a>.</td>
  </tr>
  <tr>
    <td align="center"><strong>OR<br> || </strong></td>
    <td>Beide sind ein <strong>logisches ODER</strong>. Zum Beispiel: <em>x &lt;= 3 or x &gt;= 10</em>.  Zur Verbesserung der Performance wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewandt.</td>
  </tr>
  <tr>
    <td align="center"><strong>?:<br></strong></td>
    <td><a name="ternary"></a><strong>Tern&auml;rer Operator</strong> <span class="ver">[v1.0.46 +].</span> Dieser Operator ist die Kurzfassung einer <a href="commands/IfExpression.htm">If-Else-Anweisung</a>. Es wird die Bedingung auf der linken Seite ausgewertet, um festzustellen, welche der beiden Verzweigungen das Endergebnis ist. Zum Beispiel wird mit <strong><em>Variable := x&gt;y ? 2 : 3</em></strong> eine 2 in die <em>Variable</em> gespeichert, wenn x gr&ouml;&szlig;er als y ist; ansonsten wird eine 3 gespeichert. Zur Verbesserung der Performance wird nur die gewinnende Verzweigung ausgewertet (siehe <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a>). <strong>Hinweis</strong>: Aus Gr&uuml;nden der Kompatibilit&auml;t muss das Fragezeichen mindestens ein Leerzeichen auf jeder Seite haben (das kann in einer zuk&uuml;nftigen Version behoben werden).</td>
  </tr>
  <tr>
    <td align="center"><strong>:=<br> +=<br> -=<br> *=<br> /=<br> //=<br> .=<br> |=<br> &amp;=<br> ^=<br> &gt;&gt;=<br> &lt;&lt;=<br></strong>
    </td>
    <td><p><strong><a name="AssignOp"></a>Zuweisung</strong>. F&uuml;hrt eine Operation auf den Inhalt einer Variable aus und speichert das Ergebnis wieder in dieselbe Variable (aber in den Versionen vor 1.0.46 konnten diese nur als Operator ganz links auf der Zeile verwendet werden, au&szlig;erdem wurden nur die ersten f&uuml;nf Operatoren unterst&uuml;tzt). Der einfachste Zuweisungsoperator ist <a href="commands/SetExpression.htm">Doppelpunkt-Gleich (:=)</a>, der das Ergebnis eines Ausdrucks in eine Variable speichert. F&uuml;r die Beschreibung anderer Operatoren, siehe weiter unten. Zum Beispiel f&uuml;hrt <em>Variable //= 2</em> eine <a href="#FloorDivide">Floor-Division</a> aus, um die <em>Variable</em> mit 2 zu teilen, danach wird das Ergebnis wieder in die <em>Variable</em> gespeichert. Ebenso ist <em>Variable <strong>.=</strong> &quot;abc&quot;</em> gleichwertig mit <em>Variable := Variable <strong>.</strong> &quot;abc&quot;</em>.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Folglich wird mit einer Zeile wie <em>Variable1 := Variable2 := 0</em> zuerst der <em>Variable2</em> eine 0 zugewiesen und danach der <em>Variable1</em> die <em>Variable2</em> zugewiesen.</p>      
    <p>Sobald eine Zuweisung als Eingabe f&uuml;r einen anderen Operator verwendet wird, ist der Wert die Variable selbst. Zum Beispiel ist der Ausdruck <em>(Variable+=2) &gt; 50</em> wahr, wenn der gerade erh&ouml;hte Wert in der <em>Variable</em> gr&ouml;&szlig;er als 50 ist. Dadurch kann eine Zuweisung mittels <a href="Functions.htm#ByRef">ByRef</a> &uuml;bergeben oder ihre <a href="#amp">Adresse</a> &uuml;bernommen werden; zum Beispiel: <em>&amp;(x:=&quot;abc&quot;)</em>.</p>
    <p>Die Priorit&auml;t des Zuweisungsoperators wird automatisch erh&ouml;ht, um ein Syntaxfehler zu unterdr&uuml;cken oder intuitiveres Verhalten bereitzustellen. Zum Beispiel: <em>not x:=y</em> wird wie <em>not (x:=y)</em> ausgewertet. Ebenso wird <em>++Var := X</em> wie <em>++(Var := X)</em> ausgewertet; und <em> Z&gt;0 ? X:=2 : Y:=2</em> wie <em>Z&gt;0 ? (X:=2) : (Y:=2) ausgewertet.</em></p>
    <p>Bekannte Einschr&auml;nkungen, verursacht durch die Abw&auml;rtskompatibilit&auml;t (diese k&ouml;nnen in einer zuk&uuml;nftigen Version behoben werden): 1) Sobald &quot;<strong>/=</strong>&quot; der Operator ganz links in einem Ausdruck ist und nicht zu einem <a href="#comma">Ausdruck mit mehreren Anweisungen</a> geh&ouml;rt, dann erfolgt die <a href="#FloorDivide">Floor-Division</a>, es sei denn, eine der Eingaben ist eine Flie&szlig;kommazahl (ansonsten wird bei &quot;<strong>/=</strong>&quot; die <a href="#divide">echte Division</a> durchgef&uuml;hrt); 2) <a href="commands/EnvAdd.htm">Datum/Zeit-Berechnung</a> wird nur von &quot;<strong>+=</strong>&quot; und &quot;<strong>-=</strong>&quot; unterst&uuml;tzt, wenn dieser Operator ganz links auf der Zeile ist; 3) Die Operatoren &quot;<strong>+=</strong>&quot;, &quot;<strong>-=</strong>&quot; und &quot;*=&quot; behandeln leere Variablen als 0, aber nur solange sie alleine auf einer Zeile stehen; zum Beispiel erzeugen sowohl &quot;<em>y:=1, x+=1</em>&quot; als auch &quot;<em>MsgBox % x-=3</em>&quot; ein leeres Ergebnis, sobald x leer ist.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>,</strong></td>
    <td><p><strong><a name="comma"></a>Komma (mehrere Anweisungen)</strong> <span class="ver">[v1.0.46+]</span>. Kommas k&ouml;nnen verwendet werden, um mehrere Teilausdr&uuml;cke auf einer Zeile zu schreiben. Das wird h&auml;ufig dazu verwendet, mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren.  Zum Beispiel: <em>x:=1<strong>,</strong> y+=2<strong>,</strong> ++index, func()</em>. Solche Anweisungen werden von links nach rechts ausgef&uuml;hrt. Hinweis: Eine Zeile, die mit einem Komma (oder mit jedem anderen Operator) beginnt, wird automatisch an die dar&uuml;berliegende Zeile <a href="Scripts.htm#continuation">angeh&auml;ngt</a>. Siehe auch: <a href="#CommaPerf">Komma-Performance</a>.</p>
      <p>Seit v1.0.46.01 wird das Gleichheitszeichen als <a href="commands/SetExpression.htm">Zuweisung (:=)</a> behandelt, sobald unmittelbar nach einem Komma eine Variable und ein Gleichheitszeichen erfolgen. Die folgende Beispiele sind Zuweisungen: <em>x:=1, y=2, a=b=c</em></p></td>
  </tr>
  <tr>
    <td align="center"><p><strong>mod()<br> round()<br> abs()</strong></p>      </td>
    <td>Das sind interne mathematische Funktionen, die <a href="Functions.htm#Math">hier</a> beschrieben werden.</td>
  </tr>
  <tr>
    <td align="center"><strong>func.()</strong></td>
    <td><p><span class="ver">[AHK_L 48+]:</span> Versucht, eine Methode des Objekts <i>func</i> ohne Namen aufzurufen. Vereinbarungsgem&auml;&szlig; ist das die Standard-Methode des Objekts. Wenn <i>func</i> kein Objekt enth&auml;lt, dann wird stattdessen das <a href="Objects.htm#Default_Base_Object">Standard-Basis-Objekt</a> aufgerufen.</p>
    <p><span class="ver">[v1.0.95.00+]:</span> Wenn <i>func</i> ein Funktionsname enth&auml;lt, dann wird die genannte Funktion aufgerufen.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>F(<i>p</i>*)</strong></td>
    <td><span class="ver">[AHK_L 60+]:</span> Siehe <a href="Functions.htm#Variadic">Variadische Funktionen</a>.</td>
  </tr>
  <tr>
    <td align="center"><strong>x[y]</strong></td>
    <td><span class="ver">[AHK_L 31+]:</span> <strong>Auf ein Objekt zugreifen</strong>. Abrufen oder Setzen eines Werts, oder Aufrufen einer Methode von Objekt <i>x</i>, wobei <i>y</i> eine Parameterliste oder ein berechneter Methodenname ist. Siehe <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntax</a> und <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>.</td>
  </tr>
</table>
<p><strong><br> Performance</strong>: <a name="CommaPerf" id="CommaPerf"></a>Seit v1.0.48  ist der Komma-Operator in der Regel schneller als das Schreiben von getrennten Ausdr&uuml;cken, besonders beim Zuweisen einer Variable in eine andere (z. B. x:=y, a:=b). Die Performance wird weiter verbessert, wenn mehr und mehr Ausdr&uuml;cke in einem einzigen Ausdruck kombiniert werden; zum Beispiel kann ein Geschwindigkeitszuwachs von 35 % erreicht werden, wenn f&uuml;nf oder zehn einfache Ausdr&uuml;cke in einem Ausdruck kombiniert werden.</p>

<h2 id="BuiltIn">Interne Variablen</h2>
<p>Die folgenden Variablen sind im Programm integriert und k&ouml;nnen von jedem Script abgerufen werden. Mit Ausnahme von <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a> und <a href="#CommandLine">Befehlszeilenparametern</a> sind diese Variablen schreibgesch&uuml;tzt; das hei&szlig;t, dass deren Inhalt nicht direkt vom Script ge&auml;ndert werden kann.</p>
<h3>Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Script-Eigenschaften: <a href="#CommandLine">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Script-Einstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#BatchLines">A_BatchLines</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...mehr...)</a> </li>
  <li>Abwesenheit des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a></li>
  <li>GUI-Fenster und Men&uuml;leisten: <a href="#Gui">A_Gui</a>, <a href="#GuiControl">A_GuiControl</a>, <a href="#GuiEvent">A_GuiEvent</a>, <a href="#EventInfo">A_EventInfo</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Men&uuml;punkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#ThisMenuItem">A_ThisMenuItem</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Cursor">A_Cursor</a>, <a href="#Caret">A_CaretX</a>, <a href="#Caret">A_CaretY</a>, <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3>Sonderzeichen</h3>
<table class="info">
  <tr>
    <td>A_Space</td>
    <td><a name="Space"></a>Diese Variable enth&auml;lt ein einzelnes Leerzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> f&uuml;r weitere Details.</td>
  </tr>
  <tr>
    <td>A_Tab</td>
    <td><a name="Tab"></a>Diese Variable enth&auml;lt ein einzelnes Tabulatorzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> f&uuml;r weitere Details.</td>
  </tr>
</table>
<h3 id="prop">Script-Eigenschaften</h3>
<table class="info">
  <tr>
    <td>1, 2, 3, etc. </td>
    <td><a name="CommandLine"></a>Diese Variablen werden automatisch erstellt, sobald ein Script mit Befehlszeilenparametern gestartet wird. Sie k&ouml;nnen wie normale Variablennamen ge&auml;ndert oder abgerufen werden (zum Beispiel: %1%). Dar&uuml;ber hinaus enth&auml;lt %0% die Anzahl an &uuml;bergebenen Parametern (0 wenn keine). Weitere Informationen k&ouml;nnen bei <a href="Scripts.htm#cmd">Befehlszeilenparameter</a> gefunden werden.</td>
  </tr>
  <tr>
    <td>A_WorkingDir</td>
    <td><a name="WorkingDir"></a>Das aktuelle Arbeitsverzeichnis des Scripts, wo auf Dateien standardm&auml;&szlig;ig zugegriffen wird. Der letzte Backslash ist nur enthalten, wenn es ein Hauptverzeichnis ist. Zwei Beispiele: C:\ and C:\Eigene Dokumente. Verwendet <a href="commands/SetWorkingDir.htm">SetWorkingDir</a>, um das Arbeitsverzeichnis zu &auml;ndern.</td>
  </tr>
  <tr>
    <td>A_ScriptDir</td>
    <td><a name="ScriptDir"></a>Der vollst&auml;ndige Pfad des Verzeichnisses, wo sich das aktuelle Script befindet. Aus Gr&uuml;nden der Abw&auml;rtskompatibilit&auml;t mit AutoIt-v2 ist der letzte Backslash <strong>nur bei .aut-Scripts enthalten</strong> (selbst f&uuml;r Hauptverzeichnisse). Zum Beispiel bei <strong>.aut</strong>-Scripts: C:\Eigene Dokumente\.</td>
  </tr>
  <tr>
    <td>A_ScriptName</td>
    <td><a name="ScriptName"></a>Der Dateiname des aktuellen Scripts, ohne Pfad, z. B. EigenesScript.ahk.</td>
  </tr>
  <tr>
    <td>A_ScriptFullPath</td>
    <td><a name="ScriptFullPath"></a>Die Kombination der beiden oben genannten Variablen, um die komplette Dateispezifikation des Scripts zu erhalten, z. B. C:\Eigene Dokumente\EigenesScript.ahk.</td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd<br><span class="ver">[v1.1.01+]</span></td>
    <td>Die eindeutige ID (HWND/Handle) des versteckten Script-Hauptfensters.</td>
  </tr>
  <tr>
    <td>A_LineNumber</td>
    <td><p><a name="LineNumber"></a>Die Nummer der aktuell ausgef&uuml;hrten Zeile im Script (oder einer <a href="commands/_Include.htm">#Include-Datei</a>). Diese Zeilennummer entspricht der Zeilennummer in <a href="commands/ListLines.htm">ListLines</a>; sie kann wie in diesem Beispiel n&uuml;tzlich f&uuml;r Fehlermeldungen sein: MsgBox Konnte nicht in die Log-Datei schreiben (Zeilennummer %A_LineNumber%).</p>
    <p>  Da ein <a href="Scripts.htm#ahk2exe">kompiliertes Script</a> alle <a href="commands/_Include.htm">#Include-Dateien</a> zu einem gro&szlig;en Script zusammenf&uuml;hrt, unterscheidet sich die Zeilennummerierung m&ouml;glicherweise vom unkompilierten Modus.</p></td>
  </tr>
  <tr>
    <td>A_LineFile</td>
    <td><a name="LineFile"></a>Der vollst&auml;ndige Pfad und Name der Datei in Bezug auf <a href="#LineNumber">A_LineNumber</a>, die das Gleiche wie <a href="#ScriptFullPath">A_ScriptFullPath</a> enth&auml;lt, es sei denn, die Zeile geh&ouml;rt einer <a href="commands/_Include.htm">#Include-Datei</a> eines unkompilierten Scripts.</td>
  </tr>
  <tr>
    <td>A_ThisFunc<br> <span class="ver">[v1.0.46.16+]</span></td>
    <td><a name="ThisFunc"></a>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgef&uuml;hrt wird (ansonsten leer); zum Beispiel: EigeneFunktion. Siehe auch: <a href="Functions.htm#IsFunc">IsFunc()</a> </td>
  </tr>
  <tr>
    <td>A_ThisLabel<br> <span class="ver">[v1.0.46.16+]</span></td>
    <td><a name="ThisLabel"></a>Der Name des Labels (Subroutine), das gerade ausgef&uuml;hrt wird (ansonsten leer); zum Beispiel: EigenesLabel. Diese Variable wird aktualisiert, sobald das Script <a href="commands/Gosub.htm">Gosub</a>/<a href="commands/Return.htm">Return</a> oder <a href="commands/Goto.htm">Goto</a> ausf&uuml;hrt. Sie wird auch bei automatisch aufgerufene Labels wie <a href="commands/SetTimer.htm">Timers</a>, <a href="commands/Gui.htm#DefaultWin">GUI-Threads</a>, <a href="commands/Menu.htm">Men&uuml;punkte</a>, <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="misc/Clipboard.htm#OnClipboardChange">OnClipboardChange</a> und <a href="commands/OnExit.htm">OnExit</a> aktualisiert; allerdings wird A_ThisLabel nicht aktualisiert, wenn die Ausf&uuml;hrung in so einem Label &quot;hineinf&auml;llt&quot;; sobald das passiert, erh&auml;lt A_ThisLabel den vorherigen Wert. Siehe auch: <a href="#ThisHotkey">A_ThisHotkey</a> und <a href="Functions.htm#IsLabel">IsLabel()</a> </td>
  </tr>
  <tr>
    <td>A_AhkVersion</td>
    <td><a name="AhkVersion"></a>Bei Versionen vor 1.0.22 ist diese Variable leer. Ansonsten enth&auml;lt sie die Version von AutoHotkey, die das Script ausf&uuml;hrt, wie z. B. 1.0.22. Im Falle eines <a href="Scripts.htm#ahk2exe">kompilierten Scripts</a> wird die urspr&uuml;nglich verwendete Version gemeldet, womit es kompiliert wurde. Durch das Format der Versionsnummer kann ein Script mit &quot;&gt;&quot; oder &quot;&gt;=&quot; pr&uuml;fen, ob A_AhkVersion gr&ouml;&szlig;er als eine minimale Versionsnummer wie im diesen Beispiel ist: if A_AhkVersion &gt;= 1.0.25.07</td>
  </tr>
  <tr>
    <td>A_AhkPath</td>
    <td><p><a name="AhkPath"></a>F&uuml;r unkompilierte Scripts: Der vollst&auml;ndige Pfad und Name der EXE-Datei, die das aktuelle Script gerade ausf&uuml;hrt. Zum Beispiel: C:\Programme\AutoHotkey\AutoHotkey.exe</p>
    <p>F&uuml;r <a href="Scripts.htm#ahk2exe">kompilierte Scripts</a>: Das gleiche wie oben, nur dass das AutoHotkey-Verzeichnis mithilfe des Registrierungseintrags <em>HKEY_LOCAL_MACHINE\SOFTWARE\AutoHotkey\InstallDir</em> ermittelt wird. Wenn kein Eintrag gefunden wird, dann ist A_AhkPath leer.</p></td>
  </tr>
  <tr>
  <tr>
    <td>A_IsUnicode</td>
    <td><a name="IsUnicode"></a>In Unicode-Versionen enth&auml;lt diese Variable eine 1 (wahr). In ANSI-Versionen ist sie unbestimmt, daher falsch.</td>
  </tr>
  <tr>
    <td>A_IsCompiled</td>
    <td><a name="IsCompiled"></a>Enth&auml;lt eine 1, wenn das Script als eine <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgef&uuml;hrt wird, ansonsten nichts.</td>
  </tr>
  <tr>
    <td>A_ExitReason</td>
    <td><a name="ExitReason"></a>Der aktuellste Grund, wodurch das Script beendet wurde. Die Variable ist leer, es sei denn, das Script hat eine <a href="commands/OnExit.htm">OnExit</a>-Subroutine, die zurzeit ausgef&uuml;hrt wird oder mindestens einmal durch einen Exit-Versuch aufgerufen wurde. Siehe <a href="commands/OnExit.htm">OnExit</a> f&uuml;r weitere Details.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr>
    <td>A_YYYY</td>
    <td><a name="YYYY"></a>Aktuelles 4-stelliges Jahr (z. B. 2004). Gleichbedeutend mit A_Year. Hinweis: Um eine formatierte Zeit oder ein formatiertes Datum in Abh&auml;ngigkeit des Gebietsschemas oder der Sprache abzurufen, verwendet &quot;<a href="commands/FormatTime.htm">FormatTime</a>, Ausgabevariable&quot; (Zeit und langes Datum) oder &quot;<a href="commands/FormatTime.htm">FormatTime</a>, Ausgabevariable,, LongDate&quot; (ermittelt ein Datum im langen Format).</td>
  </tr>
  <tr>
    <td>A_MM</td>
    <td><a name="MM"></a>Aktueller zweistelliger Monat (01-12). Gleichbedeutend mit A_Mon.</td>
  </tr>
  <tr>
    <td>A_DD</td>
    <td><a name="DD"></a>Aktueller zweistelliger Tag des Monats (01-31). Gleichbedeutend mit A_MDay.</td>
  </tr>
  <tr>
    <td>A_MMMM</td>
    <td><a name="MMMM"></a>Aktueller vollst&auml;ndiger Monatsname in der aktuellen Sprache des Benutzers, z. B. Juli</td>
  </tr>
  <tr>
    <td>A_MMM</td>
    <td><a name="MMM"></a>Aktueller abgek&uuml;rzter Monatsname in der aktuellen Sprache des Benutzers, z. B. Jul</td>
  </tr>
  <tr>
    <td>A_DDDD</td>
    <td><a name="DDDD"></a>Aktueller vollst&auml;ndiger Wochentagsname in der aktuellen Sprache des Benutzers, z. B. Sonntag</td>
  </tr>
  <tr>
    <td>A_DDD</td>
    <td><a name="DDD"></a>Aktueller abgek&uuml;rzter Wochentagsname in der aktuellen Sprache des Benutzers, z. B. So</td>
  </tr>
  <tr>
    <td>A_WDay</td>
    <td><a name="WDay"></a>Aktueller einstelliger Wochentag (1-7). 1 ist Sonntag in allen Gebietsschemen.</td>
  </tr>
  <tr>
    <td>A_YDay</td>
    <td><a name="YDay"></a>Aktueller Tag des Jahres (1-366). Der Wert wird nicht mit Nullen aufgef&uuml;llt, z. B. wird 9 abgerufen, nicht 009. Ein Wert kann wie folgt mit Nullen aufgef&uuml;llt werden: <a href="commands/FormatTime.htm">FormatTime</a>, Ausgabevariable, , YDay0 </td>
  </tr>
  <tr>
    <td>A_YWeek</td>
    <td><a name="YWeek"></a>Aktuelles Jahr und Wochennummer (z. B. 200453) nach ISO 8601. Um das Jahr von der Woche zu trennen, verwendet <em><a href="commands/StringLeft.htm">StringLeft</a>, Jahr, A_YWeek, 4</em> und <em><a href="commands/StringLeft.htm">StringRight</a>, Woche, A_YWeek, 2</em>. Genaue Definition von A_YWeek: Wenn die Woche den 1. Januar, sowie vier oder mehr Tage des neuen Jahres hat, dann wird sie als Woche 1 betrachtet. Ansonsten ist sie die letzte Woche des vorherigen Jahres und die nachfolgende Woche die Woche 1.</td>
  </tr>
  <tr>
    <td>A_Hour</td>
    <td><a name="Hour"></a>Aktuelle zweistellige Stunde (00-23) im 24-Stunden-Format. Um die Stunde im 12-Stunden-Format sowie die Indikatoren AM bzw. PM abzurufen, befolgt dieses Beispiel: <a href="commands/FormatTime.htm">FormatTime</a>, Ausgabevariable, , h:mm:ss tt </td>
  </tr>
  <tr>
    <td>A_Min</td>
    <td><p><a name="Min"></a>Aktuelle zweistellige Minute (00-59).</p>    </td>
  </tr>
  <tr>
    <td>A_Sec</td>
    <td><a name="Sec"></a>Aktuelle zweistellige Sekunde (00-59).</td>
  </tr>
  <tr>
    <td>A_MSec</td>
    <td><a name="MSec"></a>Aktuelle dreistellige Millisekunde (000-999). Um die f&uuml;hrenden Nullen zu entfernen, befolgt dieses Beispiel: Millisekunden := A_MSec + 0</td>
  </tr>
  <tr>
    <td>A_Now</td>
    <td><a name="Now"></a>Die aktuelle Ortszeit im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. Hinweis: Datum- und Zeitberechnung kann mithilfe von <a href="commands/EnvAdd.htm">EnvAdd</a> und <a href="commands/EnvSub.htm">EnvSub</a> durchgef&uuml;hrt werden. Au&szlig;erdem kann <a href="commands/FormatTime.htm">FormatTime</a> das Datum und/oder Zeit in Bezug auf das aktuelle Gebietsschema oder den aktuellen Einstellungen formatieren.</td>
  </tr>
  <tr>
    <td>A_NowUTC</td>
    <td><a name="NowUTC"></a>Die koordinierte Weltzeit (UTC) im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grunds&auml;tzlich das Gleiche wie


 Greenwich Mean Time

(GMT).</td>
  </tr>
  <tr>
    <td>A_TickCount</td>
    <td><p><a name="TickCount"></a>Ruft die Anzahl der Millisekunden ab, die seit dem Systemstart verstrichen sind. Wenn A_TickCount in eine Variable gespeichert wird, dann kann die verstrichene Zeit sp&auml;ter gemessen werden, indem die Variable vom neuesten A_TickCount-Wert abgezogen wird. Zum Beispiel:</p>
        <pre>Startzeit := A_TickCount
Sleep, 1000
Ablaufzeit := A_TickCount - Startzeit
MsgBox,  %Ablaufzeit% Millisekunden sind verstrichen.</pre>
<p>Falls eine h&ouml;here Genauigkeit als 10 ms von A_TickCount ben&ouml;tigt wird, verwendet <a href="commands/DllCall.htm#QPC">QueryPerformanceCounter()</a>.</p>
</td>
  </tr>
</table>
<h3 id="settings">Script-Einstellungen</h3>
<table class="info">
  <tr>
    <td>A_IsSuspended</td>
    <td><a name="IsSuspended"></a>Enth&auml;lt 1, wenn das Script <a href="commands/Suspend.htm">unterbrochen</a> ist, andernfalls 0.</td>
  </tr>
  <tr>
    <td>A_IsPaused<br> <span class="ver">[v1.0.48+]</span></td>
    <td><a name="IsPaused"></a>Enth&auml;lt 1, wenn der <a href="misc/Threads.htm">Thread</a> unmittelbar unterhalb des aktuellen Threads <a href="commands/Pause.htm">pausiert</a> ist. Ansonsten enth&auml;lt die Variable eine 0.</td>
  </tr>
  <tr>
    <td>A_IsCritical<br> <span class="ver">[v1.0.48+]</span></td>
    <td><a name="IsCritical"></a>Enth&auml;lt 0, wenn <a href="commands/Critical.htm">Critical</a> f&uuml;r den <a href="misc/Threads.htm">aktuellen Thread</a> deaktiviert ist. Ansonsten enth&auml;lt sie ein Integer gr&ouml;&szlig;er als 0, n&auml;mlich die <a href="commands/Critical.htm#Interval">Nachrichten&uuml;berpr&uuml;fungsfrequenz</a> von Critical. Da &quot;Critical 0&quot; den kritischen Status entfernt, kann der aktuelle Status von Critical mithilfe von <em>Alt_IsCritical := A_IsCritical</em> gespeichert und sp&auml;ter mit <em>Critical% Alt_IsCritical%</em> wiederhergestellt werden.</td>
  </tr>
  <tr>
    <td>A_BatchLines</td>
    <td><a name="BatchLines"></a>(gleichbedeutend mit A_NumBatchLines) Der aktuell gesetzte Wert von <a href="commands/SetBatchLines.htm">SetBatchLines</a>. Beispiele: 200 oder 10ms (je nach Format).</td>
  </tr>
  <tr>
    <td>A_TitleMatchMode</td>
    <td><a name="TitleMatchMode"></a>Der aktuell gesetzte Modus von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>: 1, 2, 3 oder RegEx.</td>
  </tr>
  <tr>
    <td>A_TitleMatchModeSpeed</td>
    <td><a name="TitleMatchModeSpeed"></a>Die aktuell gesetzte &Uuml;bereinstimmungsgeschwindigkeit (schnell oder langsam) von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr>
    <td>A_DetectHiddenWindows</td>
    <td><a name="DetectHiddenWindows"></a>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>.</td>
  </tr>
  <tr>
    <td>A_DetectHiddenText</td>
    <td><a name="DetectHiddenText"></a>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>.</td>
  </tr>
  <tr>
    <td>A_AutoTrim</td>
    <td><a name="AutoTrim"></a>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/AutoTrim.htm">AutoTrim</a>. </td>
  </tr>
  <tr>
    <td>A_StringCaseSense</td>
    <td><a name="StringCaseSense"></a>Der aktuell gesetzte Modus (On, Off oder Locale) von <a href="commands/StringCaseSense.htm">StringCaseSense</a>. </td>
  </tr>
  <tr>
    <td>A_FileEncoding</td>
    <td><a name="FileEncoding"></a><span class="ver">[AHK_L 46+]</span> Enth&auml;lt die Standardkodierung f&uuml;r verschiedene Befehle; siehe <a href="commands/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr>
    <td>A_FormatInteger</td>
    <td><a name="FormatInteger"></a>Das aktuell gesetzte Integer-Format (H oder D) von <a href="commands/SetFormat.htm">SetFormat</a>. <span class="ver">[AHK_L 42+]:</span> Kann auch ein kleingeschriebenes h enthalten.</td>
  </tr>
  <tr>
    <td>A_FormatFloat</td>
    <td><a name="FormatFloat"></a>Das aktuell gesetzte Flie&szlig;kommazahlenformat von <a href="commands/SetFormat.htm">SetFormat</a>. </td>
  </tr>
  <tr>
    <td>A_KeyDelay</td>
    <td><a name="KeyDelay"></a>Die aktuell gesetzte Verz&ouml;gerung von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> (immer dezimal, nicht hexadezimal). Diese Verz&ouml;gerung gilt f&uuml;r den traditionellen SendEvent-Modus, nicht f&uuml;r <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>.</td>
  </tr>
  <tr>
    <td>A_WinDelay</td>
    <td><a name="WinDelay"></a>Die aktuell gesetzte Verz&ouml;gerung von <a href="commands/SetWinDelay.htm">SetWinDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr>
    <td>A_ControlDelay</td>
    <td><a name="ControlDelay"></a>Die aktuell gesetzte Verz&ouml;gerung von <a href="commands/SetControlDelay.htm">SetControlDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr>
    <td>A_MouseDelay</td>
    <td><a name="MouseDelay"></a>Die aktuell gesetzte Verz&ouml;gerung von <a href="commands/SetMouseDelay.htm">SetMouseDelay</a> (immer dezimal, nicht hexadezimal). Diese Verz&ouml;gerung gilt f&uuml;r den traditionellen SendEvent-Modus, nicht f&uuml;r <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>.</td>
  </tr>
  <tr>
    <td>A_DefaultMouseSpeed</td>
    <td><a name="DefaultMouseSpeed"></a>Die aktuell gesetzte Geschwindigkeit von <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr>
    <td>A_IconHidden</td>
    <td><a name="IconHidden"></a>Enth&auml;lt eine 1, wenn das Tray-Icon zurzeit versteckt ist, andernfalls 0. Das Icon kann mithilfe von <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> oder des <a href="commands/Menu.htm">Menu</a>-Befehls versteckt werden.</td>
  </tr>
  <tr>
    <td>A_IconTip</td>
    <td><a name="IconTip"></a>Leer, es sei denn, ein benutzerdefinierter ToolTip wurde f&uuml;r das Tray-Icon mithilfe von <em><em><a href="commands/Menu.htm"><em>Menu</em></a>, Tray, Tip</em></em> angegeben, in diesem Fall enth&auml;lt die Variable den Text des ToolTips. </td>
  </tr>
  <tr>
    <td>A_IconFile</td>
    <td><a name="IconFile"></a>Leer, es sei denn, ein Tray-Icon wurde mithilfe von <a href="commands/Menu.htm"><em>Menu</em></a><em>, tray, icon</em> angegeben, in diesem Fall enth&auml;lt die Variable den vollst&auml;ndigen Pfad und Name der Icon-Datei. <strong>Bekannte Einschr&auml;nkung:</strong> Dieser Pfad kann falsch sein, falls das Script urspr&uuml;nglich einen relativen Pfad zu einer DLL-Systemdatei &uuml;bergab; zum Beispiel <em>Menu, Tray, Icon, user32.dll, 2</em>.</td>
  </tr>
  <tr>
    <td>A_IconNumber</td>
    <td><a name="IconNumber"></a>Leer, wenn A_IconFile leer ist. Ansonsten enth&auml;lt sie die Nummer des Icons in A_IconFile (typischerweise 1).</td>
  </tr>
</table>
<h3>Abwesenheit des Benutzers </h3>
<table class="info">
  <tr>
    <td>A_TimeIdle</td>
    <td><a name="TimeIdle"></a>Ruft die Anzahl der Millisekunden ab, die seit der letzten Tastatur-, Maus- oder sonstige Eingabe verstrichen sind. Dadurch kann festgestellt werden, ob der Benutzer abwesend ist. Diese Variable ist leer, es sei denn, das Betriebssystem ist Windows 2000, XP oder h&ouml;her. Physische Benutzereingaben sowie k&uuml;nstlich erzeugte Eingaben von <strong>beliebigen</strong> Programmen oder Scripts (z. B. der <a href="commands/Send.htm">Send</a>- oder <a href="commands/MouseMove.htm">MouseMove</a>-Befehl) setzen diesen Wert wieder auf 0. Da dieser Wert in Zehnerschritten erh&ouml;ht wird, sollte nicht &uuml;berpr&uuml;ft werden, ob der Wert einem anderen Wert entspricht. &Uuml;berpr&uuml;ft stattdessen, ob der Wert gr&ouml;&szlig;er oder kleiner als ein anderer Wert ist. Zum Beispiel: IfGreater, A_TimeIdle, 600000, MsgBox, Die letzte Tastatur- oder Mausaktivit&auml;t erfolgte vor ca. 10 Minuten. </td>
  </tr>
  <tr>
    <td>A_TimeIdlePhysical</td>
    <td><p><a name="TimeIdlePhysical"></a>&Auml;hnlich wie oben, es werden jedoch k&uuml;nstliche Tastatureingaben und/oder Mausklicks ignoriert, sobald der entsprechende Hook (<a href="commands/_InstallKeybdHook.htm">Tastatur</a> oder <a href="commands/_InstallMouseHook.htm">Maus</a>) installiert wird; das hei&szlig;t, dass die Variable nur auf physische Ereignisse reagiert. Dadurch wird verhindert, dass simulierte Tastatureingaben und Mausklicks f&auml;lschlicherweise die Anwesenheit des Benutzers anzeigen. Falls kein Hook installiert ist, dann ist diese Variable gleichbedeutend mit A_TimeIdle. Wenn nur ein Hook installiert ist, dann beeinflusst nur diese Art von physischer Eingabe die interne Variable A_TimeIdlePhysical (die Eingabe von einem anderen/nicht installierten Hook, sowohl physische als auch k&uuml;nstliche, hat kein Effekt).</p>    </td>
  </tr>
</table>
<h3>GUI-Fenster und Men&uuml;leisten</h3>
<table class="info">
  <tr>
    <td>A_Gui</td>
    <td><a name="Gui"></a>Die <a href="commands/Gui.htm">GUI</a>-Fensternummer, welche den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Diese Variable ist leer, es sei denn, ein GUI-Steuerelement, ein Men&uuml;leistenpunkt oder ein Ereignis wie GuiClose/GuiEscape hat den aktuellen Thread gestartet.</td>
  </tr>
  <tr>
    <td>A_GuiControl</td>
    <td><a name="GuiControl"></a>Der zugewiesene Variablenname des GUI-Steuerelements, welcher den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Fehlt dem Steuerelement eine <a href="commands/Gui.htm#Events">zugewiesene Variable</a>, dann enth&auml;lt A_GuiControl stattdessen die ersten 63 Zeichen des Textes/der Bezeichnung (wird h&auml;ufiger benutzt, damit nicht jeder Schaltfl&auml;che ein Variablennamen zugewiesen werden muss). A_GuiControl ist leer, sobald: 1) A_Gui leer ist; 2) ein GUI-Men&uuml;leistenpunkt oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat; 3) dem Steuerelement eine zugewiesene Variable sowie eine Bezeichnung fehlt; oder 4) das Steuerelement nicht l&auml;nger vorhanden ist, welches den aktuellen Thread urspr&uuml;nglich gestartet hat (z. B. durch <a href="commands/Gui.htm#Destroy">Gui Destroy</a>).</td>
  </tr>
  <tr>
    <td><a name="GuiWidth"></a>A_GuiWidth<br> A_GuiHeight</td>
    <td>Diese Variablen enthalten die Breite und H&ouml;he des GUI-Fensters, wenn sie in einer <a href="commands/Gui.htm#GuiSize">GuiSize-Subroutine</a> verwendet werden. Sie beziehen sich auf den Client-Bereich des GUI-Fensters, ohne Titelleiste, Men&uuml;leiste und Rahmen.</td>
  </tr>
  <tr>
    <td><a name="GuiX"></a><a name="GuiY" id="GuiY"></a>A_GuiX<br> A_GuiY</td>
    <td>Diese Variablen enthalten die X- und Y-Koordinaten f&uuml;r <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>- und <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>-Ereignisse. Die Koordinaten beziehen sich auf die linke obere Ecke des Fensters.</td>
  </tr>
  <tr>
    <td>A_GuiEvent<br><span class="small80">or A_GuiControlEvent</span></td>
    <td><p><a name="GuiControlEvent"></a><a name="GuiEvent"></a>Der Typ des Ereignisses, welches den <a href="misc/Threads.htm"><a href="misc/Threads.htm"><a href="misc/Threads.htm">aktuellen Thread</a></a></a> gestartet hat. Falls der Thread nicht mithilfe einer <a href="commands/Gui.htm">GUI-Aktion</a> gestartet wurde, dann ist diese Variable leer. Ansonsten enth&auml;lt sie einen der folgenden Strings:</p>
      <p><strong>Normal</strong>: Das Ereignis wurde durch einen Linksklick oder durch Tastatureingaben ausgel&ouml;st (Pfeiltasten, Tabulatortaste, Leertaste, unterstrichene Tastenkombination und so weiter). Dieser Wert wird auch bei Men&uuml;leistenpunkte und Sonderereignisse wie GuiClose und GuiEscape verwendet.</p>
      <p><strong>DoubleClick</strong>: Das Ereignis wurde durch einen Doppelklick ausgel&ouml;st. Hinweis: Der erste Klick des Doppelklicks verursacht weiterhin das Ereignis &quot;<em>Normal</em>&quot;, das zuerst empfangen wird. Mit anderen Worten wird die Subroutine zweimal ausgef&uuml;hrt: beim ersten und danach beim zweiten Klick.</p>
      <p><strong>RightClick</strong>: Gilt nur f&uuml;r <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/ListView.htm">ListViews</a> und <a href="commands/TreeView.htm">TreeViews</a>.</p>
      <p><strong>Kontextabh&auml;ngige Werte: </strong>F&uuml;r weitere Details, siehe <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#Slider">Slider</a>, <a href="commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="commands/ListView.htm">ListView</a> und <a href="commands/TreeView.htm">TreeView</a>.</p>
    </td>
  </tr>
  <tr>
    <td>A_EventInfo</td>
    <td><p><a name="EventInfo"></a>Enth&auml;lt zus&auml;tzliche Informationen &uuml;ber die folgenden Ereignisse:</p>
      <ul>
        <li>Das <a href="misc/Clipboard.htm#OnClipboardChange">OnClipboardChange</a>-Label</li>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
        <li><a href="commands/RegisterCallback.htm">RegisterCallback()</a></li>
        <li><a href="commands/Gui.htm#label">GUI-Ereignisse</a>, n&auml;mlich <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#ListBox">ListBox</a>, <a href="commands/ListView.htm">ListView</a>, <a href="commands/TreeView.htm">TreeView</a> und <a href="commands/GuiControls.htm#StatusBar">StatusBar</a>. Falls keine zus&auml;tzlichen Informationen &uuml;ber ein Ereignis vorhanden sind, dann enth&auml;lt A_EventInfo eine 0.</li>
      </ul></td>
  </tr>
</table>
<p>Hinweis: Im Gegensatz zu Variablen wie A_ThisHotkey beh&auml;lt jeder <a href="misc/Threads.htm">Thread</a> seinen eigenen Wert f&uuml;r A_Gui, A_GuiControl, A_GuiX/Y, A_GuiEvent und A_EventInfo. Sobald deshalb ein Thread von einem anderen Thread unterbrochen und danach fortgesetzt wird, dann werden weiterhin die urspr&uuml;nglichen/richtigen Werte f&uuml;r diese Variablen verwendet.</p>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Men&uuml;punkte </h3>
<table class="info">
  <tr>
    <td>A_ThisMenuItem</td>
    <td><a name="ThisMenuItem"></a>Der Name des zuletzt ausgew&auml;hlten <a href="commands/Menu.htm">benutzerdefinierten Men&uuml;punkts</a> (ansonsten leer).</td>
  </tr>
  <tr>
    <td>A_ThisMenu</td>
    <td><a name="ThisMenu"></a>Enth&auml;lt den Namen des Men&uuml;s, in dem A_ThisMenuItem ausgew&auml;hlt wurde.</td>
  </tr>
  <tr>
    <td>A_ThisMenuItemPos</td>
    <td><a name="ThisMenuItemPos"></a>Eine Nummer, die die <u>aktuelle</u> Position von A_ThisMenuItem in A_ThisMenu kennzeichnet. F&uuml;r das erste Element die Nummer 1, f&uuml;r das zweite Element die Nummer 2, usw. Trennlinien werden mitgez&auml;hlt. Diese Variable ist leer, sobald A_ThisMenuItem leer oder nicht l&auml;nger in A_ThisMenu vorhanden ist. Sie ist auch leer, wenn A_ThisMenu selbst nicht mehr existiert.</td>
  </tr>
  <tr>
    <td>A_ThisHotkey</td>
    <td><p><a name="ThisHotkey"></a>Der Tastenname des zuletzt ausgef&uuml;hrten <a href="Hotkeys.htm">Hotkeys</a> oder <a href="Hotstrings.htm">Hotstrings ohne Automatisches Ersetzen</a> (ansonsten leer), z. B. #z. Dieser Wert &auml;ndert sich, sobald der <a href="misc/Threads.htm">aktuelle Thread</a> durch einen anderen Hotkey unterbrochen wird, deshalb sollte sichergestellt werden, diesen Wert sofort in eine andere Variable zu kopieren, falls der Bedarf besteht, den urspr&uuml;nglichen Wert sp&auml;ter in einer Subroutine zu verwenden.</p>
      <p>Wenn ein Hotkey zuerst erstellt wird (entweder mit einem <a href="commands/Hotkey.htm">Hotkey-Befehl</a> oder einem <a href="Hotkeys.htm">Label mit zwei Doppelpunkten</a>), dann entsteht aus dem Tastennamen und der Reihenfolge der Modifikatoren ein permanenter Name des Hotkeys. Siehe auch: <a href="#ThisLabel">A_ThisLabel</a></p></td>
  </tr>
  <tr>
    <td>A_PriorHotkey</td>
    <td><a name="PriorHotkey"></a>Das Gleiche wie oben, aber f&uuml;r den vorherigen Hotkey. Ansonsten ist sie leer. </td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td><span class="ver">[v1.1.01+]:</span> Der Tastenname des vorletzten Eintrags im <a href="commands/KeyHistory.htm">Tastenverlauf</a>, ausgeschlossen die erzeugten Tasten von AutoHotkey-Scripts, oder ein leerer String, falls kein entsprechender Eintrag vorhanden ist. Damit diese Variable verwendet werden kann, muss der Tastatur- oder Maus-Hook installiert und der Tastenverlauf aktiviert sein. Siehe <a href="commands/KeyHistory.htm">KeyHistory</a>.</td>
  </tr>
  <tr>
    <td>A_TimeSinceThisHotkey</td>
    <td><a name="TimeSinceThisHotkey"></a>Ruft die Anzahl der Millisekunden ab, die seit dem Dr&uuml;cken von A_ThisHotkey verstrichen sind. Sie enth&auml;lt eine -1, sobald A_ThisHotkey leer ist.</td>
  </tr>
  <tr>
    <td>A_TimeSincePriorHotkey</td>
    <td><a name="TimeSincePriorHotkey"></a>Ruft die Anzahl der Millisekunden ab, die seit dem Dr&uuml;cken von A_PriorHotkey verstrichen sind.  Sie enth&auml;lt eine -1, sobald A_PriorHotkey leer ist.</td>
  </tr>
  <tr>
    <td>A_EndChar</td>
    <td><a name="EndChar"></a>Das <a href="Hotstrings.htm#EndChars">Endzeichen</a>, welches vom Benutzer gedr&uuml;ckt wurde, um den aktuellsten <a href="Hotstrings.htm">Hotstring ohne Automatisches Ersetzen</a> auszul&ouml;sen. Wenn kein Endzeichen ben&ouml;tigt wurde (wegen der *-Option), dann wird diese Variable leer gemacht.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen </h3>
<table class="info">
  <tr>
    <td>ComSpec<br> <span class="ver">[v1.0.43.08+]</span></td>
    <td><a name="ComSpec" id="ComSpec"></a>Enth&auml;lt denselben String wie die ComSpec-Umgebungsvariable (z. B. C:\Windows\system32\cmd.exe). Diese Variable wird oft mit <a href="commands/Run.htm">Run/RunWait</a> verwendet. Hinweis: Das Pr&auml;fix A_ ist bei dieser Variable nicht vorhanden.</td>
  </tr>
  <tr>
    <td>A_Temp<br> <span class="ver">[v1.0.43.09+]</span></td>
    <td><a name="Temp"></a>Der vollst&auml;ndige Pfad und Name des Ordners, der tempor&auml;re Dateien enth&auml;lt (z. B. C:\DOCUME~1\Benutzername\LOCALS~1\Temp). Der Pfad wird von einem der folgenden Orten abgerufen (in dieser Reihenfolge): 1) die <a href="#env">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) das Windows-Verzeichnis. <a href="#WorkingDir">A_WorkingDir</a> in Windows 9x, wenn weder TMP noch TEMP existiert.</td>
  </tr>
  <tr>
    <td>A_OSType</td>
    <td> <a name="OSType"></a>Der Typ des aktuell ausgef&uuml;hrten Betriebssystems.&nbsp; Entweder WIN32_WINDOWS (d. h. Windows 95/98/ME) oder WIN32_NT (d. h. Windows NT4/2000/XP/2003/Vista/7).</td>
  </tr>
  <tr>
    <td>A_OSVersion</td>
    <td> <p><a name="OSVersion"></a>Einer der folgenden Strings: WIN_7 <span class="ver">[ben&ouml;tigt AHK_L 42+]</span>, WIN_VISTA <span class="ver">[ben&ouml;tigt v1.0.44.13+]</span>, WIN_2003, WIN_XP, WIN_2000, WIN_NT4, WIN_95, WIN_98, WIN_ME. Zum Beispiel:</p>
      <pre>If A_OSVersion in WIN_NT4,WIN_95,WIN_98,WIN_ME  <em>; Hinweis: Keine Leerzeichen um Kommas.</em>
{
    MsgBox Dieser Script ben&ouml;tigt Windows 2000/XP oder h&ouml;her.
    ExitApp
}</pre></td>
  </tr>
  <tr>
    <td>A_PtrSize</td>
    <td><a name="PtrSize"></a><span class="ver">[AHK_L 42+]:</span> Enth&auml;lt die Gr&ouml;&szlig;e eines Pointers in Bytes. Entweder 4 (32-Bit) oder 8 (64-Bit).</td>
  </tr>
  <tr>
  <tr>
    <td>A_Language</td>
    <td><a name="Language"></a>Die Standardsprache des Systems, die ein <a href="misc/Languages.htm">vierstelliger Code</a> ist.</td>
  </tr>
  <tr>
    <td>A_ComputerName</td>
    <td><a name="ComputerName"></a>Der Name des Computers, wie im Netzwerk angezeigt. </td>
  </tr>
  <tr>
    <td>A_UserName</td>
    <td><a name="UserName"></a>Der Anmeldename des Benutzers, der dieses Script gestartet hat. </td>
  </tr>
  <tr>
    <td>A_WinDir</td>
    <td><a name="WinDir"></a>Das Windows-Verzeichnis. Zum Beispiel: C:\Windows</td>
  </tr>
  <tr>
    <td>A_ProgramFiles<br> oder ProgramFiles</td>
    <td><a name="ProgramFiles"></a>Das Programmverzeichnis (z. B. C:\Programme). Seit v1.0.43.08 kann das Pr&auml;fix A_ weggelassen werden, um den Wechsel auf <a href="commands/_NoEnv.htm">#NoEnv</a> zu erleichtern.</td>
  </tr>
  <tr>
    <td>A_AppData<br> <span class="ver">[v1.0.43.09+]</span></td>
    <td><a name="AppData"></a>Der vollst&auml;ndige Pfad und Name des Ordners mit anwendungsspezifischen Daten des aktuellen Benutzers. Zum Beispiel: C:\Dokumente und Einstellungen\Benutzername\Anwendungsdaten</td>
  </tr>
  <tr>
    <td>A_AppDataCommon<br> <span class="ver">[v1.0.43.09+]</span></td>
    <td><a name="AppDataCommon"></a>Der vollst&auml;ndige Pfad und Name des Ordners mit anwendungsspezifischen Daten aller Benutzer.</td>
  </tr>
  <tr>
    <td>A_Desktop</td>
    <td><a name="Desktop"></a>Der vollst&auml;ndige Pfad und Name des Ordners mit den Desktop-Dateien des aktuellen Benutzers.</td>
  </tr>
  <tr>
    <td>A_DesktopCommon</td>
    <td><a name="DesktopCommon"></a>Der vollst&auml;ndige Pfad und Name des Ordners mit den Desktop-Dateien aller Benutzer.</td>
  </tr>
  <tr>
    <td>A_StartMenu</td>
    <td><a name="StartMenu"></a>Der vollst&auml;ndige Pfad und Name des Startmen&uuml;ordners vom aktuellen Benutzer.</td>
  </tr>
  <tr>
    <td>A_StartMenuCommon</td>
    <td><a name="StartMenuCommon"></a>Der vollst&auml;ndige Pfad und Name des Startmen&uuml;ordners aller Benutzer.</td>
  </tr>
  <tr>
    <td>A_Programs</td>
    <td><a name="Programs"></a>Der vollst&auml;ndige Pfad und Name des Programmordners im Startmen&uuml; des aktuellen Benutzers.</td>
  </tr>
  <tr>
    <td>A_ProgramsCommon</td>
    <td><a name="ProgramsCommon"></a>Der vollst&auml;ndige Pfad und Name des Programmordners im Startmen&uuml; aller Benutzer.</td>
  </tr>
  <tr>
    <td>A_Startup</td>
    <td><a name="Startup"></a>Der vollst&auml;ndige Pfad und Name des Autostart-Ordners im Startmen&uuml; des aktuellen Benutzers.</td>
  </tr>
  <tr>
    <td>A_StartupCommon</td>
    <td><a name="StartupCommon"></a>Der vollst&auml;ndige Pfad und Name des Autostart-Ordners im Startmen&uuml; aller Benutzer.</td>
  </tr>
  <tr>
    <td>A_MyDocuments</td>
    <td><a name="MyDocuments"></a>Der vollst&auml;ndige Pfad und Name von &quot;Eigene Dokumente&quot; des aktuellen Benutzers. In Gegensatz zu den anderen Variablen ist hier der letzte Backslash nicht vorhanden, falls der Ordner das Hauptverzeichnis ist. Zum Beispiel enth&auml;lt sie in diesem Fall M: anstelle von M:\</td>
  </tr>
  <tr>
    <td>A_IsAdmin</td>
    <td><p><a name="IsAdmin"></a>Wenn der aktuelle Benutzer Administratorrechte hat, dann enth&auml;lt diese Variable eine 1. Ansonsten enth&auml;lt sie eine 0. In Windows 95/98/Me enth&auml;lt diese Variable immer eine 1.</p>
    <p><a name="RequireAdmin" id="RequireAdmin"></a>In Windows Vista oder h&ouml;her ben&ouml;tigen einige Scripts m&ouml;glicherweise Administratorrechte, damit sie richtig funktionieren (z. B. ein Script, das mit Prozessen oder Fenster interagiert, die als Administrator ausgef&uuml;hrt werden). F&uuml;gt daf&uuml;r das Folgende am Anfang des Scripts hinzu:</p>
    <pre>if not A_IsAdmin
{
   Run *RunAs &quot;%A_ScriptFullPath%&quot;  <em>; Ben&ouml;tigt v1.0.92.01+</em>
   ExitApp
}</pre></td>
  </tr>
  <tr>
    <td><p>A_ScreenWidth<br> A_ScreenHeight</p>    </td>
    <td><p><a name="Screen"></a>Die Breite und H&ouml;he des prim&auml;ren Monitors in Pixel (z. B. 1024 und 768).</p>
      <p>Um die Abmessungen von anderen Monitoren zu erfassen, verwendet <a href="commands/SysGet.htm">SysGet</a>.</p>
      <p>Um stattdessen die Breite und H&ouml;he des gesamten Desktops zu ermitteln (auch wenn es sich &uuml;ber mehrere Monitore erstreckt), verwendet das folgende Beispiel (in Windows 95/NT jedoch werden beide folgende Variablen auf 0 gesetzt):<br> <a href="commands/SysGet.htm">SysGet</a>, VirtuelleBreite, 78<br> <a href="commands/SysGet.htm">SysGet</a>, VirtuelleH&ouml;he, 79</p>
    <p>Dar&uuml;ber hinaus kann <a href="commands/SysGet.htm">SysGet</a> verwendet werden, um den Arbeitsbereich eines Monitors zu erfassen, der m&ouml;glicherweise kleiner als die Gesamtfl&auml;che des Monitors ist, weil die Taskleiste und andere registrierte Desktop-Werkzeugleisten ausgeschlossen werden.</p></td>
  </tr>
  <tr>
    <td>A_IPAddress1 bis 4 </td>
    <td><a name="IPAddress"></a>Die IP-Adressen der ersten 4 Netzwerkadaptern im Computer.</td>
  </tr>
</table>
<h3>Sonstiges</h3>
<table class="info">
  <tr>
    <td>A_Cursor</td>
    <td><p><a name="Cursor"></a>Der Typ des angezeigten Mauszeigers. Sie enth&auml;lt einen der folgenden W&ouml;rter: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Abk&uuml;rzungen bei den Size-Mauszeigern sind Himmelsrichtungen, z. B. NESW = NorthEast+SouthWest (Nordosten+S&uuml;dwesten). Die handf&ouml;rmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p>
      <p>Bekannte Einschr&auml;nkung in Windows 95: Wenn der Variableninhalt mehrmals schnell aufgerufen wird (d. h. alle 500 ms oder schneller), dann ist der Benutzer wahrscheinlich nicht mehr in der Lage, einen Doppelklick durchzuf&uuml;hren. Es ist keine &Uuml;bergangsl&ouml;sung bekannt.<br>
    </p></td>
  </tr>
  <tr>
    <td>A_CaretX<br> A_CaretY</td>
    <td><p><a name="Caret"></a>Die aktuellen X- und Y-Koordinaten des Text-Cursors (Einf&uuml;gemarke). Die Koordinaten beziehen sich auf das aktive Fenster, es sei denn, <a href="commands/CoordMode.htm">CoordMode</a> wird verwendet, damit sie sich auf den ganzen Bildschirm beziehen. Wenn kein aktives Fenster vorhanden ist oder die Cursor-Position nicht ermittelt werden kann, dann sind diese Variablen leer.</p>
      <p>Mit dem folgenden Script ist es m&ouml;glich, beim Bewegen des Text-Cursors dessen aktuelle Position in einem ToolTip anzuzeigen. Beachtet, dass einige Fenster (z. B. bestimmte Versionen von MS Word) immer die gleiche Cursor-Position melden, unabh&auml;ngig von ihrer aktuellen Position.</p>
      <p>#Persistent<br> SetTimer, Cursor&uuml;berwachung, 100<br> Return<br> Cursor&uuml;berwachung:<br> ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20<br> Return</p>
      <p>Wenn der Variableninhalt mehrmals schnell aufgerufen wird (d. h. alle 500 ms oder schneller), dann ist der Benutzer wahrscheinlich nicht mehr in der Lage, einen Doppelklick durchzuf&uuml;hren. Es ist keine &Uuml;bergangsl&ouml;sung bekannt.</p></td>
  </tr>
  <tr>
    <td>Clipboard</td>
    <td>Der Inhalt der Zwischenablage, die gelesen oder beschrieben werden kann. Siehe <a href="misc/Clipboard.htm">Clipboard</a> f&uuml;r mehr Details.</td>
  </tr>
  <tr>
    <td>ClipboardAll</td>
    <td>Der gesamte Inhalt der Zwischenablage (z. B. Formatierung und Text). Siehe <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>.</td>
  </tr>
  <tr>
    <td>ErrorLevel</td>
    <td>Siehe <a href="misc/ErrorLevel.htm">ErrorLevel</a>.</td>
  </tr>
  <tr>
    <td>A_LastError</td>
    <td><a name="LastError"></a>Das Ergebnis der GetLastError()-Systemfunktion oder des letzten COM-Objektaufrufs. Weitere Informationen k&ouml;nnen in <a href="commands/DllCall.htm#LastError">DllCall()</a> und <a href="commands/Run.htm#LastError">Run/RunWait</a> gefunden werden.</td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr>
    <td>A_Index</td>
    <td><a name="Index"></a>Enth&auml;lt die Nummer des aktuellen Schleifendurchlaufs (ein 64-Bit-Integer). Zum Beispiel enth&auml;lt diese Variable die Nummer 1, wenn das Script den Schleifenk&ouml;rper zum ersten Mal ausf&uuml;hrt. Weitere Informationen k&ouml;nnen in <a href="commands/Loop.htm">Loop</a> oder <a href="commands/While.htm">While-Schleife</a> gefunden werden.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc. </td>
    <td>Diese und andere verwandte Variablen sind nur innerhalb einer <a href="commands/LoopFile.htm">Datei-Schleife</a> g&uuml;ltig.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc. </td>
    <td>Diese und andere verwandte Variablen sind nur innerhalb einer <a href="commands/LoopReg.htm">Registrierung-Schleife</a> g&uuml;ltig.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="commands/LoopReadFile.htm">dateilesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="commands/LoopParse.htm">Parsing-Schleife</a>. </td>
  </tr>
</table>

<h2 id="env">Vergleich von Umgebungsvariablen und normalen Variablen</h2>
<p>Umgebungsvariablen werden vom Betriebssystem verwaltet. Diese k&ouml;nnen in der Eingabeaufforderung aufgelistet werden, indem SET eingegeben und die Eingabetaste gedr&uuml;ckt wird.</p>
<p>Mithilfe von <a href="commands/EnvSet.htm">EnvSet</a> kann ein Script eine neue Umgebungsvariable erstellen oder den Inhalt einer bestehenden Umgebungsvariable &auml;ndern. Allerdings sind solche Erg&auml;nzungen und &Auml;nderungen nicht &ouml;ffentlich; sie werden nicht vom Rest des Systems erkannt. Eine Ausnahme bildet ein Script, das <a href="commands/Run.htm">Run</a> oder <a href="commands/Run.htm">RunWait</a> verwendet, um ein Programm auszuf&uuml;hren (oder auch ein anderes Script): solche Programme erben die Umgebungsvariablen des &uuml;bergeordneten Scripts einschlie&szlig;lich der privaten Umgebungsvariablen.</p>
<p>Seit v1.0.43.08 ist es empfehlenswert, dass alle neuen Scripts die Umgebungsvariablen wie <em>Path</em> mithilfe des folgenden Beispiels abrufen:</p>
<pre><a href="commands/EnvGet.htm">EnvGet, Ausgabevariable, Path</a>  <em>; Zur Erl&auml;uterung, siehe <a href="commands/_NoEnv.htm">#NoEnv</a>.</em></pre>
<h2 id="cap">Kapazit&auml;t und Speicher einer Variable</h2>
<ul>
  <li>Jede Variable kann bis zu 64 MB Text enthalten (dieses Limit kann mit <a href="commands/_MaxMem.htm">#MaxMem</a> erh&ouml;ht werden).</li>
  <li>Sobald einer Variable ein neuer String &uuml;bergeben wird, der l&auml;nger als der aktuelle Inhalt ist, dann wird automatisch zus&auml;tzlicher Systemspeicher reserviert.</li>
  <li>Der Speicher einer gro&szlig;en Variable kann freigegeben werden, wenn ihr nichts zugewiesen wird (z. B. Variable = &quot;&quot;).</li>
  <li>Es k&ouml;nnen beliebige viele Variablen erstellt werden. Das Programm ist so konzipiert, mehrere Millionen Variablen ohne deutlichen R&uuml;ckgang der Performance zu unterst&uuml;tzen.</li>
  <li>Befehle, Funktionen und Ausdr&uuml;cke, die numerische Eingaben akzeptieren, unterst&uuml;tzen generell eine Genauigkeit von 15 Ziffern f&uuml;r Flie&szlig;kommazahlen. F&uuml;r Integer werden 64-Bit signed Werte von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF) unterst&uuml;tzt. Alle Integer-Konstanten au&szlig;erhalb dieses Bereichs werden nicht unterst&uuml;tzt und f&uuml;hren m&ouml;glicherweise zu widerspr&uuml;chlichen Ergebnissen. Im Gegensatz dazu werden arithmetische Operationen auf Integer bei &Uuml;berlauf entgegengesetzt (z. B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>
