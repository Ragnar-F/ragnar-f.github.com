<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Input</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>Input</h1>

<p>Wartet auf die Tastatureingabe des Benutzers (nicht in Windows 9x unterstützt).</p>

<pre class="Syntax">Input [, Ausgabevariable, Optionen, Endtasten, Übereinstimmungsliste]</pre>
<h3>Parameter</h3>
<table class="info">
  <tr>
    <td width="15%"><p>Ausgabevariable</p>    </td>
    <td width="85%"><p>Der Name der Variable, in der der eingegebene Text des Benutzers gespeichert wird (standardmäßig werden künstliche Eingaben auch erfasst).</p>
      <p>Wenn dieser und die nachfolgenden Parameter weggelassen werden, dann wird jeder aktive Input-Befehl in anderen <a href="../misc/Threads.htm">Threads</a> beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort NewInput gesetzt. Im Gegensatz dazu wird der <a href="../misc/ErrorLevel.htm">ErrorLevel</a> des aktuellen Befehls auf 0 gesetzt, wenn ein vorheriger Input-Befehl beendet wurde, oder 1, wenn kein vorheriger Input-Befehl vorhanden war.</p>
      <p> Die <em>Ausgabevariable</em> speichert an sich keine Tastenanschläge. Stattdessen werden Zeichen gespeichert, die gemäß der Tastaturbelegung/Sprache des aktiven Fensters durch Tastatureingaben erzeugt wurden. Folglich werden Tastenschläge, die keine Zeichen erzeugen (z. B. PageUp und Escape) nicht gespeichert (obwohl sie mit dem unteren Parameter <em>Endtasten</em> erkannt werden).</p>
      <p>Unsichtbare Zeichen wie TAB (`t) werden direkt gespeichert. ENTER als Zeilenvorschub (`n).</p></td>
  </tr>
  <tr>
    <td>Optionen</td>
    <td><p><u>Ein String mit beliebig vielen Buchstaben (in beliebiger Reihenfolge, optional mit Leerzeichen getrennt):</u></p>
      <p><strong>B</strong>: Rücktaste (Backspace) wird ignoriert. Normalerweise wird das aktuellste gedrückte Zeichen während eines Input-Befehls entfernt, wenn die Rücktaste gedrückt wird. Hinweis: Wenn der Eingabetext sichtbar ist (z. B. in einem Editor) und die Pfeiltasten zur Navigation verwendet werden, dann entfernt die Rücktaste nach wie vor das letzte Zeichen, anstatt das Zeichen hinter dem Cursor (Einfügestrich).</p>
      <p><strong>C</strong>: Zeichengenauigkeit. Normalerweise ist die <em>Übereinstimmungsliste</em> nicht von der Groß- und Kleinschreibung abhängig (In den Versionen vor 1.0.43.03 werden nur die Buchstaben von A bis Z erkannt, aber nicht z. B. ü/Ü).</p>
      <p><strong>I</strong>: Ignoriert Eingaben, die vom AutoHotkey-Script erzeugt werden, wie z. B. der <a href="Send.htm#SendEvent">SendEvent</a>-Befehl. <a href="Send.htm#SendInput">SendInput</a> und <a href="Send.htm#SendPlay">SendPlay</a> werden allerdings immer ignoriert, unabhängig dieser Einstellung.</p>
      <p><strong>L</strong>: Länge begrenzen (z. B. L5). Die maximal erlaubte Eingabelänge. Wenn der Text die Länge erreicht, dann wird die Eingabe abgebrochen und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> erst auf das Wort Max gesetzt, wenn der Text eine Übereinstimmung in der <em>Übereinstimmungsliste</em> findet, wobei <a href="../misc/ErrorLevel.htm">ErrorLevel</a> dann auf das Wort Match gesetzt wird. Sobald die Zahl weggelassen wird, hat die Länge ein Maximum von 16383.</p>
      <p><strong>M</strong>: Modifizierte Tastatureingaben wie Steuerung+A bis Steuerung+Z werden erkannt und umgeschrieben, wenn sie ihrem realen ASCII-Zeichen entsprechen. Zum Beispiel:</p>
      <pre>Transform, CtrlC, Chr, 3 <em>; Speichert das Zeichen für Strg+C in die Variable CtrlC.</em>
Input, Ausgabevariable, L1 M
If Ausgabevariable = %CtrlC%
    MsgBox, Es wurde Steuerung+C gedrückt.
ExitApp</pre>
      <p>Hinweis: Die Zeichen Strg+A bis Strg+Z entsprechen <a href="../Functions.htm#Chr">Chr(1)</a> bis <a href="../Functions.htm#Chr">Chr(26)</a>. Mit der <strong>M</strong>-Option können sich außerdem einige Tastenanschläge wie Strg+LeftArrow falsch verhalten, während ein Input-Befehl aktiv ist.</p>
      <p><strong>T</strong>: Zeitüberschreitung (z. B. T3). Die Wartezeit in Sekunden, bis der Input-Befehl beendet wird und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> das Wort Timeout beinhaltet. Wenn die Zeit abgelaufen ist, dann enthält die <em>Ausgabevariable</em> den bis dahin eingegebenen Text des Benutzers. Dieser Wert kann eine Fließkommazahl wie 2.5 sein.</p>
      <p><strong><a name="vis"></a>V</strong>: Sichtbar. Normalerweise wird die Benutzereingabe blockiert (kann nicht vom Betriebssystem erkannt werden). Mit dieser Option werden die Benutzereingaben direkt zum aktiven Fenster gesendet.</p>
      <p><strong><a name="asterisk"></a>*</strong>: Platzhalter. Normalerweise muss die Benutzereingabe exakt mit einem Element aus der <em>Übereinstimmungsliste</em> übereinstimmen. Mit dieser Option kann eine Übereinstimmung öfters gefunden werden, indem die gesamte Länge des Eingabetextes durchsucht wird.</p></td>
  </tr>
  <tr>
    <td>Endtasten</td>
    <td><p>Eine Liste mit beliebigen Tasten, die den Input-Befehl beenden, wenn sie gedrückt werden (die <em>Endtasten</em> werden nicht in die <em>Ausgabevariable</em> geschrieben). Wenn ein Input-Befehl auf diesem Weg beendet wird, dann beinhaltet <a href="../misc/ErrorLevel.htm">ErrorLevel</a> das Wort EndKey, gefolgt von einem Doppelpunkt und den Namen der <em>Endtaste</em>. Beispiele:<br> EndKey:.<br> EndKey:Escape</p>
      <p>Die <em>Endtaste</em>-Liste verwendet ein Format, das den Format vom <a href="Send.htm">Send</a>-Befehl ähnelt. Zum Beispiele beendet {Enter}.{Esc} die Eingabe, sobald entweder ENTER, Punkt (.) oder ESCAPE gedrückt wird. Damit die geschweiften Klammern selbst als Endtasten verwendet werden können, gebt {{} und/oder {}} an.</p>
      <p>Damit Steuerung, Alt oder Umschalt als Endtasten verwendet werden können, gebt die linke und/oder rechte Version der Taste an, jedoch nicht die neutrale Version. Verwendet zum Beispiel {LControl}{RControl} anstelle von {Control}.</p>
      <p>Obwohl modifizierte Tasten wie Steuerung+C (^c) nicht unterstützt werden, werden bestimmte Tasten, bei den die Umschalttaste gedrückt gehalten werden muss (nämlich die Satzzeichen !"§$%&/=?), seit Version 1.0.14 unterstützt.</p>
      <p>Alternativ kann auch ein eindeutiger virtueller Tastencode wie {vkFF} angegeben werden. Das ist nützlich, wenn im seltenen Fall die Taste keinen Namen hat und dadurch keine sichtbaren Zeichen beim Drücken erzeugt. Der virtuelle Tastencode kann ermittelt werden, indem die Schritte im unteren Bereich der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> befolgt werden.</p>
    </td>
  </tr>
  <tr>
    <td>Übereinstimmungsliste</td>
    <td><p>Eine kommagetrennte List mit Tastenfolgen, die den Input-Befehl beenden (<a href="../misc/ErrorLevel.htm">ErrorLevel</a> beinhaltet in diesem Fall das Wort Match). Die Benutzereingabe muss exakt mit einem Element aus der Liste übereinstimmen (es sei denn, die <a href="#asterisk">*-Option</a> ist vorhanden). Darüber hinaus sind <strong>alle Leer- und Tabulatorzeichen um Trennkommas bedeutend</strong>, das heißt, sie gehören zum Teil dem übereinstimmenden String. Zum Beispiel: Wenn die <em>Übereinstimmungsliste</em> "ABC , XYZ" enthält, dann muss der Benutzer für eine Übereinstimmung entweder ABC mit nachfolgendem Leerzeichen oder XYZ mit führendem Leerzeichen eingeben.</p>
      <p>Zwei aufeinanderfolgende Kommas bilden ein direkt vorhandenes Komma. Das folgende Beispiel erstellt ein direkt vorhandenes Komma nach dem Wort string1: "string1,,,string2". Ebenso enthält die folgende Liste nur ein einzelnes Element mit einem direkt vorhandenen Komma dazwischen: "einzelnes,,Element".</p>
    <p>Da die Elemente in der <em>Übereinstimmungsliste</em> nicht als einzelne Parameter behandelt werden, kann sich die komplette Liste in einer Variable befinden. In der Tat muss sich alles oder ein Teil davon in der Variable befinden, wenn eine Länge von 16383 überschritten wird (die maximale Länge einer Script-Zeile). Zum Beispiel könnte die <em>Übereinstimmungsliste</em> aus %List1%,%List2%,%List3% bestehen, die jeweils eine lange Liste mit Elementen enthalten.</p>
    </td>
  </tr>
</table>

<h3>ErrorLevel</h3>
<table class="info">
  <tr>
    <td width="15%"><p>1 oder 0 </p></td>
    <td width="85%"><p>Sobald der Befehl ohne Parameter verwendet wird, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 0 gesetzt, wenn er erfolgreich eine vorherige Eingabe beendet hat, oder auf 1 gesetzt, falls zurzeit keine Eingabe erfolgt.</p></td>
  </tr>
  <tr>
    <td>NewInput</td>
    <td>Der Eingabe wurde von einem anderen <a href="../misc/Threads.htm">Thread</a> unterbrochen, der den Input-Befehl benutzte. </td>
  </tr>
  <tr>
    <td>Max</td>
    <td>Die Eingabe hat die maximal erlaubte Länge erreicht und stimmt nicht mit den Elementen in der <em>Übereinstimmungsliste</em> überein.</td>
  </tr>
  <tr>
    <td>Timeout</td>
    <td>Die Eingabe hat die Zeit überschritten. </td>
  </tr>
  <tr>
    <td>Match</td>
    <td>Die Eingabe stimmt mit einem Element aus der <em>Übereinstimmungsliste</em> überein. </td>
  </tr>
  <tr>
    <td>EndKey:name</td>
    <td>Eine <em>Endtaste</em> wurde gedrückt, um die Eingabe zu beenden. In diesem Fall beinhaltet <a href="../misc/ErrorLevel.htm">ErrorLevel</a> das Wort EndKey, gefolgt von einem Doppelpunkt und den Namen der Taste ohne Klammern, z. B. EndKey:Enter, EndKey:Escape, etc.</td>
  </tr>
</table>
<h3>Bemerkungen</h3>
<p>Wenn dieser Befehl verwendet wird, während ein Input-Befehl in einem anderen <a href="../misc/Threads.htm">Thread</a> aktiv ist, dann wird dieser beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> beinhaltet das Wort NewInput. Danach wird der neue Input-Befehl eingeleitet.</p>
<p>Wenn ein Input-Befehl aktiv ist, können neue <a href="../misc/Threads.htm">Threads</a> wie <a href="Menu.htm">benutzerdefinierte Menüelemente</a> oder <a href="SetTimer.htm">zeitlich festgelegte Subroutinen</a> nach wie vor erstellt werden. Ebenso bleiben Tastatur-<a href="../Hotkeys.htm">Hotkeys</a> aktiv, solange die Eingabe <a href="#vis">sichtbar</a> ist. Wenn die Eingabe nicht sichtbar ist, dann können nur <a href="_UseHook.htm">Hook-Hotkeys</a> ausgelöst werden.</p>
<p>Sobald ein Script diesen Befehl verwendet, wird der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> installiert (wenn es nicht bereits geschehen ist). Zusätzlich wird das Script <a href="_Persistent.htm">persistent</a>, d. h. <a href="ExitApp.htm">ExitApp</a> sollte zum Beenden des Scripts verwendet werden. Der Tastatur-Hook bleibt bis zur nächsten Verwendung des <a href="Suspend.htm">Suspend</a>- oder <a href="Hotkey.htm">Hotkey</a>-Befehls installiert, dabei wird der Hook entfernt, solange er nicht von Hotkeys oder Hotstrings benötigt wird.</p>
<p>Wenn mehrere Sprachen oder Tastaturbelegungen verwendet werden, dann benutzt der Input-Befehl eher die Tastaturbelegung des aktiven Fensters anstelle des Scripts (unabhängig davon, ob die Eingabe <a href="#vis">sichtbar</a> ist). Bei den Versionen vor 1.0.44.03 wird das Layout des Scripts verwendet.</p>
<p>Obwohl nicht so flexibel, sind <a href="../Hotstrings.htm">Hotstrings</a> im Gegensatz zum Input-Befehl für gewöhnlich einfacher zu handhaben.</p>
<p><em>Input</em> tut nichts in Windows 9x (auch ErrorLevel und die <em>Ausgabevariable</em> werden nicht geändert). Zum Erkennen von Windows 9x kann <a href="../Variables.htm#OSType">A_OSType</a> verwendet werden.</p>
<h3>Verwandte Befehle</h3>
<p><a href="KeyWait.htm">KeyWait</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="InputBox.htm">InputBox</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="IfIn.htm">If var in/contains Übereinstimmungsliste</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Wartet auf Benutzereingabe.  Tasten, die keine sichtbaren Zeichen wie Modifikatoren,
; Funktionstasten und Pfeiltasten erzeugen, werden als Endtasten aufgelistet,
; damit sie auch erkannt werden können.</em>
Input, Einzeltaste, L1, {LControl}{RControl}{LAlt}{RAlt}{LShift}{RShift}{LWin}{RWin}{AppsKey}{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}{F10}{F11}{F12}{Left}{Right}{Up}{Down}{Home}{End}{PgUp}{PgDn}{Del}{Ins}{BS}{Capslock}{Numlock}{PrintScreen}{Pause}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Ein Hotkey-Beispiel.  Da der Hotkey das Tilde-Zeichen (~) als
; Präfix hat, werden die eigenen Tastatureingaben an das aktive Fenster übergeben
; (außer in Win9x).  Wenn der Benutzer beispielsweise [btw
; in einem Editor schreibt, führt das Script automatisch eine Aktion
; ihrer Wahl aus (z. B. den Text ersetzen):</em>

~[::
Input, Benutzereingabe, V T5 L4 C, {enter}.{esc}{tab}, btw,otoh,fl,ahk,ca
If ErrorLevel = Max
{
    MsgBox, Sie haben "%Benutzereingabe%" eingegeben, welches die maximale Textlänge ist.
    Return
}
If ErrorLevel = Timeout
{
    MsgBox, Sie haben in der Wartezeit "%Benutzereingabe%" eingegeben.
    Return
}
If ErrorLevel = NewInput
    Return
IfInString, ErrorLevel, EndKey:
{
    MsgBox, Sie haben "%Benutzereingabe%" eingegeben und die Eingabe mit %ErrorLevel% beendet.
    Return
}
<em>; Ansonsten wurde eine Übereinstimmung gefunden.</em>
SetKeyDelay, -1  <em>; Die meisten Editoren können mit der Schnelligkeit umgehen.</em>
If Benutzereingabe = btw
    Send, {backspace 4}by the way
Else If Benutzereingabe = otoh
    Send, {backspace 5}on the other hand
Else If Benutzereingabe = fl
    Send, {backspace 3}Florida
Else If Benutzereingabe = ca
    Send, {backspace 3}California
Else If Benutzereingabe = ahk
    Run, www.autohotkey.com
Return</pre>

</body>
</html>
