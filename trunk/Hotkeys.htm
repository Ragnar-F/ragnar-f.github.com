<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Hotkeys (Maus-, Joystick- und Tastatur-Tastenkombinationen)</title>
<meta name="description" content="Free utility to create hotkeys, shortcuts, and macros for keyboard, mouse, and joystick. Any combination of keys and buttons can become a hotkey.">
<meta name="keywords" content="hotkey,hotkeys,hot key,hot keys,shortcut,shortcuts,shortcut key,shortcut keys,keyboard shortcut,keyboard shortcuts,button,buttons,click,press">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="../forum/rss.php">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>Hotkeys (Maus-, Joystick- und Tastatur-Tastenkombinationen)</h1>


<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfache Beispiele</a></li>
  <li><a href="#Symbols">Tabelle der Präfix-Symbole (Modifikatoren)</a></li>
  <li> <a href="#Context">Kontextabhängige Hotkeys</a></li>
  <li> <a href="#Features">Benutzerdefinierte Kombinationen und andere Funktionen</a></li>
  <li> <a href="#Wheel">Mausrad-Hotkeys</a></li>
  <li> <a href="#Remarks">Tipps und Hinweise</a></li>
</ul>

<h2 id="Intro">Einführung und einfache Beispiele</h2>
<p>Hotkeys werden manchmal auch als Tastenkombinationen bezeichnet, weil sie in der Lage sind, eine Aktion einfach auszulösen (z. B. das Ausführen eines Programms oder <a href="misc/Macros.htm">Tastatur-Makros</a>). Im folgenden Beispiel wird der Hotkey Win+N konfiguriert, um den Editor zu starten. Die Raute [#] entspricht der Windows-Taste, die als <em>Modifikator</em> bekannt ist:</p>
<pre>#n::
Run Notepad
Return</pre>
<p>Das <a href="commands/Return.htm">Return</a> in der letzten Zeile oben dient dazu, den Hotkey zu beenden. Wenn allerdings ein Hotkey nur eine einzige Zeile ausführen muss, dann kann diese Zeile auf der rechten Seite der zwei Doppelpunkte stehen. Mit anderen Worten ist das <a href="commands/Return.htm">Return</a> indirekt:</p>
<pre>#n::Run Notepad</pre>
<p>Um mehr als einen Modifikator mit einem Hotkey zu verwenden, listet diese nacheinander auf (die Reihenfolge spielt keine Rolle). Das folgende Beispiel verwendet <strong>^!</strong>, um Steuerung+Alt+S kenntlich zu machen:</p>
<pre>^!s::
<a href="commands/Send.htm">Send</a> Mit freundlichen Grüßen,{Enter}John Smith  <em>; Diese Zeile sendet Tastatureingaben an das aktive (vorderste) Fenster.</em>
Return</pre>
<h3 id="Symbols">Es können folgende Modifikatorsymbole verwendet werden, um Hotkeys zu definieren:</h3>
<table class="info">
  <tr>
    <th>Symbol</th>
    <th>Beschreibung</th>
  </tr>
  <tr>
    <td width="30"><strong>#</strong></td>
    <td>Win (Windows-Logo-Taste). Windows Vista und höher: seit v1.0.48.01 warten Hotkeys mit einer Win-Taste (z. B. #a) auf die Win-Taste, bis sie losgelassen wird, bevor ein beliebiger Text mit einer L-Tastatureingabe gesendet wird. Dadurch wird das <em>Send</em> daran gehindert, den PC zu sperren. Dieses Verhalten gilt für jeden Send-Modus, außer <a href="commands/Send.htm#SendPlayDetail">SendPlay</a> (weil es das nicht braucht) und <a href="commands/Send.htm#blind">Blind-Modus</a>.</td>
  </tr>
  <tr>
    <td><strong>!</strong></td>
    <td>Alt</td>
  </tr>
  <tr>
    <td><strong>^</strong></td>
    <td>Steuerung</td>
  </tr>
  <tr>
    <td><strong>+</strong></td>
    <td>Umschalt</td>
  </tr>
  <tr>
    <td><strong>&</strong></td>
    <td>Ein kaufmännisches Und kann zwischen zwei beliebigen Tasten oder Maustasten verwendet werden, um sie zu einem benutzerdefinierten Hotkey zu kombinieren. Siehe <a href="#combo">unten</a> für weitere Details. Solche Hotkeys werden in Windows 95/98/Me ignoriert (nicht aktiviert).</td>
  </tr>
  <tr>
    <td><strong><</strong></td>
    <td><a name="LeftRight"></a>Verwendet die linke Taste des Paares. Zum Beispiel ist <!a das Gleiche wie !a, jedoch wird nur die linke ALT-Taste ausgelöst. Dieses Symbol wird in Windows 95/98/ME ignoriert.</td>
  </tr>
  <tr>
    <td><strong>></strong></td>
    <td>Verwendet die rechte Taste des Paares. Dieses Symbol wird in Windows 95/98/ME ignoriert.</td>
  </tr>
  <tr>
    <td><strong><^>!</strong></td>
    <td><p><a name="AltGr"></a>AltGr (alternativer Schriftsatz). Wenn die aktuelle Tastaturbelegung eine ALTGR-Taste anstelle einer rechten ALT-Taste hat, dann kann diese Reihe von Symbolen normalerweise für ALTGR verwendet werden (benötigt Windows NT/2k/XP oder höher). Zum Beispiel:</p>
      <pre><^>!m::MsgBox Es wurde AltGr+m gedrückt.
<^<!m::MsgBox Es wurde SteuerungLinks+AltLinks+m gedrückt.</pre>      <p>Alternativ kann AltGr selbst wie im folgenden Beispiel zu einem Hotkey gemacht werden (jedoch ohne die oben genannten Hotkeys):</p>
      <pre>LControl & RAlt::MsgBox Es wurde AltGr selbst gedrückt.</pre></td>
  </tr>
  <tr>
    <td><strong>*</strong></td>
    <td><p><a name="wildcard"></a>Platzhalter: Hotkey ausführen, selbst wenn zusätzliche Modifikatoren gedrückt gehalten werden. Das wird oft in Verbindung mit der <a href="misc/Remap.htm">Neubelegung</a> von Tasten verwendet. Zum Beispiel:</p>
      <pre>*#c::Run Calc.exe  <em>; Win+C, Umschalt+Win+C, Strg+Win+C usw. werden alle diesen Hotkey auslösen.</em>
*ScrollLock::Run Notepad  <em>; Beim Drücken von ScrollLock wird dieser Hotkey ausgelöst, selbst wenn beliebig viele Modifikatoren gedrückt gehalten werden.</em></pre>
      <p>Dieses Symbol wird in Windows 95/98/ME ignoriert.</p></td>
  </tr>
  <tr>
    <td><strong>~</strong></td>
    <td><p><a name="Tilde"></a>Wenn der Hotkey ausgeführt wird, dann wird seine ursprüngliche Funktion nicht blockiert (vom System versteckt). In den beiden folgenden Beispielen wird der Mausklick des Benutzers an das aktive Fenster gesendet:</p>
      <pre>~RButton::MsgBox Es wurde die rechte Maustaste gedrückt.
~RButton & C::MsgBox Es wurde C gedrückt, während die rechte Maustaste gedrückt gehalten wurde.</pre>      <p>Hinweise: 1) Im Gegensatz zu den anderen Präfix-Symbolen kann das Tilde-Präfix in einigen <a href="commands/_IfWinActive.htm#variant">Hotkey-Varianten</a> vorhanden sein und in anderen nicht; 2) Spezielle Hotkeys, die als Ersatz für <a href="#alttab">Alt-Tab</a> dienen, ignorieren immer das Tilde-Präfix; 3) Das Tilde-Präfix wird in Windows 95/98/ME ignoriert.</p></td>
  </tr>
  <tr>
    <td><strong>$</strong></td>
    <td><p><a name="prefixdollar"></a>Dieses Präfix ist normalerweise nur notwendig, wenn das Script den <a href="commands/Send.htm">Send</a>-Befehl benutzt, um die Tasten vom Hotkey selbst zu senden, der ansonsten auch mit ausgelöst werden würde. Das genaue Verhalten vom $-Präfix variiert je nach Betriebssystem:</p>
    <p>In Windows NT4/2k/XP oder höher: Das $-Präfix erzwingt den <a href="commands/_InstallKeybdHook.htm">Tastatur-Hook</a>, diesen Hotkey zu implementieren, wodurch als Nebeneffekt der <a href="commands/Send.htm">Send</a>-Befehl daran gehindert wird, den Hotkey auszulösen. Das $-Präfix entspricht der Angabe von <a href="commands/_UseHook.htm">#UseHook</a> irgendwo über der Definition des Hotkeys.</p>
    <p>In Windows 95/98/Me: Der Hotkey wird während der Ausführung seines <a href="misc/Threads.htm">Threads</a> deaktiviert und danach wieder aktiviert. Nebeneffekt: Wenn die Anweisung <a href="commands/_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> höher als 1 gesetzt ist, dann wird sie sich so verhalten, als ob eine 1 für solche Hotkeys gesetzt wäre.</p></td>
  </tr>
  <tr>
    <td>UP<br>    </td>
    <td><p><a name="keyup"></a>Das Wort UP kann nach dem Namen eines Hotkeys folgen, damit der Hotkey beim Loslassen anstatt beim Drücken ausgeführt wird. Im folgenden Beispiel wird LWin <a href="misc/Remap.htm">neu belegt</a>, um LControl zu werden: </p>
      <p>*LWin::Send {LControl Down}<br> *LWin <strong>Up</strong>::Send {LControl Up}</p>
      <p>"Up" kann auch wie in diesem Beispiel bei normalen Hotkeys verwendet werden: ^!r Up::MsgBox Es wurde Strg+Alt+R gedrückt und losgelassen. Das funktioniert auch mit <a href="#combo">kombinierten Hotkeys</a> (z. B. <em>F1 & e Up::</em>)</p>
      <p>Einschränkungen: 1) "Up" funktioniert nicht mit <a href="KeyList.htm">Joystick-Tasten</a>; 2) "Up" benötigt Windows NT4/2000/XP oder höher; und 3) Ein "Up"-Hotkey wird diese Taste ohne entsprechenden normalen/gedrückten Hotkey komplett übernehmen, damit sie nicht in der gedrückten Haltung stecken bleibt. Zur Vermeidung dieses Problems kann ein <a href="#Tilde">Tilde-Präfix</a> hinzugefügt werden (z. B. <em><strong>~</strong>LControl up::</em>)</p>
	  <p>Zusätzlich kann mit einer ähnlichen Methode wie oben ein Hotkey zu einer Präfix-Taste gemacht werden. Der Vorteil davon ist, dass der Hotkey beim Loslassen nur ausgeführt wird, wenn keine andere Taste gedrückt wurde, während der Hotkey gedrückt gehalten wurde. Zum Beispiel:</p>
      <pre>LControl & F1::Return  <em>; Macht die linke STRG-Taste zu einem Präfix, wenn sie mindestens einmal vor "&" verwendet wird.</em>
LControl::MsgBox Es wurde LControl losgelassen, ohne dabei eine andere Taste modifiziert zu haben.</pre></td>
  </tr>
</table>
<p><strong>(In der <a href="KeyList.htm">Tastenliste</a> können alle Tastennamen der Tastatur, Maus und des Joysticks gefunden werden)</strong></p>
<p><br> Mehrere Hotkeys können vertikal gestapelt werden, damit sie die gleiche Aktion ausführen. Zum Beispiel:</p>
<pre>^Numpad0::
^Numpad1::
MsgBox Durch Drücken von Steuerung+Numpad0 oder Steuerung+Numpad1 wird diese Meldung angezeigt.
Return</pre>
<p>Eine Taste oder Tastenkombination kann vollständig deaktiviert werden, wenn ihr nichts zugewiesen wird. Das folgende Beispiel deaktiviert die rechte Win-Taste:</p>
<pre>RWin::Return</pre>

<h2 id="Context">Kontextabhängige Hotkeys</h2>
<p>Die Anweisungen <a href="commands/_IfWinActive.htm">#IfWinActive/Exist</a> und <a href="commands/_If.htm">#If</a> können ein Hotkey dazu bringen, eine andere (oder überhaupt keine) Aktion in Abhängigkeit eines bestimmten Zustandes auszuführen. Zum Beispiel:</p>
<pre>#IfWinActive, ahk_class Notepad
^a::MsgBox Strg+A wurde gedrückt, während der Editor aktiv ist. Wenn Strg+A in einem anderen Fenster gedrückt wird, dann wird diese Tastatureingabe an dieses Fenster gesendet.
#c::MsgBox Win+C wurde während des aktiven Editors gedrückt.

#IfWinActive
#c::MsgBox Win+C wurde gedrückt, während ein Fenster außer dem Editor aktiv ist.

#If <a href="commands/_If.htm#Examples">MouseIsOver</a>("ahk_class Shell_TrayWnd")
WheelUp::Send {Volume_Up}     <em>; Mausrad über die Taskleiste: Lautstärke erhöhen/verringern.</em>
WheelDown::Send {Volume_Down} <em>; </em>
</pre>

<h2 id="Features">Benutzerdefinierte Kombinationen und andere Funktionen <span class="ver">[Windows NT/2000/XP oder höher]</span></h2>
<p><a name="combo"></a>Es kann eine benutzerdefinierte Kombination von zwei Tasten mithilfe von " & " angegeben werden. Im folgenden Beispiel kann Numpad0 gedrückt gehalten und die zweite Taste gedrückt werden, um den Hotkey auszulösen:</p>
<pre>Numpad0 <strong>&</strong> Numpad1::MsgBox, Numpad1 wurde gedrückt, während Numpad0 gedrückt gehalten wird.
Numpad0 <strong>&</strong> Numpad2::Run Notepad</pre>
<p><a name="prefix"></a>Im obigen Beispiel wird Numpad0 zu einer <em>Präfix-Taste</em>; dadurch verliert Numpad0 aber seine ursprüngliche Funktion, wenn sie selbst gedrückt wird. Um das zu vermeiden, kann ein Script die Numpad0-Taste konfigurieren, um eine neue Aktion durchzuführen:</p>
<pre>Numpad0::WinMaximize A   <em>; Maximiert das aktive/vorderste Fenster.</em>
Numpad0::Send {Numpad0}  <em>; Numpad0 erzeugt beim <i>Loslassen</i> eine Numpad0-Tastatureingabe. Siehe unteren Kommentar.</em></pre>
<p>Durch einen obigen Hotkey wird Numpad0 <em>losgelassen</em>, um die angegebene Aktion auszuführen, solange keine andere Taste gedrückt wurde, während Numpad0 gedrückt gehalten wurde.</p>
<p><strong>Numlock, Feststelltaste und Scrolllock:</strong> Für diese Tasten wird möglicherweise "AlwaysOn" oder "AlwaysOff" erzwungen. Zum Beispiel: <em><a href="commands/SetNumScrollCapsLockState.htm">SetNumlockState</a> AlwaysOn</em></p>
<p><strong>Hotkeys vom Explorer überschreiben:</strong> Die internen Hotkeys von Windows wie Win+E (#e) und Win+R (#r) können individuell überschrieben werden, indem ihnen einfach eine Aktion im Script zugewiesen wird. Siehe "<a href="misc/Override.htm">Überschreiben oder Deaktivieren von Hotkeys</a>" für Details.</p>
<p><a name="alttab" id="alttab"></a><strong>Ersatz für Alt+Tab:</strong> Hotkeys können eine alternative Methode für das Alt+Tab bereitstellen. Zum Beispiel ermöglichen die folgenden zwei Hotkeys das Verwenden von Alt+Tab mit der rechten Hand:</p>
<pre>RControl & RShift::AltTab  <em>; Rechte STRG-Taste gedrückt halten und danach rechte UMSCHALT-Taste wiederholend drücken, um durchzuschalten.</em>
RControl & Enter::ShiftAltTab  <em>; Ohne Loslassen der rechten STRG-Taste Enter drücken, um die Richtung umzukehren.</em></pre>
<p>Für weitere Details, siehe <a href="#AltTabDetail">Alt+Tab</a>.</p>

<h2 id="Wheel">Mausrad-Hotkeys <span class="ver">[Windows NT/2000/XP oder höher]</span></h2>
<p>Hotkeys, die beim Drehen des Mausrads ausgeführt werden, werden durch WheelDown und WheelUp unterstützt. WheelLeft und WheelRight werden auch seit v1.0.48 unterstützt, funktionieren aber nicht auf Betriebssystemen älter als Windows Vista. Hier einige Beispiele für Mausrad-Hotkeys:</p>
<pre>MButton & WheelDown::MsgBox Das Mausrad wurde nach unten gedreht, während die mittlere Maustaste gedrückt gehalten wurde.
^!WheelUp::MsgBox Das Mausrad wurde nach oben gedreht, während Steuerung+Alt gedrückt gehalten wurde.</pre>
<p>Seit v1.0.43.03 enthält die interne Variable <strong>A_EventInfo</strong> die Anzahl an gedrehten Rasterungen, dass in der Regel eine 1 ist. Allerdings kann A_EventInfo unter folgenden Umständen größer oder kleiner als 1 sein:</p>
<ul>
  <li>Wenn die Maus-Hardware weniger als eine Rasterung meldet, dann enthält A_EventInfo eine 0;</li>
  <li>Wenn das Mausrad schnell gedreht wird (je nach Typ der Maus), dann kann A_EventInfo größer als 1 sein. Ein Hotkey wie folgt kann dabei helfen, die eigene Maus zu analysieren: <em>~WheelDown::ToolTip %A_EventInfo%</em></li>
</ul>
<p>Einige der nützlichsten Hotkeys für das Mausrad beinhalten alternative Methoden für das Scrollen eines Fenstertextes. Zum Beispiel scrollen die folgenden Hotkeys beim Drehen des Mausrads horizontal anstatt vertikal, während die linke STRG-Taste gedrückt gehalten wird:</p>
<pre>~LControl & WheelUp::  <em>; Nach links scrollen.</em>
ControlGetFocus, fcontrol, A
Loop 2  <em>; <-- Erhöht diesen Wert, um das Scrollen zu beschleunigen.</em>
    SendMessage, 0x114, 0, 0, %fcontrol%, A  <em>; 0x114 ist WM_HSCROLL und die 0 danach SB_LINELEFT.</em>
Return

~LControl & WheelDown::  <em>; Nach rechts scrollen.</em>
ControlGetFocus, fcontrol, A
Loop 2  <em>; <-- Erhöht diesen Wert, um das Scrollen zu beschleunigen.</em>
    SendMessage, 0x114, 1, 0, %fcontrol%, A  <em>; 0x114 ist WM_HSCROLL und die 1 danach SB_LINERIGHT.</em>
Return</pre>
<p>Da letztendlich Mausrad-Hotkeys nur Down-Ereignisse (nie Up-Ereignisse) erzeugen, können sie nicht als <a href="#keyup">Up-Tasten-Hotkeys</a> verwendet werden.</p>
<h2 id="Remarks">Tipps und Hinweise</h2>
<p>Jede Numpad-Taste kann zwei verschiedene Hotkey-Subroutinen je nach Zustand von Numlock starten. Alternativ kann eine Numpad-Taste die gleiche Subroutine starten, unabhängig vom Zustand des Numlocks. Zum Beispiel:</p>
<pre>NumpadEnd::
Numpad1::
MsgBox, Dieser Hotkey wurde unabhängig von Numlock gestartet.
Return</pre>
<p>Auch wenn der Tilde-Operator (~) mit einer <a href="#prefix">Präfix-Taste</a> nur einmal verwendet wird, wird dieses Präfix immer über das aktive Fenster gesendet. In den beiden folgenden Hotkeys wird zum Beispiel das aktive Fenster alle Rechtsklick-Ereignisse empfangen, obwohl nur eine Definition ein Tilde-Zeichen enthält:</p>
<pre> ~RButton & LButton::MsgBox Es wurde die linke Maustaste gedrückt, während die rechte gedrückt gehalten wurde.
RButton & WheelUp::MsgBox Das Mausrad wurde nach oben gedreht, während die rechte Maustaste gedrückt gehalten wurde.</pre>
<p>Der <a href="commands/Suspend.htm">Suspend</a>-Befehl kann vorübergehend alle Hotkeys außer den freigestellten deaktivieren. Um Hotkeys abhängig vom Fenstertyp zu machen, verwendet <a href="commands/_IfWinActive.htm">#IfWinActive/Exist</a>.</p>
<p>Mithilfe des <a href="commands/Hotkey.htm">Hotkey</a>-Befehls können Hotkeys dynamisch erstellt werden, während das Script ausgeführt wird. Der Hotkey-Befehl kann auch bestehende Hotkeys im Script individuell bearbeiten, deaktivieren oder aktivieren.</p>
<p>Joystick-Hotkeys unterstützen zurzeit keine Modifikator-Präfixe wie ^ (STRG) und # (WIN). Allerdings kann mit <a href="commands/GetKeyState.htm">GetKeyState</a> dieser Effekt wie im folgenden Beispiel nachgeahmt werden:</p>
<pre>Joy2::
If not GetKeyState("Control")  <em>; Weder die linke noch die rechte STRG-Taste wurde gedrückt.</em>
    Return  <em>; also nichts tun.</em>
MsgBox Es wurde die zweite Taste vom ersten Joystick gedrückt, während die STRG-Taste gedrückt gehalten wurde.
Return</pre>
<p>Manchmal sollte ein Hotkey auf das Loslassen seiner Modifkatortasten warten, bevor er fortfährt. Betrachtet dazu das folgende Beispiel:</p>
<pre>^!s::Send {Delete}</pre>
<p> Beim Drücken von Steuerung+Alt+S denkt das System, dass Steuerung+Alt+Entf gedrückt wird (aufgrund der energischen Systemerkennung von Strg+Alt+Entf). Als Übergangslösung kann <a href="commands/KeyWait.htm">KeyWait</a> verwendet werden, um auf das Loslassen der Tasten zu warten; zum Beispiel:</p>
<pre>^!s::
KeyWait Control
KeyWait Alt
Send {Delete}
Return</pre>
<p>Wenn ein Hotkey-Label wie <em>#z::</em> ein Fehler wie "Ungültiger Hotkey" erzeugt, dann kennt die Tastaturbelegung/Sprache des Systems möglicherweise dieses bestimmte Zeichen nicht (in diesem Fall das "Z"). Probiert bekannte Zeichen der aktuellen Tastaturbelegung aus.</p>
<p>Ein Hotkey-Label kann als Ziel von <a href="commands/Gosub.htm">Gosub</a> oder <a href="commands/Goto.htm">Goto</a> verwendet werden. Zum Beispiel: <em>Gosub ^!s</em></p>
<p>Häufig werden Hotkeys dazu verwendet, eine wiederholende Aktion zu starten und zu stoppen, wie z. B. mehrere Tastatureingaben oder Mausklicks. Ein Beispiel dafür kann in <a href="FAQ.htm#repeat">diesem FAQ-Thema</a> gefunden werden.</p>
<p>Letztendlich ist jedes Script <a href="misc/Threads.htm">sozusagen multi-threaded</a>, damit ein neuer Hotkey ausgeführt werden kann, selbst wenn eine vorherige Hotkey-Subroutine noch läuft. Zum Beispiel können neue Hotkeys auch gestartet werden, während eine <a href="commands/MsgBox.htm">MsgBox</a> vom aktuellen Hotkey angezeigt wird.</p>
<h2 id="AltTabDetail">Alt+Tab-Hotkeys</h2>
<p>Jeder Alt+Tab-Hotkey muss eine Kombination von zwei Tasten sein, dass normalerweise mithilfe eines kaufmännischen Und-Zeichens (&) erreicht wird. Im folgenden Beispiel wird die rechte ALT-Taste gedrückt gehalten und mit J oder K durch das Alt-Tab-Menü navigiert:</p>
<pre>RAlt & j::AltTab
RAlt & k::ShiftAltTab</pre>
<p><em>AltTab</em> und <em>ShiftAltTab</em> sind zwei spezielle Befehle, die nur erkannt werden, wenn sie auf der gleichen Zeile des Hotkeys verwendet werden. Hier die komplette Liste:</p>
<p>  <strong>AltTab</strong>: Sobald das Alt-Tab-Menü sichtbar ist, wird es durchgeschaltet. Ansonsten wird das Menü angezeigt (nur wenn der Hotkey eine "&"-Kombination von zwei Tasten ist, sonst passiert nichts).</p>
<p><strong>ShiftAltTab</strong>: Das Gleiche wie oben, nur in die entgegengesetzte Richtung.</p>
<p><strong>AltTabAndMenu</strong>: Sobald das Alt-Tab-Menü sichtbar ist, wird es durchgeschaltet. Ansonsten wird das Menü angezeigt.</p>
<p><strong>AltTabMenuDismiss</strong>: Schließt das Alt-Tab-Menü.</p>
<p>Zur Veranschaulichung dient das Mausrad als Ersatz für Alt-Tab. Mit den folgenden Hotkeys wird das Menü durch Klicken der mittlere Maustaste angezeigt und durch Drehen des Mausrads durchgeschaltet:</p>
<pre>MButton::AltTabMenu
WheelDown::AltTab
WheelUp::ShiftAltTab</pre>
<p>Um ein vom Hotkey aufgerufenes Alt-Tab-Menü zu schließen, ohne dabei das ausgewählte Fenster zu aktivieren, verwendet so etwas wie folgt. Es sind möglicherweise einige Anpassungen notwendig, je nachdem: 1) womit das Alt-Tab-Menü angezeigt wurde; und 2) ob das Script den <a href="commands/_InstallKeybdHook.htm">Tastatur-Hook</a> installiert hat.</p>
<pre>LCtrl & CapsLock::AltTab
<strong>!</strong>MButton::  <em>; Mittlere Maustaste. Das <strong>!</strong>-Präfix führt es aus, während die ALT-Taste gedrückt wird (sobald das Alt-Tab-Menü sichtbar ist).</em>
IfWinExist ahk_class #32771  <em>; Zeigt an, dass das Alt-Tab-Menü auf dem Bildschirm vorhanden ist.</em>
    Send <strong>!</strong>{Escape}{Alt up}
Return</pre>
<p>Zurzeit müssen alle speziellen Alt-Tab-Aktionen direkt einem Hotkey wie in den folgenden Beispielen zugewiesen werden (d. h. sie können nicht wie Befehle verwendet werden). Sie werden <span class="red">nicht von <a href="commands/_IfWinActive.htm">#IfWin</a> oder <a href="commands/_If.htm">#If</a> beeinflusst</span>.</p>
<p>Benutzerdefinierte Alt-Tab-Aktionen können auch mithilfe von Hotkeys erstellt werden. Im folgenden Beispiel wird die F1-Taste gedrückt, um das Menü anzuzeigen und durchzuschalten. Danach die F2-Taste, um das ausgewählte Fenster zu aktivieren (oder Esc, um abzubrechen):</p>
<pre>*F1::Send {Alt down}{tab} <em>; In diesem Fall ist das Sternchen notwendig.</em>
!F2::Send {Alt up}  <em>; Lässt die ALT-Taste los, um das ausgewählte Fenster zu aktivieren.</em>
~*Escape::
IfWinExist ahk_class #32771
    Send {Escape}{Alt up}  <em>; Schließt das Menü, ohne dabei das ausgewählte Fenster zu aktivieren.</em>
Return</pre>
</body>
</html>
