<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Arrays</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Arrays</h1>

<h2>Assoziative Arrays <span class="ver">[AHK_L 31+]</span></h2>
<p>Selbstständige assoziative Arrays können durch den Aufruf von <a href="../Objects.htm#Arrays">Object()</a> erstellt werden. Zum Beispiel:</p>
<pre><em>; Erstellt das Array, das zunächst leer ist:</em>
Array := Object()

<em>; Schreibt in das Array:</em>
Loop, Read, C:\Gästeliste.txt <em>; Diese Schleife ruft nacheinander jede Zeile der Datei ab.</em>
{
    Array.Insert(A_LoopReadLine) <em>; Fügt diese Zeile ans Array an.</em>
}

<em>; Liest vom Array:
; Loop % Array.MaxIndex()   ; Traditionellerer Ansatz.</em>
for index, element in Array <em>; Empfohlener Ansatz in den meisten Fällen.</em>
{
    <em>; Beim Verwenden von "Loop" müssen die Indexe fortlaufende Nummern von 1 bis zur Anzahl
    ; der Elemente im Array sein (oder sie müssen innerhalb der Schleife berechnet werden).
    ; MsgBox % "Elementnummer " . A_Index . " ist " . Array[A_Index]

    ; Beim Verwenden von "for" werden sowohl der Index (oder "Schlüssel") als auch dessen Wert
    ; bereitgestellt, wobei der Index ein *beliebiger* Wert sein kann.</em>
    MsgBox % "Elementnummer " . index . " ist " . element
}</pre>
<p>Damit wird nur ein kleiner Teil der <a href="../Objects.htm">Objekt</a>-<a href="../objects/Object.htm">Funktionalität</a> angezeigt. Elemente können gesetzt, abgerufen, eingefügt, entfernt und enumeriert werden. Strings und Objekte können neben den Zahlen für den Schlüssel verwendet werden. Objekte können als Werte in andere Objekte gespeichert und als Funktionsparameter oder Rückgabewert weitergegeben werden. Objekte können auch mit neuer Funktionalität <a href="../Objects.htm#Custom_Objects">erweitert</a> werden.</p>
<p>Obwohl Insert() und Enumeratoren ihren Nutzen haben, finden es einige Benutzer einfacher, den traditionelleren Ansatz zu verwenden:</p>
<pre>
  <em>; Jedes Array muss vorher initialisiert werden:</em>
  Array := Object()

<em>; Array%j% := A_LoopField</em>
  Array[j] := A_LoopField

<em>; Array%j%_%k% := A_LoopReadLine</em>
  Array[j, k] := A_LoopReadLine

  ArrayCount := 0
  Loop, Read, C:\Gästeliste.txt
  {
      ArrayCount += 1
    <em>; Array%ArrayCount% := A_LoopReadLine</em>
      Array[ArrayCount] := A_LoopReadLine
  }

  Loop %ArrayCount%
  {
    <em>; element := Array%A_Index%</em>
      element := Array[A_Index]
    <em>; MsgBox % "Elementnummer " . A_Index . " ist " . Array%A_Index%</em>
      MsgBox % "Elementnummer " . A_Index . " ist " . Array[A_Index]
  }

</pre>
<p><i>ArrayCount</i> bleibt aus Bequemlichkeit eine Variable, kann aber mit <code>Array.Count := <i>n</i></code> in das Array selbst gespeichert werden, oder es kann entfernt und mit <code>Array.<a href="../objects/Object.htm#MinMaxIndex">_MaxIndex()</a></code> ersetzt werden. Wenn ein Startindex anders als 1 gewünscht ist, dann kann auch <code>Array.<a href="../objects/Object.htm#MinMaxIndex">_MinIndex()</a></code> verwendet werden.</p>

<h2 id="pseudo">Pseudo-Arrays</h2>
<p>Pseudo-Arrays sind meistens konzeptionell: Jedes Array ist eigentlich nur eine Sammlung von durchnummerierten <a href="../Variables.htm">Variablen</a> oder <a href="../Functions.htm">Funktionen</a>, jedes davon als ein <em>Element</em> des Arrays anerkannt. AutoHotkey verbindet diese Elemente in keiner Weise.</p>
<p>Zusätzlich zu den Befehlen für die Array-Erstellung wie <a href="../commands/StringSplit.htm">StringSplit</a> und "<a href="../commands/WinGet.htm">WinGet List</a>" kann jeder Befehl zur Erstellung eines Arrays verwendet werden, der eine Ausgabevariable akzeptiert oder einer Variable einen Wert zuweist. Das einfachste Beispiel dafür ist der <a href="../commands/SetExpression.htm">Zuweisungsoperator (:=)</a>, wie unten dargestellt:</p>
<pre>Array%j% := A_LoopField</pre>
<p>Mehrdimensionale Arrays sind mithilfe eines beliebigen Trennzeichens zwischen den Indexen möglich. Zum Beispiel:</p>
<pre>Array%j%_%k% := A_LoopReadLine</pre>
<p><br> Das folgende Beispiel veranschaulicht, wie ein Array erstellt und auf ihm zugegriffen werden kann, in diesem Fall werden mehrere Namen aus einer Textdatei abgerufen:</p>
<pre><em><strong>; Schreibt in das Array:</strong></em>
ArrayCount = 0
Loop, Read, C:\Gästeliste.txt   <em>; Diese Schleife ruft nacheinander jede Zeile der Datei ab.</em>
{
    ArrayCount += 1  <em>; Behält im Blick, wie viele Elemente im Array sind.</em>
    Array%ArrayCount% := A_LoopReadLine  <em>; Speichert diese Zeile ins nächste Array-Element.</em>
}

<strong>; Liest vom Array:</strong>
Loop %ArrayCount%
{
    <em>; Die folgende Zeile verwendet den ":="- Operator, um ein Array-Element abzurufen:</em>
    element := Array%A_Index%  <em>; <a href="../Variables.htm#Index">A_Index</a> ist eine interne Variable.</em>
    <em>; Alternativ kann auch der "%"-Präfix verwendet werden, damit eine MsgBox oder andere Befehle <a href="../Variables.htm#Expressions">ausdrucksfähig</a> sind:</em>
    MsgBox % "Elementnummer" . A_Index . " ist " . Array%A_Index%
}</pre>
<p>Ein weiteres Array-Konzept ist das Verwenden von <a href="../Functions.htm#NumPut">NumPut()</a> und <a href="../Functions.htm#NumGet">NumGet()</a>, um eine Sammlung von Zahlen im Binärformat zu speichern oder abzurufen. Hilfreich in Fällen, wo Performance und/oder Speicherauslastung wichtig ist.</p>

</body>
</html>
