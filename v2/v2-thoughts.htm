<!DOCTYPE html>
<html>
<head>
<title>v2-thoughts</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<script src="/cdn-cgi/apps/head/21XiSFXBdVHXl7A_izEkLSn9ayc.js"></script>
<link href="docs/static/theme.css" rel="stylesheet" type="text/css" media="all" />
</head>
<body>
<h1>Gedanken zu v2.0</h1>
<p>Beachten Sie, dass dieses Dokument noch in Bearbeitung ist.</p>
<h2>TODO (Sonstiges)</h2>
<p>Validierung des an Gui.AddControl oder GuiControl.Add übergebene Objekttypes, und/oder Unterstützung für enumerierbare Objekte.</p>
<h2>Func</h2>
<p>Das Erkennen von falsch geschriebenen Funktionsnamen, <em>während das Skript geladen wird</em>, könnte ein nützliches Feature für die Sprache sein, allerdings würde dies nur für direkte Aufrufe gelten. Referenzen wie <code>Func("name")</code> oder <code>"name"</code>, wenn falsch geschrieben, werden nur erkannt, wenn das Skript versucht diese aufzurufen (was möglicherweise nicht dort ist, wo sie referenziert wurden).</p>
<p><code>Func("name")</code> ist optimiert (in v2), um während der Ladezeit aufgelöst zu werden, kann aber keinen Ladezeitfehler auslösen, wenn die Funktion nicht existiert, weil es kein Fehler ist. Zum Beispiel kann <code>name</code> in einem optionalen <code>#include *i</code> definiert werden, und Func ist, wie es zum Aufrufen aufgelöst werden würde. Wenn es einen Ladezeitfehler ausgelöst hat, würde weder dies funktionieren:</p>
<pre><code>if f := Func("name")  ; ← Ladezeitfehler
    f.Call()
</code></pre>
<p>Noch würde dies funktionieren:</p>
<pre><code>if IsFunc("name")
    MyRegisterEvent(Func("name"))  ; ← Ladezeitfehler
</code></pre>
<p>Die offensichtlichste Lösung wäre es, eine neue Syntax für eine <em>Funktionsreferenz</em> hinzuzufügen, die während der Ladezeit als Fehler erkannt wird, wenn die Funktion nicht existiert.</p>
<ul>
<li>fincs hat <code>@name</code> vorgeschlagen, wie in <code>OnExit(@ExitHandler)</code> oder <code>greet := @MsgBox.Bind("Hello")</code>.</li>
<li>Eine weitere Idee ist <code>Func'name'</code>, wie in <code>OnExit(Func'ExitHandler')</code> oder <code>greet := Func"MsgBox".Bind("Hello")</code>. Obwohl derzeit nicht gültig, kann es schwierig sein, dies visuell von einer automatischen Verkettung zu unterscheiden.</li>
</ul>
<h2>Sonstiges</h2>
<h3>On/Off/Toggle/1/0/-1</h3>
<p>Interne Variablen (außer A_StringCaseSense) und SoundGet wurden so geändert, dass sie 1 oder 0 anstelle von "On" oder "Off" zurückgeben, da Integer mit booleschen Ausdrücken besser funktionieren. Außerdem ist die Übergabe einer Zeichenkette aufgrund der Anführungszeichen weniger komfortabel als zuvor. Es ist sinnvoll, Skripte konsistent zu halten, daher sollte in Betracht gezogen werden, "On" und "Off" vollständig zu entfernen. Es gibt jedoch Fälle, wo sie eventuell nicht entfernt werden sollten:</p>
<ul>
<li>On/Off gibt SetTimer die Möglichkeit, einen Timer zu reaktivieren, ohne sein Zeitintervall ändern zu müssen.</li>
<li>Der Parameter der Hotkey-Funktion hat mehrere Verwendungsmöglichkeiten, außerdem wird die Funktion nicht nur aufgerufen, um den Hotkey zu aktivieren/deaktivieren; das heißt, dass <code>Hotkey("#a", "off")</code> besser zu sein scheint als <code>Hotkey("#a", false)</code>.</li>
</ul>
<p>Zurzeit ist es möglich, den Wert -1 anstelle von "Toggle" zu verwenden, um weniger schreiben zu müssen, allerdings ist dessen Mehrwert fragwürdig, da vorausgesetzt wird, mit der Konvention vertraut zu sein. Es lohnt sich scheinbar, die Zeichenkette zu behalten, demzufolge sollte in Betracht gezogen werden, den Wert -1 gar nicht erst hinzuzufügen.</p>
<p>Das Hinzufügen von <code>On</code> und <code>Off</code> als Alternative zu <code>True</code> und <code>False</code> (die einfach nur <code>1</code> und <code>0</code> zurückgeben) könnte die Lesbarkeit verbessern und die Notwendigkeit von Zeichenketten <code>"On"</code> und <code>"Off"</code> weiter reduzieren.</p>
<p>A_StringCaseSense könnte besser mit Zeichenketten funktionieren, da sowohl <code>"Off"</code> als auch <code>"Locale"</code> nicht-Groß-/Kleinschreibung sensitiv bedeutet; das heißt, dass, wenn <code>0</code>, <code>1</code> und <code>"Locale"</code> verwendet wird, <code>if A_StringCaseSense</code> wahr ist, wenn Groß-/Kleinschreibung-sensitiv oder nicht-Groß-/Kleinschreibung-sensitiv die Locale-Methode verwendet. <code>0</code> könnte stattdessen Groß-/Kleinschreibung-sensitiv bedeuten, aber das könnte irreführend sein.</p>
<h3>AltGr</h3>
<p>Wenn RAlt gedrückt oder gesendet wird und das Tastaturlayout des aktiven Fensters AltGr hat, erzeugt das System LCtrl-down und LCtrl-up. (Es erzeugt auch LCtrl-up beim Umschalten zwischen den Tastaturlayouts, wenn das vorherige Layout AltGr hatte, auch wenn das neue Layout auch AltGr hat.) Dies hat einige potenziell unerwünschte Folgen:</p>
<ul>
<li>Das Ändern von Tastaturlayouts löst <code>LCtrl up::</code> aus, auch wenn weder AltGr noch LCtrl gedrückt wurde oder im gedrückten Zustand war.</li>
<li>AltGr löst <code>&lt;^RAlt::</code> statt <code>RAlt::</code> aus.</li>
<li>AltGr löst <code>LCtrl::</code> und <code>LCtrl up::</code> aus.</li>
<li>AltGr bewirkt, dass Hotkeys mit STRG+ALT (<code>^!</code>) ausgelöst werden, nicht aber Hotkeys mit nur ALT (<code>!</code>).</li>
<li>Um AltGr als Modifikator zu erkennen, können Benutzer <code>&lt;^&gt;!</code> schreiben, aber nicht zwischen AltGr und LCtrl+AltGr unterscheiden.</li>
<li><code>GetKeyState("LCtrl", "P")</code> meldet, dass LCtrl im gedrückten Zustand ist, wenn AltGr im gedrückten Zustand ist, unabhängig des wirklichen Zustands von LCtrl.</li>
</ul>
<p>Es ist technisch möglich, AltGr's gefälschtes LCtrl zu identifizieren, indem man die wenig bekannte Tatsache nutzt, dass <code>KBDLLHOOKSTRUCT::scanCode</code> das 0x200-Bit für die gefälschten LCtrl-Ereignisse gesetzt hat. (KeyHistory zeigt dies nicht an, da der Scancode auf 1 Byte gekürzt ist [und dann 0x100 hinzugefügt wird, wenn das 0xE0-Flag gesetzt ist].)</p>
<p>Mit nur wenigen Codezeilen könnten die gefälschten LCtrl-Ereignisse als "ignoriert" markiert werden, was alle oben aufgeführten "Konsequenzen" vermeiden würde, außer dass es zu Inkonsistenzen zwischen "hook"-Hotkeys (die AltGr als RAlt behandeln würden) und "reg"-Hotkeys (die AltGr als STRG+ALT behandeln würden) kommen würde. AltGr würde nur noch <code>RAlt::</code> oder <code>&gt;!</code> (beide verwenden immer den Hook) und <code>&lt;^&gt;!</code> würde LCtrl+AltGr bedeuten. Wenn nur AltGr unten ist, würde GetKeyState LCtrl als physisch unten, aber logisch oben melden (was die Tatsache widerspiegelt, dass der Benutzer LCtrl physisch nicht gedrückt hat, aber das aktive Fenster STRG als unten ansieht).</p>
<p>AutoHotkey verwendet einige "Heuristiken", um das Vorhandensein von AltGr während des Sendens zu erkennen. Dies kann vereinfacht werden, indem man sich auf das 0x200-Bit bezieht. Andererseits kann die "Heuristik" eventuell entfernt werden, um die Codegröße zu reduzieren, da die AltGr-Erkennung (zumindest für Unicode-Versionen) via Commit 92c5a76e (v1.1.27.01) verbessert wurde. Das Testen hat bereits gezeigt, dass die neue Methode für 203 Standardlayouts unter Windows 10 hundertprozentig genau ist (was besser ist als vorher), aber es müssen noch ältere Betriebssysteme getestet werden.</p>
<h2>Liste</h2>
<h3>Befehle mit Unterbefehlen</h3>
<p>Einige der neuen Funktionen, die Unterbefehle ersetzen, geben bei Erfolg eine 1 und bei Misserfolg eine 0 zurück (neben dem Setzen von ErrorLevel), während andere nur ErrorLevel setzen. Dies sollte korrigiert werden.</p>
<p>Es gibt immer noch einige Probleme mit den Control/ControlGet-Funktionen, die je nach "Motivation des Entwicklers" in v2.0 vielleicht gelöst werden oder nicht:</p>
<ul>
<li>List bekam einen direkten Ersatz mit der gleichen Funktionalität und Syntax, einschließlich des Optionen-Parameters, der aktuell nicht für ListBox- oder ComboBox-Steuerelemente benutzt wird (was aber theoretisch möglich wäre). Scheinbar ist es am besten, die Funktion zu modernisieren.
<ul>
<li>Sie könnte ein Objekt bereitstellen, das ähnliche Fähigkeiten hat wie das neue GuiControl-Objekt (ListView), und so eine Schnittstelle zum Abrufen von ListView-Inhalten schaffen, die eine Konsistenz zwischen der GUI des Skripts und externen Programmen gewährleistet. (Die Wiederverwendung von Code wird durch die Notwendigkeit für prozessinterne Zuweisung/Lesen/Schreiben von Speicher erschwert.)</li>
<li>ListBox und ComboBox sollten ein Array zurückgeben, anstatt eine Zeichenkette, deren Elemente mit Zeilenumbruchszeichen voneinander getrennt sind. Dies wäre einfach zu implementieren, aber vorerst wird das alte Verhalten beibehalten, bis eine Entscheidung getroffen wird.</li>
<li>Es sollte umbenannt werden, da es falsch zu sein scheint, mit "WinGetList" eine Liste mit Fenstern zu ermitteln und mit "ControlGetList" <strong>keine</strong> Liste mit Steuerelementen zu ermitteln. ControlGetItems wäre besser und konsistent mit AddItem/DeleteItem/FindItem, weil sie sich mit den gleichen Elementen beschäftigen. Den alten Namen zu behalten, bis das Verhalten geändert wird, macht es möglicherweise einfacher, Skripte zu aktualisieren.</li>
</ul>
</li>
<li>Einige Funktionsnamen sind etwas zu ungenau, wie ControlGetSelected, das immer den markierten Text (nicht den vollen Wert) eines Edit-Steuerelements abruft, und nicht das ausgewählte Element in einer ListBox/ComboBox, den ausgewählten Tab, etc.</li>
<li>Es gibt verschiedene Funktionen, die scheinbar den gleichen Zweck haben (Ermitteln/Setzen eines Steuerelementwertes). Zum Beispiel haben Tab-Steuerelemente und ListBox/ComboBox-Steuerelemente das Konzept eines "ausgewählten/aktuellen Index". Es bietet einige Vorteile, spezifischere Funktionsnamen zu haben, aber es könnte auch Inkonsistenz verursachen, wie z. B.:</li>
<li>ControlGetChoice ist nicht das Gegenstück von ControlChoose, sondern von ControlChooseString. Diese Erkenntnis verstößt gegen das Prinzip der geringsten Überraschung (ich fiel darauf rein, als ich zum ersten Mal die Funktionen getestet hatte). Eine einfache Lösung wäre es, Choose und ChooseString zu kombinieren, so wie es fincs mit der GuiControl.Choose()-Methode tat. Allerdings wären wir dann immer noch ohne Funktion, um den aktuellen Index abzurufen. Möglicherweise gibt noch es andere Lösungen (die sich auch auf die anderen Punkte in dieser Liste beziehen).</li>
<li>Es fehlen scheinbar Funktionen, um den Wert von externen Steuerelementen einiger Typen abzurufen/zu setzen, wie z. B. Slider, UpDown, MonthCal (ich habe ControlSetText nicht bei diesen getestet).</li>
</ul>
<p>Der Thread-Befehl hat immer noch Unterbefehle.</p>
<ul>
<li>ThreadNoTimers sieht ein wenig seltsam aus. Vielleicht ThreadDisableTimers, oder Thread einfach als Funktion lassen, oder eine Variable verwenden.</li>
<li>Vielleicht sollte dieser Befehl durch A_-Variablen ersetzt werden, da er im Grunde nur thread-spezifische Einstellungen ändert, ähnlich wie die anderen beschreibbaren A_-Variablen. Das würde deutlicher machen, dass das Skript thread-spezifische Einstellungen ändert, statt irgendeinen anderen System-Thread (obwohl viele Benutzer Threads auf Systemebene nicht kennen).</li>
<li>Verwandt: Es könnte vorteilhaft sein, die "Nachrichtenüberprüfungsfrequenz" von Critical zu trennen, da diese eigentlich zwei unterschiedliche Konzepte sind. Mit der aktuellen Implementierung wäre dies wahrscheinlich schon möglich, aber sie bietet den Skripten keine nutzbare Schnittstelle. Das heißt, dass dies ein Unterbefehl von Thread oder eine interne Variable wie z. B. A_PeekFrequency sein sollte (welches den intern benutzten Namen entspräche).</li>
</ul>
<h3>Click / MouseClick</h3>
<p>MouseClickDrag umbenennen, vielleicht zu MouseDrag?</p>
<p>MouseClick wurde von Click abgelöst. Sollte MouseClick entfernt werden? Sollte Click zu MouseClick umbenannt werden, um konsistent mit MouseMove zu sein?</p>
<ul>
<li>Click erkennt automatisch, ob der Benutzer seine linke und rechte Maustaste via Systemsteuerung vertauscht hat, und gleicht sie entsprechend aus. Zum Beispiel würde <code>Click R</code> einen logischen Rechtsklick machen, der üblicherweise ein Kontextmenü öffnet, sogar wenn der Benutzer sein Tasten vertauscht haben sollte. In seltenen Fällen kann diese automatische Kompensation unerwünscht sein -- eine Umgehungsmöglichkeit wäre sinnvoll. Ich bin offen für konkretere Vorschläge.</li>
<li>Click unterstützt nicht den <em>Tempo</em>-Parameter. Stattdessen muss man SetDefaultMouseSpeed benutzen.</li>
<li>Click unterstützt nicht den <code>R</code>-Parameter (relative Koordinaten), der wegen "R" für "Right" mehrdeutig ist.</li>
<li>Wenn MouseClick entfernt (oder mit Click ersetzt) wird, sollte MouseClickDrag auch entfernt werden? Zumindest sollte das Standardverhalten in Bezug auf die Kompensation mit der von Click übereinstimmen.</li>
<li>Vielleicht sollten die anderen Mausbefehle geändert werden, um sie eine flexible Anordnung ihrer Parameter wie bei Click unterstützen zu lassen.</li>
</ul>
<h3>Sonstiges</h3>
<p>Der Einfachheit halber sollte es möglich sein, ein Gui-Objekt anstelle von <code>"ahk_id " Gui.Hwnd</code> an einen <em>Fenstertitel</em>-Parameter zu übergeben. Aufgrund der derzeitigen technischen Einschränkungen ist das für Befehle, die noch nicht intern in Funktionen umgewandelt wurden, nicht möglich.</p>
<p>FileGetVersion: Einige ausführbare Dateien (inklusive AutoHotkey) haben eine Versionszeichenkette, die die gleichen numerischen Werte hat, aber eine andere (korrektere) Formatierung als das, was FileGetVersion zurückgibt, aufweist, da sie auf einem anderen (rein numerischen) Feld im PE-Header basiert. Wenn die Möglichkeit hinzugefügt wird, Versionsnummer intern zu unterstützen, sollte FileGetVersion wahrscheinlich eher auf die korrektere Zeichenkette zurückgreifen.</p>
<p>OnMessage: Jemand (ich konnte den Beitrag nicht finden) schlug vor, die Reihenfolge der Parameter für die Callback-Funktionen zu ändern, möglicherweise weil Hwnd aufgrund der Tatsache, dass A_Gui entfernt worden ist, häufiger benötigt wird.</p>
<p>SoundGet/SoundSet: Die Komponenten- und Reglertypen basieren derzeit auf der Mixer-API, die nur unter 2000 und XP verwendet wird. Diese sollten aktualisiert werden, um den Möglichkeiten der Vista+ API besser gerecht zu werden. Die Unterstützung für SoundGet/SoundSet unter 2000 und XP sollte komplett entfernt werden, um dies zu vereinfachen.</p>
<h2>Fenstertitel und Fenstergruppen</h2>
<p>Hintergrundinfo: Jede Fenstergruppe besteht aus einer Liste von Fensterspezifikationen. Eine Fensterspezifikation in v1 besteht aus Fenstertitel, Fenstertext, Titelausnahme und Textausnahme. Die Auswertungsreihenfolge der Fensterspezifikationen richtet sich nach Reihenfolge ihres Hinzufügens zur einer Gruppe. Der Einfachheit halber wurde im folgenden Text "Fensterspezifikation" in "Regel" umbenannt.</p>
<h3>Ausnahmen</h3>
<p>Probleme in v1:</p>
<ul>
<li>
<p>Titelausnahme in v1 beschränkt sich auf Textübereinstimmungen; <code>ahk_class</code> oder ähnliches zum Ausschließen von Fenstern via Klasse, ID, PID etc. wird nicht unterstützt. Diese Tatsache ist für einige Benutzer irreführend, weil sie erwarten, dass Titelausnahme genauso flexibel ist wie Fenstertitel (obwohl die Dokumentation ziemlich gut erklärt, was Titelausnahme macht).</p>
</li>
<li>
<p>Ein Fenster stimmt mit der Gruppe überein, wenn es mit irgendeiner Regel übereinstimmt, welche via GroupAdd hinzugefügt wurde, selbst wenn es mit Titelausnahme oder Textausnahme aus einer <em>anderen</em> Regel übereinstimmen sollte (unabhängig von der Reihenfolge der Regeln). Dieses Verhalten ist manchmal kontra-intuitiv und verringert die Nützlichkeit von Titel-/Textausnahme in Verbindung mit Fenstergruppen.</p>
</li>
</ul>
<p>Die wahrscheinlich beste Lösung wäre es, "negative" oder "exklusive" Regeln einzuführen. Die Auswertungsreihenfolge der Regeln richtet sich nach Reihenfolge ihres Hinzufügens zu einer Gruppe und endet bei der ersten Regel (positiv oder negativ), die mit dem Fenster übereinstimmt. Dies bietet folgende Vorteile:</p>
<ul>
<li>Fenster können via Klasse, ID oder Prozess-ID/Name/Pfad ausgeschlossen werden.</li>
<li>Mehrere Fenster können ausgeschlossen werden (ohne RegEx benutzen zu müssen).</li>
<li>Komplexe Regeln können geformt werden, indem eine Gruppe mit negativen und positiven Regeln erstellt und diese dann als Regel in eine andere Gruppe eingefügt wird.</li>
</ul>
<p>Es gibt verschiedene Wege, wie man das erreichen könnte:</p>
<ul>
<li>
<p>Behandle eine Regel als negativ, wenn sie Titel-/Textausnahme hat, aber kein Fenstertitel/-text. Wenn man die gleiche Kombination (ohne Gruppe) direkt benutzen würde, wäre das Ergebnis etwas anders, was irreführend sein könnte.</p>
</li>
<li>
<p>Entferne Titelausnahme und Textausnahme bei allen Befehlen, und füge einen neuen Befehl oder Parameter hinzu, mit dem negative Regeln zu einer Fenstergruppe hinzugefügt werden können.</p>
</li>
</ul>
<p>Chris' Kommentare:</p>
<blockquote>
<p>Titelausnahme unterstützt kein ahk_pid oder Ähnliches. Alles, was es tut, steht in der Hilfedatei: "Ignoriert Fenster, deren Titel diesen Wert enthalten." Ich sehe keinen Grund, für Titelausnahme viel Code zu investieren, das nur selten benutzt wird.</p>
</blockquote>
<p>Angesichts dessen scheint es so, als wäre die zweite Option die beste Wahl.</p>
<p>In beiden Fällen ist eine negative Regel wirkungslos, wenn danach keine positiven Regeln erfolgen, weil dies bedeuten würde, dass das Fenster sowieso keine Übereinstimmung ist. Daher könnte man es einfach so drehen, dass eine Gruppe standardmäßig mit allen Fenstern übereinstimmt, wenn die letzte Regel negativ ist. Auf diese Weise würde, wenn Gruppe N nur negative Regeln enthält, <code>ahk_group N</code> mit allen Fenstern übereinstimmen, außer mit solchen, die von der Gruppe ausgeschlossen sind (anstatt immer mit nichts übereinzustimmen).</p>
<h3>Einstellungen</h3>
<p>Ein oft gefordertes Feature ist es, globale Einstellungen wie SetTitleMatchMode, DetectHiddenWindows und DetectHiddenText temporär für einen bestimmten Fenstertitel oder Befehl aufzuheben. Im Moment wäre die wahrscheinlichste Form <code>Titel ahk_mode 3 ahk_dhw 1</code>. Dieses Feature zu einem späteren Zeitpunkt zu implementieren hat sehr wahrscheinlich keinen negativen Einfluss auf bereits vorhandene Skripte; daher ist es aktuell nicht für v2.0 geplant.</p>
<h2>Binäre Daten</h2>
<p>Es scheint am besten, die Verwendung von VarSetCapacity und <code>&amp;var</code> für binäre Daten zugunsten des neuen Buffer-Objekts zu missbilligen oder zu entfernen.</p>
<p>Die Trennung von Werten von Variablen ermöglicht eine größere Flexibilität und vermeidet Doppelungen, wie z. B. <code>VarSetCapacity</code> und <code>Obj.SetCapacity</code>, oder <code>&amp;var</code> und <code>Obj.GetAddress(Name)</code>.</p>
<p>Wenn VarSetCapacity nicht entfernt wird, sollte es mit Zeichen und nicht mit Bytes fungieren. Die Bytegröße verliert an Bedeutung, wenn die Daten immer eine UTF-16-Zeichenkette sind.</p>
<p><code>&amp;</code> (Adresse-von) zu entfernen oder es mit spezifischeren Funktionen zu ersetzen (Adresse einer Zeichenkette, eines Objekts und eines Lesen/Schreiben-Puffers trennen) könnte die Übersichtlichkeit verbessern und weniger fehleranfällige Muster unterstützen.</p>
<p><strong>Boolean:</strong> Zeichenketten, die mit <code>Chr(0)</code> beginnen, sind momentan <code>false</code>, da die booleschen Checks eher von einer nullterminierten als von einer binär gezählten Zeichenkette ausgehen. Es ist vielleicht besser, solche Zeichenketten als <code>true</code> zu behandeln. Andererseits vergleichen relative Operatoren (<code>&lt;</code> <code>&gt;</code> etc.) derzeit nur bis zum Null-Terminator. Man muss darauf achten, dass dies mit der numerischen Behandlung von Zeichenketten mit chr(0) konsistent ist; also wenn <code>("0" chr(0)) == 0</code>, dann muss es <code>false</code> sein.</p>
<h2>Ausdrucksoperatoren</h2>
<p>Obwohl <code>in</code> und <code>contains</code> bereits in v2-alpha reserviert sind (um so spätere Probleme vorzubeugen), erscheint v2 ohne sie unvollständig, da Benutzer, die vorhandene v1-Skripte konvertieren wollen, eine Alternative für v2 finden müssen. Sie sollten implementiert werden, bevor v2.0 veröffentlicht wird, und moderner gemacht werden (Arrays erlauben).</p>
<p>Aktuelle Syntax: if var [not] in/contains Vergleichsliste. Vergleichsliste ist eine mit Kommas getrennte Liste. Var enthält eine Zeichenkette.</p>
<p>Es erscheint daher logisch, einen Array als Ersatz für Vergleichsliste zu ermöglichen. Jemand schlug vor, dass die neuen Operatoren keine mit Kommas getrennte Liste akzeptieren sollen, aber in diesem Fall könnte eine Zeichenkette wie folgt interpretiert werden:</p>
<ol>
<li>Ein Fehler.</li>
<li>Äquivalent zu einem Array mit einzelnen Elementen. Das würde bedeuten:
<ul>
<li><code>x in str</code> = <code>x = str</code> (nicht nützlich)</li>
<li><code>str1 contains str2</code> = <code>InStr(str1, str2)</code> (aussagekräftig und intuitiv, aber kaum nützlich)</li>
<li><code>x in/contains str</code> = <code>x in/contains [str]</code> (spart nur ein paar Zeichen und den Aufwand zum Erstellen eines Arrays; aber durch eine Optimierung könnte die Werteliste in [] direkt an den Operator übergeben werden, ohne ein tatsächliches Array erstellen zu müssen)</li>
</ul>
</li>
<li>Äquivalent zu einem Array mit einzelnen Zeichen einer Zeichenkette. Das würde bedeuten:
<ul>
<li><code>x in/contains str</code> = <code>x in/contains StrSplit(str)</code></li>
<li><code>x in str</code> = <code>StrLen(x) = 1 &amp;&amp; InStr(str, x)</code> (aber der Verfasser kennt wahrscheinlich <code>StrLen(x) = 1</code>, und schreibt daher stattdessen einfach nur <code>InStr(str, x)</code>)</li>
<li><code>x contains str</code> meist gleichbedeutend mit <code>x ~= '[' str ']'</code> (RegEx-Zeichenklasse)</li>
</ul>
</li>
<li>Unterschiedliche Bedeutung, abhängig vom Typ des Operanden. Könnte irreführend sein. Zum Beispiel:
<ul>
<li><code>str1 in str2</code> = <code>str2 contains [str1]</code> or <code>InStr(str2, str1)</code> (Teilzeichenkette-Übereinstimmung)</li>
<li><code>str1 in [str2, str3]</code> = str1 equals str2 or str3 (keine Teilzeichenkette-Übereinstimmung)</li>
</ul>
</li>
</ol>
<p>Wenn Arrays auf der linken Seite von <code>contains</code> unterstützt werden, wie würde das funktionieren? Ursprünglich war der Unterschied zwischen <code>in</code> und <code>contains</code>, dass <code>in</code> einen direkten Vergleich des Wertes durchführt, während <code>contains</code> eine Teilzeichenkette-Übereinstimmung sucht. Müsste <code>arr1 contains arr2</code> bei jedem arr1-Element überprüfen, ob ein Element in arr2 eine Teilzeichenkette ist? Oder überprüfen, ob beide Arrays gemeinsame Werte haben? Oder alles? Oder überprüfen, ob die exakte Reihenfolge der Werte in arr2 innerhalb von arr1 vorkommt? Die letzte Option wäre analog zu <code>InStr(str1, str2)</code>, aber nicht zu <code>str1 contains str2</code>.</p>
<p>Hier einige (nicht sehr relevante) Diskussionen: https://autohotkey.com/boards/viewtopic.php?f=37&amp;t=3847.</p>
<p><code>between</code> wird vermutlich überhaupt nicht implementiert. Eine Alternative bestünde darin, Verkettungen von Operatoren wie bei Python und Perl 6 zu erlauben, wo <code>x &lt; y &lt; z</code> das gleiche wie <code>(x &lt; y) and (y &lt; z)</code> wäre. Das würde jedoch bedeuten, dass Klammern die Bedeutung von <code>&lt;</code> verfremden würden (was nicht richtig zu sein scheint), z. B. bei <code>x &lt; y &lt; z</code> vs <code>(x &lt; y) &lt; z</code>, weil Letzteres das Ergebnis von <code>x &lt; y</code> (true oder false) mit z vergleichen würde. Einige Benutzer haben <code>x &lt; y &lt; z</code> bereits ausprobiert und sich über das Ergebnis gewundert, daher sollten, sofern dieses Feature nicht implementiert wird, verkettete Operatoren erkannt und eine Warn-/Fehlermeldung angezeigt werden. (Aber wenn die Erkennung von verketteten Operatoren zu kompliziert ist, könnte das Kosten-Nutzen-Verhältnis zugunsten der Implementierung dieser Verkettung ausfallen.)</p>
<h2>Objekte</h2>
<p><code>new MeineKlasse[a,b,c]</code> könnte als eine sehr komfortable Möglichkeit reserviert werden, um einen spezialisierten Array-/Auflistungstyp zu initialisieren (<code>new MeineKlasse{a:b}</code> ist bereits als Syntaxfehler "reserviert"). Aktuell könnte <code>MeinKlasse[a,b,c]</code> eine Klasse zum Instanziieren sein, aber sehr wahrscheinlich wird sie nur selten benutzt (wenn überhaupt), und ist inkonsistent mit der v1-Richtlinie bzgl. der Anforderung eines Klassennamens nach dem <code>new</code>-Operator. v1 behandelt <code>new x[y](z)</code> als <code>new c1</code>, wo c1 gleich <code>x[y](z)</code> ist, während v2-a076 diese Anweisung als <code>new c2(z)</code> behandelt, wo c2 gleich <code>x[y]</code> ist.</p>
<p>SafeArray-Objekte sollten eine <code>Length</code>-Eigenschaft bekommen, um konsistent mit einem Array-Objekt zu sein. Vielleicht doch nicht, da die Notwendigkeit, <code>.MaxIndex()</code> zu verwenden, als Erinnerung dienen kann, dass SafeArrays oft nullbasiert sind.</p>
<p>ComObjConnect()-Ereignisse dereferenzieren ByRef-VARIANTs derzeit automatisch (da einige Sprachen so etwas immer dann übergeben, wenn ein Skript eine Variable übergibt), wodurch die Funktion in einigen Fällen daran gehindert wird, einen Wert zurückzugeben. Entweder könnten wir a) ByRef-Wrapper übergeben, die Zuweisungen wie <code>param[] := value</code> erlauben, oder b) eine Variable automatisch übergeben und das VARIANT nach Funktionsaufruf aktualisieren. Andere (also Nicht-VARIANT) ByRef-Kombinationen werden nicht dereferenziert, und <code>param[] := value</code> wird seit v1.1.17 bereits unterstützt.</p>
<h2>Klassen</h2>
<p>Das Wort <code>base</code> zu einem reservierten Wort in Klassenmethoden machen. Derzeit erhält es eine besondere Bedeutung, wenn danach <code>.</code> oder <code>[</code> erfolgt, außer wenn in die Variable <code>base</code> ein Wert gespeichert wurde. Das Wort zu reservieren vereinfacht die Sprache und könnte die Performance verbessern. Andererseits wäre es vielleicht einfacher, <code>super.method()</code>/<code>super.prop[idx]</code> dafür zu verwenden und <code>this.base</code> als Eigenschaft zu belassen, die das Base-Objekt dieses Objekts zurückgibt.</p>

</body>
</html><!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->

