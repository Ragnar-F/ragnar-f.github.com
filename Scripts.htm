<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>AutoHotkey Scripts und Makros</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="../forum/rss.php">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>Scripts</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung</a></li>
  <li><a href="#auto">Der obere Bereich des Scripts (automatischer Ausführungsbereich)</a>: Dieser Bereich wird automatisch beim Starten des Scripts ausgeführt.</li>
  <li><a href="#esc">Schutzsequenzen</a>: Wann `% und `, verwendet werden soll, um ein Prozentzeichen oder Komma direkt anzugeben.</li>
  <li><a href="#Comments">Kommentare in Scripts</a>: Die Verwendung des Semikolons und der Symbole /*...*/, um Bemerkungen zu einem Script hinzuzufügen. </li>
  <li><a href="#continuation">Aufteilung einer langen Zeile in mehreren kurzen Zeilen</a>: Das kann die Lesbarkeit und Wartbarkeit eines Scripts verbessern.</li>
  <li><a href="#ahk2exe">Umwandlung eines Scripts in eine EXE-Datei (ahk2exe)</a>: Wandelt ein .ahk-Script in eine .exe-Datei um, die auf jedem PC ausgeführt werden kann.</li>
  <li><a href="#cmd">Übergabe von Befehlszeilenparameter an einem Script</a>: Die Variablen %1%, %2% usw. enthalten die eingehenden Parameter.</li>
  <li><a href="#cp">Script-Datei-Zeichensatz</a>: Nicht-ASCII-Zeichen sicher in Scripts verwenden.</li>
  <li><a href="#debug">Debuggen eines Scripts</a>: Wie die Fehler eines Scripts gefunden werden können, das sich falsch verhält.</li>
  <li><a href="#port">Portabilität von AutoHotkey.exe</a>: Eine Kopie von AutoHotkey.exe ist genug, um jede .ahk-Datei auszuführen.</li>
  <li><a href="#install">Installer-Optionen</a>: Wie unbeaufsichtigte/automatische Installationen oder Deinstallationen durchgeführt werden können.</li>
</ul>
<h2 id="intro">Einführung</h2>
<p>Jedes Script ist eine Klartextdatei mit Zeilen, die vom Programm (AutoHotkey.exe) ausgeführt werden. Ein Script kann auch <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten, oder sogar nur aus diesen bestehen. Wenn jedoch die Hotkeys und Hotstrings nicht vorhanden sind, dann führt ein Script seine Befehle von oben nach unten nacheinander aus, sobald es gestartet wird.</p>
<p>Das Programm lädt das Script Zeile für Zeile in den Speicher, wobei jede Zeile bis zu 16383 Zeichen lang sein kann. Während des Ladevorgangs wird das Script <a href="misc/Performance.htm">optimiert</a> und überprüft. Syntaxfehler werden angezeigt, und müssen behoben werden, bevor das Script ausgeführt werden kann.</p>
<h2><a name="auto" id="auto"></a>Der obere Bereich des Scripts (automatischer Ausführungsbereich)</h2>
<p> Sobald das Script geladen wird, beginnt ihre Ausführung bei der ersten Zeile und wird fortgesetzt, bis ein <a href="commands/Return.htm">Return</a>, <a href="commands/Exit.htm">Exit</a>, <a href="Hotkeys.htm">Hotkey-/Hotstring-Label</a> oder das physische Ende erfolgt (je nachdem was zuerst eintritt). Dieser obere Bereich des Scripts wird auch als <em>automatischer Ausführungsbereich</em> bezeichnet.</p>
<p>Ein Script, das weder <a href="commands/_Persistent.htm">persistent</a> noch <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/OnMessage.htm">OnMessage</a> und <a href="commands/Gui.htm">GUI</a> enthält, wird beendet, sobald der automatische Ausführungsbereich zum Abschluss kommt. Ansonsten läuft es im Leerlauf und reagiert auf Ereignisse wie Hotkeys, Hotstrings, <a href="commands/Gui.htm#label">GUI-Ereignisse</a>, <a href="commands/Menu.htm">benutzerdefinierte Menüpunkte</a> und <a href="commands/SetTimer.htm">Timer</a>.</p>
<p>Jeder <a href="misc/Threads.htm">Thread</a>, der durch <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/Menu.htm"> Menüpunkte</a>, <a href="commands/Gui.htm#label">GUI-Ereignisse</a> oder <a href="commands/SetTimer.htm">Timer</a> gestartet wird, beginnt mit den gesetzten Standardwerten im automatischen Ausführungsbereich. Wenn nicht gesetzt, dann gelten die Standardeinstellungen, die in den folgenden Seiten angegeben sind: <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>,  <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>,  <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>,  <a href="commands/SetBatchLines.htm">SetBatchLines</a>, <a href="commands/SendMode.htm">SendMode, </a><a href="commands/SetKeyDelay.htm">SetKeyDelay</a>,  <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>, <a href="commands/SetWinDelay.htm"></a><a href="commands/SetWinDelay.htm">SetWinDelay</a>, <a href="commands/SetControlDelay.htm">SetControlDelay</a>, <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="commands/CoordMode.htm">CoordMode</a>, <a href="commands/SetStoreCapslockMode.htm">SetStoreCapslockMode</a>, <a href="commands/AutoTrim.htm">AutoTrim, </a><a href="commands/SetFormat.htm">SetFormat</a>, <a href="commands/StringCaseSense.htm">StringCaseSense</a>, <a href="commands/Thread.htm">Thread</a> und <a href="commands/Critical.htm">Critical</a>.</p>
<p>Falls der automatische Ausführungsbereich eine lange Zeit braucht, zum Abschluss zu kommen (oder nie), dann werden die Standardwerte der oben genannten Einstellungen nach 100 Millisekunden automatisch wirksam. Wenn der automatische Ausführungsbereich danach doch noch zum Abschluss kommt (wenn überhaupt), dann werden die Standardwerte nochmals aktualisiert. Daher ist es am besten, gewünschte Änderungen im oberen Bereich des Scripts durchzuführen, das <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/SetTimer.htm">Timer</a> oder <a href="commands/Menu.htm">benutzerdefinierte Menüpunkte</a> enthält. Beachtet außerdem, dass jeder <a href="misc/Threads.htm">Thread</a> seine eigene Sammlung von den oben genannten Einstellungen aufbewahrt. Änderungen an diesen Einstellungen beeinflussen keine anderen <a href="misc/Threads.htm">Threads</a>.</p>
<h2 id="esc">Schutzsequenzen</h2>
<p>Das Standard-<a href="commands/_EscapeChar.htm">Schutzzeichen</a> von AutoHotkey ist ein Akzent (`), das auf der deutschen Tastatur direkt links neben der Rücktaste gefunden werden kann. Wenn dieses Zeichen anstelle vom Backslash verwendet wird, dann wird verhindert, dass doppelte Backslashs in Dateipfaden benötigt werden.</p>
<p>Da Kommas und Prozentzeichen eine besondere Bedeutung in der AutoHotkey-Sprache haben, verwendet `, für ein direkt vorhandenes Komma und `% für ein direkt vorhandenes Prozentzeichen. Eine Ausnahme bildet die <a href="commands/MsgBox.htm">MsgBox</a>, da dort Kommas nicht geschützt werden müssen. Eine weitere Ausnahme bilden Kommas im letzten Parameter eines Befehls: sie müssen ebenfalls nicht geschützt werden. Siehe <a href="commands/_EscapeChar.htm">#EscapeChar</a> für eine komplette Liste von Schutzsequenzen.</p>
<p>Bestimmte Sonderzeichen werden auch durch eine Schutzsequenz erzeugt. `t (Tabulator), `n (LF-Zeichen) und `r (CR-Zeichen) werden am häufigsten verwendet.</p>
<p>Tipp: Der Einfachheit halber kann das erste Komma bei einem Befehl weggelassen werden (außer wenn der erste Parameter leer ist oder mit := oder = beginnt, oder der Befehl am Anfang eines <a href="#continuation">Fortsetzungsbereich</a> alleine steht). Zum Beispiel:</p>
<pre>MsgBox Das ist ok.
MsgBox<strong>,</strong> Das ist auch ok (es hat ein direktes Komma).</pre>
<h2 id="Comments">Kommentare in Scripts </h2>
<p>Scripts können mithilfe eines Semikolons am Anfang einer Zeile kommentiert werden. Zum Beispiel:</p>
<pre><em>; Diese ganze Zeile ist ein Kommentar.</em></pre>
<p>Kommentare können auch nach einem Befehl erfolgen, dabei muss vor dem Semikolon mindestens ein Leerzeichen oder Tabulator stehen. Zum Beispiel:</p>
<pre>Run Notepad  <em>; Dieser Kommentar befindet sich auf derselben Zeile wie der Befehl.</em></pre>
<p>Darüber hinaus können die Symbole /* und */ verwendet werden, um einen ganzen Bereich auszukommentieren, <em>aber nur, wenn die Symbole am Anfang einer Zeile stehen</em>, wie in diesem Beispiel:</p>
<pre><em>/*
MsgBox, Diese Zeile wurde auskommentiert (deaktiviert).
MsgBox, Diese auch.
*/</em></pre>
<p>Da Kommentare ignoriert werden, sobald ein Script ausgeführt wird, haben sie keinen Einfluss auf die Performance oder Speicherauslastung.</p>
<p>Das Standard-Kommentarzeichen (Semikolon) kann mithilfe von <a href="commands/_CommentFlag.htm">#CommentFlag</a> zu einem anderen Zeichen oder String geändert werden.</p>
<h2 id="continuation">Aufteilung einer langen Zeile in mehreren kurzen Zeilen</h2>
<p>Lange Zeilen können in mehreren kurzen Zeilen aufgeteilt werden, um die Lesbarkeit und Wartbarkeit zu verbessern. Dadurch wird nicht die Ausführungsgeschwindigkeit des Scripts reduziert, weil solche Zeilen im Speicher zusammengeführt werden, sobald das Script ausgeführt wird.</p>
<p><strong>Methode #1</strong>: Eine Zeile, die mit "and", "or",  ||, &&, einem Komma oder einem <a href="Variables.htm#concat">Punkt</a> beginnt, wird automatisch mit der oberen Zeile zusammengeführt (seit v1.0.46 gilt das auch für <a href="Variables.htm#Operators">Ausdrucksoperatoren</a>, außer ++ und --). Im folgenden Beispiel wird die zweite Zeile an der Ersten angefügt, weil sie mit einem Komma beginnt:</p>
<pre>FileAppend, Das ist der Text, der angefügt wird.`n   <em>; Ein Kommentar ist hier erlaubt.</em>
    <strong>,</strong> %A_ProgramFiles%\BeliebigeAnwendung\Log-Datei.txt  <em>; Kommentar.</em></pre>
<p>Ebenso werden die folgenden Zeilen zu einer Zeile zusammengeführt, weil die letzten zwei mit "and" oder "or" beginnen:</p>
<pre>If (Farbe = "Rot" or Farbe = "Grün"  or Farbe = "Blau"   <em>; Kommentar.</em>
    <strong>or</strong> Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Weiß")   <em>; Kommentar.</em>
    <strong>and</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)   <em>; Kommentar.</em></pre>
<p>Der <a href="Variables.htm#ternary">ternäre Operator</a> ist auch gut dafür geeignet:</p>
<pre>ProduktIstVerfügbar := (Farbe = "Rot")
    <strong>?</strong> false  <em>; Keine roten Produkte verfügbar, daher ist der Funktionsaufruf irrelevant.</em>
    <strong>:</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)</pre>
<p>Obwohl die Einrückung in den obigen Beispielen optional ist, könnte sie dennoch Klarheit dabei verschaffen, welche Zeilen zusammengehören. Außerdem ist es unnötig, zusätzliche Leerzeichen in Zeilen einzufügen, die mit den Wörtern "AND" und "OR" beginnen; das Programm erledigt das automatisch. Letztendlich können leere Zeilen oder <a href="#Comments">Kommentare</a> zwischen oder am Ende einer Zeile in den obigen Beispielen hinzugefügt werden.</p>
<p> <strong>Methode #2</strong>: Diese Methode sollte verwendet werden, um eine große Anzahl an Zeilen zusammenzuführen oder wenn die Zeilen nicht für Methode #1 geeignet sind. Obwohl diese Methode besonders für Hotstrings beim <a href="Hotstrings.htm">Automatischen Ersetzen</a> nützlich ist, kann sie mit jedem Befehl oder <a href="Variables.htm#Expressions">Ausdruck</a> verwendet werden. Zum Beispiel:</p>
<pre><em>; BEISPIEL #1:</em>
Var =
(
Zeile 1 des Textes.
Zeile 2 des Textes. Standardmäßig ist ein LF-Zeichen (`n) zwischen den Zeilen vorhanden.
)

<em>; BEISPIEL #2:</em>
FileAppend,  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
Eine Textzeile.
<i>Standardmäßig</i> wird das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile als LF-Zeichen (`n) in die Datei geschrieben.
    <i>Standardmäßig</i> wird der Tabulator auf der linken Seite dieser Zeile auch in die Datei geschrieben (das gleiche gilt auch für Leerzeichen).
<i>Standardmäßig</i> werden Variablenreferenzen wie %Var% in den Variableninhalt aufgelöst.
), C:\Eigene Datei.txt</pre>
<p>In den obigen Beispielen werden mehrere Zeilen durch die obere und untere Klammer abgegrenzt. Das ist auch bekannt als <em>Fortsetzungsbereich</em>. Beachtet, dass die untere Zeile nach der schließenden Klammer den letzten Parameter von <a href="commands/FileAppend.htm">FileAppend</a> enthält. Diese Methode ist optional; in dieser Form wird das Komma als Parametertrennung anstatt als ein direkt vorhandenes Komma angesehen.</p>
<p>Das Standardverhalten eines Fortsetzungsbereichs kann überschrieben werden, indem beliebig viele folgende Optionen auf der rechten Seite der öffnenden Klammer erfolgen. Wenn mehrere Optionen vorhanden sind, dann trennt sie mit Leerzeichen. Zum Beispiel: ( LTrim Join| %</p>
<p><strong><a name="Join"></a>Join</strong>: Gibt an, wie Zeilen verbunden werden sollen. Wenn diese Option weggelassen wird, dann erfolgt nach jeder Zeile außer der letzten ein LF-Zeichen (`n). Wenn nur das Wort <em>Join</em> angegeben ist, dann werden die Zeilen direkt verbunden, ohne ein Zeichen dazwischen. Ansonsten können unmittelbar nach dem Wort <em>Join</em> maximal 15 Zeichen erfolgen. Zum Beispiel wird Join`s ein Leerzeichen nach jeder Zeile einfügen, außer der Letzten (<strong>`s</strong> ist direkt vorhandenes Leerzeichen -- eine besondere Schutzsequenz, die nur von <em>Join</em> erkannt werden kann). Ein weiteres Beispiel ist <em>Join`r`n</em>, das CR+LF zwischen den Zeilen einfügt. Ebenso wird <em>Join|</em> einen senkrechten Strich dazwischen einfügen. Damit die letzte Zeile in dem Bereich auch mit einem Join-String endet, fügt eine leere Zeile unmittelbar über der schließenden Klammer ein.</p>
<p><strong><a name="LTrim"></a>LTrim</strong>: Lässt Leerzeichen und Tabulatoren am Anfang jeder Zeile weg. Das wird hauptsächlich verwendet, damit im Fortsetzungsbereich eingerückt werden kann. Außerdem kann diese Option für mehrere Fortsetzungsbereiche aktiviert werden, indem <em>#LTrim</em> in einer eigenen Zeile angegeben wird. <em>#LTrim</em> ist von der Position abhängig: es beeinflusst alle Fortsetzungsbereiche darunter. Die Einstellung kann mithilfe von <em>#LTrim Off</em> deaktiviert werden.</p>
<p><strong>RTrim0</strong> (RTrim gefolgt von einer 0): Deaktiviert das Weglassen von Leerzeichen und Tabulatoren am Ende jeder Zeile.</p>
<p><strong><a name="CommentOption"></a>Comments</strong> (oder <strong>Comment</strong> oder <strong>Com</strong> oder <strong>C</strong>) <span class="ver">[v1.0.45.03+]</span>: Ermöglicht <a href="#Comments">Semikolon-Kommentare</a> innerhalb des Fortsetzungsbereichs (aber nicht /*..*/). Solche Kommentare (mit allen Leerzeichen und Tabulatoren auf der linken Seite) werden vollständig vom verbundenen Ergebnis weggelassen, anstatt sie direkt als Text zu behandeln. Jeder Kommentar kann auf der rechten Seite einer Zeile oder auf einer neuen Zeile selbst erscheinen.</p>
<p><strong>%</strong> (Prozentzeichen): Behandelt Prozentzeichen als Literale anstatt als Variablenreferenzen. Dadurch müssen Prozentzeichen nicht <a href="commands/_EscapeChar.htm">geschützt</a> werden, damit es direkt vorhanden ist. Diese Option wird nicht benötigt, falls Prozentzeichen bereits Literale sind, wie Hotstrings beim <a href="Hotstrings.htm">Automatischen Ersetzen</a>.</p>
<p><strong>,</strong> (Komma): Behandelt Kommas als Trennzeichen, anstatt als direkt vorhandene Kommas. Diese selten verwendete Option ist nur für Kommas zwischen Befehlsparametern notwendig, weil sie in <a href="Functions.htm">Funktionsaufrufen</a> keine Rolle spielen. Außerdem wandelt diese Option nur die Kommas um, die tatsächlich Parameter trennen. Sobald mit anderen Worten der letzte Befehlsparameter erreicht ist (oder keine Parameter vorhanden sind), werden nachfolgende Kommas als direkt vorhandene Kommas behandelt, unabhängig von dieser Option.</p>
<p><a name="accent"></a><strong>`</strong> (Akzent): Behandelt jeden Akzent direkt anstatt als ein <a href="commands/_EscapeChar.htm">Schutzzeichen</a>. Außerdem können dadurch Kommas und Prozentzeichen nicht direkt und einzeln geschützt werden. Darüber hinaus wird die Übersetzung von direkt angegebenen Schutzsequenzen wie `r und `t unterdrückt.</p>
<p><a name="non-continuation"></a><strong>)</strong> <span class="ver">[v1.1.01+]</span>: Wenn eine schließende Klammer in den Optionen des Fortsetzungsbereichs angegeben wird (außer als Parameter der <a href="#Join">Join</a>-Option), dann wird die Zeile als ein Ausdruck interpretiert, anstatt als Beginn eines Fortsetzungsbereichs. Dadurch funktionieren Ausdrücke wie <code>(x.y)[z]()</code>, ohne dabei die öffnende Klammer schützen zu müssen.</p>
<p><u>Bemerkungen</u></p>
<p><a href="commands/_EscapeChar.htm">Schutzsequenzen</a> wie `n (LF) und `t (Tabulator) werden innerhalb von Fortsetzungsbereichen unterstützt, nur nicht, wenn die <a href="#accent">Akzent-Option (`)</a> angegeben wurde.</p>
<p>Wenn die <a href="#CommentOption">Comment-Option</a> fehlt, werden Semikolon- und /*..*/-Kommentare innerhalb eines  Fortsetzungsbereichs nicht unterstützt, weil sie als direkt vorhanden angesehen werden. Allerdings können Kommentare in der unteren und oberen Zeile des Bereichs eingefügt werden. Zum Beispiel:</p>
<pre>FileAppend<strong>,</strong>   <em>; Kommentar.
; Kommentar.</em>
( LTrim Join    <em>; Kommentar.</em>
    &nbsp;; Das ist <strong>kein</strong> Kommentar; es ist direkt vorhanden. Fügt das Wort <i>Comments</i> in der Zeile darüber ein, damit es ein Kommentar wird.
), C:\Datei.txt   <em>; Kommentar.</em></pre>
<p>Folglich müssen Semikolons innerhalb eines Fortsetzungsbereichs nie <a href="commands/_EscapeChar.htm">geschützt</a> werden.</p>
<p>Ein Fortsetzungsbereich kann keine Zeile erzeugen, deren Länge 16.383 Zeichen überschreitet (wenn es versucht wird, erscheint eine Warnmeldung, sobald das Script gestartet wird). Als Übergangslösung können mehrere Verkettungen in eine Variable durchgeführt werden.  Zum Beispiel:</p>
<pre>Var =
(
...
)
Var = %Var%`n  <em>; Fügt mithilfe eines weiteren Fortsetzungsbereichs noch mehr Text hinzu.</em>
(
...
)
FileAppend, %Var%, C:\Eigene Datei.txt</pre>
<p> Da eine schließende Klammer das Ende eines Fortsetzungsbereichs kennzeichnet, muss sie mit einem Akzentzeichen geschützt werden, damit die Zeile mit einer schließenden Klammer beginnen kann: `).</p>
<p>Unmittelbar nach einem Fortsetzungsbereich kann eine Zeile mit der öffnenden Klammer eines weiteren Fortsetzungsbereichs erfolgen. Dadurch können die oben genannten Optionen während der Erstellung einer einzelnen Zeile variiert werden.</p>
<p>Die stückweise Konstruktion eines Fortsetzungsbereichs mithilfe von <a href="commands/_Include.htm">#Include</a> wird nicht unterstützt.</p>
<h2 id="ahk2exe">Umwandlung eines Scripts in eine EXE-Datei (ahk2exe)</h2>
<p>Ein Script-Compiler wurde dem Programm beigelegt (freundlicherweise von fincs).</p>
<p> Sobald ein Script kompiliert ist, ist es eine eigenständige ausführbare Datei; dadurch kann sie sogar auf Computer verwendet werden, die kein AutoHotkey installiert haben (solche EXE-Dateien können ohne Einschränkungen weitergegeben oder verkauft werden). Der Kompilierungsvorgang erstellt eine ausführbare Datei, die folgendes enthält: den AutoHotkey-Interpreter, das Script, jede <a href="commands/_Include.htm">eingefügte</a> Datei und jede Datei, die mithilfe von <a href="commands/FileInstall.htm">FileInstall</a> integriert wurde.</p>
<p>Ahk2Exe kann wie folgt verwendet werden:</p>
<ol>
  <li><strong>GUI-Schnittstelle</strong>: Führt die Verknüpfung "Convert .ahk to .exe" im Startmenü aus.</li>
  <li><strong>Rechtsklick</strong>: In einem offenen Explorer-Fenster kann eine .ahk-Datei mit der rechten Maustaste angeklickt und "Compile Script" ausgewählt werden (nur verfügbar, wenn die Option "Script Compiler" bei der Installation von AutoHotkey markiert wurde). Dadurch wird eine EXE-Datei mit dem gleichen Dateinamen des Scripts erstellt, die nach einer kurzen Zeit im gleichen Verzeichnis erscheint. Hinweis: Die EXE-Datei wird mit dem Icon und der .bin-Datei erstellt, die zuvor mittels der ersten Methode von oben bestimmt wurden.</li>
  <li><a name="ahk2exeCmd"></a><strong>Befehlszeile</strong>: Der Compiler kann auf der Befehlszeile mit folgenden Parametern ausgeführt werden:
  <pre>Ahk2Exe.exe /in EigenesScript.ahk [/out EigenesScript.exe] [/icon EigenesIcon.ico] [/bin AutoHotkeySC.bin]</pre>
  Zum Beispiel:
<pre>Ahk2exe.exe /in "EigenesScript.ahk" /icon "EigenesIcon.ico"</pre>
Verwendung:
<ul>
<li>Parameter mit Leerzeichen sollten von Anführungszeichen umschlossen werden.</li>
<li>Wenn die Ausgabedatei fehlt, dann hat die EXE-Datei den selben Dateinamen wie das Script selbst.</li>
</ul></li>
</ol>
<p>Hinweise:</p>
<ul>
  <li>BOM-lose Scripts werden wie die Unicode-Version von AutoHotkey_L als UTF-8 interpretiert. Das heißt, dass das Script <strong>als UTF-8 abgespeichert werden muss</strong>, falls Nicht-ASCII-Zeichen vorhanden sind.</li>
  <li>Die Kompilierung verbessert die Performance des Scripts in keiner Weise.</li>
  <li>Seit v1.1.01 wird der Passwortschutz und die /NoDecompile-Option nicht mehr unterstützt.</li>
  <li>Sobald <a href="http://www.matcode.com/mpress.htm">mpress.exe</a> im Unterordner "Compiler" vorhanden ist, wo AutoHotkey installiert wurde, dann wird die ausführbare Datei komprimiert. Damit wird auch der Quellcode des Scripts komprimiert (ohne Kommentare), der ansonsten mithilfe eines PE-Ressource-Editors aus der EXE-Datei extrahiert werden kann.</li>
  <li>Die Befehle <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> und "<a href="commands/Menu.htm">Menu, Tray, ShowMainWindow</a>" beeinflussen das Verhalten von kompilierten Scripts.</li>
  <li>Die Versionsinformation (wird im Eigenschaftsfenster des Explorers angezeigt) eines kompilierten Scripts kann je nach Bedarf angepasst werden, wenn mithilfe von Resource Hacker (Freeware) die Datei "AutoHotkeySC.bin" bearbeitet wird. Diese Datei befindet sich im Unterordner "Compiler", wo AutoHotkey installiert wurde. <a href="http://www.autohotkey.com/forum/topic22975.html">Compile_AHK II</a> kann verwendet werden, um diesen Prozess zu erleichtern. Seit v1.1.01 kann das kompilierte Script anstelle von AutoHotkeySC.bin bearbeitet werden.</li>
  <li>Mit der oberen Methode können auch vorhandene Icons geändert oder neue Icons in kompilierte Scripts hinzugefügt werden.</li>
  <li>Die interne Variable A_IsCompiled enthält 1, wenn das Script kompiliert ist. Ansonsten ist sie leer.</li>
  <li>Sobald Parameter an Ahk2Exe übergeben werden, erscheint eine Meldung in der Standardausgabe (stdout) bei Erfolg oder Misserfolg des Kompilierungsvorgangs. Obwohl die Meldung nicht in der Eingabeaufforderung angezeigt wird, kann sie durch die Umleitung der Ausgabe an einer Datei "abgefangen" werden. <span class="ver">[v1.0.43+]</span></li>
</ul>
<p>Der Quellcode sowie neuere Versionen des Compilers können auf <a href="https://github.com/fincs/Ahk2Exe">GitHub</a> gefunden werden.</p>

<h2 id="cmd">Übergabe von Befehlszeilenparameter an einem Script</h2>
<p>Scripts unterstützen Befehlszeilenparameter. Das Format ist:</p>
<pre>AutoHotkey.exe [<i>Optionen</i>] [<i>Script-Dateiname</i>] [<i>Script-Parameter</i>]</pre>
<p>Bei kompilierten Scripts ist das Format:</p>
<pre>KompiliertesScript.exe [<i>Optionen</i>] [<i>Script-Parameter</i>]</pre>
<p><strong>Optionen:</strong> Beliebig viele Optionen: <br> /f oder /force -- bedingungsloses Starten, Warnmeldungen werden übersprungen. <br> /r oder /restart -- Script neu starten (wird auch intern vom <a href="commands/Reload.htm">Reload</a>-Befehl verwendet).<br> /ErrorStdOut -- Sendet Syntax-Fehler, die den Script-Start verhindern, an die Standardausgabe (stdout), anstatt ein Dialogfenster anzuzeigen. Siehe <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a> für weitere Details.<br> /Debug -- <span class="ver">[AHK_L 11+]:</span> Verbindet sich zu einem Debugger-Client. Für weitere Details, siehe <a href="#idebug">Interaktives Debuggen</a>.<br> <a name="CPn"></a>/CP<i>n</i> -- <span class="ver">[AHK_L 51+]:</span> Überschreibt den Standard-Zeichensatz, der zum Lesen der Script-Dateien verwendet wird. Weitere Details können in <a href="#cp">Zeichensatz einer Script-Datei</a> gefunden werden.</p>
<p><a name="defaultfile"></a><strong>Script-Dateiname:</strong> Das kann weggelassen werden, wenn keine <em>Script-Parameter</em> vorhanden sind. Wenn weggelassen, dann wird eine Datei von einem folgenden Standort standardmäßig ausgeführt (oder nachgefragt, ob eine Datei erstellt werden soll):</p>
<p><span class="ver">[AHK_L 51+]:</span> <code>%AhkExeDir%\%AhkExeName%.ahk</code> oder <code><a href="Variables.htm#MyDocuments">%A_MyDocuments%</a>\%AhkExeName%.ahk</code>, wobei <em>%AhkExeDir%</em> und <em>%AhkExeName%</em> mit dem Verzeichnis und Dateinamen der ausführbaren Datei ohne die Erweiterung ".exe" ersetzt wird, die verwendet wurde, um das Script auszuführen.</p>
<p><span class="ver">[Frühere Versionen]:</span> <code>AutoHotkey.ini</code> (im aktuellen Arbeitsverzeichnis) oder <code><a href="Variables.htm#MyDocuments">%A_MyDocuments%</a>\AutoHotkey.ahk</code>.</p>
<p><strong>Script-Parameter:</strong> Ein oder mehrere Strings, die an das Script übergeben werden sollen, jeder durch Leerzeichen getrennt. Jeder Parameter, der Leerzeichen enthält, sollte in Anführungszeichen gesetzt werden. Ein Anführungszeichen kann durch das Voranstellen eines Backslashs (\") direkt übergeben werden. Daher wird jeder anhängende Schrägstrich in einem zitierten Parameter (wie "C:\Eigene Dokumente<span class="red">\"</span>) als direkt vorhandenes Anführungszeichen behandelt (das heißt, dass das Script den String C:\Eigene Dokumente<span class="red">"</span> erhalten wird). Um solche Anführungszeichen zu entfernen, verwendet <em><a href="commands/StringReplace.htm">StringReplace, 1, 1, <span class="red">"</span>,, All</a></em>.</p>
<p>Das Script versteht eingehende Parameter als die <a href="Variables.htm">Variablen</a> %1%, %2% und so weiter. Darüber hinaus enthält %0% die Anzahl an übergebenen Parametern (0 wenn keine). Das folgende Beispiel beendet das Script, falls zu wenig Parameter übergeben wurden:</p>
<pre>if 0 < 3  <em>; Die linke Seite einer <a href="commands/IfEqual.htm">If-Anweisung ohne Ausdruck</a> ist immer der Name einer Variable.</em>
{
    MsgBox Das Script benötigt mindestens 3 eingehende Parameter, jedoch kamen nur %0% an.
    ExitApp
}</pre>
<p>Wenn die Anzahl der übergebene Parameter an einem Script variiert (wenn der Benutzer zum Beispiel mehrere Dateien auf ein Script zieht und ablegt), dann kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
<pre>Loop, %0%  <em>; Für jeden Parameter:</em>
{
    param := %A_Index%  <em>; Ruft den Inhalt der Variable ab, deren Name in A_Index enthalten ist.</em>
    MsgBox, 4,, Parameternummer %A_Index% ist %param%.  Weiter?
    IfMsgBox, No
        break
}</pre>
<p>Wenn die Parameter Dateinamen sind, dann kann folgendes Beispiel verwendet werden, um sie in zeichengenaue lange Namen umzuwandeln (wie im Dateisystem gespeichert), einschließlich des  vollständigen/absoluten Pfads:</p>
<pre>Loop %0%  <em>; Für jeden Parameter (oder abgelegte Datei auf ein Script):</em>
{
    Pfadangabe := %A_Index%  <em>; Ruft den Inhalt der Variable ab, deren Name in A_Index enthalten ist.</em>
    Loop %Pfadangabe%, 1
        LangerPfad = %A_LoopFileLongPath%
    MsgBox Der zeichengenaue lange Pfadname der Datei `n%Pfadangabe%`n ist:`n%LangerPfad%
}</pre>
<p>Bekannte Einschränkung: das Ziehen von Dateien auf eine .ahk-Datei kann fehlschlagen, wenn 8.3-Namen (Kurznamen) in einem NTFS-Dateisystem deaktiviert wurden. Als Übergangslösung kann das Script <a href="#ahk2exe">kompiliert</a> werden, um die Dateien danach auf die resultierende EXE-Datei zu ziehen.</p>

<h2 id="cp">Script-Datei-Zeichensatz <span class="ver">[AHK_L 51+]</span></h2>
<p>Die Zeichen einer Script-Datei werden vom Zeichensatz beschränkt, der benutzt wird, um die Datei zu laden.</p>
<ul>
  <li>Quelldateien <b class="red">müssen</b> für kompilierte Scripts in <b>UTF-8</b> kodiert sein oder nur ASCII-Zeichen enthalten.</li>
  <li>Wenn die Datei mit einer UTF-8- oder UTF-16-Bytereihenfolge-Markierung beginnt, dann wird der entsprechende Zeichensatz verwendet und die <a href="#CPn">/CP<i>n</i></a>-Option ignoriert.</li>
  <li>Wenn die <a href="#CPn">/CP<i>n</i></a>-Option in der Befehlszeile angegeben wird, dann wird Zeichensatz <i>n</i> verwendet. Für eine Liste von numerischen Zeichensatzkennungen, siehe <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">MSDN</a>.</li>
  <li>Ansonsten verwenden Unicode-Versionen UTF-8 und ANSI-Versionen den Standard-ANSI-Zeichensatz des Systems.</li>
</ul>
<p>Sobald der gesamte Text in das <a href="Compat.htm#Format">ursprüngliche String-Format</a> umgewandelt wird (falls erforderlich), werden ungültige oder nicht vorhandene Zeichen im ursprünglichen Zeichensatz mit einem Platzhalter ersetzt: ANSI '?' oder Unicode '?'. In Unicode-Versionen sollte das nur auftreten, wenn Kodierungsfehler in der Script-Datei vorhanden sind oder der verwendete Zeichensatz zum Speichern oder Laden einer Datei nicht passt.</p>
<p><b class="red">Bitte beachtet:</b><br> In Unicode-Versionen werden Nicht-ASCII-Zeichen wahrscheinlich falsch interpretiert oder mit ? ersetzt, wenn der Zeichensatz nicht korrekt angegeben wird. Die UTF-8-Kodierung wird zur Verwendung empfohlen. Wenn der bevorzugte Editor UTF-8 (oder UTF-16 mit BOM) nicht unterstützt, dann verwendet die <a href="#CPn">/CP<i>n</i></a>-Option und ersetzt <i>n</i> mit 0 oder mit der entsprechenden numerischen Kennung des System-ANSI-Zeichensatzes.</p>
<p><a href="commands/RegWrite.htm">RegWrite</a> kann verwendet werden, um den Standard für Scripts festzulegen, die im Explorer ausgeführt werden (z. B. beim Doppelklick auf einer Datei):</p>
<pre><em>; Hebt die Kommentierung der entsprechenden Zeile auf oder lasst sie alle kommentiert,
;   um den Standard der aktuellen Version wiederherzustellen.  Je nach Bedarf anpassen:
; Zeichensatz = 0        ; Standard-ANSI-Zeichensatz des Systems
; Zeichensatz = 65001    ; UTF-8
; Zeichensatz = 1200     ; UTF-16
; Zeichensatz = 1252     ; ANSI-Latin-1; Westeuropäisch (Windows)</em>
if (Zeichensatz != "")
    Zeichensatz := " /CP" . Zeichensatz
Befehl="%A_AhkPath%"%Zeichensatz% "`%1" `%*
Schlüssel=AutoHotkeyScript\Shell\Open\Command
if A_IsAdmin    <em>; Für alle Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCR, %Schlüssel%,, %Befehl%
else            <em>; Nur für den aktuellen Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCU, Software\Classes\%Schlüssel%,, %Befehl%

</pre><p>Das setzt voraus, dass AutoHotkey_L bereits installiert wurde. Die Ergebnisse sind alles andere als optimal, wenn das nicht der Fall ist.</p>

<h2 id="debug">Debuggen eines Scripts</h2>
<p>Befehle wie <a href="commands/ListVars.htm">ListVars</a> und <a href="commands/Pause.htm">Pause</a> kann dabei helfen, das Script zu debuggen. Zum Beispiel erstellen die folgenden zwei Zeilen "Haltepunkte" im Script, wenn sie vorübergehend auf sorgfältig ausgewählte Positionen eingesetzt werden:</p>
<pre>ListVars<br>Pause</pre>
<p>Sobald das Script diese zwei Zeilen erreicht, werden die aktuellen Variableninhalte zur Überprüfung angezeigt. Falls das Script fortgesetzt werden soll, hebt die Pause mithilfe des Datei- oder Tray-Menüs auf. Das Script wird dann bis zum nächsten "Haltepunkt" (sofern vorhanden) fortgesetzt.</p>
<p>Am besten sollten diese "Haltepunkte" an Positionen eingefügt werden, wo das aktive Fenster keine Rolle spielt, wie z. B. unmittelbar vor einem WinActivate-Befehl. Dadurch kann das Script wieder ordnungsgemäß fortgesetzt werden, sobald die Pause aufgehoben wird.</p>
<p>Die folgenden Befehle sind auch fürs Debuggen nützlich: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> und <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>Häufig auftretende Fehler wie Tippfehler und fehlende Deklarationen von globalen Variablen können durch die <a href="commands/_Warn.htm">Aktivierung von Warnungen</a> erkannt werden.</p>
<h3 id="idebug">Interaktives Debuggen <span class="ver">[AHK_L 11+]</span></h3>
<p>Interaktives Debuggen ist mit einem unterstützten <a href="AHKL_DBGPClients.htm">DBGp-Client</a> möglich. Typischerweise sind die folgenden Aktionen möglich:</p>
<ul>
  <li>Haltepunkte auf Zeilen setzen oder entfernen - die Ausführung anhalten, sobald ein <a href="http://en.wikipedia.org/wiki/Breakpoint">Haltepunkt</a> erreicht wurde.</li>
  <li>Den Code Zeile für Zeile durchgehen - Funktionen und Subroutinen betreten, überspringen oder verlassen.</li>
  <li>Alle oder eine bestimmte Variable überwachen.</li>
  <li>Den Stapel von laufenden Subroutinen und Funktionen anzeigen.</li>
</ul>
<p>Beachtet, dass diese Funktionalität für kompilierte Scripts deaktiviert ist.</p>
<p>Um interaktives Debuggen zu aktivieren, startet zuerst einen unterstützten Debugger-Client und führt danach das Script mit der <b>/Debug</b>-Befehlszeilenoption aus.</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i> und <i>PORT</i> können weggelassen werden.  Zum Beispiel sind beide Angaben gleichwertig:</p>
<pre>AutoHotkey /Debug "EigenesScript.ahk"
AutoHotkey /Debug=localhost:9000 "EigenesScript.ahk"</pre>
<p id="debug_attach"><span class="ver">[AHK_L 59+]:</span> Um den Debugger nachträglich mit einem Script zu verbinden, sendet ihn eine Nachricht wie folgt:</p>
<pre>Scriptpfad = <em>; SETZT HIER DEN VOLLSTÄNDIGEN PFAD DES SCRIPTS EIN</em>
DetectHiddenWindows On
ifWinExist %Scriptpfad% ahk_class AutoHotkey
    <em>; Optionale Parameter:
    ;   wParam  = die IPv4-Adresse des Debugger-Clients als ein 32-Bit-Integer.
    ;   lParam  = der Port, der vom Debugger-Client abgehört wird.</em>
    PostMessage DllCall("RegisterWindowMessage", "str", "AHK_ATTACH_DEBUGGER")

</pre>
<p>Sobald der Debugger-Client verbunden ist, kann er ohne Beenden des Scripts getrennt werden, indem der "detach"-Befehl von DBGp gesendet wird.</p>

<h2 id="port">Portabilität von AutoHotkey.exe</h2>
<p>Es wird nur die Datei AutoHotkey.exe benötigt, um ein beliebiges .ahk-Script zu starten. Die einzige Ausnahme ist Windows NT4, das eine Kopie von psapi.dll (aus dem AutoHotkey-Ordner) für jedes Script benötigt, welches den <a href="commands/Process.htm">Process-Befehl</a> verwendet.</p>
<p><span class="ver">[AHK_L 51+]:</span> Das Umbenennen von AutoHotkey.exe ändert außerdem, welches Script <a href="#defaultfile">standardmäßig</a> ausgeführt wird, dass eine Alternative zur Kompilierung eines Scripts ist, damit es auf einem Computer ohne installiertem AutoHotkey verwendet werden kann. Zum Beispiel wird <i>EigenesScript</i>.exe automatisch <i>EigenesScript</i>.ahk ausführen, wenn ein Dateiname nicht verfügbar ist, aber in der Lage ist, andere Scripts auszuführen.</p>
<h2 id="install">Installer-Optionen</h2>
<p>Damit AutoHotkey automatisch in das Standardverzeichnis installiert werden kann (das gleiche Verzeichnis, welches im normalen Installationsmodus angezeigt wird), übergibt den Parameter /S an den Installer (/S muss großgeschrieben werden). Zum Beispiel:</p>
<pre>AutoHotkey104307_Install.exe /S</pre>
<p>Mithilfe des /D-Parameters kann ein beliebiges Verzeichnis anstelle des Standardverzeichnisses angegeben werden (in Abwesenheit von /S wird damit das Standardverzeichnis geändert, welches vom Installer angezeigt wird). Zum Beispiel:</p>
<pre>AutoHotkey104307_Install.exe /S /D=C:\Programme\AutoHotkey</pre>
<p><span class="ver">[v1.0.92.01+]:</span> Um die ANSI- oder x64-Version anstelle der Unicode-x86-Version zu installieren, übergibt den /ANSI oder /x64-Parameter. Zum Beispiel:</p>
<pre>AutoHotkey109700_Install.exe /S /ANSI</pre>
<p>Damit AutoHotkey automatisch deinstalliert werden kann, übergibt den Parameter /S an den Uninstaller. Zum Beispiel:</p>
<pre>"C:\Programme\AutoHotkey\uninst.exe" /S</pre>
<h2>Script-Beispiele</h2>
<p>Siehe <a href="scripts/">diese Seite</a> für einige nützliche Scripts.</p>
</body>
</html>
