<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>VarSetCapacity()</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>VarSetCapacity()</h1>

<p>Vergr&ouml;&szlig;ert die Aufnahmekapazit&auml;t einer Variable oder gibt deren Speicher frei. Normalerweise nur f&uuml;r ungew&ouml;hnliche Sachverhalte wie bei <a href="DllCall.htm">DllCall</a>.</p>

<pre class="Syntax">Gew&auml;hrteKapazit&auml;t := VarSetCapacity(Variablenname [, Ben&ouml;tigteKapazit&auml;t, F&uuml;llbyte])</pre>
<h3>Parameter</h3>
<table class="info">
  <tr> 
    <td width="15%">Gew&auml;hrteKapazit&auml;t</td>
    <td width="85%">Die L&auml;nge des Strings, die die Variable nun halten kann, wobei sie gr&ouml;&szlig;er gleich <em>Gew&auml;hrteKapazit&auml;t</em> ist. Wenn der <em>Variablennamen</em> ung&uuml;ltig ist (z. B. direkt vorhandener String oder Zahl), dann wird eine 0 zur&uuml;ckgegeben. Wenn das System nicht gen&uuml;gend Speicher zu Verf&uuml;gung hat, um die Ver&auml;nderung vorzunehmen (sehr selten), dann wird ein Fehler-Dialogfenster angezeigt und der <a href="../misc/Threads.htm">aktuelle Thread</a> beendet.</td>
  </tr>
  <tr>
    <td>Variablenname</td>
    <td>Der Name der Variable (<em>ohne Anf&uuml;hrungszeichen</em>). Zum Beispiel: VarSetCapacity(EigeneVar, 1000). Kann auch eine dynamische Variable (z. B. Array%i%) oder der <a href="../Functions.htm#ByRef">ByRef-Parameter einer Funktion</a> sein.</td>
  </tr>
  <tr>
    <td>Ben&ouml;tigteKapazit&auml;t</td>
    <td><p>Wenn weggelassen, dann wird die aktuelle Kapazit&auml;t der Variable zur&uuml;ckgegeben und deren Inhalt nicht ver&auml;ndert. Ansonsten geht der komplette Inhalt der Variable verloren (die Variable wird leer gemacht).</p>
      <p>Gebt f&uuml;r die <em>Ben&ouml;tigteKapazit&auml;t</em> die L&auml;nge des Strings an, die die Variable nach der Einstellung halten soll. Diese L&auml;nge umfasst nicht den internen Null-Terminator. Zum Beispiel erlaubt eine 1, dass die Variable zus&auml;tzlich zum internen Terminator ein Zeichen h&auml;lt. Hinweis: Die Variable wird automatisch erweitert, wenn das Script sp&auml;ter einen gr&ouml;&szlig;eren Wert zuweist.</p>      
      <p>Da diese Funktion oft einfach aufgerufen wird, um sicherzustellen, dass die Variable eine bestimmte Mindestkapazit&auml;t hat, dann wird die Variable aus Gr&uuml;nden der Performance nur verkleinert, wenn die <em>Ben&ouml;tigteKapazit&auml;t</em> eine 0 ist. Mit anderen Worten: wenn die Variablenkapazit&auml;t bereits gr&ouml;&szlig;er als die <em>Ben&ouml;tigteKapazit&auml;t</em> ist, dann wird sie nicht verkleinert (die Variable wird aber f&uuml;r die Konsistenz immer noch leer gemacht).</p>
      <p>Um daher eine Variable direkt zu verkleinern, gebt deren Speicher mit <em>VarSetCapacity(Var, 0)</em> frei und verwendet danach <em>VarSetCapacity(Var, NeueKapazit&auml;t)</em>, oder lasst sie einfach nach Bedarf automatisch um 0 erweitern.</p>
      <p>Aus Gr&uuml;nden der Performance funktioniert m&ouml;glicherweise die Speicherfreigabe einer Variable mit einer Kapazit&auml;t von 1 bis 63 nicht, weil deren Speicher permanenter Art ist. In diesem Fall wird die aktuelle Kapazit&auml;t anstelle einer 0 zur&uuml;ckgegeben.</p>
      <p>Aus Gr&uuml;nden der Performance wird eine Variable mit einer Kapazit&auml;t unter 4096 nicht freigegeben, wenn ein leerer String gespeichert wird (z. B. <em>Var := &quot;&quot;</em>). Allerdings kann sie mit <em>VarSetCapacity(Var, 0)</em> freigegeben werden.</p>
      <p><a name="neg1"></a>Ab v1.0.44.03 kann mit -1 in der <em>Ben&ouml;tigteKapazit&auml;t</em> die intern gespeicherte L&auml;nge der Variable auf die L&auml;nge des aktuellen Inhalts aktualisiert werden. In F&auml;llen n&uuml;tzlich, wo Variablen indirekt ver&auml;ndert werden (z. B. die &Uuml;bergabe einer <a href="../Variables.htm#amp">Adresse</a> an <a href="DllCall.htm">DllCall()</a>). In diesem Modus gibt VarSetCapacity() die L&auml;nge anstelle der Kapazit&auml;t zur&uuml;ck.</p></td>
  </tr>
  <tr>
    <td>F&uuml;llbyte</td>
    <td>Dieser Parameter wird normalerweise weggelassen, wobei der Speicher der Zielvariable nicht initialisiert wird (stattdessen wird die Variable wie oben beschrieben einfach leer gemacht). Verwendet ansonsten eine Zahl zwischen 0 und 255. Jedes Byte im Speicherbereich der Zielvariable (deren aktuelle Kapazit&auml;t) wird auf diese Zahl gesetzt.  Die 0 ist mit Abstand der h&auml;ufigste verwendete Wert, weil sie bei Variablen mit unbearbeiteten Bin&auml;rdaten n&uuml;tzlich ist (z. B. bei einer <a href="DllCall.htm#struct">DllCall-Struktur</a>)</td>
  </tr>
</table>

<h3>Bemerkungen</h3>
<p>Neben der <a href="DllCall.htm#str">DllCall</a>-Verwendung kann diese Funktion auch dazu verwendet werden, die Performance zu erh&ouml;hen, wenn ein String mithilfe der stufenweisen Verkettung konstruiert wird. Dadurch k&ouml;nnen mehrere automatische Gr&ouml;&szlig;enanpassungen verhindert werden, wenn bekannt ist, wie gro&szlig; letztendlich die Stringl&auml;nge ist. In einem solchen Fall muss die <em>Ben&ouml;tigteKapazit&auml;t</em> nicht genau sein: wenn die Kapazit&auml;t zu klein ist, dann ist die Performance immer noch verbessert. Au&szlig;erdem beginnt die Variable mit der automatischen Erweiterung, wenn die Kapazit&auml;t verbraucht ist. Wenn die Kapazit&auml;t zu gro&szlig; ist, dann wird etwas zu viel Speicher verbraucht, aber nur vor&uuml;bergehend, denn der gesamte Speicher kann mithilfe von <em>VarSetCapacity(Var, 0)</em> oder <em>Var := &quot;&quot;</em> wieder freigegeben werden.</p>
<p><a href="_MaxMem.htm">#MaxMem</a> limitiert nur die automatische Erweiterung der Variable. <a href="VarSetCapacity.htm">VarSetCapacity</a> wird aber dadurch nicht beeinflusst.</p>
<h3>Verwandte Befehle</h3>
<p><a href="DllCall.htm">DllCall</a>, <a href="_MaxMem.htm">#MaxMem</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">VarSetCapacity(EigeneVar, 10240000)  <em>; ~10 MB</em>
Loop
{
    ...
    EigeneVar = %EigeneVar%%StringF&uuml;rVerkettung%
    ...
}</pre>

</body>
</html>
