<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>FileAppend</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>FileAppend</h1>

<p>Schreibt Text an das Ende einer Datei (erstellt die Datei je nach Bedarf).</p>

<pre class="Syntax">FileAppend [, Text, Dateiname, Kodierung]</pre>
<h3>Parameter</h3>
<table class="info">
  <tr>
    <td width="15%">Text</td>
    <td width="85%"><p>Der Text, welcher an der Datei angefügt wird. Mit LF-Zeichen (`n) können neue Zeilen begonnen werden. Außerdem kann eine lange Zeile in mehreren kurzen Zeilen mit einem <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a> aufgetrennt werden.</p>
      <p>Wenn der <em>Text</em>-Parameter leer ist, dann wird der <em>Dateiname</em> als leere Datei erstellt (wenn sie bereits existiert, wird nur das Erstellungsdatum aktualisiert).</p>
    <p>Wenn der <em>Text</em>-Parameter den Inhalt von <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> enthält, dann wird der <em>Dateiname</em> ohne Vorbehalt mit dem ganzen Zwischenspeicher überschrieben (d. h. <a href="FileDelete.htm">FileDelete</a> ist nicht notwendig).</p></td>
  </tr>
  <tr>
    <td>Dateiname</td>
    <td><p>Der Name der Datei, die sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist.</p>
    <p><strong>Binärmodus:</strong> Um den Text im Binärmodus anzufügen, stellt ein Sternchen vor dem Dateinamen. Dadurch wird jedes LF-Zeichen (`n) zu einem einzelnen Zeilenvorschub (LF) anstelle des Windows-Standards CR + LF. Zum Beispiel: *C:\Eigene Unix-Datei.txt</p>
    <p>Wenn die Datei noch nicht offen ist (z. B. wegen einer <a href="LoopReadFile.htm">dateilesenden Schleife</a>), dann wird die Datei automatisch im Binärmodus geöffnet, wenn der <em>Text</em>-Parameter CR-LF-Paare (`r`n) enthält. Das bedeutet, dass die bereits beschriebene Sternchen-Option automatisch in Kraft tritt. Wird das Sternchen angegeben, wenn der <em>Text</em> `r`n enthält, dann wird die Performance verbessert, weil das Programm <em>Text</em> nicht nach `r`n suchen muss.</p>
    <p><strong><a name="stdout"></a>Standard-Ausgabe (stdout):</strong> Enthält der <em>Dateiname</em> nur ein Sternchen (*), dann wird der <em>Text</em> zur Standard-Ausgabe (stdout) gesendet. Solche Texte können an einer Datei oder EXE-Datei weitergeleitet werden oder von <a href="_ErrorStdOut.htm">originellen Texteditoren</a> abgefangen werden. Das folgende Beispiel ist einer Eingabeaufforderung gültig:<br> "%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Eigenes Script.ahk" >"Error Log.txt"</p>
    <p>Allerdings wird der zur Standard-Ausgabe gesendete Text nicht in der Eingabeaufforderung angezeigt. Dieses Problem kann umgangen werden, wenn die Ausgabe des Scripts zu einem anderen Befehl oder Programm weitergeleitet wird. Zum Beispiel:<br> 1) "%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Eigenes Script.ahk" |more<br> 2) For /F "tokens=*" %L in ('""%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Eigenes Script.ahk""') do @Echo %L<br>
  </tr>
  <tr>
    <td>Kodierung</td>
    <td><span class="ver">[AHK_L 42+]:</span> Überschreibt die Standard-Kodierung von <a href="FileEncoding.htm">FileEncoding</a> mit einer benutzerdefinierten <em>Kodierung</em>.</td>
  </tr>
</table>

<h3>ErrorLevel</h3>
<p>Bei Problemen wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt, ansonsten enthält ErrorLevel eine 0.</p>
<p>Die interne Variable <a href="../Variables.htm#LastError">A_LastError</a> enthält den Rückgabewert der Systemfunktion GetLastError().</p>

<h3>Bemerkungen</h3>
<p>Um eine bestehende Datei zu überschreiben, löscht sie vorher mit <a href="FileDelete.htm">FileDelete</a>.</p>
<p>Die Zieldatei wird automatisch geschlossen, nachdem der Text angefügt wurde (außer wenn FileAppend im Einzelparameter-Modus innerhalb einer <a href="LoopReadFile.htm">dateilesenden/schreibenden Schleife</a> verwendet wird).</p>
<p><span class="ver">[AHK_L 42+]:</span> <a href="FileOpen.htm">FileOpen()</a> im Anfügen-Modus bietet mehr Kontrolle als FileAppend und ermöglicht der Datei geöffnet zu bleiben, anstatt sie jedesmal neu zu öffnen und zu schließen. Sobald eine Datei im Anfügen-Modus geöffnet ist, kann der String mit <code>file.<a href="../objects/File.htm#Write">Write</a>(string)</code> angefügt werden. Datei-Objekte unterstützen auch binäre Eingaben und Ausgaben mit <a href="../objects/File.htm#RawWrite">RawWrite</a>/<a href="../objects/File.htm#RawRead">RawRead</a> oder <a href="../objects/File.htm#WriteNum">Write<i>Num</i></a>/<a href="../objects/File.htm#ReadNum">Read<i>Num</i></a>, während FileAppend nur Text unterstützt.</p>
<h3>Verwandte Befehle</h3>
<p><a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">Datei-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="IniWrite.htm">IniWrite</a>, <a href="FileDelete.htm">FileDelete</a>, <a href="OutputDebug.htm">OutputDebug</a>, <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">FileAppend, Eine weitere Zeile.`n, C:\Eigene Dokumente\Test.txt

<em>; Das folgende Beispiel verwendet ein <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a>, um die Lesbar- und Wartbarkeit zu verbessern:</em>
FileAppend,
(
Eine Textzeile.
Standardmäßig befindet sich das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile.
    Diese Zeile wird mit einem Tabulator eingerückt; Standardmäßig wird dieser Tabulator auch in der Datei geschrieben.
Variablenreferenzen wie %Var% werden standardmäßig mit dem Variableninhalt ersetzt.
), C:\Eigene Datei.txt</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><a name="FTP"></a><em>; Das folgende Beispiel demonstriert, wie das Hochladen per FTP automatisiert werden kann,
; dazu wird der systeminterne FTP-Befehl verwendet. Dieses Script wurde mit Windows XP und Windows 98SE getestet.</em>

FTPCommandFile = %A_ScriptDir%\FTPCommands.txt
FTPLogFile = %A_ScriptDir%\FTPLog.txt
FileDelete %FTPCommandFile%  <em>; Falls das vorherige Ausführen vorzeitig beendet wurde.</em>

FileAppend,  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
open host.domain.com
username
password
binary
cd htdocs
put %VarContainingNameOfTargetFile%
delete SomeOtherFile.htm
rename OldDateiname.htm NewDateiname.htm
ls -l
quit
), %FTPCommandFile%

RunWait %comspec% /c ftp.exe -s:"%FTPCommandFile%" >"%FTPLogFile%"
FileDelete %FTPCommandFile%  <em>; Aus Sicherheitsgründen löschen.</em>
Run %FTPLogFile%  <em>; Zeigt das Protokoll zur Überprüfung an.</em></pre>

</body>
</html>
