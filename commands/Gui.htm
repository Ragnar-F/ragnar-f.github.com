<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>GUI</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="../../forum/rss.php">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
h1 {font-size: 200%; margin-top: 0.5em}
-->
</style>
</head>
<body>

<h1>GUI</h1>

<p>Erstellt und verwaltet Fenster und deren Steuerelemente. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden.</p>

<pre class="Syntax">Gui, Unterbefehl [, Param2, Param3, Param4]</pre>
<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Add">Add</a>: Erstellt ein Steuerelement wie z. B. Text, Schaltfläche oder Kontrollkästchen.</li>
  <li><a href="#Show">Show</a>: Zeigt das Fenster an. Kann ein Fenster auch minimieren, maximieren oder verschieben.</li>
  <li><a href="#Submit">Submit</a>: Speichert die Benutzerdaten und kann das Fenster versteckt.</li>
  <li><a href="#Cancel">Cancel</a> (oder Hide): Versteckt das Fenster.</li>
  <li><a href="#Destroy">Destroy</a>: Entfernt das Fenster.</li>
  <li><a href="#Font">Font</a>: Bestimmt die Schriftart, Größe, Stil und Textfarbe für danach erstellte Steuerelemente.</li>
  <li><a href="#Color">Color</a>: Bestimmt die Hintergrundfarbe für Fenster und/oder deren Steuerelemente.</li>
  <li><a href="#Margin">Margin</a>: Bestimmt den Rand/Abstand, sobald keine eindeutige Position für das Steuerelement definiert wurde. </li>
  <li><a href="#Options">Optionen und Styles für ein Fenster</a>: Legt verschiedene Optionen zum Aussehen und Verhalten des Fensters fest.</li>
  <li><a href="#Menu">Menu</a>: Hinzufügen oder Entfernen einer Menüleiste.</li>
  <li><a href="#Minimize">Minimize / Maximize / Restore</a>: Bestimmte Operationen am Fenster ausführen.</li>
  <li><a href="#Flash">Flash</a>: Das Fenster und die Schaltfläche auf der Taskleiste fangen an zu blinken.</li>
  <li><a href="#Default">Default</a>: Ändert die Standardnummer des aktuellen GUI-Fensters. </li>
  <li><a href="#Position">Positionierung und Größe der Steuerelemente</a></li>
  <li><a href="#Events">Aktionen und Variablen den Steuerelementen zuweisen</a>: Variablen und g-Label </li>
  <li><a href="#OtherOptions">Optionen und Styles für Steuerelemente</a></li>
  <li><a href="#Labels">Fensterereignisse</a>: <a href="#GuiClose">GuiClose</a> | <a href="#GuiEscape">GuiEscape</a> | <a href="#GuiSize">GuiSize</a> | <a href="#GuiContextMenu">GuiContextMenu</a> | <a href="#GuiDropFiles">GuiDropFiles</a></li>
  <li><a href="#MultiWin">Mehrere GUI-Fenster erstellen</a></li>
  <li><a href="#DefaultWin">GUI-Ereignisse, Threads und Subroutinen</a></li>
  <li>Sonstiges: <a href="#Navigate">Navigation mit der Tastatur</a> | <a href="#Appear">Fensterdarstellung</a> | <a href="#GenRemarks">Allgemeine Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a>: Enthalten funktionierende Scripts, die GUI-Fenster und Steuerelemente darstellen.</li>
</ul>

<h2 id="Add">Gui, Add, Steuerelementart [, Optionen, Text]</h2>
<p>Fügt einem GUI-Fenster ein Steuerelement hinzu (GUI-Fenster wird je nach Bedarf automatisch erstellt).</p>

<p>Folgende <em>Steuerelementart</em> kann verwendet werden:</p>
<ul>
  <li><a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#UpDown">UpDown</a>, <a href="GuiControls.htm#Picture">Picture</a></li>
  <li><a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Checkbox">Checkbox</a>, <a href="GuiControls.htm#Radio">Radio</a></li>
  <li><a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a></li>
  <li><a href="GuiControls.htm#ListBox">ListBox</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a></li>
  <li><a href="GuiControls.htm#Hotkey">Hotkey</a>, <a href="GuiControls.htm#DateTime">DateTime</a>, <a href="GuiControls.htm#MonthCal">MonthCal</a></li>
  <li><a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#Progress">Progress</a></li>
  <li><a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a>, <a href="GuiControls.htm#IE_Control">Steuerelement für Internet Explorer</a></li>
</ul>
<p>Zum Beispiel:</p>
<pre>Gui, Add, Text,, Bitte Name eingeben:
Gui, Add, Edit, vName
Gui, Show</pre>
<h2 id="Show">Gui, Show [, Optionen, Titel]</h2>
<p>Sofern nicht anders in den <em>Optionen</em> angegeben, macht dieser Befehl das Fenster sichtbar, hebt das Minimieren je nach Bedarf auf, <a href="WinActivate.htm">aktiviert</a> es und legt den Titel fest. Wenn der <em>Titel</em> nicht vorhanden ist, dann wird der vorherige Titel beibehalten (bzw. der Dateiname des Scripts, wenn keiner vorhanden ist).</p>
<p>Wenn die Optionen X, Y, W und H nicht vorhanden sind, dann wird die vorherige Größe und Position beibehalten. Wenn keine vorherige Position vorhanden ist und einer der beiden unten genannten Optionen X und/oder Y fehlen, dann wird das Fenster in Abhängigkeit der jeweiligen Abmessung automatisch zentriert. Wenn keine vorherige Größe vorhanden ist, dann wird die Fenstergröße automatisch an den Steuerelementen angepasst.</p>
<p>Beliebig viele folgende Strings sind in den <em>Optionen</em> möglich. Jede Nummer muss dezimal angegeben werden und hat Pixel als Einheitsgröße:</p>
<p> <strong>Wn</strong>: Für <strong>n</strong> die Breite des Client-Bereichs im Fenster angeben (der Client-Bereich schließt Rahmen, Titelleiste und <a href="#Menu">Menüleiste</a> des Fensters aus).</p>
<p><strong>Hn</strong>: Für <strong>n</strong> die Höhe des Client-Bereichs im Fenster angeben.</p>
<p><strong>Xn</strong>: Für <strong>n</strong> die X-Position des Fensters angeben. Position 0 ist die erste sichtbare Pixelspalte am linken Bildschirmrand. </p>
<p><strong>Yn</strong>: Für <strong>n</strong> die Y-Position des Fensters angeben. Position 0 ist die erste sichtbare Pixelzeile am oberen Bildschirmrand.</p>
<p><strong>Center</strong>: Das Fenster wird horizontal und vertikal auf dem Bildschirm zentriert.</p>
<p> <strong>xCenter</strong>: Das Fenster wird nur horizontal auf dem Bildschirm zentriert. Zum Beispiel: <em>Gui, Show, xCenter y0</em></p>
<p><strong>yCenter</strong>: Das Fenster wird nur vertikal auf dem Bildschirm zentriert.</p>
<p><strong><a name="AutoSize"></a>AutoSize</strong>: Die Fenstergröße wird an den sichtbaren Steuerelementen angepasst. Das ist nützlich, um die Fenstergröße anzupassen, nachdem neue Steuerelemente hinzugefügt oder Größe und Sichtbarkeit vorhandener Steuerelemente geändert wurden. Zum Beispiel:<br> <em>Gui, Show, AutoSize Center</em></p>
<p><br> <em><strong>Eine folgende Option kann auch vorhanden sein:</strong></em></p>
<p><strong>Minimize</strong>: Minimiert das Fenster und aktiviert das darunterliegende Fenster.</p>
<p><strong>Maximize</strong>: Maximiert und aktiviert das Fenster.</p>
<p><strong>Restore</strong>: Hebt das Maximieren und Minimieren des Fensters je nach Bedarf wieder auf. Das Fenster wird je nach Bedarf angezeigt und aktiviert.</p>
<p><strong>NoActivate</strong>: Hebt das Maximieren und Minimieren des Fensters je nach Bedarf wieder auf. Das Fenster wird angezeigt, ohne es zu aktivieren.</p>
<p><strong>NA</strong>: Das Fenster wird angezeigt, ohne es zu aktivieren. Das Minimieren des Fensters wird nicht aufgehoben, kann aber in der Z-Rangordnung nach oben steigen (die Rangordnung kann im Alt-Tab-Fenster überprüft werden). Wenn das Fenster vorher versteckt war, dann erscheint das Fenster über dem aktiven Fenster, selbst wenn das aktive Fenster nicht deaktiviert ist.</p>
<p><strong>Hide</strong>: Versteckt das Fenster und aktiviert das darunterliegende Fenster. Hat die gleiche Funktionsweise wie <a href="#Cancel">Gui Cancel</a>, außer dass Position, Größe und Titel des versteckten Fensters geändert werden kann, ohne es anzuzeigen. Zum Beispiel: <em>Gui, Show, Hide x55 y66 w300 h200, Neuer Titel</em></p>

<h2 id="Submit">Gui, Submit [, NoHide]</h2>
<p>Speichert den Inhalt jedes Steuerelements erst in die <a href="#var">zugewiesene Variable</a> (falls vorhanden) und versteckt das Fenster, wenn die NoHide-Option vorhanden ist. Bei Steuerelementen mit mehreren Ausgabefeldern (z. B. eine <a href="GuiControls.htm#ListBoxMulti">mehrfach ausgewählte</a> ListBox) enthält die Ausgabe das <a href="#Delimiter">aktuelle Begrenzungszeichen</a> des Fensters. Wenn das Fenster nicht vorhanden ist (z. B. mittels <a href="#Destroy">Gui Destroy</a>), dann hat dieser Befehl keine Wirkung.</p>

<h2 id="Cancel">Gui, Cancel</h2>
<p>Versteckt das Fenster, ohne den Inhalt der Steuerelemente in die jeweils <a href="#var">zugewiesene Variable</a> zu speichern. Wenn das Fenster nicht vorhanden ist (z. B. mittels <a href="#Destroy">Gui Destroy</a>), dann hat dieser Befehl keine Wirkung.</p>

<h2 id="Destroy">Gui, Destroy</h2>
<p>Entfernt das Fenster (falls vorhanden) bzw. die dazugehörigen Steuerelemente und gibt den entsprechenden Arbeitsspeicher sowie die Systemressourcen frei. Wenn das Fenster später neu erstellt wird, dann werden alle Fenstereigenschaften wie Farbe und Schriftart wieder mit den Standardwerten beginnen (als hätte das Fenster nie existiert). Wenn <em>Gui Destroy</em> nicht verwendet wird, dann werden alle GUI-Fenster beim Beenden des Scripts automatisch entfernt.</p>

<h2 id="Font">Gui, Font [, Optionen, Schriftart]</h2>
<p>Bestimmt die Art, Größe, Stil und/oder Farbe der Schrift für Steuerelemente, die nach diesem Befehl erstellt werden. Zum Beispiel:</p>
<pre>Gui, Font, s10, Verdana  <em>; Schriftart Verdana mit Größe 10.</em></pre>
<p>Sind die letzten beiden Parameter nicht vorhanden, dann wird Art, Größe und Farbe der Standard-Systemschrift wiederhergestellt.</p>
<p><em>Schriftart</em> ist der Name einer beliebigen Schrift (siehe <a href="../misc/FontsStandard.htm">Tabelle für Schriftarten</a>). Wenn die <em>Schriftart</em> nicht vorhanden ist oder nicht im Betriebssystem vorkommt, dann wird die vorherige Schriftart verwendet (bzw. die Standardschriftart des Betriebssystems, wenn keine vorhanden ist). Aus diesem Grund hat das GUI-Fenster in verschiedenen Betriebssystemen die gleiche Schriftart, selbst wenn einige dieser Systeme die bevorzugte Schriftart nicht anbieten. Im folgenden Beispiel hat Verdana Vorrang vor Arial, welches wiederum Vorrang vor MS Sans Serif hat:</p>
<pre>Gui, Font,, MS sans serif
Gui, Font,, Arial
Gui, Font,, Verdana  <em>; Bevorzugte Schriftart.</em></pre>
<p>Wenn der <em>Optionen</em>-Parameter leer ist, dann werden die vorher benutzten Attribute der Schrift verwendet. Ansonsten können beliebig viele der folgenden Optionsbuchstaben als Ersatz angegeben werden:</p>
<p><strong>C</strong>: Namen der Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>), ein RGB-Wert oder das Wort "Default", um die Standardfarbe des Betriebssystems zu verwenden (meistens schwarz). Beispielwerte: cRed, cFFFFAA, cDefault. Hinweis: <a href="GuiControls.htm#Button">Schaltflächen</a> ignorieren benutzerdefinierte Farben. Außerdem kann dem einzelnen Steuerelement eine bestimmte Farbe mit der C-Option zugewiesen werden. Zum Beispiel: <em>Gui, Add, Text, cRed, Eigener Text</em></p>
<p><strong>S</strong>: Größe (in Punkten). Zum Beispiel: s12 (muss dezimal sein)</p>
<p><strong>W</strong>: Breite (Dicke). Eine Nummer zwischen 1 und 1000 (400 ist normal und 700 ist fett). Zum Beispiel: w600 (muss dezimal sein)</p>
<p>Die folgenden Wörter werden auch unterstützt: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> und norm. <em>Norm</em> stellt die normale Breite/Dicke der Schrift wieder her und deaktiviert kursiv, durchgestrichen und unterstrichen (Farbe und Größe bleiben jedoch erhalten). Es ist möglich, erst alle Attribute mit norm zu deaktivieren und danach neue Attribute hinzuzufügen. Mit <em>norm italic</em> beispielsweise wird die Schrift normalisiert und danach auf kursiv gesetzt.</p>
<p>Mehrere Optionen müssen mit einem Leerzeichen getrennt werden. Zum Beispiel: cBlue s12 bold</p>
<p>Wenn ein Script <a href="#MultiWin">mehrere GUI-Fenster</a> erzeugt, dann hat jedes Fenster seine eigene "aktuelle Schriftart" für die Erstellung neuer Steuerelemente.</p>
<p>Das Betriebssystem besitzt auch Standard-Fensterdialoge zum Auswählen von Farben, Schriftarten oder Icons. Diese Dialog-Fenster können mittels <a href="DllCall.htm">DllCall()</a> angezeigt werden, siehe dazu <a href="http://www.autohotkey.com/forum/topic17230.html">www.autohotkey.com/forum/topic17230.html</a>.</p>
<p id="fontq"><strong>Q</strong>: <span class="ver">[AHK_L 19+]:</span> Textdarstellungsqualität. Zum Beispiel: q3. Nach Q sollte eine Zahl aus der folgenden Tabelle erfolgen:</p>
<table class="info">
  <tr><td>0 = DEFAULT_QUALITY</td><td>Aussehen der Schrift spielt keine Rolle.</td></tr>
  <tr><td>1 = DRAFT_QUALITY</td><td>Aussehen der Schrift ist weniger wichtig als der verwendete PROOF_QUALITY-Wert.</td></tr>
  <tr><td>2 = PROOF_QUALITY</td><td>Zeichenqualität der Schrift ist wichtiger als die exakte Anpassung der logischen Schriftattribute.</td></tr>
  <tr><td>3 = NONANTIALIASED_QUALITY</td><td>Schrift wird nicht geglättet.</td></tr>
  <tr><td>4 = ANTIALIASED_QUALITY</td><td>Schrift wird geglättet, wenn sie es unterstützt und die Schriftgröße nicht zu klein oder zu groß ist.</td></tr>
  <tr><td>5 = CLEARTYPE_QUALITY</td><td>Windows XP und höher: Wenn vorhanden, dann wird der Text mit ClearType-Kantenglättung dargestellt (wenn möglich).</td></tr>
</table>
<p>Für weitere Details, was diese Werte bedeuten, siehe <a href="http://msdn.microsoft.com/en-us/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
<p>Da die höchste Qualität normalerweise die Standardeinstellung ist, wird diese Option eher dazu verwendet, Kantenglättung zu deaktivieren, damit der Text bei bestimmten Fällen besser lesbar ist.</p>
<h2 id="Color">Gui, Color [, Fensterfarbe, Steuerelementfarbe]</h2>
<p>Bestimmt die Hintergrundfarbe für Fenster und/oder deren Steuerelemente. <em>Fensterfarbe</em> ist der Hintergrund des Fensters selbst. <em>Steuerelementfarbe</em> beeinflusst alle gegenwärtigen und zukünftigen Steuerelemente im Fenster (einige Steuerelemente unterstützen benutzerdefinierte Farben nicht). Obwohl die <em>Steuerelementfarbe</em> <a href="ListView.htm">ListView</a>- und <a href="TreeView.htm">TreeView</a>-Steuerelemente anfänglich beeinflusst, sind nachfolgende Änderungen der <em>Steuerelementfarbe</em> nicht mehr möglich. In solchen Fällen kann <em>GuiControl +BackgroundFF9977, EigeneListview</em> verwendet werden, um die Farbe direkt zu ändern.</p>
<p>Lasst jeweils den Parameter leer, um die aktuelle Farbe beizubehalten. Andernfalls kann eine Hauptfarbe aus der <a href="Progress.htm#colors">HTML-Farbtabelle</a>, ein 6-stelliger RGB-Wert (0x-Präfix ist optional) oder das Wort "Default" angegeben werden, um die Standardfarbe zu verwenden. Beispielwerte: Silver, FFFFAA, 0xFFFFAA, Default</p>
<p>Standardmäßig ist die Hintergrundfarbe des Fensters die Systemfarbe der Schaltflächen, sowie die Hintergrundfarbe des Steuerelements die Standard-Systemfarbe des Fensters (für gewöhnlich weiß).</p>
<p>Die Farbe der <a href="#Menu">Menüleiste</a> und deren Untermenüs können wie folgt geändert werden: <a href="Menu.htm">Menu</a>, EigeneMenüleiste, Color, White</p>
<p>Um den Hintergrund in Windows 2000/XP oder höher transparent zumachen, verwendet <a href="WinSet.htm#TransColor">WinSet TransColor</a>. Schaltflächen werden allerdings auch transparent, es sei denn, "Gui, Color" wird vorher zugewiesen. Verwendet dafür eine benutzerdefinierte Farbe und macht sie dann transparent. Zum Beispiel:</p>
<pre>Gui, Color, EEAA99
Gui +LastFound  <em>; Macht das GUI-Fenster zum <a href="../LastFoundWindow.htm">zuletzt gefundenen Fenster</a>.</em>
WinSet, TransColor, EEAA99</pre>
<p>Um zusätzlich den Rahmen und die Titelleiste des Fensters mit einem transparenten Hintergrund zu entfernen, verwendet folgenden Befehl, <strong>nachdem</strong> das Fenster transparent gemacht wurde:</p>
<pre>Gui -Caption  <em>; Oder "<i>Gui, 2:-Caption</i>" für das zweiter Fenster, usw.</em></pre>
<p>Für eine bildliche Darstellung ist das Beispiel mit der Bildschirmanzeige (OSD) weiter unten gut geeignet.</p>

<h2 id="Margin">Gui, Margin [, X, Y]</h2>
<p><strong>X</strong> und <strong>Y</strong> enthalten den Abstand zwischen Fensterrahmen und Steuerelement, wenn dem Steuerelement eindeutige <a href="#XY">X- und Y-Koordinaten</a> fehlen. Dieser Befehl bestimmt auch automatisch die Abstände zwischen den einzelnen Steuerelementen. Schließlich werden die Abstände bei der ersten Benutzung von <a href="#Show">Gui Show</a> mit berücksichtigt, um die Fenstergröße zu berechnen (wenn keine eindeutige Größe angegeben ist).</p>
<p>Wenn dieser Befehl nicht verwendet wird und das Fenster mindestens ein Steuerelement enthält, dann errechnen sich die Standardabstände bei allen Seiten proportional zur ausgewählten <a href="#Font">Schriftart</a> (0.75 x Schrifthöhe für Unten & Oben, 1.25 x Schriftbreite für Links & Rechts).</p>
<p>Obwohl der Abstand beim Hinzufügen von Steuerelementen geändert werden kann, hat die Änderung nur Auswirkung auf zukünftige Steuerelemente, nicht auf schon vorhandene Steuerelemente. Wird jeweils X oder Y leer gelassen, dann bleibt der entsprechende Abstand unverändert.</p>

<h2 id="Options">Gui, +/-Option1 +/-Option2 ...</h2>
<p>Beliebig viele Optionen können unmittelbar nach dem GUI-Befehl angegeben werden. Aus Performance-Gründen ist es besser, alle Optionen auf einer Zeile zu setzen, bevor das Fenster erzeugt wird (das heißt, bevor andere Unterbefehle wie <a href="#Add">Gui Add</a> verwendet werden).</p>
<p>Der Effekt des Befehls ist kumulativ (summierend), das heißt, es werden nur die direkt angegebenen Einstellungen geändert, alle anderen bleiben unverändert.</p>
<p>Mit einem Plus- oder Minuszeichen kann eine Option jeweils hinzugefügt oder entfernt werden. Zum Beispiel:</p>
<pre>Gui +Resize -MaximizeBox  <em>; Ändert die Einstellungen des <a href="#DefaultWin">Standard</a>-GUI-Fensters.</em>
Gui <strong>2:</strong>+Resize -MaximizeBox  <em>; Ändert die Einstellungen des zweiten GUI-Fensters.</em></pre>
<p><strong>AlwaysOnTop</strong>: Das Fenster bleibt in der Z-Rangordnung ganz oben, hat den gleichen Effekt wie "<a href="WinSet.htm">WinSet</a> AlwaysOnTop".</p>
<p> <strong>Border</strong>: Das Fenster erhält einen dünnen Rahmen (nicht üblich). Das ist unüblich.</p>
<p><strong>Caption</strong> (standardmäßig vorhanden): Das Fenster erhält eine Titelleiste und einen dicken Rahmen. Die Titelleiste sollte erst nach <a href="WinSet.htm#TransColor">WinSet TransColor</a> entfernt werden.</p>
<p><strong><a name="Delimiter"></a>Delimiter</strong>: Ermöglicht dem Fenster die Benutzung eines anderen Trennzeichens (senkrechter Strich | ist Standard), sobald der Inhalt eines Steuerelements mittels <a href="#Add">Gui Add</a> hinzugefügt, mittels <a href="GuiControl.htm">GuiControl</a> modifiziert oder mittels <a href="#Submit">Gui Submit</a> bzw. <a href="GuiControlGet.htm">GuiControlGet</a> ermittelt wird. Ein einzelnes Zeichen muss unmittelbar nach dem Wort Delimiter folgen. Zum Beispiel wird mit <em>Gui +Delimiter`n</em> das LF-Zeichen verwendet, welches besonders gut für <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a> geeignet ist. Mit <em>Gui +Delimiter|</em> wird das Standardtrennzeichen wiederhergestellt. Bei einem Leerzeichen oder Tabulator kann <em>Gui +DelimiterSpace</em> oder <em>Gui +DelimiterTab</em> verwendet werden. Wurde das Trennzeichen einmal geändert, beeinflusst diese Option alle existierende und nachfolgende <a href="../misc/Threads.htm">Threads</a> in diesem Fenster.</p>
<p><strong>Disabled</strong>: Deaktiviert das Fenster und hindert den Benutzer daran, mit den Steuerelementen zu interagieren. Das wird oft bei Fenstern benutzt, die andere Fenster besitzen (siehe <a href="#Owner">Owner</a>).</p>
<p><strong><a name="PlusLabel"></a>Label</strong> <span class="ver">[v1.0.44.09+]:</span> Ermöglicht benutzerdefinierte Namen für die <a href="#Labels">speziellen Label</a> des Fensters. Zum Beispiel verwendet <em>Gui 2:+LabelEigenesGUI</em> die Label EigenesGUIClose und EigenesGUISize (falls vorhanden) anstelle von 2GuiClose und 2GuiSize. Mit anderen Worten wird der String "2Gui" in jedem <a href="#Labels">speziellen Label</a> mit "EigenesGUI" ersetzt. Damit können sich auch mehrere Fenster die gleichen Label teilen (in diesem Fall enthält <a href="../Variables.htm#Gui">A_Gui</a> das Fenster, das die Subroutine ausgeführt hat).</p>
<p><strong><a name="LastFound"></a>LastFound</strong>: Das Fenster wird zum <a href="../LastFoundWindow.htm">zuletzt gefundenen Fenster</a> (nicht in einem <a href="#DefaultWin">GUI-Thread</a> notwendig, weil das automatisch erfolgt), damit dieses Fenster von Befehlen wie <a href="WinSet.htm">WinSet</a> bearbeitet werden kann, selbst wenn es versteckt ist (das heißt, dass <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> nicht benötigt wird). Das ist besonders nützlich, um die Eigenschaften des Fensters zu ändern, bevor es angezeigt wird. Zum Beispiel:</p>
<pre>Gui +LastFound
WinSet, TransColor, %IndividualFarbe% 150
Gui Show</pre>
<p><strong><a name="LastFoundExist"></a>LastFoundExist</strong> <span class="ver">[v1.0.43.09+]:</span> LastFoundExist wird nur erkannt, wenn keine anderen Optionen auf derselben Zeile stehen. <em>+LastFoundExist</em> ist das Gleiche wie <em>+LastFound</em>, außer dass das Fenster nicht erstellt wird, falls es noch nicht existiert. Diese Option wird hauptsächlich verwendet, um zu erkennen, ob ein bestimmtes GUI-Fenster bereits existiert. Zum Beispiel:</p>
<pre>Gui 2:+LastFoundExist
IfWinExist
    MsgBox GUI #2 existiert bereits.</pre>
<p><strong>MaximizeBox</strong>: Aktiviert die Maximieren-Schaltfläche in der Titelleiste. Das gehört zum Teil der unteren <em>Resize</em>-Option. </p>
<p><strong>MinimizeBox</strong> (standardmäßig vorhanden): Aktiviert die Minimieren-Schaltfläche in der Titelleiste.</p>
<p><strong><a name="MinSize"></a>MinSize</strong> und <strong>MaxSize</strong> <span class="ver">[v1.0.44.13+]:</span> Bestimmt die minimale und/oder maximale Größe des Fensters, wenn der Benutzer beispielsweise die Größe des Fensters durch Ziehen an den Ecken ändern will. Wenn keine Suffixe bei den Wörtern <em>MinSize</em> und/oder <em>MaxSize</em> vorhanden sind, dann wird die aktuelle Größe des Fensters verwendet (wenn das Fenster keine aktuelle Größe hat, dann wird die zuerst verwendete Größe von <a href="#Show">Gui Show</a> benutzt). Alternativ kann auch die Breite, gefolgt von einem "x" und der Höhe angefügt werden: <em>Gui +Resize +MinSize640x480</em>. Die Abmessungen sind in Pixel und bestimmen die Größe des Client-Bereichs im Fenster (der Client-Bereich schließt Rahmen, Titelleiste und <a href="#Menu">Menüleiste</a> des Fensters aus). Jede Zahl muss dezimal angegeben werden.</p>
<p>Breite und/oder Höhe können weggelassen werden, damit diese jeweils unverändert bleiben (z. B. <em>+MinSize640x</em> oder <em>+MinSizex480</em>). Darüber hinaus kann Min/MaxSize mehrmals angegeben werden, um die aktuelle Fenstergröße für eine Abmessung und eine eindeutige Größe für die andere Abmessung zu verwenden. Zum Beispiel verwendet <em>+MinSize +MinSize640x</em> die aktuelle Fenstergröße für die Höhe und 640 für die Breite.</p>
<p>Wenn <em>MinSize</em> und <em>MaxSize</em> nicht vorhanden sind, dann werden die Standardwerte des Betriebssystems verwendet (ähnlich <em>Gui -MinSize -MaxSize</em>, Standardwerte werden wiederhergestellt). Hinweis: das Fenster muss <a href="#Resize">+Resize</a> enthalten, damit der Benutzer in der Lage ist, die Größe zu ändern).</p>
<p><strong><a name="OwnDialogs"></a>OwnDialogs</strong>: In jedem <a href="../misc/Threads.htm">Thread</a> (z. B. eine ButtonOK-Subroutine) sollte <em>Gui +OwnDialogs</em> angegeben werden, damit danach angezeigte <a href="MsgBox.htm">MsgBox</a>-, <a href="InputBox.htm">InputBox</a>-, <a href="FileSelectFile.htm">FileSelectFile</a>- oder <a href="FileSelectFolder.htm">FileSelectFolder</a>-Dialogfenster dem Fenster untergeordnet sind. Solche Dialogfenster werden modal, d. h. der Benutzer kann erst wieder mit dem GUI-Fenster interagieren, wenn das Dialogfenster geschlossen wird. Im Gegensatz dazu werden <a href="ToolTip.htm">ToolTip</a>, <a href="Progress.htm">Progress</a> und <a href="Progress.htm">SplashImage</a> nicht modal, selbst wenn sie untergeordnet werden; sie bleiben immer im Vordergrund. In jedem Fall werden untergeordnete Dialogfenster automatisch zerstört, wenn ihr GUI-Fenster <a href="#Destroy">zerstört</a> wird.</p>
<p>Normalerweise muss diese Einstellung nicht wieder deaktivieren werden, weil sie andere <a href="../misc/Threads.htm">Threads</a> nicht beeinflusst. Wenn allerdings ein Thread sowohl untergeordnete als auch nicht untergeordnete Dialogfenster anzeigen muss, dann kann diese Einstellung mittels <em>Gui -OwnDialogs</em> deaktiviert werden.</p>
<p>Wenn keine Fensternummer als Präfix angegeben ist (z. B. <em>Gui +OwnDialogs</em> anstelle von <em>Gui 2: +OwnDialogs</em>), dann werden die Dialogfenster dem <a href="#DefaultWin">Standardfenster des Threads</a> untergeordnet.</p>
<p><strong><a name="Owner"></a>Owner</strong>: Mit <em>+Owner</em> wird das Fenster einem Anderen zugeordnet (wenn das Fenster schon erstellt ist, hat <em>-Owner</em> keinen Effekt). Ein untergeordnetes Fenster hat standardmäßig keine eigene Schaltfläche in der Taskleiste und befindet sich immer im Vordergrund, sobald es sichtbar ist. Dieses Fenster wird automatisch zerstört, wenn das dazugehörige GUI-Fenster zerstört wird. <em>+Owner</em> darf erst <u>nach</u> der Erstellung des übergeordneten Fensters, aber <u>vor</u> der Erstellung des untergeordneten Fensters verwendet werden (das heißt vor Befehlen wie <a href="#Add">Gui Add</a>). Es gibt zwei Möglichkeiten, +Owner wie folgt zu verwenden:</p>
<pre>Gui, 2:+Owner1  <em>; Fenster #2 wird dem Fenster #1 untergeordnet.</em>
Gui, 2:+Owner  <em>; Fenster #2 wird dem <a href="Menu.htm#MainWindow">Hauptfenster des Scripts</a> untergeordnet, damit die Anzeige der Schaltfläche in der Taskleiste verhindert wird.</em></pre>
<p>Damit der Benutzer beim Anzeigen eines untergeordneten Fensters nicht mehr mit dem übergeordneten Fenster interagieren kann, deaktiviert das übergeordnete Fenster mittels <em>Gui +Disabled</em>. Sobald das untergeordnete Fenster geschlossen oder zerstört wird, kann das übergeordnete Fenster wieder mittels <em>Gui -Disabled</em> aktiviert werden. Das sollte vor dem Schließen/Zerstören des Fensters geschehen, damit das übergeordnete Fenster automatisch reaktiviert wird.</p>
<p><strong><a name="Resize"></a>Resize</strong>: Ermöglicht das Ändern der Fenstergröße und aktiviert die Maximieren-Schaltfläche in der Titelleiste. Mit <em>+Resize -MaximizeBox</em> kann die Maximieren-Schaltfläche verhindert werden.</p>
<p><strong>SysMenu</strong> (standardmäßig vorhanden): Mit -SysMenu wird das Systemmenü und Icon von der oberen linken Ecke des Fensters entfernt. Dadurch entfallen auch die Schaltflächen fürs Minimieren, Maximieren und Schließen.</p>
<p><strong><a name="Theme"></a>Theme</strong>: Mit -Theme haben alle danach erstellten Steuerelemente im Fenster das klassische Design (nur ab Windows XP). Um Steuerelemente mit dem aktuellen Design nachträglich hinzuzufügen, verwendet +Theme. Hinweis: Diese Option hat keine Auswirkung auf Betriebssysteme, die älter als Windows XP sind oder wenn in Windows XP das klassische Design aktiv ist. Schließlich können auch einzelne Steuerelemente mit dieser Option geändert werden.</p>
<p><strong>ToolWindow</strong>: Das Fenster hat eine schmale Titelleiste, aber keine Schaltfläche in der Taskleiste.</p>
<p><strong>(Unbenannter Style)</strong>: Es kann ein Plus- oder Minuszeichen mit einer dezimalen oder hexadezimalen <a href="../misc/Styles.htm">Style-Nummer</a> angegeben werden.</p>
<p><strong>(Unbenannter ExStyle)</strong>: Es kann ein Plus- oder Minuszeichen mit dem Buchstaben "E" und einer dezimalen oder hexadezimalen erweiterten Style-Nummer angegeben werden. +E0x40000 beispielsweise fügt den WS_EX_APPWINDOW-Style hinzu, damit wird die Schaltfläche des Fensters in der Taskleiste erzwungen. Weitere nicht-dokumentierte Styles findet man auf <a href="http://www.microsoft.com">www.microsoft.com</a>, z. B. mit der Suche nach WS_EX_APPWINDOW.</p>

<h2 id="Menu">Gui, Menu [, Menüname]</h2>
<p>Fügt eine Menüleiste hinzu. Mit dem <a href="Menu.htm">Menu</a>-Befehl können benutzerdefinierte Menüs erstellt werden. Zum Beispiel:</p>
<pre>Menu, Dateimenü, Add, Ö&ffnen    Strg+O, MenüDateiÖffnen  <em>; Siehe untere Bemerkungen für Strg+O.</em>
Menu, Dateimenü, Add, &Beenden, MenuHandler
Menu, Hilfsmenü, Add, Inf&o, MenuHandler
Menu, EigeneMenüleiste, Add, &Datei, :Dateimenü  <em>; Fügt die oben erstellten Untermenüs hinzu.</em>
Menu, EigeneMenüleiste, Add, &?, :Hilfsmenü
<strong>Gui, Menu, EigeneMenüleiste</strong></pre>
<p>Wie bereits bemerkt, erfolgt nach Ö&ffnen die Tastenkombination Strg+O (mit einem Tab-Zeichen dazwischen). Mit solch einer Tastenkombination kann der Benutzer auch den Menüeintrag aufrufen. Sie muss vorher jedoch über einen kontextabhängigen Hotkey aktiviert werden:</p>
<pre><a href="_IfWinActive.htm">#IfWinActive</a> Titel des GUI-Fensters ahk_class AutoHotkeyGUI
^o::  <em>; Der Hotkey Strg+O.</em>
MenüDateiÖffnen:
Gui <a href="#OwnDialogs">+OwnDialogs</a>  <em>; Zwingt den Benutzer, das Dialog-Fenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
<a href="FileSelectFile.htm">FileSelectFile</a>, AusgewählteDatei
MsgBox Datei %AusgewählteDatei% ausgewählt.
Return

<em>; Der folgende Teil ist nur notwendig, wenn das Script in Windows 95/98/Me ausgeführt wird:</em>
#IfWinActive
$^o::Send ^o</pre>
<p>Mit <em>Gui Menu</em> kann die aktuelle Menüleiste des Fensters entfernt werden (der letzte Parameter ist nicht vorhanden).</p>
<p>Ein Menü, das der Menüleiste zugewiesen ist, sollte nicht mehr als Popup-Menü oder Untermenü verwendet werden. Denn die Menüleisten benötigen intern ein anderes Format (allerdings gilt diese Einschränkung nur für die Menüleiste selbst, nicht für die Untermenüs). Wenn dieses Problem umgangen werden muss, dann erstellt ein Menü für die Menüleiste und ein identisches Menü für alle anderen.</p>
<p>Die Verwendung von destruktiven <a href="Menu.htm">Menu-Befehlen</a> (z. B. Delete und DeleteAll) bei einem Menü, das zurzeit als Menüleiste eingesetzt wird (und in einigen Fällen auch deren Untermenüs) wird nicht unterstützt und zeigt eine Fehlermeldung an (es sei denn, <a href="Menu.htm">UseErrorLevel</a> ist aktiv). Befolgt folgende Schritte, um solche Änderungen vorzunehmen: 1) Die Menüleiste mittels <em>Gui Menu</em> entfernen (d. h. <em>Menüname</em> weglassen); 2) Änderungen vornehmen, 3) die Menüleiste mittels <em>Gui, Menu, EigeneMenüleiste</em> wieder hinzufügen.</p>

<h2 id="Minimize"><a name="Maximize"></a><a name="Restore"></a><a name="Hide"></a>Gui, Hide / Minimize / Maximize / Restore</h2>
<p>"Gui Hide" ist gleichbedeutend mit <a href="#Cancel">Gui Cancel</a>. Die anderen drei Befehle machen das Fenster je nach Bedarf sichtbar und führen dann die entsprechenden Operationen aus. Wenn das Fenster nicht existiert (z. B. mittels <a href="#Destroy">Gui Destroy</a>), dann haben die Befehle keine Wirkung.</p>

<h2 id="Flash">Gui, Flash [, Off]</h2>
<p>Die Schaltfläche des Fensters auf der Taskleiste fängt an zu blinken. Dazu wird die Farbe der Titelleiste und/oder der Schaltfläche auf der Taskleiste invertiert. Das optionale Wort "OFF" stellt die ursprünglichen Farben der Titelleiste und der Schaltfläche in der Taskleiste wieder her (ist aber vom Betriebssystem abhängig). Im folgenden Beispiel blinkt das Fenster dreimal auf, weil jeweils ein Paar von "Gui Flash" die Darstellung invertiert und wiederherstellt:</p>
<pre>Loop 6
{
    Gui Flash
    Sleep, 500  <em>; Dieser Wert ist ziemlich empfindlich; Änderungen können zu unerwarteten Ergebnissen führen.</em>
}</pre>

<h2 id="Default">Gui, 2:Default</h2>
<p>Ändert die Standardnummer des <a href="#MultiWin">GUI-Fensters</a> im <a href="../misc/Threads.htm">aktuellen Thread</a>, die immer dann benutzt wird, sobald keine Fensternummer für <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und den Gui-Befehl selbst angegeben ist. Im folgenden Beispiel wird die Standardnummer des Fensters auf die Zwei gesetzt: <em>Gui 2:Default</em>. Siehe <a href="#DefaultWin">Standardnummer eines Threads</a> für mehr Informationen über das Standardfenster.</p>

<h2 id="Position">Positionierung und Layout mittels SmartGUI Creator </h2>
<p>Mit dem SmartGUI Creator von Rajat kann ein GUI-Fenster komplett visuell erstellt werden; d. h. "what you see is what you get (WYSIWYG)". Der SmartGUI Creator ist kostenlos und kann auf <a href="http://www.autohotkey.com/docs/SmartGUI/">www.autohotkey.com/docs/SmartGUI/</a> heruntergeladen werden.</p>

<h2 id="PosSize">Position und Größe von Steuerelementen anpassen</h2>
<p>Wenn einige Abmessungen oder Koordinaten in den <em>Optionen</em> weggelassen werden, dann wird das Steuerelement relativ zum vorherigen Steuerelement positioniert und/oder dessen Größe abhängig vom Inhalt automatisch angepasst.</p>
<p>Die folgenden Optionen werden unterstützt:</p>
<p><strong><a name="R"></a>R</strong>: Textzeilen (kann eine Fließkommazahl wie R2.5 enthalten). <strong>R</strong> ist meist besser als <strong>H</strong> (Höhe). Wenn sowohl <strong>R</strong> als auch <strong>H</strong> vorhanden sind, dann wird <strong>R</strong> bevorzugt. In einer GroupBox bestimmt diese Einstellung die Menge an Steuerelementen, die den Platz in der Box bereitstellen. In <a href="GuiControls.htm#DropDownList">DropDownList</a>-, <a href="GuiControls.htm#ComboBox">ComboBox</a>- und <a href="GuiControls.htm#ListBox">ListBox</a>-Steuerelementen ist <strong>R</strong> die Anzahl der Einträge, die gleichzeitig im Listenbereich sichtbar sind (ab Windows XP ist es besser, sowohl <strong>R</strong> als auch <strong>H</strong> bei DropDownList und ComboBox wegzulassen, damit die aufklappende Liste automatisch die Vorteile der verfügbaren Desktophöhe des Benutzers übernimmt). In anderen Steuerelementen kann mit <strong>R</strong> die Anzahl der Textzeilen angegeben werden, die sich innerhalb des Steuerelements sichtbar anpassen.</p>
<p><strong>W</strong>: Breite in Pixeln. Wenn nicht vorhanden, dann wird die Breite automatisch berechnet, abhängig vom Inhalt einiger Steuerelemente. Die anderen Steuerelemente haben standardmäßig folgende Breiten:<br> Tab Steuerelemente: Das 30-fache der aktuellen Schriftgröße, plus das 3-fache des <a href="#Margin">X-Abstands</a>.<br> Vertikaler Fortschrittsbalken: Das 2-fache der aktuellen Schriftgröße.<br> Horizontaler Fortschrittsbalken, horizontaler Schieberegler, DropDownList, ComboBox, ListBox, GroupBox, Edit und Hotkey: Das 15-fache der aktuellen Schriftgröße (Ausnahme: GroupBox wird mit 18 multipliziert, um Platz innerhalb der Abstände zu schaffen).</p>
<p> <strong>H</strong>: Höhe in Pixeln. Wenn sowohl <strong>H</strong> als auch <strong>R</strong> nicht vorhanden sind, dann haben DropDownList-, ComboBox-, ListBox- und leere mehrzeilige Steuerelemente standardmäßig eine Höhe von 3 Zeilen; GrouBox-Steuerelemente standardmäßig 2 Zeilen; vertikale Schieberegler und Fortschrittsbalken standardmäßig 5 Zeilen; horizontale Schieberegler standardmäßig 30 Pixel (außer wenn eine Dicke angegeben wurde); horizontale Fortschrittsbalken standardmäßig das 2-fache der aktuellen Schriftgröße; Hotkey-Steuerelemente standardmäßig eine Zeile; und Tab-Steuerelemente standardmäßig 10 Zeilen. Bei den anderen Steuerelementen wird die Höhe abhängig von deren Inhalten berechnet. Beachtet, dass sich <strong>H</strong> bei DropDownList- und ComboBox-Steuerelementen aus dem immer sichtbaren Teil und dem dazugehörigen Listenbereich zusammensetzt (selbst wenn die Höhe zu niedrig ist, wird mindestens immer ein Eintrag in der Liste angezeigt). Auch hier gilt: Die Angabe der Zeilenanzahl mittels <strong>R</strong> ist meist besser als <strong>H</strong>, damit unvollständige Zeilen nicht angezeigt werden.</p>
<p>Mit <strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong> und <strong>hp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) kann die Breite und/oder Höhe des Steuerelements mit einem Plus- oder Minuszeichen angegeben werden, abhängig von der Breite oder Höhe des zuvor eingefügten Steuerelements. Mit wp beispielsweise wird die Breite des vorherigen Steuerelements verwendet, mit wp-50 die Breite des vorherigen Steuerelements, subtrahiert mit 50.</p>
<p><strong><a name="XY"></a>X</strong>: X-Position. Mit "x0 y0" beispielsweise wird das Steuerelement in der oberen linken Ecke des Client-Bereichs positioniert (Der Client-Bereich schließt Rahmen, Titelleiste und Menüleiste des Fensters aus). Wenn <strong>X</strong> aber nicht <strong>Y</strong> weggelassen wird, dann wird das Steuerelement rechts von zuvor eingefügten Steuerelementen positioniert, sozusagen als neue "Spalte".</p>
<p><strong>Y</strong>: Y-Position. Wenn <strong>Y</strong> aber nicht <strong>X</strong> weggelassen wird, dann wird das Steuerelement unterhalb der zuvor eingefügten Steuerelementen positioniert, sozusagen als neue "Zeile". </p>
<p>Das Weglassen von <strong>X</strong> und/oder <strong>Y</strong> ist nützlich, damit sich ein GUI-Layout automatisch bei zukünftigen Änderungen von Größe oder Schrift anpasst. Dies kann auch dazu führen, dass der Benutzer die Positionen aller Steuerelemente unterhalb und/oder rechts der vergrößerten oder verkleinerten Steuerelemente manuell verschieben muss.</p>
<p>Wenn sowohl <strong>X</strong> als auch <strong>Y</strong> weggelassen werden, dann wird das Steuerelement je nach Padding-Abstand unter den zuvor eingefügten Steuerelementen positioniert.</p>
<p><a name="PosPlus"></a>Für <strong>X</strong> und <strong>Y</strong> kann optional ein Pluszeichen eingefügt werden, um ein Steuerelement relativ zum rechten oder unteren Rand des zuvor eingefügten Steuerelements zu positionieren. Mit Y+10 beispielsweise wird das Steuerelement 10 Pixel unterhalb des vorherigen Steuerelements positioniert, unabhängig vom Padding-Abstand. Mit X +10 wiederum wird das Steuerelement 10 Pixel rechts vom vorherigen Steuerelement positioniert. Da negative Zahlen wie X-10 für die absolute Positionierung vorbehalten sind, muss für einen negativen Offset ein Pluszeichen vorangestellt werden. Zum Beispiel: X+-10</p>
<p>Mit <strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong> und <strong>yp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) können Steuerelemente relativ zur linken oberen Ecke des vorher hinzufügten Steuerelements positioniert werden, dass besonders nützlich ist, um Steuerelemente in einer <a href="GuiControls.htm#GroupBox">GroupBox</a> einzuschließen.</p>
<p>Mit <strong>xm</strong> und <strong>ym</strong> kann ein Steuerelement in Bezug auf den linken und rechten <a href="#Margin">Abstand</a> im Fenster positioniert werden (nach diesen Optionen kann ein Plus-/Minuszeichen und eine Zahl folgen). Wenn <strong>ym</strong> ohne X-Postion angegeben wird, dann wird das Steuerelement am oberen Abstand und rechts von vorher hinzugefügten Steuerelements positioniert, sozusagen als neue "Spalte". Das Gegenteil davon (<strong>xm</strong> ohne Y-Position) funktioniert genauso.</p>
<p><a name="xs"></a><strong>xs</strong> und <strong>ys</strong> haben Ähnlichkeit mit <strong>xm</strong> und <strong>ym</strong>, nur dass sie sich auf Koordinaten beziehen, die durch ein vorher eingefügtes Steuerelement mit der Option <a href="#Section">Section</a> gespeichert wurden (das erste Steuerelement eines Fensters beginnt immer eine neue Sektion, selbst wenn dieses Wort nicht explizit angegeben wurde). Wenn <strong>ys</strong> ohne X-Position angegeben wird, dann wird das Steuerelement an der vorher gespeicherten Y-Position positioniert, aber rechts von allen vorher hinzugefügten Steuerelementen seit der letzten Verwendung von <a href="#Section">Section</a>; sozusagen als neue "Spalte" innerhalb der Sektion. Zum Beispiel:</p>
<pre>Gui, Add, Edit, w600  <em>; Hinzufügen eines breiten Edit-Feldes am oberen Rand des Fensters.</em>
Gui, Add, Text, <strong>Section</strong>, Vorname:  <em>; Speichert die Position des Steuerelements und beginnt einen neue Sektion.</em>
Gui, Add, Text,, Nachname:
Gui, Add, Edit, <strong>ys</strong>  <em>; Beginnt eine neue Spalte innerhalb dieser Sektion.</em>
Gui, Add, Edit
Gui, Show</pre>
<p>Das Gegenteil davon (<strong>xs</strong> ohne Y-Position) funktioniert genauso.</p>
<p>Nach <strong>xs</strong> und <strong>ys</strong> kann wahlweise ein Plus-/Minuszeichen und eine Zahl folgen. Es ist auch möglich, sowohl das Wort <a href="#Section">Section</a> als auch xs/ys in den Optionen des Steuerelements anzugeben, dadurch verwendet das Steuerelement die vorherige Sektion für sich selbst, erstellt aber für nachfolgende Steuerelemente eine neue Sektion.</p>

<h2 id="Events">Speichern von und Reagieren auf Benutzereingaben</h2>
<p><strong><a name="var"></a>V</strong>: Variable. Einem Steuerelement eine Variable zuweisen. Nach dem Buchstaben V erfolgt der Name einer globalen Variable (oder auch eine <a href="../Functions.htm#ByRef">lokale ByRef-Variable</a>, die sich auf eine globale Variable bezieht, oder seit v1.0.46.01 auch auf eine <a href="../Functions.htm#static">statische Variable</a>) Mit <em><strong>v</strong>EigenesEdit</em> beispielsweise wird der Inhalt des Steuerelements in die <em>EigenesEdit</em>-Variable gespeichert, sobald <a href="#Submit">Gui Submit</a> verwendet wird. Wenn ein Steuerelement nicht eingabefähig ist (z. B. Text- oder GroupBox-Steuerelement), dann kann eine zugewiesene Variable immer noch nützlich sein, da der Variablenname in <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> als einzigartige Kennung des Steuerelements dient. Hinweis: <a href="#Submit">Gui Submit</a> ändert nicht den Inhalt von Steuerelementen, die nicht eingabefähig (z. B. Text- oder GroupBox-Steuerelement) oder anders (z. B. <a href="ListView.htm">ListView</a> und <a href="TreeView.htm">TreeView</a>) sind.</p>
<p><strong><a name="label"></a>G</strong>: Gosub (g-Label). Startet automatisch eine Subroutine, wenn der Benutzer ein Steuerelement anklickt oder ändert. Nach dem Buchstaben G erfolgt der Name des Labels, welcher ausgeführt werden soll. Mit gCancel wird <a href="#Cancel">Gui Cancel</a> indirekt ausgeführt (aber nur, wenn ein Label namens "Cancel" noch nicht existiert). Die Subroutine kann auf folgende interne Variablen zurückgreifen: <a href="../Variables.htm#Gui">A_Gui</a>, <a href="../Variables.htm#GuiControl">A_GuiControl</a>, <a href="../Variables.htm#GuiEvent">A_GuiEvent</a> und <a href="../Variables.htm#EventInfo">A_EventInfo</a>.</p>
<h2 id="OtherOptions">Steuerelemente: Gebräuchliche Styles und andere Optionen</h2>
<p>Hinweis: Beim Fehlen des Vorzeichens wird ein Pluszeichen vermutet; zum Beispiel ist Wrap das Gleiche wie +Wrap. Im Gegensatz dazu wird mit -Wrap die entsprechende Eigenschaft entfernt.</p>
<p><strong><a name="AltSubmit"></a>AltSubmit</strong>: Verwendet eine alternative Methode von Submit. Bei DropDownList, ComboBox, and ListBox wird mit <a href="#Submit">Gui Submit</a> die Position anstelle vom Text des ausgewählten Eintrags gespeichert. Wenn kein Eintrag in einer ComboBox ausgewählt ist, dann wird der Text im Edit-Feld gespeichert; die <a href="#var">Output-Variablen</a> von DropDownList oder ListBox sind ebenfalls leer. Hinweis: AltSubmit beeinflusst auch das Verhalten von <a href="GuiControlGet.htm">GuiControlGet,</a> wenn der Inhalt von solchen Steuerelementen abgerufen wird.</p>
<p><strong>C</strong>: Farbe des Textes (hat keinen Einfluss auf <a href="GuiControls.htm#Button">Schaltflächen</a>). Nach dem Buchstaben C erfolgt der Name einer Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>) oder ein RGB-Wert (das 0x-Präfix ist optional). Beispiele: cRed, cFF2211, c0xFF2211, cDefault</p>
<p><strong>Disabled</strong>: Deaktiviert ein eingabefähiges Steuerelement, was den Benutzer daran hindert, das Steuerelement zu fokussieren oder dessen Inhalt zu ändern. Mit "<a href="GuiControl.htm">GuiControl</a> Enable" kann das Steuerelement wieder aktiviert werden. Hinweis: Um ein Edit-Steuerelement in den Schreibschutzmodus zu setzen, verwendet stattdessen den String ReadOnly. Nach dem Wort Disabled kann auch eine 0 oder 1 für den Anfangsstatus erfolgen (0 für Aktivieren, 1 für Deaktivieren). Mit anderen Worten sind <em>Disabled</em> und <em>Disabled%VarMitEins%</em> das Gleiche.</p>
<p><strong>Hidden</strong>: Das Steuerelement wird sofort unsichtbar. Mit "<a href="GuiControl.htm">GuiControl</a>, Show" kann das Steuerelement wieder sichtbar gemacht werden. Nach dem Wort Hidden kann auch eine 0 oder 1 für den Anfangsstatus erfolgen (0 für sichtbar, 1 für versteckt).  Mit anderen Worten sind <em>Hidden</em> und <em>Hidden%VarMitEins%</em> das Gleiche.</p>
<p><strong>Left</strong>: Der Text im Steuerelement wird linksbündig ausgerichtet.</p>
<p><strong>Right</strong>: Der Text im Steuerelement wird rechtsbündig ausgerichtet. Bei Kontrollkästchen und Optionsfelder wird die Box auf die rechte Seite verlegt.</p>
<p><strong>Center</strong>: Der Text im Steuerelement wird horizontal zentriert. </p>
<p><strong><a name="Section"></a>Section</strong>: Beginnt eine neue Sektion und speichert die Position des Steuerelements für die spätere Verwendung mit xs und ys (siehe <a href="#xs">oben</a>).</p>
<p><strong><a name="Tabstop" id="Tabstop"></a>Tabstop</strong>: Mit -Tabstop wird ein eingabefähiges Steuerelement übersprungen, wenn der Benutzer die Tabulatortaste drückt.</p>
<p><strong><a name="Wrap"></a>Wrap</strong>: Aktiviert den automatischen Zeilenumbruch im Inhalt des Steuerelements. Da nahezu alle Steuerelemente den automatischen Zeilenumbruch aktiv haben, verwendet Wrap mit einem Minuszeichen, um den automatischen Zeilenumbruch zu deaktivieren.</p>
<p><strong>VScroll</strong>: Aktiviert die vertikale Bildlaufleiste in einem Steuerelement, wenn möglich. </p>
<p><strong>HScroll</strong>: Aktiviert die horizontale Bildlaufleiste in einem Steuerelement, wenn möglich. Der Rest des Abschnitts gilt nur für <a href="GuiControls.htm#ListBox">ListBox</a>-Steuerelemente. Die horizontale Bildlaufbreite ist standardmäßig das 3-fache der ListBox-Breite. Für eine benutzerdefinierte Bildlaufbreite muss eine Zahl nach dem Wort HScroll erfolgen. HScroll500 beispielsweise erlaubt das Scrollen von 500 Pixel innerhalb einer Listbox. Ist die Bildlaufbreite allerdings kleiner als die Breite der ListBox, dann wird keine Bildlaufleiste angezeigt (nur mit der bloßen Anwesenheit von <em>HScroll</em> ist es später möglich, die horizontale Bildlaufleiste mittels <em><a href="GuiControl.htm">GuiControl</a>, +HScroll500, EigeneBildlaufleiste</em> einzufügen, was anders nicht möglich ist).</p>

<h2>Steuerelemente: Weniger gebräuchliche Styles und Optionen</h2>
<p><strong><a name="BackgroundTrans"></a>BackgroundTrans</strong>: Damit wird der Hintergrund des Steuerelements transparent, welches sich über einem Text-, Picture- oder GroupBox-Steuerelement befindet. Ein transparentes Text-Steuerelement auf einem Picture-Steuerelement beispielsweise erscheint als ein Teil des Bildes. Mit "<a href="GuiControl.htm">GuiControl</a>, +Background" kann diese Option rückgängig gemacht werden. Im <a href="GuiControls.htm#PicAltSubmit">AltSubmit-Abschnitt des Picture-Steuerelements</a> befinden sich weitere Informationen über transparente Bilder. Bekannte Einschränkung: BackgroundTrans könnte mit Steuerelementen innerhalb eines <a href="GuiControls.htm#Tab">Tab-Steuerelements</a> mit einem <a href="ListView.htm">ListView</a> nicht richtig funktionieren.</p>
<p><strong>-Background</strong>: Verwendet die Standard-Hintergrundfarbe, unabhängig des Befehls "Gui Color". Das wird häufig verwendet, damit ein Tab-Steuerelement die Standardfarbe anstelle der Fensterfarbe verwendet. Mit "<a href="GuiControl.htm">GuiControl</a>, +Background" kann diese Option rückgängig gemacht werden.</p>
<p><strong>Border</strong>: Das Steuerelement erhält einen dünnen Rahmen. Die meisten Steuerelemente benötigen diese Option nicht, da sie bereits einen typenspezifischen Rahmen haben. Wird ein Rahmen einem bereits <em>existierenden</em> Steuerelement hinzugefügt, dann ist es wahrscheinlich notwendig, die Breite und Höhe um 1 Pixel zu erhöhen.</p>
<p><strong><a name="HwndOutputVar"></a>Hwnd</strong><em>Ausgabevariable</em> <span class="ver">[v1.0.46.01+]:</span> Bei Verwendung mit <a href="#Add">Gui Add</a> speichert diese Option den Fenster-Handle (HWND) eines neu erstellen Steuerelements in <em>Ausgabevariable</em>. Zum Beispiel: <em>Gui, Add, Edit, vEigenesEdit HwndEigenesEditHwnd</em> (innerhalb einer Funktion wird <em>EigenesEditHwnd</em> als eine <a href="../Functions.htm#DynVar">dynamische Funktionsvariable</a> behandelt). Das HWND eines Steuerelements wird oft bei <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall</a> verwendet. Es kann direkt mit <a href="../LastFoundWindow.htm#id">ahk_id Fenstertitel</a> verwendet werden (welches auch mit versteckten Steuerelementen funktioniert, selbst wenn <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> deaktiviert ist). Beachtet außerdem, dass das HWND eines verwandten Fensters mittels <a href="#LastFoundExist">Gui 2:+LastFoundExist</a> gefolgt von <a href="../Functions.htm#WinExist">WinExist()</a> abgerufen werden kann.</p>
<p><strong>Theme</strong>: Mit dieser Option wird das aktuelle Fenster-Design überschrieben. Siehe <a href="#Theme">Gui + /-Theme</a> für Details.</p>
<p><strong>(Unbenannter Style)</strong>: Es kann ein Plus- oder Minuszeichen mit einer dezimalen oder hexadezimalen <a href="../misc/Styles.htm">Style-Nummer</a> angegeben werden. Beim Fehlen des Vorzeichens wird ein Pluszeichen vermutet.</p>
<p><strong>(Unbenannter ExStyle)</strong>: Es kann ein Plus- oder Minuszeichen mit dem Buchstaben "E" und einer dezimalen oder hexadezimalen erweiterten Style-Nummer angegeben werden. Beim Fehlen des Vorzeichens wird ein Pluszeichen vermutet. Zum Beispiel wird mit E0x200 der WS_EX_CLIENTEDGE-Style hinzugefügt, um ein Rahmen mit abgesenktem Rand für entsprechende Picture-Steuerelemente bereitzustellen. Weitere nicht-dokumentierte Styles findet man auf <a href="http://www.microsoft.com">www.microsoft.com</a>, z. B. mit der Suche nach WS_EX_CLIENTEDGE.</p>

<h2 id="Remarks"><strong><a name="Labels"></a></strong>Fensterereignisse</h2>
<p>Die folgenden Label (Subroutinen) werden automatisch einem GUI-Fenster zugewiesen, wenn sie in dem Script existieren:</p>
<p><strong><a name="GuiClose"></a>GuiClose</strong>: Wird ausgeführt, wenn das Fenster wie folgt geschlossen wird: Das Drücken der X-Schaltfläche in der Titelleiste, das Auswählen von "Schließen" im Systemmenü oder die Verwendung von <a href="WinClose.htm">WinClose</a>. Fehlt dieses Label, dann wird das Fenster einfach versteckt, was den gleichen Effekt wie <a href="#Cancel">Gui Cancel</a> hat. Einer der häufigsten Maßnahmen für GuiClose ist <a href="ExitApp.htm">ExitApp</a>; Zum Beispiel:</p>
<pre>GuiClose:
ExitApp</pre>
<p><strong><a name="GuiEscape"></a>GuiEscape</strong>: Wird ausgeführt, wenn der Benutzer die Escape-Taste im aktiven Fenster drückt. Wenn dieses Label fehlt, dann hat das Drücken der Escape-Taste keine Wirkung. Bekannte Einschränkung: Wenn das erste Steuerelement im Fenster deaktiviert ist (abhängig vom Steuerelement), dann wird das GuiEscape-Label nicht ausgeführt. Möglicherweise gibt es noch andere Umstände, die diesen Effekt erzeugen.</p>
<p><strong><a name="GuiSize"></a>GuiSize</strong>: Wird ausgeführt, wenn das Fenster skaliert, minimiert, maximiert oder wiederhergestellt wird. Die internen Variablen A_GuiWidth und A_GuiHeight enthalten jeweils die neue Breite und Höhe des Client-Bereichs im Fenster (Der Client-Bereich schließt Rahmen, Titelleiste und Menüleiste des Fensters aus). Außerdem enthalten <a href="../Variables.htm#EventInfo">A_EventInfo</a> und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> jeweils eine der folgenden Zahlen:</p>
<p>0: Das Fenster wurde wiederhergestellt oder dessen Größe durch Ziehen des Rahmens geändert.<br> 1: Das Fenster wurde minimiert.<br> 2: Das Fenster wurde maximiert.</p>
<p>GuiSize kann dazu verwenden werden, die Position und Größe der Steuerelemente neu anzupassen, wenn der Benutzer die Größe des Fensters ändert. Dieser Prozess kann z. B. mit dem <a href="http://www.autohotkey.net/%7ETitan/anchor.html">"Anchor"-Script von Titan</a> via <a href="_Include.htm">#Include</a> vereinfacht werden.</p>
<p><strong><a name="GuiContextMenu"></a>GuiContextMenu</strong>: Wird ausgeführt, sobald der Benutzer mit der rechten Maustaste auf das Fenster klickt (außer Titelleiste und Menüleiste).  Wird auch ausgeführt, wenn die Menü-Taste oder die Tastenkombination Umschalt+F10 gedrückt wird. Im Gegensatz zu den meisten anderen GUI-Labels kann GuiContextMenu mehrere <a href="../misc/Threads.htm">Threads</a> gleichzeitig besitzen. Die folgenden internen Variablen sind im GuiContextMenu verfügbar:</p>
<ol>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a> enthält den <a href="../Variables.htm#GuiControl">Text- oder Variablennamen</a> des Steuerelements, dass das Ereignis erhalten hat (leer, wenn nichts).</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a>: Wenn das Ziel des Kontextmenüs ein ListBox-, ListView- oder TreeView-Steuerelement ist (kann mit A_GuiControl ermittelt werden), dann gibt A_EventInfo an, welcher Eintrag im Steuerelement das Ziel ist:<br> <a href="GuiControls.htm#ListBox">ListBox</a> oder <a href="ListView.htm">ListView</a>: A_EventInfo enthält die Nummer der aktuell fokussierten Zeile (0, wenn keine).<br> <a href="TreeView.htm">TreeView</a>: Bei Rechtsklick enthält A_EventInfo die ID-Nummer des angeklickten Eintrags (0, wenn der Benutzer keinen Eintrag angeklickt hat). Bei der Anwendungstaste oder Tastenkombination Umschalt+F10 enthält A_EventInfo die ID-Nummer des ausgewählten Eintrags.</li>
  <li>A_GuiX und A_GuiY enthalten die X- und Y-Koordinaten, wo das das Menü angezeigt werden soll (z. B. <em><a href="Menu.htm">Menu</a>, EigeneKontext, Show, %A_GuiX%, %A_GuiY%</em>). Die Koordinaten beziehen sich auf die linke obere Ecke des Fensters. </li>
  <li>A_GuiEvent enthält das Wort "RightClick", wenn der Benutzer mit der rechten Maustaste klickt, oder "Normal", wenn das Menü von der Menü-Taste oder der Tastenkombination Umschalt+F10 ausgelöst wurde.</li>
</ol>
<p>Hinweis: Da die <a href="GuiControls.htm#Edit">Edit</a>- und <a href="GuiControls.htm#MonthCal">MonthCal</a>-Steuerelemente ihre eigenen Kontextmenüs haben, wird bei Rechtsklick nicht das Label GuiContextMenu ausgeführt.</p>
<p><strong><a name="GuiDropFiles"></a>GuiDropFiles</strong>: Wird ausgeführt, sobald Dateien oder Ordner per Ziehen und Ablegen ins Fenster verschoben werden (wenn das Label gerade ausgeführt wird, dann wird das Ablegen ignoriert). Folgende interne Variablen sind in GuiDropFiles verfügbar:</p>
<ol>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a> enthält den <a href="../Variables.htm#GuiControl">Text- oder Variablennamen</a> des Steuerelements, auf dem die Dateien abgelegt wurden (leer, wenn nichts).</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a> und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> enthalten die Anzahl der Dateien, die abgelegt wurden.</li>
  <li>A_GuiX und A_GuiY enthalten die X- und Y-Koordinaten, wo die Dateien abgelegt wurden (bezogen auf die obere linke Ecke des Fensters). </li>
  <li>A_GuiEvent enthält die Namen der Dateien, die abgelegt wurden, wobei jeder Dateiname mit Ausnahme des Letzten mit einem LF-Zeichen (`n) endet.</li>
</ol>
<p>Um beliebige Dateien zu extrahieren, verwendet die <a href="LoopParse.htm">Variablenschleife</a>:
</p>
<pre><em>; BEISPIEL #1:</em>
Loop, parse, A_GuiEvent, `n
{
    MsgBox, 4,, Dateinummer %A_Index% ist:`n%A_LoopField%.`n`nWeiter?
    IfMsgBox, No, Break
}

<em>; BEISPIEL #2: Nur die erste Datei extrahieren:</em>
Loop, parse, A_GuiEvent, `n
{
    FirstFile = %A_LoopField%
    Break
}

<em>; BEISPIEL #3: Alphabetische Sortierung der Dateien:</em>
FileList = %A_GuiEvent%
Sort, FileList
Loop, parse, FileList, `n
    MsgBox Dateinummer %A_Index% ist:`n%A_LoopField%.</pre>
<p>Um das Ziehen und Ablegen in einem Fenster nur vorübergehend zu deaktivieren, entfernt den WS_EX_ACCEPTFILES-Style mittels <em>Gui -E0x10</em>. Mit <em>Gui +E0x10</em> kann es wieder aktiviert werden.</p>
<p><strong>Erkennen von und reagieren auf andere Ereignisse</strong>: Andere Arten von GUI-Ereignissen können mittels <a href="OnMessage.htm">OnMessage()</a> erkannt und bearbeitet werden. Zum Beispiel kann eine kontextabhängige Hilfe mittels einem ToolTip angezeigt werden, sobald der Benutzer die Maus über ein Steuerelement im Fenster hält. Siehe dazu das Beispiel mit <a href="#ExToolTip">GUI-ToolTip</a>.</p>
<h2><a name="MultiWin" id="MultiWin"></a>Mehrere GUI-Fenster erstellen</h2>
<p>Wenn mehrere Fenster vorhanden sind, dann enthalten die Labelnamen die Fensternummer als Präfix, beispielsweise 2GuiEscape und 2GuiClose sind die Standard-Labels für das zweite Fenster. Für benutzerdefinierte Labelnamen, siehe <a href="#PlusLabel">Gui +Label</a>.</p>
<p>Jedes Script kann 99 GUI-Fenster gleichzeitig besitzen. Um Unterbefehle mit diesen Fenstern und nicht mit dem <a href="#DefaultWin">Standard</a>-Fenster zu verwenden, muss jeweils die Nummer und ein Doppelpunkt vor jedem Unterbefehl stehen, wie zum Beispiel:</p>
<pre>Gui, <strong>2:</strong>Add, Text,, Text für das Über-Fenster.
Gui, <strong>2:</strong>Show</pre>
<p>Mit <a href="#Default">Gui 2:Default</a> können die oberen Präfixe vermieden werden. Außerdem ist das Präfix innerhalb eines <a href="#DefaultWin">GUI-Threads</a> nicht notwendig, welcher die gleiche Fensternummer bearbeitet, die den Thread ausgeführt hat. </p>
<p>Die Performance kann besser sein, wenn kleinere Fensternummern verwendet werden.</p>
<h2 id="DefaultWin">GUI-Ereignisse</strong>, Threads und Subroutinen</h2>
<p>Ein <a href="../misc/Threads.htm">GUI-Thread</a> wird aufgrund einer GUI-Aktion wie jeder andere Thread behandelt. GUI-Aktionen sind das Auswählen von Einträgen in einer Menüleiste oder das Ausführen eines <a href="#label">g-Labels</a> (z. B. beim Drücken einer Schaltfläche).</p>
<p>Die Standardnummer des GUI-Threads ist vom Fenster, das den Thread gestartet hat. Nicht-GUI-Threads verwenden standardmäßig die 1.</p>
<p>Sobald ein <a href="../misc/Threads.htm">GUI-Thread</a> ausgeführt wird, ist das <a href="../LastFoundWindow.htm">zuletzt gefundene Fenster</a> des Threads das GUI-Fenster selbst. Dadurch können die Befehle für Fenster und Steuerelemente (z. B. <a href="WinMove.htm">WinMove</a>, <a href="WinHide.htm">WinHide</a>, <a href="WinSet.htm">WinSet</a>, <a href="WinSetTitle.htm">WinSetTitle</a> und <a href="ControlGetFocus.htm">ControlGetFocus</a>) die Fenstertitel- und Fenstertext-Parameter beim Bearbeiten des GUI-Fensters selbst weglassen (selbst wenn es versteckt ist).</p>
<p>Das Klicken auf einem Steuerelement hat keine Wirkung, während <a href="#label">g-Label</a> durch einen vorherigen Klick noch läuft. Mit <a href="Critical.htm">Critical</a> in der ersten Zeile der Subroutine kann dieses Problem verhindert werden (allerdings werden dadurch auch andere <a href="../misc/Threads.htm">Threads</a> beispielsweise beim Drücken eines Hotkeys zwischengespeichert/aufgeschoben).</p>
<p>Die internen Variablen A_Gui und A_GuiControl enthalten die Fensternummer und ID des Steuerelements, das den aktuellen Thread gestartet hat. Siehe <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> für mehr Details.</p>
<p>Damit mehrere Ereignisse die gleiche Subroutine ausführen, gebt die Label übereinander an. Zum Beispiel:</p>
<pre>GuiEscape:
GuiClose:
ButtonCancel:
ExitApp  <em>; Alle oberen Labels führen diesen Befehl aus.</em></pre>
<p>Alle neuen <a href="../misc/Threads.htm">GUI-Threads</a> beginnen mit Standardwerten bei Einstellungen wie <a href="SendMode.htm">SendMode</a>. Diese können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<h2 id="Navigate">Navigation mit der Tastatur</h2>
<p>Mittels der Tabulatortaste wird der Tastaturfokus auf das nächste eingabefähige Steuerelement verschoben (Steuerelemente mit deaktiviertem <a href="#Tabstop">Tabstop</a>-Style werden übersprungen). Die Reihenfolge der hinzugefügten Steuerelemente bestimmt die Reihenfolge der Navigation. Wird das Fenster zum ersten Mal angezeigt, dann hat das erste eingabefähige Steuerelement den Tastaturfokus, solange der Tabstop-Style aktiv ist (was die meisten Steuerelemente standardmäßig haben).</p>
<p><a name="ShortcutKey"></a>Einige Steuerelemente können ein kaufmännisches Und (&) enthalten, um eine Tastenkombination zu ermöglichen, welches in Form eines unterstrichenen Zeichens dargestellt wird (abhängig von den Systemeinstellungen). Der Benutzer muss die ALT-Taste gedrückt halten und das entsprechende Zeichen eingeben, um die Kombination zu aktivieren. Bei Schaltflächen, Kontrollkästchen und Optionsfelder ist das Drücken der Tastenkombination das gleiche wie das Anklicken des Steuerelements. Das Drücken der Tastenkombination verursacht bei GroupBox- und Text-Steuerelemente, dass der Tastaturfokus zum ersten eingabefähigen <a href="#Tabstop">Tabstop</a>-Steuerelement springt, welches danach erstellte wurde. Wenn allerdings mehrere Steuerelemente die gleiche Tastenkombination haben, dann springt der Tastaturfokus zwischen diesen Steuerelementen abwechselnd hin und her. </p>
<p>Um ein kaufmännisches Und im Steuerelement direkt darzustellen, müssen zwei aufeinanderfolgende kaufmännische Und-Zeichen wie in diesem Beispiel angegeben werden: Save && Exit</p>
<h2 id="Appear">Fensterdarstellung</h2>
<p>Für das entsprechende Icon verwendet ein GUI-Fenster das Tray-Icon, dass bei der Erstellung des Scripts verwendet wurde. Für ein anderes Icon muss das Tray-Icon vor der Erstellung des Fensters geändert werden. Zum Beispiel: <em><a href="Menu.htm">Menu</a>, Tray, Icon, EigenesIcon.ico</em>. Es ist auch möglich, ein Icon in einer anderen Größe darzustellen (das große Icon wird in der Programmumschaltung via Alt+Tab angezeigt). Dies kann über DllCall und SendMessage erfolgen, zum Beispiel:</p>
<pre>hIcon32 := <a href="DllCall.htm">DllCall</a>("LoadImage", uint, 0
    , str, "Eigenes Icon.ico"  <em>; Dateiname des Icons (diese Datei kann mehrere Icons enthalten).</em>
    , uint, 1  <em>; Bildtyp: IMAGE_ICON</em>
    , int, 32, int, 32  <em>; gewünschte Breite und Höhe des Bilds (hilft LoadImage zu entscheiden, welches Icon am besten geeignet ist).</em>
    , uint, 0x10)  <em>; Flags: LR_LOADFROMFILE</em>
Gui +LastFound
<a href="PostMessage.htm">SendMessage</a>, 0x80, 1, hIcon32  <em>; 0x80 ist WM_SETICON; und 1 bedeutet ICON_BIG (0 für ICON_SMALL).</em>
Gui Show</pre>
<p>Aufgrund von Einschränkungen des Betriebssystems haben Kontrollkästchen, Optionsfelder und GroupBox-Steuerelemente mit einer benutzerdefinierten Textfarbe die klassische Design-Darstellung in Windows XP und höher.</p>
<p>Verwandtes Thema: <a href="#Margin">Abstand im Fenster</a>.</p>
<h2 id="GenRemarks">Allgemeine Bemerkungen</h2>
<p>Mit <a href="GuiControl.htm">GuiControl</a> und <a href="GuiControlGet.htm">GuiControlGet</a> können beliebige Steuerelemente in einem GUI-Fenster bearbeitet werden.</p>
<p>Jedes GUI-Fenster kann ca. 11000 Steuerelemente enthalten. Allerdings kann das System schon bei 5000 Steuerelementen instabil werden.</p>
<p>Scripts, die den GUI-Befehl verwenden, sind automatisch <a href="_Persistent.htm">persistent</a> (selbst wenn der GUI-Befehl nie ausgeführt wird). Es kommt auch erst einzeln vor, wenn <a href="_SingleInstance.htm">#SingleInstance</a> verwendet wird.</p>
<h2>Verwandte Befehle</h2>
<p><a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="Menu.htm">Menu</a>, <a href="GuiControls.htm">Steuerelemente</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Control.htm">Control</a>, <a href="ControlGet.htm">ControlGet</a>, <a href="Progress.htm">SplashImage</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelectFile.htm">FileSelectFile</a>, <a href="FileSelectFolder.htm">FileSelectFolder</a></p>
<h2 id="Examples">Beispiele</h2>
<pre class="NoIndent"><em>; Beispiel: Erzielt einen ähnlichen Effekt wie SplashTextOn:</em>

Gui, +AlwaysOnTop +Disabled -SysMenu +Owner  <em>; +Owner verhindert eine Schaltfläche in der Taskleiste.</em>
Gui, Add, Text,, Beliebiger Text.
Gui, Show, NoActivate, Fenstertitel  <em>; NoActivate verhindert das Deaktivieren des derzeit aktiven Fensters.</em></pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Ein einfaches Eingabefenster, dass den Vor- und Nachnamen abfragt:</em>

Gui, Add, Text,, Vorname:
Gui, Add, Text,, Nachname:
Gui, Add, Edit, vVorname ym  <em>; Die ym-Option beginnt eine neue Spalte für Steuerelemente.</em>
Gui, Add, Edit, vNachname
Gui, Add, Button, default, OK  <em>; Label ButtonOK (wenn es existiert) wird ausgeführt, wenn die Schaltfläche gedrückt wird.</em>
Gui, Show,, Einfaches Eingabebeispiel
Return  <em>; Ende des automatischen Ausführungsbereichs. Das Script ist solange im Leerlauf, bis der Benutzer irgendetwas macht.</em>

GuiClose:
ButtonOK:
Gui, Submit  <em>; Speichert die Eingaben des Benutzers in die jeweils zugewiesene Variable.</em>
MsgBox Sie haben "%Vorname% %Nachname%" eingegeben.
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Tab-Steuerelement:</em>

Gui, Add, Tab2,, Erster Tab|Zweiter Tab|Dritter Tab  <em>; Tab2 benötigt v1.0.47.05.</em>
Gui, Add, Checkbox, vEigeneCheckBox, Kontrollkästchen
Gui, Tab, 2
Gui, Add, Radio, vEigenesRadio, Optionsfeld 1
Gui, Add, Radio,, Optionsfeld 2
Gui, Tab, 3
Gui, Add, Edit, vEigenesEdit r5  <em>; r5 bedeutet 5 Reihen lang.</em>
Gui, Tab  <em>; das heißt, dass danach hinzugefügte Steuerelemente nicht zum Tab-Steuerelement gehören.</em>
Gui, Add, Button, default xm, OK  <em>; xm positioniert die Schaltfläche in die untere linke Ecke.</em>
Gui, Show
Return

ButtonOK:
GuiClose:
GuiEscape:
Gui, Submit  <em>; Speichert die Eingaben des Benutzers in die jeweils zugewiesene Variable.</em>
MsgBox Ihre Eingabe:`n%EigeneCheckBox%`n%EigenesRadio%`n%EigenesEdit%
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: ListBox enthält Dateien eines Verzeichnisses:</em>

Gui, Add, Text,, Eine Datei zum Ausführen auswählen.`nDrücken Sie ESCAPE oder schließen Sie das Fenster, um den Vorgang abzubrechen.
Gui, Add, ListBox, vEigeneListBox gEigeneListBox w640 r10
Gui, Add, Button, Default, OK
Loop, C:\*.*  <em>; Diesen Ordner und musterbasierte Suche ändern, damit es Ihren Vorstellungen entspricht.</em>
{
    GuiControl,, EigeneListBox, %A_LoopFileFullPath%
}
Gui, Show
Return

EigeneListBox:
If A_GuiEvent <> DoubleClick
    Return
<em>; Ansonsten ist das Doppelklicken auf einem Listeneintrag das gleiche wie das Drücken der OK-Schaltfläche.
; Also zum nächsten Label springen.</em>
ButtonOK:
GuiControlGet, EigeneListBox  <em>; Ermittelt die aktuelle Auswahl in der ListBox.</em>
MsgBox, 4,, Wollen Sie die Datei oder das Dokument ausführen?`n`n%EigeneListBox%
IfMsgBox, No
    Return
<em>; Ansonsten versuchen, zu starten:</em>
Run, %EigeneListBox%,, UseErrorLevel
If ErrorLevel = ERROR
    MsgBox Die angegebene Datei konnte nicht ausgeführt werden.  Vielleicht ist die Datei mit keinem Programm verknüpft.
Return

GuiClose:
GuiEscape:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><a name="ExToolTip"></a><em>; Beispiel: Eine kontextabhängige Hilfe (mittels ToolTip) anzeigen, sobald der Benutzer die Maus über ein bestimmtes Steuerelement hält:</em>

Gui, Add, Edit, v<strong>EigenesEdit</strong>
<strong>EigenesEdit</strong>_TT := "Das ist ein Tooltip für das Steuerelement mit dem Variablennamen EigenesEdit."
Gui, Add, DropDownList, v<strong>EigeneDDL</strong>, Rot|Grün|Blau
<strong>EigeneDDL</strong>_TT := "Wählen Sie eine Farbe aus der Liste."
Gui, Add, Checkbox, vEigeneCheckBox, Dieses Steuerelement hat keinen ToolTip.
Gui, Show
<a href="OnMessage.htm">OnMessage</a>(0x200, "WM_MOUSEMOVE")
Return

WM_MOUSEMOVE()
{
    static CurrControl, PrevControl, _TT  <em>; _TT bleibt für den unteren ToolTip-Befehl leer.</em>
    CurrControl := A_GuiControl
    If (CurrControl <> PrevControl and not InStr(CurrControl, " "))
    {
        ToolTip  <em>; Schließt alle offenen ToolTips.</em>
        SetTimer, DisplayToolTip, 1000
        PrevControl := CurrControl
    }
    Return

    DisplayToolTip:
    SetTimer, DisplayToolTip, Off
    <a href="ToolTip.htm">ToolTip</a> % %CurrControl%_TT  <em>; Das Prozentzeichen ermöglicht einen Ausdruck.</em>
    SetTimer, RemoveToolTip, 3000
    Return

    RemoveToolTip:
    SetTimer, RemoveToolTip, Off
    ToolTip
    Return
}


GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><a name="OSD"></a><em>; Beispiel: Bildschirmanzeige (OSD) mittels transparentem Fenster:</em>

IndividualFarbe = EEAA99  <em>; Jede beliebige RGB-Farbe (wird weiter unten transparent gemacht).</em>
Gui +LastFound +AlwaysOnTop -Caption +ToolWindow  <em>; +ToolWindow verhindert eine Schaltfläche in der Taskleiste und einen Eintrag in der Programmumschaltung via Alt+Tab.</em>
Gui, Color, %IndividualFarbe%
Gui, Font, s32  <em>; Ermöglicht eine große Schriftgröße (32 Punkte).</em>
Gui, Add, Text, vEigenerText cLime, XXXXX YYYYY  <em>; XX & YY passt die Größe des Fensters automatisch an.
; Macht alle Pixel dieser Farbe transparent und den Text selbst durchsichtig (150):</em>
WinSet, TransColor, %IndividualFarbe% 150
SetTimer, OSDAktualisieren, 200
Gosub, OSDAktualisieren  <em>; Das erste Update erfolgt sofort.</em>
Gui, Show, x0 y400 NoActivate  <em>; NoActivate verhindert das Deaktivieren des aktiven Fensters.</em>
Return

OSDAktualisieren:
MouseGetPos, MausX, MausY
GuiControl,, EigenerText, X%MausX%, Y%MausY%
Return</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Eine animierte Fortschrittsleiste auf einem Hintergrundbild.</em>

Gui, Color, White
Gui, Add, Picture, x0 y0 h350 w450, %A_WinDir%\system32\ntimage.gif
Gui, Add, Button, Default xp+20 yp+250, Animation starten
Gui, Add, Progress, vEigenesProgress w416
Gui, Add, Text, vEigenerText wp  <em>; wp bedeutet "vorherige Breite verwenden".</em>
Gui, Show
Return

ButtonStartTheBarMoving:
Loop, %A_WinDir%\*.*
{
    If A_Index > 100
        break
    GuiControl,, EigenesProgress, %A_Index%
    GuiControl,, EigenerText, %A_LoopFileName%
    Sleep 50
}
GuiControl,, EigenerText, Animation beendet.
Return

GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Einfacher Bildbetrachter:</em>

Gui, +Resize
Gui, Add, Button, default, Neues Bild &laden
Gui, Add, Radio, ym+5 x+10 vRadio checked, &Aktuelle Größe laden
Gui, Add, Radio, ym+5 x+10, Bild &passend laden
Gui, Add, Pic, xm vPic
Gui, Show
Return

ButtonLoadNewImage:
FileSelectFile, file,,, Bild auswählen:, Bilder (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)
If file =
    Return
Gui, Submit, NoHide <em>; Speichert die Werte der Optionsfelder.</em>
If Radio = 1  <em>; Bild mit aktueller Größe anzeigen.</em>
{
    Width = 0
    Height = 0
}
Else <em>; Zweites Optionsfeld ausgewählt: Größe des Bildes anpassen, damit es auf dem Bildschirm passt.</em>
{
    Width := A_ScreenWidth - 28  <em>; Minus 28, um einen Raum für Rahmen und Abstände zu gewährleisten.</em>
    Height = -1  <em>; "Seitenverhältnis beibehalten" ist besser.</em>
}
GuiControl,, Pic, *w%width% *h%height% %file%  <em>; Bild laden.</em>
Gui, Show, xCenter y0 AutoSize, %file%  <em>; Die Fenstergröße auf die Bildgröße anpassen.</em>
Return

GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Einfacher Texteditor mit Menüleiste.</em>

<em>; Untermenüs für die Menüleiste erstellen:</em>
Menu, Dateimenü, Add, &Neu, FileNew
Menu, Dateimenü, Add, &Öffnen, FileOpen
Menu, Dateimenü, Add, &Speichern, FileSave
Menu, Dateimenü, Add, Speichern &unter..., FileSaveAs
Menu, Dateimenü, Add  <em>; Trennlinie.</em>
Menu, Dateimenü, Add, E&xit, FileExit
Menu, Hilfsmenü, Add, &Über, HelpAbout

<em>; Erstellt die Menüleiste mit den Untermenüs:</em>
Menu, EigeneMenüleiste, Add, &Datei, :Dateimenü
Menu, EigeneMenüleiste, Add, &Hilfe, :Hilfsmenü

<em>; Menüleiste an das Fenster anhängen:</em>
Gui, Menu, EigeneMenüleiste

<em>; Erstellt das Edit-Steuerelement und zeigt das Fenster an:</em>
Gui, +Resize  <em>; Größe des Fensters kann angepasst werden.</em>
Gui, Add, Edit, vMainEdit WantTab W600 R20
Gui, Show,, Unbenannt
CurrentDateiname =  <em>; Keine aktuelle Datei vorhanden.</em>
Return

FileNew:
GuiControl,, MainEdit  <em>; Edit-Steuerelement leeren.</em>
Return

FileOpen:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das FileSelectFile-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
FileSelectFile, SelectedDateiname, 3,, Datei öffnen, Text-Dokumente (*.txt)
If SelectedDateiname =  <em>; Keine Datei ausgewählt.</em>
    Return
Gosub FileRead
Return

FileRead:  <em>; Die Variable SelectedDateiname wurde vorher gesetzt.</em>
FileRead, MainEdit, %SelectedDateiname%  <em>; Ließt den Inhalt der Datei in die Variable.</em>
If ErrorLevel
{
    MsgBox "%SelectedDateiname%" konnte nicht geöffnet werden.
    Return
}
GuiControl,, MainEdit, %MainEdit%  <em>; Fügt den Text in das Steuerelement ein.</em>
CurrentDateiname = %SelectedDateiname%
Gui, Show,, %CurrentDateiname%   <em>; Zeigt den Dateinamen in der Titelleiste an.</em>
Return

FileSave:
If CurrentDateiname =   <em>; Keinen Dateinamen ausgewählt, daher "Speichern unter...".</em>
    Goto FileSaveAs
Gosub SaveCurrentFile
Return

FileSaveAs:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das FileSelectFile-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
FileSelectFile, SelectedDateiname, S16,, Datei speichern, Text-Dokumente (*.txt)
If SelectedDateiname =  <em>; Keine Datei ausgewählt.</em>
    Return
CurrentDateiname = %SelectedDateiname%
Gosub SaveCurrentFile
Return

SaveCurrentFile:  <em>; Es ist sichergestellt, dass CurrentDateiname nicht leer ist.</em>
IfExist %CurrentDateiname%
{
    FileDelete %CurrentDateiname%
    If ErrorLevel
    {
        MsgBox Überschreiben der Datei "%CurrentDateiname%" fehlgeschlagen.
        Return
    }
}
GuiControlGet, MainEdit  <em>; Ermittelt den Inhalt des Edit-Steuerelements.</em>
FileAppend, %MainEdit%, %CurrentDateiname%  <em>; Speichert den Inhalt der Datei.
; Bei Erfolg den Dateinamen in der Titelleiste anzeigen (falls es mit FileSaveAs aufgerufen wurde):</em>
Gui, Show,, %CurrentDateiname%
Return

HelpAbout:
Gui, 2:+owner1  <em>; Das Hauptfenster (Gui #1) wird dem Fenster "Über" (Gui #2) übergeordnet.</em>
Gui +Disabled  <em>; Deaktiviert das Hauptfenster.</em>
Gui, 2:Add, Text,, Beliebiger Text.
Gui, 2:Add, Button, Default, OK
Gui, 2:Show
Return

2ButtonOK:  <em>; Dieser Bereich wird vom Fenster "Über" benutzt.</em>
2GuiClose:
2GuiEscape:
Gui, 1:-Disabled  <em>; Reaktiviert das Hauptfenster (muss vor dem nächsten Schritt getan werden).</em>
Gui Destroy  <em>; Das Fenster "Über" zerstören.</em>
Return

GuiDropFiles:  <em>; Unterstützt Ziehen & Ablegen.</em>
Loop, parse, A_GuiEvent, `n
{
    SelectedDateiname = %A_LoopField%  <em>; Nur die erste Datei nehmen (falls mehrere Dateien vorhanden sind).</em>
    break
}
Gosub FileRead
Return

GuiSize:
If ErrorLevel = 1  <em>; Das Fenster wurde minimiert.  Keine Aktion notwendig.</em>
    Return
<em>; Ansonsten wurde die Größe des Fensters geändert oder maximiert. Die Größe des Edit-Steuerelements anpassen.</em>
NewWidth := A_GuiWidth - 20
NewHeight := A_GuiHeight - 20
GuiControl, Move, MainEdit, W%NewWidth% H%NewHeight%
Return

FileExit:     <em>; Benutzer hat "Exit" im Dateimenü ausgewählt.</em>
GuiClose:  <em>; Benutzer hat das Fenster geschlossen.</em>
ExitApp</pre>
</body>
</html>
