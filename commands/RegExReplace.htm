<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>RegExReplace</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>RegExReplace() <span class="ver">[v1.0.45+]</span></h1>

<p>Ersetzt bestimmte Muster (reguläre Ausdrücke) in einem String.</p>

<pre class="Syntax">NeuerStr := RegExReplace(Heuhaufen, NadelRegEx [, Ersatz = "", AusgabevariableAnzahl = "", Limit = -1, Startposition = 1])</pre>
<h3>Parameter</h3>
<table class="info">
  <tr>
    <td width="15%">NeuerStr</td>
    <td width="85%">RegExReplace() gibt eine Version des <em>Heuhaufens</em> zurück, deren Inhalt ersetzt wurde. Wenn das Ersetzen nicht notwendig ist, dann wird der <em>Heuhaufen</em> unverändert zurückgegeben. Wenn ein Fehler auftritt (z. B. ein Syntaxfehler in der <em>NadelRegEx</em>), dann wird der <em>Heuhaufen</em> unverändert zurückgegeben (aber nicht in den Versionen vor 1.0.46.06, die "" zurückgegeben) und ErrorLevel auf einen <a href="#ErrorLevel">unten genannten</a> Wert anstelle von 0 gesetzt.</td>
  </tr>
  <tr>
    <td>Heuhaufen</td>
    <td>Der String, dessen Inhalt durchsucht und ersetzt wird. </td>
  </tr>
  <tr>
    <td>NadelRegEx</td>
    <td>Das zu suchende Muster, welches ein Perl-kompatibler regulärer Ausdruck (PCRE) ist. Die <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> des Musters (falls vorhanden) müssen am Anfang des Strings stehen, gefolgt von einer schließenden Klammer. Zum Beispiel wird das Muster "<span class="red">i)</span>abc.*123" die Abhängigkeit von der Groß- und Kleinschreibung deaktivieren und nach "abc", null oder mehr Zeichen und "123" suchen. Wenn keine Optionen vorhanden sind, dann ist ")" optional; zum Beispiel ist ")abc" gleichbedeutend mit "abc".</td>
  </tr>
  <tr>
    <td>Ersatz</td>
    <td><p><a name="BackRef"></a>Der String, der als Ersatz für jede Übereinstimmung dient und Klartext ist (kein regulärer Ausdruck). Darin können sich auch Rückreferenzen (z. B. $1) befinden, die den Teilstring vom <em>Heuhaufen</em> einbringen, welcher mit dem ersten <a href="../misc/RegEx-QuickRef.htm#subpat">Teilausdruck</a> übereinstimmt. Die einfachsten Rückreferenzen sind $0 bis $9, wobei $0 der Teilstring ist, der mit dem gesamten Muster übereinstimmt, $1 der Teilstring ist, der mit dem ersten Teilausdruck übereinstimmt, $2 mit dem Zweiten und so weiter. Bei Rückreferenzen über 9 (und optional auch bei den 9 selber) müssen die Nummern von geschweiften Klammern umschlossen werden, zum Beispiel: ${10}, ${11} und so weiter. Bei <a href="RegExMatch.htm#NamedSubPat">benannten Teilausdrücken</a> muss der Name von geschweiften Klammern umschlossen werden, zum Beispiel ${SubpatternName}. Um ein $ direkt anzugeben, verwendet $$ (ist das einzige Zeichen, dass eine Sonderbehandlung benötigt; Backslash-Zeichen werden nie benötigt, um irgendwas zu schützen).</p>
      <p>Um die Groß- und Kleinschreibung des Teilausdrucks umzuwandeln, setzt nach $ folgendes Zeichen: U oder u (Großbuchstaben), L oder l (Kleinbuchstaben), T oder t (Titel, damit wird das erste Zeichen jeden Wortes großgeschrieben, alle anderen jedoch kleingeschrieben). Zum Beispiel überträgt sowohl $U1 als auch $U{1} eine großgeschriebene Version des ersten Teilausdrucks.</p>
      <p>Nicht vorhandene Rückreferenzen und diejenigen, die keine Übereinstimmung im <em>Heuhaufen</em> haben (z. B. einen Teilausdruck von <em>(abc)|(xyz)</em>), werden als leerer String übertragen.</p></td>
  </tr>
  <tr>
    <td><span class="CommandSyntax">AusgabevariableAnzahl</span></td>
    <td>Der Name der Variable ohne Anführungszeichen, in der die Anzahl gespeichert wird, wie oft der Heuhaufen ersetzt wurde (0, wenn nicht).</td>
  </tr>
  <tr>
    <td>Limit</td>
    <td>Wenn das <em>Limit</em> weggelassen wird, dann standardmäßig -1, um <strong>alle</strong> Vorkommen des Musters zu ersetzen, die im <em>Heuhaufen</em> gefunden werden. Andernfalls kann angegeben werden, wie oft der <em>Heuhaufen</em> ersetzt werden kann. Der <em>Heuhaufen</em>-Bereich auf der rechten Seite des letzten Ersatzes bleibt unverändert.</td>
  </tr>
  <tr>
    <td>Startposition</td>
    <td><p>Wenn die <em>Startposition</em> weggelassen wird, dann standardmäßig eine 1 (der Anfang vom <em>Heuhaufen</em>). Verwendet andernfalls eine 2, um beim zweiten Zeichen beginnen, eine 3, um beim Dritten zu beginnen und so weiter.  Wenn die <em>Startposition</em> die Länge des <em>Heuhaufens</em> überschreitet, dann beginnt die Suche bei einem leeren String, welcher sich am Ende des <em>Heuhaufens</em> befindet (ergibt typischerweise keinen Ersatz).</p>
      <p>Wenn die <em>Startposition</em> kleiner als 1 ist, dann ist es das Offset vom Ende des <em>Heuhaufens</em>. Zum Beispiel beginnt 0 beim letzten Zeichen und -1 beim vorletzten Zeichen. Wenn die <em>Startposition</em> das linke Ende des <em>Heuhaufens</em> überschreitet, dann wird alles vom <em>Heuhaufen</em> durchsucht.</p>
      <p>Unabhängig vom <em>Startposition</em>-Wert ist der Rückgabewert immer eine komplette Kopie des <em>Heuhaufens</em>, nur mit dem Unterschied, dass mehr von der linken Seite unverändert ist, verglichen mit dem, was passieren könnte, wenn die <em>Startposition</em> eine 1 enthält.</p></td>
  </tr>
</table>
<h3 id="ErrorLevel">ErrorLevel</h3>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> kann Folgendes enthalten:</p>
<ul>
  <li>0, was bedeutet, dass kein Fehler aufgetreten ist.</li>
  <li>Einen String in folgender Form: <em>Compile error N at offset M: Beschreibung</em>. In diesem String ist <em>N</em> die PCRE-Fehlernummer, <em>M</em> die Position des betroffenen Zeichens im regulären Ausdruck und <em>Beschreibung</em> ein Text, der den Fehler beschreibt.</li>
  <li>Eine negative Zahl, was bedeutet, dass ein Fehler während der <em>Ausführung</em> des regulären Ausdrucks aufgetreten ist. Obwohl solche Fehler selten sind, sind die häufigsten auftretenden Fehler  "zu viele mögliche Übereinstimmungen mit leeren Strings" (-22), "Rekursion zu tief" (-21) und "Limit der Übereinstimmung erreicht" (-8). In diesem Fall sollte das Muster soweit wie möglich umgestaltet werden, damit es restriktiver ist, zum Beispiel * mit ?, + oder eine Begrenzung wie {0,3} ersetzen.</li>
</ul>
<h3>Optionen</h3>
<p>Siehe <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> für Modifikatoren wie "<span class="red">i)</span>abc", um die Abhängigkeit von Groß- und Kleinschreibung im Muster "abc" zu deaktivieren.</p>
<h3>Performance</h3>
<p>Um einfache Teilstrings zu ersetzen, verwendet <a href="StringReplace.htm">StringReplace</a>, weil es schneller als RegExReplace() ist.</p>
<p>Wenn bekannt ist, wie oft der String ersetzt wird, dann verbessert diese Anzahl im <em>Limit</em>-Parameter die Performance, weil die Suche früher gestoppt werden kann (was auch die Speicherauslastung auf dem System während der Operation reduziert). Wenn zum Beispiel bekannt ist, dass nur eine Übereinstimmung am Anfang eines langen Strings erfolgen kann, verwendet einen Limit von 1.</p>
<p>Um die Performance zu verbessern, werden die 100 aktuellsten regulären Ausdrücken im Speicher zwischengespeichert (in kompilierter Form).</p>
<p>Die <a href="../misc/RegEx-QuickRef.htm#Study">S-Option</a> kann manchmal die Performance eines regulären Ausdrucks verbessern, welches oft verwendet wird (z. B. in einer Schleife).</p>
<h3>Bemerkungen</h3>
<p>Die meisten Zeichen wie abc123 können direkt in einem regulären Ausdruck verwendet werden. Allerdings müssen die Zeichen <strong>\.*?+[{|()^$</strong> mit einem Backslash vorangestellt werden, damit sie direkt verwendet werden. Zum Beispiel ist <strong>\.</strong> ein direkt vorhandener Punkt und <strong>\\</strong> ist ein direkt vorhandener Backslash. Das Schützen kann mit \Q...\E verhindert werden. Zum Beispiel: \QDirekt vorhandener Text\E.</p>
<p>Innerhalb eines regulären Ausdrucks können bestimmte Sonderzeichen wie Tabulatoren und Zeilenumbrüche mit einem Akzent- (`) oder Backslash-Zeichen (\) geschützt werden. Zum Beispiel ist `t das Gleiche wie \t.</p>
<p>Um die Grundlagen von regulären Ausdrücken kennenzulernen (oder das Gedächtnis ein wenig aufzufrischen), siehe <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>.</p>
<h3>Verwandte Befehle</h3>
<p><a href="RegExMatch.htm">RegExMatch()</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>, <a href="../misc/RegExCallout.htm">Callouts in regulären Ausdrücken</a>, <a href="StringReplace.htm">StringReplace</a>, <a href="../Functions.htm#InStr">InStr()</a></p>
<p>Häufige Quellen von Textdaten: <a href="FileRead.htm">FileRead</a>, <a href="UrlDownloadToFile.htm">UrlDownloadToFile</a>, <a href="../misc/Clipboard.htm">Clipboard</a>, <a href="GuiControls.htm#Edit">GUI-Edit-Steuerelemente</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent">NeuerStr := RegExReplace("abc123123", "123$", "xyz")  <em>; Gibt "abc123xyz" zurück, weil $ nur eine Übereinstimmung am Ende erlaubt.</em>
NeuerStr := RegExReplace("abc123", "i)^ABC")  <em>; Gibt 123 zurück, weil eine Übereinstimmung durch die Unabhängigkeit von Groß- und Kleinschreibung gefunden wurde.</em>
NeuerStr := RegExReplace("abcXYZ123", "abc<span class="red">(.*)</span>123", "aaa<span class="red">$1</span>zzz")  <em>; Gibt "aaaXYZzzz" mithilfe der <a href="#BackRef">Rückreferenz</a> <span class="red">$1</span> zurück.</em>
NeuerStr := RegExReplace("abc123abc456", "abc\d+", "", Ersatzanzahl)  <em>; Gibt "" zurück und setzt die Ersatzanzahl auf 2.</em>

<em>; Allgemeine RegEx-Beispiele können in der <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a> gefunden werden.</em></pre>

</body>
</html>
