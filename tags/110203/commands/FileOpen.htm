<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>FileOpen</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>FileOpen <span class="ver">[AHK_L 42+]</span></h1>

<p>&Ouml;ffnet eine Datei.</p>
<pre class="Syntax">Datei := FileOpen(Dateiname, Flags [, Kodierung])</pre>

<h3>Parameter</h3>
<table class="info">
  <tr><td width="15%">Dateiname</td><td width="85%">Der Name der Datei, die sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist.</td></tr>
  <tr><td>Flags</td><td>Entweder <span class="ver">[in AHK_L 54+]</span> ein String mit Zeichen f&uuml;r die gew&uuml;nschte Zugriffsart gefolgt von anderen Optionen (Leerzeichen und Tabulatoren dazwischen sind optional); Oder <span class="ver">[in AHK_L 42+]</span> eine Kombination (Summe) von numerischen Flags. Unterst&uuml;tzte Werte werden in der folgenden Tabelle beschrieben.</td></tr>
  <tr><td>Kodierung</td><td>Der zu verwendende Zeichensatz f&uuml;r die Eingabe/Ausgabe des Textes, wenn die Datei keine UTF-8- oder UTF-16-<a href="http://en.wikipedia.org/wiki/Byte_order_mark">Bytereihenfolge-Markierung</a> enth&auml;lt.<br> Wenn nicht vorhanden, dann wird der aktuelle Wert in <a href="../Variables.htm#FileEncoding">A_FileEncoding</a> verwendet.</td></tr>
</table>
<h3>Flags</h3>

<table class="info">
  <tr><th style="width:4em"></th><th style="width:4em"></th><th style="text-align:left">Zugriffsmodi (schlie&szlig;en sich gegenseitig aus)</th></tr>
  <tr><td class="fopt">r</td><td class="fnum">0</td><td><i>Lesen:</i> Schl&auml;gt fehl, wenn die Datei nicht existiert.</td></tr>
  <tr><td class="fopt">w</td><td class="fnum">1</td><td><i>Schreiben:</i> Erstellt eine neue Datei, <b style="color:red">&uuml;berschreibt jede vorhandene Datei.</b></td></tr>
  <tr><td class="fopt">a</td><td class="fnum">2</td><td><i>Anh&auml;ngen:</i> Erstellt eine neue Datei, wenn die Datei nicht existiert, ansonsten wird der Datei-Pointer ans Ende der Datei verschoben.</td></tr>
  <tr><td class="fopt">rw</td><td class="fnum">3</td><td><i>Lesen/Schreiben:</i> Erstellt eine neue Datei, wenn die Datei nicht existiert.</td></tr>
  <tr><td class="fopt">h</td><td></td><td>Weist darauf hin, dass <i>Dateiname</i> ein Datei-Handle ist, um ihn in ein Objekt einzubinden. Flags vom Freigabemodus werden ignoriert. Das Datei-Handle wird <b>nicht</b> automatisch geschlossen, wenn das Datei-Objekt gel&ouml;scht wird. Das Aufrufen von <a href="../objects/File.htm#Close">Close</a> hat keine Wirkung. Beachtet, dass <a href="../objects/File.htm#Seek">Seek</a>, <a href="../objects/File.htm#Tell">Tell</a> und <a href="../objects/File.htm#Length">Length</a> nicht verwendet werden sollten, wenn <i>Dateiname</i> ein Handle f&uuml;r ein nicht-suchendes Device wie Pipe- oder Kommunikation-Device ist.</td></tr>
  <tr><th></th><th></th><th style="text-align:left">Flags des Freigabemodus</th></tr>
  <tr><td class="fopt" style="white-space:nowrap">-rwd</td><td></td><td>Sperrt die Datei f&uuml;r Lese-, Schreib- und/oder L&ouml;schzugriff. Es sind beliebige Kombinationen mit <code>r</code>, <code>w</code> und <code>d</code> m&ouml;glich. Die Angabe von <code>-</code> ist das Gleiche wie <code>-rwd</code>. Wenn nicht vorhanden, wird standardm&auml;&szlig;ig jeder Zugriff freigegeben.</td></tr>
  <tr><td></td><td class="fnum">0</td><td>Wenn <i>Flags</i> numerisch ist, dann verursacht das Fehlen der Flags vom Freigabemodus eine Sperrung der Datei.</td></tr>
  <tr><td></td><td class="fnum">0x100</td><td><i>Lesezugriff</i> freigeben.</td></tr>
  <tr><td></td><td class="fnum">0x200</td><td><i>Schreibzugriff</i> freigeben.</td></tr>
  <tr><td></td><td class="fnum">0x400</td><td><i>L&ouml;schzugriff</i> freigeben.</td></tr>
  <tr><th></th><th></th><th style="text-align:left">Zeilenumbruchsoptionen (EOL)</th></tr>
  <tr><td class="fopt"><code>`n</code></td><td class="fnum">4</td><td>Ersetzt <code>`r`n</code> mit <code>`n</code> beim Schreiben und <code>`n</code> mit <code>`r`n</code> beim Lesen.</td></tr>
  <tr><td class="fopt"><code>`r</code></td><td class="fnum">8</td><td>Ersetzt beim Schreiben das alleinstehende <code>`r</code> mit <code>`n</code>.</td></tr>
</table>

<h3>R&uuml;ckgabewert</h3>
<p>Wenn die Datei erfolgreich ge&ouml;ffnet wird, dann ist der R&uuml;ckgabewert ein <a href="../objects/File.htm">Datei-Objekt</a>.</p>
<p>Wenn die Funktion fehlschl&auml;gt, dann ist der R&uuml;ckgabewert 0 und <a href="../Variables.htm#LastError">A_LastError</a> enth&auml;lt <span class="ver">[in AHK_L 54+]</span> einen Fehlercode.</p>
<p>Verwendet <code>If Datei</code> oder <code>IsObject(Datei)</code>, um zu &uuml;berpr&uuml;fen, ob die Funktion erfolgreich ist.

<h3>Bemerkungen</h3>
<p>Beim Erstellen einer UTF-8- oder UTF-16-Datei wird eine Bytereihenfolge-Markierung in die Datei geschrieben, <b>es sei denn</b>, die <i>Kodierung</i> (oder <a href="FileEncoding.htm">A_FileEncoding</a>, wenn die <i>Kodierung</i> nicht vorhanden ist) enth&auml;lt "UTF-8-RAW" oder "UTF-16-RAW".</p>

<h3>Verwandte Befehle</h3>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="../objects/File.htm">Datei-Objekt</a>, <a href="FileRead.htm">FileRead</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent"><em>; &Ouml;ffnet das Script im Schreibschutzmodus und lie&szlig;t die erste Zeile:</em>
Datei := FileOpen(A_ScriptFullPath, "r")
MsgBox % Datei.ReadLine()

<em>; &Ouml;ffnet ein Konsolenfenster f&uuml;r diese Demonstration:</em>
DllCall("AllocConsole")
<em>; &Ouml;ffnet die stdin/stdout-Handles der Anwendung mit der Option "`n".</em>
stdin  := FileOpen(DllCall("GetStdHandle", "int", -10, "ptr"), "h `n")
stdout := FileOpen(DllCall("GetStdHandle", "int", -11, "ptr"), "h `n")
stdout.Write("Bitte Anfrage eingeben.`n\> ")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
Abfrage := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Die Anfrage war '" Abfrage "'. Einen sch&ouml;nen Tag noch.")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
Sleep 5000

</pre>

</body>
</html>