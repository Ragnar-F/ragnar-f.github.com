<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>AutoHotkey-Tutorial: Makro- und Hotkey-Erstellung</title>
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="../forum/rss.php">
<link href="css/default.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
.style1 {font-size: 133%; font-weight: bold}
-->
</style>
</head>
<body>

<h1>Tutorial und Übersicht</h1>


<p>Diese kurze Einführung hilft dabei, eigene Makros und Hotkeys auf Anhieb zu programmieren.</p>
<h2>Inhaltsverzeichnis</h2>
<ul>
  <li class="style1"><a href="#Create">Erstellen eines Scripts</a></li>
  <li class="style1"><a href="#Launch">Ausführen eines Programms oder Dokuments</a></li>
  <li class="style1"><a href="#Send">Senden von Tastatureingaben und Mausklicks</a></li>
  <li class="style1"><a href="#Activate">Aktivieren und Bearbeiten von Fenstern</a></li>
  <li class="style1"><a href="#Dialogs">Abrufen von Benutzereingaben mit MsgBox, InputBox, usw.</a></li>
  <li class="style1"><a href="#Variables">Verwenden von Variablen und der Zwischenablage</a></li>
  <li class="style1"><a href="#Loop">Wiederholen von mehreren Aktionen</a></li>
  <li class="style1"><a href="#Files">Bearbeiten von Dateien und Ordnern</a></li>
  <li class="style1"><a href="#Overview">Übersicht über weitere Funktionen</a></li>
</ul>
<h2 id="Create">Erstellen eines Scripts</h2>
<p>Jedes Script ist eine Klartextdatei mit Befehlen, die vom Programm (AutoHotkey.exe) ausgeführt werden. Ein Script kann auch <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten, oder sogar nur aus diesen bestehen. Wenn jedoch die Hotkeys und Hotstrings nicht vorhanden sind, dann führt ein Script seine Befehle von oben nach unten nacheinander aus, sobald es gestartet wird.</p>
<p>Um ein neues Script zu erstellen:</p>
<ol>
  <li>AutoHotkey <a href="http://www.autohotkey.com/download/">herunterladen</a> und installieren.</li>
  <li>Mit der rechten Maustaste auf eine leere Stelle im Desktop oder in einem beliebigen Ordner klicken.</li>
  <li>Im dabei entstandenen Menü "<em>Neu -> AutoHotkey Script</em>" auswählen.</li>
  <li>Name der Datei eingeben und dabei beachten, dass sie mit <strong>.ahk</strong> endet. Zum Beispiel: Test.ahk</li>
  <li>Mit der rechten Maustaste auf die Datei klicken und "Edit Script" auswählen.</li>
  <li>Auf einer neuen leeren Zeile Folgendes eingeben:<br> #space::Run www.google.de</li>
</ol>
<p>In der oberen Zeile entspricht das erste Zeichen "#" die Win-Taste; das heißt, dass die Win-Taste gedrückt gehalten und danach die Leertaste gedrückt werden muss, um den Hotkey zu aktivieren. Das Doppelpunkt-Paar (::) bedeutet, dass nachfolgende Befehle ausgeführt werden sollen, sobald dieser Hotkey gedrückt wird, in diesem Fall wird die Webseite von Google geöffnet. Damit dieses Script ausprobiert werden kann, macht wie folgt weiter:</p>
<ol>
  <li>Die Datei speichern und schließen.</li>
  <li>Auf die Datei doppelt klicken, um sie auszuführen. Dabei erscheint ein neues Icon im Benachrichtigungsfeld der Taskleiste.</li>
  <li> Haltet die Win-Taste gedrückt und drückt die Leertaste. Dabei öffnet sich eine Webseite im Standard-Browser.</li>
  <li>Um das Script zu beenden oder zu bearbeiten, klickt mit der rechten Maustaste auf das grüne "H" im Benachrichtigungsfeld der Taskleiste.</li>
</ol>
<p> Hinweise:</p>
<ul>
  <li>Es können mehrere Scripts gleichzeitig ausgeführt werden, jeweils mit eigenem Icon im Benachrichtigungsfeld der Taskleiste.</li>
  <li>Jedes Script kann mehrere <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten.</li>
  <li>Damit ein Script automatisch beim Start des Computers ausgeführt wird, <a href="FAQ.htm#Startup">erstellt eine Verknüpfung im Autostart-Ordner des Startmenüs</a>.</li>
</ul>
<h2 id="Launch">Ausführen eines Programms oder Dokuments</h2>
<p>Der <a href="commands/Run.htm">Run</a>-Befehl kann verwendet werden, um Programme, Dokumente, URLs, oder Verknüpfungen zu starten. Hier ein paar weitere Beispiele:</p>
<pre>Run Notepad
Run C:\Eigene Dokumente\Adressliste.doc
Run C:\Eigene Dokumente\Eigene Verknüpfung.lnk
Run www.yahoo.de
Run mailto:someone@somedomain.com</pre>
<p>Ein Hotkey kann jedem oben genannten Beispiel zugewiesen werden, indem ein <a href="Hotkeys.htm">Hotkey-Label</a> zugeordnet wird. Das erste Beispiel ist der Hotkey Win+N, während das zweite Beispiel der Hotkey Steuerung+Alt+C ist:</p>
<pre>#n::Run Notepad
^!c::Run calc.exe</pre>
<p>Die obigen Beispiele sind als einzeilige Hotkeys bekannt, da sie jeweils nur einen einzigen Befehl haben. Damit mehrere Befehle vom Hotkey ausgeführt werden können, setzt die erste Zeile <u>unter</u> der Hotkeydefinition und schreibt in der letzten Zeile ein <a href="commands/Return.htm"><em>Return</em></a>. Zum Beispiel:</p>
<pre>#n::
Run http://www.google.de
Run Notepad.exe
return</pre>
<p>Wenn das Programm oder Dokument nicht im System integriert ist, dann muss der vollständige Pfad angegeben werden, um es auszuführen:</p>
<pre>Run %A_ProgramFiles%\Winamp\Winamp.exe</pre>
<p>Im obigen Beispiel ist %A_ProgramFiles% eine <a href="Variables.htm#BuiltIn">interne Variable</a>. Sobald diese Variable anstelle von beispielsweise <em>C:\Programme</em> verwendet wird, ist das Script flexibler, das heißt, dass die Datei wahrscheinlich auf jedem Computer ausgeführt werden kann. Hinweis: Die Namen von Befehlen und Variablen sind nicht von der Groß- und Kleinschreibung abhängig. Zum Beispiel ist "Run" das Gleiche wie "run" und "A_ProgramFiles" das Gleiche wie "a_programfiles".</p>
<p>Damit das Script auf das Beenden des Programms oder Dokuments wartet, bevor es fortgesetzt wird, verwendet <a href="commands/Run.htm">RunWait</a> anstelle von Run. Im folgenden Beispiel wird der <a href="commands/MsgBox.htm">MsgBox</a>-Befehl erst ausgeführt, wenn der Benutzer den Editor schließt:</p>
<pre>RunWait Notepad
MsgBox Der Benutzer ist fertig (Editor wurde geschlossen).</pre>
<p>Um mehr über das Starten von Programmen zu erfahren (z. B. Parameter übergeben, Arbeitsverzeichnis bestimmen und den Exitcode des Programms ermitteln), siehe <a href="TutorialLaunch.htm">hier</a>.</p>
<h2 id="Send">Senden von Tastatureingaben und Mausklicks</h2>
<p>Tastatureingaben werden mithilfe des <a href="commands/Send.htm">Send</a>-Befehls an das aktive (vorderste) Fenster gesendet. Im folgenden Beispiel dient Steuerung+Alt+S als Hotkey für die Eingabe einer Signatur (stellt sicher, dass ein Fenster wie der Editor oder E-Mail-Entwurf aktiv ist, bevor Win+S gedrückt wird):</p>
<pre>^!s::
Send Mit freundlichen Grüßen,{Enter}John Smith
return</pre>
<p>Im obigen Beispiel werden alle Zeichen direkt gesendet, außer {Enter}, dass ein Enter-Tastendruck simuliert. Das nächste Beispiel veranschaulicht einige weitere häufig verwendete Sonderzeichen:</p>

<pre>Send ^c!{tab}eingefügt:^v</pre>
<p>Die obige Zeile sendet Steuerung+C, gefolgt von Alt+Tab, dem String "eingefügt:" und Steuerung+V. Auf der Seite des <a href="commands/Send.htm">Send</a>-Befehls kann eine vollständige Liste von Sonderzeichen und Tasten gefunden werden.</p>
<p>Letztendlich können Tastatureingaben auch in Reaktion auf eingegebene Abkürzungen gesendet werden, auch bekannt als <a href="Hotstrings.htm">Hotstrings</a>. Sobald zum Beispiel "bzw" gefolgt von einem Leerzeichen oder Komma eingegeben wird, dann wird diese Abkürzung von der folgenden Zeile mit "beziehungsweise" ersetzt:</p>
<pre>::bzw::beziehungsweise</pre>
<p><u><strong><br> Mausklicks</strong></u><strong>:</strong> Damit ein Mausklick an ein Fenster gesendet werden kann, müssen zuerst die X- und Y-Koordinaten festgelegt werden, um die Position des Klicks zu bestimmen. Dafür kann "Window Spy" verwendet werden, das in AutoHotkey enthalten ist. Die folgenden Schritte gelten für die Methode mit "Window Spy":</p>
<ol>
  <li>Startet "Window Spy" über das Tray-Icon-Menü des Scripts oder über das Startmenü.</li>
  <li>Aktiviert das gewünschte Fenster entweder durch das Klicken auf dessen Titelleiste, durch das Verwenden von Alt-Tab oder mit anderen Mitteln ("Window Spy" bleibt "immer im Vordergrund").</li>
  <li>Verschiebt den Mauszeiger auf die gewünschte Position im Zielfenster und notiert euch die angezeigten Mauskoordinaten von "Window Spy" (oder drückt in Windows XP und niedriger die Tastenkombination Umschalt+Alt+Tab, um "Window Spy" zu aktivieren, damit die "eingefrorenen" Koordinaten kopiert und eingefügt werden können).</li>
  <li>Übertragt die ermittelten Koordinaten auf den <a href="commands/Click.htm">Click</a>-Befehl. Das folgende Beispiel klickt die linke Maustaste:<br> <strong>Click 112, 223</strong></li>
</ol>
<p>Um die Maus ohne Klicken zu verschieben, verwendet <a href="commands/MouseMove.htm">MouseMove</a>. Um die Maus zu ziehen, verwendet <a href="commands/MouseClickDrag.htm">MouseClickDrag</a>. </p>
<h2 id="Activate">Aktivieren und Bearbeiten von Fenstern</h2>
<p>Um das Fenster zu aktivieren (in den Vordergrund setzen), verwendet <a href="commands/WinActivate.htm">WinActivate</a>.  Um das Vorhandensein eines Fensters zu erkennen, verwendet <a href="commands/IfWinExist.htm">IfWinExist</a> oder <a href="commands/WinWait.htm">WinWait</a>.  Das folgende Beispiel verdeutlicht diese Befehle:</p>
<pre>IfWinExist Unbenannt - Editor
{
    WinActivate
}
else
{
    Run Notepad
    WinWait Unbenannt - Editor
    WinActivate
}</pre>
<p>Das obige Beispiel sucht zuerst nach vorhandenen Fenstern, deren Titel mit "Unbenannt - Editor" beginnt (von der Groß- und Kleinschreibung abhängig). Sobald so ein Fenster gefunden wird, wird es aktiviert. Ansonsten startet das Script den Editor und wartet darauf, bis das Fenster "Unbenannt - Editor" erscheint, um es dabei zu aktivieren. Das obige Beispiel nutzt auch das <a href="LastFoundWindow.htm">zuletzt gefundene Fenster</a>, damit der Fenstertitel auf der rechten Seite von WinActive nicht angegeben werden muss.</p>
<p>Weitere häufig verwendete Fensterbefehle:</p>
<ul>
  <li>  <a href="commands/IfWinActive.htm">IfWinActive</a>: Überprüft, ob das angegebene Fenster zurzeit aktiv ist.</li>
  <li><a href="commands/WinWaitActive.htm">WinWaitActive</a>: Wartet darauf, bis das angegebene Fenster aktiv ist (in der Regel nach dem Senden einer fensteraktivierenden Tastatureingabe wie die Tastenkombination Steuerung+F für "Suchen").</li>
  <li><a href="commands/WinClose.htm">WinClose</a>: Schließt das angegebene Fenster.</li>
  <li><a href="commands/WinMove.htm">WinMove</a>: Verschiebt das Fenster und/oder ändert dessen Größe.</li>
  <li><a href="commands/WinMinimize.htm">WinMinimize</a>, <a href="commands/WinMaximize.htm">WinMaximize</a>, <a href="commands/WinRestore.htm">WinRestore</a>: Minimieren, Maximieren oder Wiederherstellen des angegebenen Fensters.</li>
</ul>
<h2 id="Dialogs">Abrufen von Benutzereingaben mit MsgBox, InputBox, usw.</h2>
<p>Das folgende Beispiel zeigt ein Dialogfenster mit zwei Tasten an (JA und NEIN):</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a>, 4, , Möchten Sie fortfahren?
<a href="commands/IfMsgBox.htm">IfMsgBox</a>, No
    return
<em>; Ansonsten hat der Benutzer JA gedrückt.</em>
MsgBox Es wurde JA gedrückt.</pre>
<p>Verwendet den <a href="commands/InputBox.htm">InputBox</a>-Befehl, um den Benutzer aufzufordern, einen String einzugeben. Verwendet <a href="commands/FileSelectFile.htm">FileSelectFile</a> oder <a href="commands/FileSelectFolder.htm">FileSelectFolder</a>, damit der Benutzer eine Datei oder einen Ordner auswählen kann. Für komplexere Aufgaben kann der <a href="commands/Gui.htm">Gui</a>-Befehl verwendet werden, um benutzerdefinierte Dateneingabeformulare und Benutzeroberflächen zu erstellen.</p>
<p>Tipp: Der Einfachheit halber kann das erste Komma bei einem Befehl weggelassen werden (außer wenn der erste Parameter leer ist oder mit := oder = beginnt, oder der Befehl am Anfang eines <a href="Scripts.htm#continuation">Fortsetzungsbereich</a> alleine steht). Zum Beispiel:</p>
<pre>MsgBox Das ist ok.
MsgBox<strong>,</strong> Das ist auch ok (es hat ein direktes Komma).</pre>
<h2 id="Variables">Verwenden von Variablen und der Zwischenablage</h2>
<p>Eine <em>Variable</em> ist ein Speicherbereich, in der Text oder Zahlen vom Script gespeichert werden. Wenn eine Variable nur Ziffern enthält (optional mit einem Dezimalpunkt), dann wird sie automatisch als Zahl interpretiert, sobald sie von einer mathematischen Operation oder von einem Vergleich benötigt wird.</p>
<p>Mit Ausnahme von lokalen Variablen in <a href="Functions.htm#Locals">Funktionen</a> sind alle Variablen global; das heißt, dass deren Inhalt jederzeit vom Script gelesen oder geändert werden kann. Darüber hinaus werden Variablen nicht deklariert; sie entstehen, sobald sie verwendet werden (und jede Variable beginnt leer).</p>
<p>Um einen String eine Variable zuzuweisen, befolgt diese Beispiele:</p>
<pre>EigeneVar1 = 123
EigeneVar2 = Eigener String</pre>
Damit ein Variableninhalt mit einer Zahl oder einem String verglichen werden kann, befolgt diese Beispiele:
<pre>if EigeneVar2 = Eigener String
{
    MsgBox EigeneVar2 enthält den String "Eigener String".
}
if EigeneVar1 >= 100
{
    MsgBox EigeneVar1 enthält %EigeneVar1%, eine Zahl größer gleich 100.
}</pre>
<p>  Beachtet in der oben genannten MsgBox-Zeile, dass das zweite Vorkommen von <em>EigeneVar1</em> von Prozentzeichen umschlossen ist. Dadurch wird der Inhalt von <em>EigeneVar1</em> an dieser Position angezeigt. Die gleiche Technik kann verwendet werden, um den Inhalt einer Variable in eine andere Variable zu kopieren. Zum Beispiel:</p>
<pre>EigeneVarVerkettung = %EigeneVar1% %EigeneVar2%</pre>
<p>Die obige Zeile speichert den String "123 Eigener String" (ohne Anführungszeichen) in die Variable EigeneVarVerkettung.</p>
<p>Um den Inhalt einer Variable mit einer anderen Variable zu vergleichen, beachtet dieses Beispiel:</p>
<pre>if (Elementzählung > Elementmaximum)
{
    MsgBox Der Wert von Elementzählung (%Elementzählung%) ist größer als %Elementmaximum%.
}</pre>
<p>Beachtet, dass die erste Zeile im obigen Beispiel Klammern enthält. Die Klammern kennzeichnen einen <a href="Variables.htm#Expressions">Ausdruck</a> in der If-Anweisung. Sobald die Klammern nicht vorhanden sind, wird die Zeile als eine "If-Anweisung ohne Ausdruck" behandelt, somit müssten Prozentzeichen um Elementmaximum gesetzt werden (solche If-Anweisungen sind auf einen Vergleichsoperator beschränkt; das heißt, dass sie weder mathematische Operatoren noch Bindewörter wie "AND" und "OR" enthalten können).</p>
<p><u><strong><br> Berechnung</strong></u>: Damit eine mathematische Operation durchgeführt werden kann, verwendet den Doppelpunkt-Gleich-Operator (:=), um das Ergebnis eines <a href="Variables.htm#Expressions">Ausdrucks</a> wie im folgenden Beispiel einer Variable zuzuweisen:</p>
<p>Nettopreis := Preis * (1 - Rabatt/100)</p>
<p>Siehe <a href="Variables.htm#Expressions">Ausdrücke</a> für eine komplette Liste von mathematischen Operatoren.</p>
<p><br> <strong><u>Zwischenablage</u></strong>: Die Variable namens <em>Clipboard</em> ist etwas Besonderes, da sie den aktuellen Text der Windows-Zwischenablage enthält. Trotzdem kann sie als eine normale Variable verwendet werden. Zum Beispiel wird die folgende Zeile den aktuellen Inhalt der Zwischenablage anzeigen:</p>
<pre>MsgBox %Clipboard%</pre>
<p>Um die Zwischenablage zu ändern, betrachtet das folgende Beispiel, das den aktuellen Inhalt der Zwischenablage mit einem neuen Text ersetzt:</p>
<pre>Clipboard = Eine Textzeile.`r`nZweite Textzeile.`r`n</pre>
<p>In der obigen Zeile werden `r und `n (Akzent gefolgt vom Buchstaben "r" oder "n") verwendet, um zwei Sonderzeichen zu kennzeichnen: CR und LF. Diese zwei Zeichen beginnen eine neue Textzeile, als hätte der Benutzer Enter gedrückt.</p>
<p>Um Text an die Zwischenablage anzufügen (oder an jeder anderen Variable), befolgt dieses Beispiel:</p>
<pre>Clipboard = %Clipboard% und der angefügte Text.</pre>
<p>Siehe <a href="misc/Clipboard.htm">Clipboard</a> und <a href="Variables.htm">Variablen</a> für weitere Details.</p>
<h2 id="Loop">Wiederholen von mehreren Aktionen </h2>
<p>Um etwas mehr als einmal nacheinander auszuführen, verwendet eine <a href="commands/Loop.htm">Schleife</a>. Die folgende Schleife zeigt eine <a href="commands/MsgBox.htm">MsgBox</a> dreimal an:</p>
<pre>Loop 3
{
    MsgBox Dieses Fenster wird dreimal angezeigt.
}</pre>
<p>Außerdem kann nach dem Wort Loop eine Variable angegeben werden, die besonders in Situationen nützlich ist, wo die Anzahl an Iterationen irgendwo im Skript bestimmt wird:</p>
<pre>Loop %Ausführungsanzahl%
{
    Run C:\Serverstatusüberprüfung.exe
    Sleep 60000  <em>; Wartet 60 Sekunden.</em>
}</pre>
<p> Im obigen Beispiel wird die Schleife mehrmals ausgeführt, es sei denn, Ausführungsanzahl enthält 0, in diesem Fall wird die Schleife komplett übersprungen.</p>
<p>Eine Schleife kann sich auch selbst beenden, wenn sich eine oder mehrere Bedingungen ändern. Das folgende Beispiel klickt mehrmals mit der linken Maustaste, während der Benutzer die F1-Taste gedrückt hält:</p>
<pre>$F1::  <em>; Macht die  F1-Taste zu einem Hotkey (das $-Symbol unterstützt den "P"-Modus von GetKeyState unten).</em>
Loop  <em>; Da hier keine Zählung angegeben wird, erfolgt eine Endlosschleife, es sei denn, "break" oder "return" tritt auf.</em>
{
    if not GetKeyState("F1", "P")  <em>; Wenn diese Anweisung wahr ist, dann hat der Benutzer die F1-Taste losgelassen.</em>
        break  <em>; Schleife unterbrechen.</em>
    <em>Ansonsten die Maustaste gedrückt halten (da sie oben nicht "unterbrochen" wird).</em>
    Click  <em>; Klickt mit der linken Maustaste einmal auf die aktuelle Position des Mauszeigers.</em>
}
Return</pre>
<p>Sobald im oberen Beispiel der Benutzer die F1-Taste loslässt, stoppt sich die Schleife mithilfe des <a href="commands/Break.htm">Break</a>-Befehls selbst. <em>Break</em> bewirkt, dass die Ausführung auf die Zeile nach der schließenden Klammer der Schleife springt.</p>
<p>Eine andere Möglichkeit, den gleichen Effekt zu erzielen, ist das Verwenden einer <a href="commands/While.htm">"While"-Schleife</a>:</p>
<pre>$F1::
While GetKeyState("F1", "P")  <em>; Während die F1-Taste physisch gedrückt gehalten wird.</em>
{
    Click
}
return</pre>
<p>Die oben genannten Beispiele sind Mehrzweckschleifen. Für speziellere Anforderungen können folgende Schleifen in Betracht gezogen werden:</p>
<p><a href="commands/LoopReadFile.htm">Dateilesende/schreibende Schleife</a>: Ermittelt nacheinander die Zeilen einer Textdatei. Damit kann eine Datei Zeile für Zeile in ein anderes Format umgewandelt werden. Damit können auch nach Zeilen gesucht werden, die bestimmten Kriterien entsprechen.</p>
<p><a href="commands/LoopFile.htm">Schleife für Dateien und Ordnern</a>: Ermittelt nacheinander die angegebenen Dateien oder Ordner. Dadurch können Operationen auf Dateien oder Ordner ausgeführt werden, die bestimmte Kriterien erfüllen.</p>
<p><a href="commands/LoopParse.htm">Parsing-Schleife</a>: Ermittelt nacheinander Teilstrings aus einem String. Damit kann ein String wie "Rot,Grün,Blau" einfach in drei Komponentenfelder aufgeteilt werden.</p>
<p><a href="commands/LoopReg.htm">Registrierung-Schleife</a>: Ermittelt nacheinander den Inhalt des angegebenen Unterschlüssels.</p>
<h2 id="Files">Bearbeiten von Dateien und Ordnern</h2>
<p>Um Text ans Ende einer Datei anzufügen (oder eine neue Datei zu erstellen), verwendet <a href="commands/FileAppend.htm">FileAppend</a> wie im folgenden Beispiel. Beachtet, dass `n (LF) verwendet wird, um nachfolgend eine neue Textzeile zu beginnen:</p>
<pre>FileAppend, Eine anfügende Textzeile.`n, C:\Eigene Dokumente\Eigene Textdatei.txt</pre>
<p>Um eine bestehende Datei zu überschreiben, löscht sie vorher mit <a href="commands/FileDelete.htm">FileDelete</a>. Zum Beispiel:</p>
<pre>FileDelete, C:\Eigene Dokumente\Eigene Textdatei.txt</pre>
<p>Weitere häufig verwendete Datei- oder Ordnerbefehle:</p>
<ul><li><a href="commands/FileRead.htm">FileRead</a>: Liest den Inhalt einer Datei in eine Variable.</li>
  <li><a href="commands/LoopReadFile.htm">Dateilesende Schleife</a>: Ermittelt nacheinander die Zeilen einer Textdatei.</li>
  <li><a href="commands/IfExist.htm">IfExist</a>: Überprüft, ob eine Datei oder ein Ordner vorhanden ist.</li>
  <li><a href="commands/FileSelectFile.htm">FileSelectFile</a> und <a href="commands/FileSelectFolder.htm">FileSelectFolder</a>: Zeigt ein Dialogfenster für den Benutzer an, um eine Datei oder einen Ordner auszuwählen.</li>
  <li><a href="commands/FileDelete.htm">FileDelete</a>/<a href="commands/FileRecycle.htm">FileRecycle</a>: Löscht/recycelt beliebig viele Dateien. Verwendet <a href="commands/FileRemoveDir.htm">FileRemoveDir</a>, um einen ganzen Ordner zu löschen.</li>
  <li><a href="commands/FileCopy.htm">FileCopy</a>/<a href="commands/FileMove.htm">FileMove</a>: Kopiert/verschiebt beliebig viele Dateien. Verwendet <a href="commands/FileCopyDir.htm">FileCopyDir</a>/<a href="commands/FileMoveDir.htm">FileMoveDir</a>, um einen ganzen Ordner zu kopieren/verschieben. </li>
  <li><a href="commands/LoopFile.htm">Schleife für Dateien und Ordnern</a>: Ermittelt nacheinander die angegebenen Dateien oder Ordner. </li>
  <li><a href="commands/FileSetAttrib.htm">FileSetAttrib</a> und <a href="commands/FileSetTime.htm">FileSetTime</a>: Ändert die Attribute oder Zeitstempel von beliebig vielen Dateien oder Ordnern.</li>
  <li><a href="commands/IniRead.htm">IniRead</a>, <a href="commands/IniWrite.htm">IniWrite</a> und <a href="commands/IniDelete.htm">IniDelete</a>: Erstellen, Abrufen und Pflegen von INI-Dateien im Standardformat.</li>
  <li><a href="commands/RegRead.htm">RegRead</a>, <a href="commands/RegWrite.htm">RegWrite</a>, <a href="commands/RegDelete.htm">RegDelete</a> und <a href="commands/LoopReg.htm">Registrierung-Schleife</a>: Bearbeitet die Windows-Registrierung.</li>
</ul>
<h2 id="Overview">Übersicht über weitere Funktionen</h2>
<p>Siehe <a href="commands/index.htm">Befehlsliste</a> für eine Übersicht über alle Befehle.</p>
<p>&nbsp;</p>
</body>
</html>
