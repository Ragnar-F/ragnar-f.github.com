<!DOCTYPE HTML>
<html>
<head>
<title>FileAppend</title>
<meta name="keywords" content="Befehl, Datei">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <article>
    <h1>FileAppend</h1>
    <p>Schreibt Text an das Ende einer Datei (erstellt die Datei je nach Bedarf).</p>
    <pre class="Syntax">FileAppend [, Text, Dateiname, Kodierung]</pre>
    <h3>Parameter</h3>
    <table class="info">
      <tr>
        <td style="width: 15%;">Text</td>
        <td style="width: 85%;"><p>Der Text, welcher an der Datei angefügt wird. Mit LF-Zeichen (`n) können neue Zeilen begonnen werden. Außerdem kann eine lange Zeile in mehreren kurzen Zeilen mit einem <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a> aufgetrennt werden.</p>
          <p>Wenn der <em>Text</em>-Parameter leer ist, wird <em>Dateiname</em> als leere Datei erstellt (falls die Datei bereits existiert, wird nur das Erstellungsdatum aktualisiert).</p>
          <p>Wenn der <em>Text</em>-Parameter den Inhalt von <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> enthält, wird <em>Dateiname</em> ohne Vorbehalt mit dem ganzen Zwischenspeicher überschrieben (d. h. <a href="FileDelete.htm">FileDelete</a> ist nicht notwendig).</p></td>
      </tr>
      <tr>
        <td>Dateiname</td>
        <td><p>Der Name der Datei, die sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist.</p>
          <p><strong>Binärmodus:</strong> Um den Text stattdessen im Binärmodus anzufügen, stellt ein Sternchen vor dem Dateinamen. Dadurch wird jedes LF-Zeichen (`n) als einzelner Zeilenvorschub (LF) geschrieben, anstatt standardmäßig CR+LF. Zum Beispiel: <code>*C:\Eigene Unix-Datei.txt</code>.</p>
          <p>Falls die Datei noch nicht offen ist (z. B. wegen einer <a href="LoopReadFile.htm">dateilesenden Schleife</a>), wird die Datei automatisch im Binärmodus geöffnet, wenn der <em>Text</em>-Parameter CR-LF-Paare (`r`n) enthält. Das heißt, dass die oben genannte Sternchenoption automatisch in Kraft tritt. Enthält der <em>Text</em> jedoch `r`n, wird die Performance durch diese Option verbessert, weil das Programm nicht nach `r`n in diesem Parameter suchen muss.</p>
          <p id="stdout"><strong>Standardausgabe (stdout):</strong> Ein Sternchen (*) im Parameter <em>Dateiname</em> bewirkt, dass der <em>Text</em> zur Standardausgabe (stdout) gesendet wird. Solcher Text kann auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">originellen Texteditoren</a> abgefangen werden. Zum Beispiel wäre die folgende Zeile als Eingabeaufforderung gültig:</p>
          <pre>"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Eigenes Script.ahk" &gt;"Fehlerprotokoll.txt"</pre>
          <p>Allerdings wird der Text, der zur Standardausgabe gesendet wurde, nicht in der Eingabeaufforderung angezeigt. Als Übergangslösung kann die Ausgabe des Scripts an einen anderen Befehl oder ein anderes Programm weitergeleitet werden. Zum Beispiel:</p>
          <pre>"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Eigenes Script.ahk" |more</pre>
          <pre>For /F "tokens=*" %L in ('""%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Eigenes Script.ahk""') do @Echo %L</pre>
        </td>
      </tr>
      <tr>
        <td>Kodierung</td>
        <td><span class="ver">[AHK_L 42+]:</span> Überschreibt die Standardkodierung von <a href="FileEncoding.htm">FileEncoding</a> mit einer benutzerdefinierten <em>Kodierung</em>.</td>
      </tr>
    </table>
    <h3>ErrorLevel</h3>
    <p><span class="ver">[v1.1.04+]</span> Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszulösen. Für mehr Informationen, siehe <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
    <p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird bei Misserfolg auf 1 und bei Erfolg auf 0 gesetzt.</p>
    <p>Die interne Variable <a href="../Variables.htm#LastError">A_LastError</a> enthält den Rückgabewert der Systemfunktion GetLastError().</p>
    <h3>Bemerkungen</h3>
    <p>Um eine bestehende Datei zu überschreiben, löscht sie vorher mit <a href="FileDelete.htm">FileDelete</a>.</p>
    <p>Die Zieldatei wird nach Anfügen des Textes automatisch geschlossen (außer wenn FileAppend im Einzelparameter-Modus innerhalb einer <a href="LoopReadFile.htm">dateilesenden/schreibenden Schleife</a> verwendet wird).</p>
    <p><span class="ver">[AHK_L 42+]:</span> <a href="FileOpen.htm">FileOpen()</a> im Anfügen-Modus bietet mehr Kontrolle als FileAppend und lässt die Datei geöffnet, anstatt sie jedesmal neu zu öffnen und zu schließen. Sobald eine Datei im Anfügen-Modus geöffnet ist, kann der String mit <code>Datei.<a href="../objects/File.htm#Write">Write</a>(String)</code> angefügt werden. File-Objekte unterstützen auch binäre Verarbeitung mit <a href="../objects/File.htm#RawWrite">RawWrite</a>/<a href="../objects/File.htm#RawRead">RawRead</a> oder <a href="../objects/File.htm#WriteNum">Write<i>Num</i></a>/<a href="../objects/File.htm#ReadNum">Read<i>Num</i></a>, während FileAppend nur Text unterstützt.</p>
    <h3>Verwandte Befehle</h3>
    <p><a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="IniWrite.htm">IniWrite</a>, <a href="FileDelete.htm">FileDelete</a>, <a href="OutputDebug.htm">OutputDebug</a>, <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a></p>
    <h3>Beispiel</h3>
    <pre class="NoIndent">FileAppend, Eine weitere Zeile.`n, C:\Eigene Dokumente\Test.txt

<em>; Das folgende Beispiel verwendet ein <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a>, um die Lesbar- und Wartbarkeit zu verbessern:</em>
FileAppend,
(
Eine Textzeile.
Standardmäßig befindet sich das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile.
    Diese Zeile wird mit einem Tabulator eingerückt; Standardmäßig wird dieser Tabulator auch in der Datei geschrieben.
Variablenverweise wie %Var% werden standardmäßig mit dem Variableninhalt ersetzt.
), C:\Eigene Datei.txt</pre>
    <p>&nbsp;</p>
    <pre class="NoIndent" id="FTP"><em>; Das folgende Beispiel demonstriert, wie das Hochladen per FTP automatisiert werden kann,
; dazu wird der systeminterne FTP-Befehl verwendet. Dieses Script wurde mit Windows XP und Windows 98SE getestet.</em>

FTPCommandFile = %A_ScriptDir%\FTPCommands.txt
FTPLogFile = %A_ScriptDir%\FTPLog.txt
FileDelete %FTPCommandFile%  <em>; Falls das vorherige Ausführen vorzeitig beendet wurde.</em>

FileAppend,  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
open host.domain.com
username
password
binary
cd htdocs
put %VarContainingNameOfTargetFile%
delete SomeOtherFile.htm
rename OldDateiname.htm NewDateiname.htm
ls -l
quit
), %FTPCommandFile%

RunWait %comspec% /c ftp.exe -s:"%FTPCommandFile%" &gt;"%FTPLogFile%"
FileDelete %FTPCommandFile%  <em>; Aus Sicherheitsgründen löschen.</em>
Run %FTPLogFile%  <em>; Zeigt das Protokoll zur Überprüfung an.</em></pre>
  </article>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>