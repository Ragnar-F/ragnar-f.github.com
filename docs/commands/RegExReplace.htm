<!DOCTYPE HTML>
<html>
<head>
<title>RegExReplace</title>
<meta name="keywords" content="Befehl, Funktion, String">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>RegExReplace() <span class="ver">[v1.0.45+]</span></h1>
      <p>Ersetzt Vorkommen eines Musters (regul&auml;rer Ausdruck) innerhalb eines Strings.</p>
      <pre class="Syntax">NeuerStr := RegExReplace(Heuhaufen, NadelRegEx [, Ersatz = "", AusgabevariableAnzahl = "", Limit = -1, Startposition = 1])</pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td style="width: 15%;">NeuerStr</td>
          <td style="width: 85%;">RegExReplace() gibt eine ersetzte Version des <em>Heuhaufens</em> zur&uuml;ck. Falls nichts ersetzt wurde, wird <em>Heuhaufen</em> unver&auml;ndert zur&uuml;ckgegeben. Wenn ein Fehler auftritt (z. B. ein Syntaxfehler innerhalb von <em>NadelRegEx</em>), wird <em>Heuhaufen</em> unver&auml;ndert zur&uuml;ckgegeben (in den Versionen vor 1.0.46.06 wurde stattdessen ein leerer String zur&uuml;ckgegeben) und ErrorLevel auf einen der <a href="#ErrorLevel">unteren</a> Werte gesetzt, anstatt auf 0.</td>
        </tr>
        <tr>
          <td>Heuhaufen</td>
          <td>Der String, dessen Inhalt durchsucht und ersetzt wird. </td>
        </tr>
        <tr>
          <td>NadelRegEx</td>
          <td>Das zu suchende Muster, welches ein Perl-kompatibler regul&auml;rer Ausdruck (PCRE) ist. Die <a href="../misc/RegEx-QuickRef.htm">Optionen</a> des Ausdrucks (falls vorhanden) m&uuml;ssen am Anfang des Strings stehen, gefolgt von einer schlie&szlig;enden Klammer. Zum Beispiel wird mit dem Ausdruck "<span class="red">i)</span>abc.*123" die Unterscheidung von Gro&szlig;- und Kleinschreibung deaktiviert und "abc" gesucht, gefolgt von null oder mehr beliebige Zeichen, gefolgt von "123". Wenn keine Optionen vorhanden sind, ist das ")" optional; zum Beispiel ist ")abc" das gleiche wie "abc".</td>
        </tr>
        <tr>
          <td>Ersatz</td>
          <td><p id="BackRef">Ein String in Klartext (kein regul&auml;rer Ausdruck), mit dem jede &Uuml;bereinstimmung ersetzt wird. Dieser String kann R&uuml;ckverweise enthalten, wie z. B. $1, das dazu dient, den im ersten <a href="../misc/RegEx-QuickRef.htm#subpat">Teilausdruck</a> gefundenen Teilstring aus dem <em>Heuhaufen</em> einzuf&uuml;gen. Die einfachsten R&uuml;ckverweise sind $0 bis $9, wobei $0 der gefundene Teilstring des kompletten Ausdrucks ist, $1 der gefundene Teilstring des ersten Teilausdrucks ist, $2 des zweiten Teilausdrucks ist, und so weiter. Zweistellige (und optional auch einstellige) R&uuml;ckverweisnummern sowie <a href="RegExMatch.htm#NamedSubPat">Namen von benannten Teilausdr&uuml;cken</a> m&uuml;ssen in geschweiften Klammern gesetzt werden, zum Beispiel: ${10}, ${11}, ${Teilausdrucksname}. Mit $$ kann ein $ direkt angegeben werden (das ist das einzige Zeichen, das eine Sonderbehandlung ben&ouml;tigt; Backslash-Zeichen werden hier nicht ben&ouml;tigt).</p>
            <p>Um die Schreibung eines Teilausdrucks umzuwandeln, kann nach $ eines der folgenden Zeichen erfolgen: U oder u (Gro&szlig;schreibung), L oder l (Kleinschreibung), T oder t (Titelschreibung; nur erstes Zeichen von jedem Wort gro&szlig;schreiben). Zum Beispiel bewirken sowohl $U1 als auch $U{1}, dass der Teilstring vom ersten Teilausdruck gro&szlig;geschrieben wird.</p>
            <p>Nicht vorhandene R&uuml;ckverweise oder nicht gefundene Teilausdr&uuml;cke im <em>Heuhaufen</em> werden als leere Strings &uuml;bertragen.</p></td>
        </tr>
        <tr>
          <td><span class="CommandSyntax">AusgabevariableAnzahl</span></td>
          <td>Der Name der Variable ohne Anf&uuml;hrungszeichen, in der die Anzahl gespeichert wird, wie oft der Heuhaufen ersetzt wurde (0, wenn nicht).</td>
        </tr>
        <tr>
          <td>Limit</td>
          <td>Ist dieser Parameter nicht vorhanden, wird standardm&auml;&szlig;ig -1 verwendet, um <strong>alle</strong> gefundenen Vorkommen des Musters im <em>Heuhaufen</em> zu ersetzen. Ansonsten kann angegeben werden, wie oft der <em>Heuhaufen</em> ersetzt werden soll. Der Bereich des <em>Heuhaufens</em> rechts neben dem letzten Ersatz bleibt unver&auml;ndert.</td>
        </tr>
        <tr>
          <td>Startposition</td>
          <td><p>Ist dieser Parameter nicht vorhanden, wird standardm&auml;&szlig;ig eine 1 verwendet (der Anfang von <em>Heuhaufen</em>). Ansonsten beginnt die Suche mit einer 2 beim zweiten Zeichen, mit einer 3 beim dritten Zeichen und so weiter. Wenn <em>Startposition</em> die L&auml;nge von <em>Heuhaufen</em> &uuml;berschreitet, beginnt die Suche bei einem leeren String am Ende des <em>Heuhaufens</em> (das nat&uuml;rlich zur Folge hat, dass nichts ersetzt wird).</p>
            <p>Sobald <em>Startposition</em> kleiner als 1 ist, wird dieser Parameter als Offset vom Ende des <em>Heuhaufens</em> angesehen. Zum Beispiel beginnt die Suche mit einer 0 beim letzten Zeichen und mit -1 beim vorletzten Zeichen. Wenn <em>Startposition</em> das linke Ende des <em>Heuhaufens</em> &uuml;berschreitet, wird alles vom <em>Heuhaufen</em> durchsucht.</p>
            <p>Unabh&auml;ngig von <em>Startposition</em> ist der R&uuml;ckgabewert immer eine komplette Kopie vom <em>Heuhaufen</em>. Der einzige Unterschied ist, dass mehr von der linken Seite unver&auml;ndert bleibt, verglichen mit dem, was passieren k&ouml;nnte, wenn die <em>Startposition</em> eine 1 enth&auml;lt.</p></td>
        </tr>
      </table>
      <h3 id="ErrorLevel">ErrorLevel</h3>
      <p><span class="ver">[v1.1.04+]</span> Diese Funktion ist in der Lage, bei Misserfolg eine Ausnahme auszul&ouml;sen (nicht zu verwechseln mit "keine &Uuml;bereinstimmung gefunden"). F&uuml;r mehr Informationen, siehe <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
      <p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> kann Folgendes enthalten:</p>
      <ul>
        <li>Eine 0 - das hei&szlig;t, dass keine Fehler aufgetreten sind.</li>
        <li>Einen String in folgender Form: <em>Compile error N at offset M: Beschreibung</em>. In diesem String ist <em>N</em> die PCRE-Fehlernummer, <em>M</em> die Position des betroffenen Zeichens innerhalb des regul&auml;ren Ausdrucks und <em>Beschreibung</em> ein Text, der den Fehler beschreibt.</li>
        <li>Eine negative Zahl - das hei&szlig;t, dass ein Fehler beim <em>Ausf&uuml;hren</em> des regul&auml;ren Ausdrucks aufgetreten ist. Obwohl solche Fehler selten sind, sind die am h&auml;ufigsten auftretenden Fehler "zu viele m&ouml;gliche &Uuml;bereinstimmungen mit leeren Strings" (-22), "Rekursion zu tief" (-21) und "Limit der &Uuml;bereinstimmung erreicht" (-8). In so einem Fall sollte das Muster restriktiver gemacht werden. Zum Beispiel kann je nach M&ouml;glichkeit das Sternchen (*) mit einem Fragezeichen (?), Pluszeichen (+) oder einer Begrenzung wie {0,3} ersetzen werden.</li>
      </ul>
      <h3>Optionen</h3>
      <p>Siehe <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> f&uuml;r Modifikatoren wie "<span class="red">i)</span>abc", die die Unterscheidung von Gro&szlig;- und Kleinschreibung im Muster "abc" deaktiviert.</p>
      <h3>Performance</h3>
      <p>Um einfache Teilstrings zu ersetzen, ist es besser, <a href="StringReplace.htm">StringReplace</a> zu verwenden, weil es schneller als RegExReplace() ist.</p>
      <p>Wenn bekannt ist, wie oft der String ersetzt wird, erscheint es sinnvoll, diese Anzahl zur Erh&ouml;hung der Performance im <em>Limit</em>-Parameter anzugeben, weil dadurch die Suche fr&uuml;her gestoppt werden kann (das auch die Speicherauslastung auf dem System w&auml;hrend der Operation reduzieren kann). Zum Beispiel kann eine 1 angegeben werden, wenn bekannt ist, dass nur eine &Uuml;bereinstimmung am Anfang eines langen Strings vorkommen kann.</p>
      <p>Zur Verbesserung der Performance werden die 100 aktuellsten regul&auml;ren Ausdr&uuml;cke im Speicher zwischengespeichert (in kompilierter Form).</p>
      <p>Die <a href="../misc/RegEx-QuickRef.htm#Study">S-Option</a> kann mitunter dabei helfen, die Performance eines h&auml;ufig benutzten regul&auml;ren Ausdrucks zu verbessern (z. B. in einer Schleife).</p>
      <h3>Bemerkungen</h3>
      <p>Die meisten Zeichen wie abc123 k&ouml;nnen direkt in einem regul&auml;ren Ausdruck verwendet werden. Die Zeichen <strong>\.*?+[{|()^$</strong> m&uuml;ssen allerdings mit einem Backslash vorangestellt werden, um auch diese direkt verwenden zu k&ouml;nnen. Zum Beispiel wird <strong>\.</strong> als direkt vorhandener Punkt und <strong>\\</strong> als direkt vorhandener Backslash angesehen. Diese Zeichen m&uuml;ssen nicht gesch&uuml;tzt werden, wenn \Q...\E verwendet wird. Zum Beispiel: \QDirekt vorhandener Text\E.</p>
      <p>Innerhalb eines regul&auml;ren Ausdrucks k&ouml;nnen bestimmte Sonderzeichen wie Tabulatorzeichen und Zeilenumbr&uuml;che sowohl mit einem Akzent- (`) als auch  mit einem Backslash-Zeichen (\) gesch&uuml;tzt werden. Zum Beispiel ist `t das gleiche wie \t.</p>
      <p>Um die Grundlagen von regul&auml;ren Ausdr&uuml;cken kennenzulernen (oder das Ged&auml;chtnis ein wenig aufzufrischen), siehe <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurz&uuml;bersicht</a>.</p>
      <h3>Verwandte Befehle</h3>
      <p><a href="RegExMatch.htm">RegExMatch()</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurz&uuml;bersicht</a>, <a href="../misc/RegExCallout.htm">Callouts in regul&auml;ren Ausdr&uuml;cken</a>, <a href="StringReplace.htm">StringReplace</a>, <a href="../Functions.htm#InStr">InStr()</a></p>
      <p>H&auml;ufige Quellen von Textdaten: <a href="FileRead.htm">FileRead</a>, <a href="URLDownloadToFile.htm">UrlDownloadToFile</a>, <a href="../misc/Clipboard.htm">Clipboard</a>, <a href="GuiControls.htm#Edit">GUI-Eingabefelder</a></p>
      <h3>Beispiele</h3>
      <pre class="NoIndent">NeuerStr := RegExReplace("abc123123", "123$", "xyz")  <em>; Gibt "abc123xyz" zur&uuml;ck, weil das $ die &Uuml;bereinstimmung dazu zwingt, am Ende vorzukommen.</em>
NeuerStr := RegExReplace("abc123", "i)^ABC")  <em>; Gibt 123 zur&uuml;ck, da eine &Uuml;bereinstimmung durch i-Option (keine Unterscheidung zwischen Gro&szlig;- und Kleinschreibung) gefunden wurde.</em>
NeuerStr := RegExReplace("abcXYZ123", "abc<span class="red">(.*)</span>123", "aaa<span class="red">$1</span>zzz")  <em>; Gibt "aaaXYZzzz" zur&uuml;ck durch den <a href="#BackRef">R&uuml;ckverweis</a> <span class="red">$1</span>.</em>
NeuerStr := RegExReplace("abc123abc456", "abc\d+", "", Ersatzanzahl)  <em>; Gibt ein leeren String zur&uuml;ck und speichert eine 2 in Ersatzanzahl.</em>

<em>; Allgemeine RegEx-Beispiele k&ouml;nnen in der <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurz&uuml;bersicht</a> gefunden werden.</em></pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>