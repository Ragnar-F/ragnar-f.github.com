<!DOCTYPE HTML>
<html>
<head>
<title>Sort</title>
<meta name="keywords" content="Befehl, String">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery-1.11.0.min.js"type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../navbar/NavScript.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <article>
      <h1>Sort</h1>
      <p>Ordnet den Inhalt einer Variable in alphabetischer, numerischer oder zufälliger Reihenfolge (entfernt optional Duplikate).</p>
      <pre class="Syntax">Sort, VarName [, Optionen]</pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td style="width: 15%;">VarName</td>
          <td style="width: 85%;">Name der Variable, deren Inhalt geordnet werden soll.</td>
        </tr>
        <tr>
          <td>Optionen</td>
          <td>Siehe untere Liste.</td>
        </tr>
      </table>
      <h3>Optionen</h3>
      <p><u>Ein String mit beliebig vielen Buchstaben (in beliebiger Reihenfolge, optional mit Leerzeichen getrennt):</u></p>
      <p><strong>C</strong>: Nach Groß- und Kleinschreibung sortieren (wird ignoriert, sobald die <strong>N</strong>-Option vorhanden ist). Sobald <strong>C</strong> bzw. <strong>CL</strong> weggelassen wird, werden die Großbuchstaben von A bis Z beim Sortieren mit deren Kleinbuchstaben als gleichwertig betrachtet.</p>
      <p><strong>CL</strong> <span class="ver">[v1.0.43.03+]:</span> Sortierung basiert auf dem aktuellen Gebietsschema des Benutzers, ohne Unterscheidung zwischen Groß- und Kleinschreibung. Zum Beispiel betrachten die meisten englischen und westeuropäischen Gebietsschemen die Buchstaben von A bis Z und ANSI-Buchstaben wie Ä und Ü mit deren Kleinbuchstaben als gleichwertig. Diese Methode verwendet zudem eine "Wortsortierung", bei der Bindestriche und Hochkommas so behandelt werden, dass Wörter wie "coop" und "co-op" zusammen bleiben. Je nach Inhalt der zu sortierenden Elemente ist die Performance ein- bis achtmal schlechter als die Standardsortierung.</p>
      <p><strong>Dx</strong>: Ersetze <strong>x</strong> mit einem Trennzeichen, das in <em>VarName</em> Anfang und Ende aller Elemente bestimmt. Ist diese Option nicht vorhanden, gilt für <strong>x</strong> standardmäßig ein LF-Zeichen (`n), um den Inhalt von <em>VarName</em> korrekt zu sortieren, wenn dessen Zeilen entweder mit LF (`n) oder CR+LF (`r`n) enden.</p>
      <p id="callback"><strong>F EigeneFunktion</strong> <span class="ver">[v1.0.47+]:</span> Ermöglicht benutzerdefinierte Sortierung in Bezug auf die Kriterien in <em>EigeneFunktion</em> (allerdings dauert diese Sortierung viel länger). Mit dem Buchstaben F, gefolgt von optionalen Leer-/Tabulatorzeichen und den Namen einer <a href="../Functions.htm">Funktion</a>, können jeweils zwei Elemente in der Liste verglichen werden. Die Funktion muss zwei oder drei Parameter akzeptieren. Geht die Funktion davon aus, dass der erste Parameter größer als der zweite ist, sollte sie einen positiven Integer zurückgeben. Geht die Funktion davon aus, dass die zwei Parameter gleich groß sind, sollte sie eine 0, "" oder nichts zurückgeben. Ansonsten sollte sie einen negativen Integer zurückgeben. Falls ein Dezimalpunkt im Rückgabewert vorhanden ist, wird dieser Teil ignoriert (z. B. ist 0.8 das gleiche wie 0). Sobald der dritte Parameter vorhanden ist, empfängt dieser den Offset (in Zeichen) vom ersten zum zweiten Element aus der originalen/unsortierten Liste (siehe Beispiele). Schließlich verwendet die Funktion die gleichen globalen Einstellungen (z. B. <a href="StringCaseSense.htm">StringCaseSense</a>) wie der Sort-Befehl, der sie aufgerufen hat.</p>
      <p>Hinweis: die <strong>F</strong>-Option bewirkt, dass alle anderen Optionen außer <strong>D</strong>, <strong>Z</strong> und <strong>U</strong> ignoriert werden (allerdings haben <strong>N</strong>, <strong>C</strong> und <strong>CL</strong> immer noch Einfluss darauf, wie <a href="#unique">Duplikate</a> erkannt werden). Zudem erfolgt keine Sortierung, wenn die angegebene Funktion:</p>
      <ul>
        <li>nicht existiert.</li>
        <li>weniger als zwei Parameter akzeptiert.</li>
        <li>im ersten oder zweiten Parameter <a href="../Functions.htm#ByRef">ByRef</a> hat.</li>
      </ul>
      <p><strong>N</strong>: Numerische Sortierung: Jedes Element wird als Zahl anstatt als String angesehen (ist diese Option zum Beispiel nicht vorhanden, wird String 233 nach alphabetischer Reihenfolge kleiner als String 40 angesehen). Sowohl dezimale als auch hexadezimale Strings (z. B. 0xF1) gelten als numerisch. Strings, die nicht mit einer Zahl beginnen, werden beim Sortieren als 0 angesehen. Zahlen werden als 64-Bit-Fließkommawerte behandelt, damit die Nachkommastelle jeder Zahl (falls vorhanden) berücksichtigt wird.</p>
      <p><strong>Pn</strong>: Sortiert Elemente, basierend auf die Zeichenposition <strong>n</strong> (<strong>n</strong> muss ein Integer sein). Ist diese Option nicht vorhanden, gilt für <strong>n</strong> standardmäßig eine 1, das die Position des ersten Zeichens ist. Die Sortierung vergleicht jeden String mit anderen Strings, beginnend beim <strong>n</strong>-ten Zeichen. Wenn <strong>n</strong> größer als die Länge des Strings ist, wird dieser beim Sortieren als leer angesehen. In Verbindung mit der <strong>N</strong>-Option (numerische Sortierung) wird die Zeichenposition des Strings verwendet, das nicht unbedingt das gleiche wie die Ziffernposition der Zahl ist.</p>
      <p><strong>R</strong>: Sortiert in umgekehrter Reihenfolge (alphabetisch oder numerisch, abhängig von den anderen Optionen).</p>
      <p><strong>Random</strong>: Sortiert in zufälliger Reihenfolge. Diese Option bewirkt, dass alle anderen Optionen außer <strong>D</strong>, <strong>Z</strong> und <strong>U</strong> ignoriert werden (allerdings haben <strong>N</strong>, <strong>C</strong> und <strong>CL</strong> immer noch Einfluss darauf, wie Duplikate erkannt werden). Beispiele:</p>
      <pre>Sort, EigeneVar, Random
Sort, EigeneVar, Random Z D|</pre>
      <p id="unique"><strong>U</strong>: Entfernt doppelte Elemente von der Liste, sodass jedes Element einzigartig ist. <a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird auf die Anzahl der entfernten Elemente gesetzt (0, falls keine entfernt wurden). Ist die <strong>C</strong>-Option aktiv, müssen auch die Groß- und Kleinschreibungen der Elemente gleich sein, damit diese als identisch angesehen werden. Ist die <strong>N</strong>-Option aktiv, wird ein Element wie z.B. 2 als Duplikat von 2.0 angesehen. Wenn entweder die <strong>Pn</strong>- oder <strong>\</strong>-Option aktiv ist, muss das ganze Element ein Duplikat sein, nicht nur der Teilstring, der für die Sortierung verwendet wird. Wenn die <strong>Random</strong>- oder <strong>F/Funktion</strong>-Option aktiv ist, werden Duplikate nur entfernt, wenn sie nach dem Sortieren direkt aneinander angrenzen. Zum Beispiel könnte das Ergebnis beim zufälligen Sortieren von "A|B|A" entweder ein oder zwei A's enthalten.</p>
      <p><strong>Z</strong>: Um diese Option zu verstehen, wird eine Variable in Erwägung gezogen, die den String ROT`nGRÜN`nBLAU`n enthält. Ist die <strong>Z</strong>-Option nicht vorhanden, wird das letzte LF-Zeichen (`n) als Teil des letzten Elements angesehen (somit sind es nur 3 Elemente). Ist <strong>Z</strong> vorhanden, dient das letzte LF-Zeichen (falls vorhanden) dazu, ein leeres Element am Ende der Liste abzugrenzen (somit sind es 4 Elemente).</p>
      <p><strong>\</strong>: Sortiert Elemente, basierend auf dem Teilstring, der jeweils nach dem letzten Backslash erfolgt. Wenn das Element keinen Backslash hat, wird das ganze Element als Teilstring angesehen. Diese Option ist nützlich, um Dateinamen ohne Rücksicht auf deren Pfad zu sortieren, wie im folgenden Beispiel, in dem AAA.txt über BBB.txt gesetzt wird, weil deren Verzeichnisse beim Sortieren ignoriert werden:</p>
      <pre>C:\BBB\AAA.txt
C:\AAA\BBB.txt</pre>
      <p>Hinweis: Die Optionen <strong>N</strong> und <strong>P</strong> werden ignoriert, wenn die Backslash-Option vorhanden ist.</p>
      <h3>Bemerkungen</h3>
      <p>Dieser Befehl wird normalerweise dazu verwendet, eine Variable mit mehreren Zeilen zu sortieren, bei der jede Zeile mit einem Zeilenumbruchszeichen (`n) endet. Eine Möglichkeit, mehrere Zeilen in eine Variable zu bekommen, ist das Laden einer ganzen Datei via <a href="FileRead.htm">FileRead</a>.</p>
      <p>Falls <em>VarName</em> das Wort <em>Clipboard</em> ist und die Zwischenablage Dateien enthält (z. B. von einem offenen Explorer-Fenster kopiert), werden solche Dateien mit einer sortierten Liste mit deren Dateinamen ersetzt. Das heißt, dass die Zwischenablage nach dieser Operation nicht länger die Dateien selbst enthält.</p>
      <p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird nur durch diesen Befehl geändert, wenn die <strong>U</strong>-Option aktiv ist.</p>
      <p>Die maximale Kapazität einer Variable kann mit <a href="_MaxMem.htm">#MaxMem</a> erhöht werden.</p>
      <p>Wenn eine große Variable sortiert wurde und dessen Inhalt später nicht mehr benötigt wird, kann deren Speicher freigegeben werden, indem sie leer gemacht wird (z. B. <code>EigeneVar =</code>).</p>
      <h3>Verwandte Befehle</h3>
      <p><a href="FileRead.htm">FileRead</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="LoopParse.htm">Parsing-Schleife</a>, <a href="StringSplit.htm">StringSplit</a>, <a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="../misc/Clipboard.htm">Clipboard</a>, <a href="_MaxMem.htm">#MaxMem</a></p>
      <h3>Beispiele</h3>
      <pre class="NoIndent">EigeneVar = 5,3,7,9,1,13,999,-4
<strong>Sort</strong> EigeneVar, N D,  <em>; Numerisch sortieren und Komma als Trennzeichen verwenden.</em>
MsgBox %EigeneVar%   <em>; Das Ergebnis ist -4,1,3,5,7,9,13,999</em>

<em>; Das folgende Beispiel sortiert den Inhalt einer Datei:</em>
<a href="FileRead.htm">FileRead</a>, Inhalt, C:\Adressliste.txt
If not ErrorLevel  <em>; Erfolgreich geladen.</em>
{
    <strong>Sort</strong>, Inhalt
    FileDelete, C:\Adressliste (alphabetisch).txt
    FileAppend, %Inhalt%, C:\Adressliste (alphabetisch).txt
    Inhalt =  <em>; Speicher freigeben.</em>
}

<em>; Das folgende Beispiel macht WIN+C zu einem Hotkey, um Dateien von einem
; Explorer-Fenster zu kopieren und die sortierten Dateinamen in die Zwischenablage einzufügen:</em>
#c::
Clipboard = <em>; Muss leer sein, damit die Erkennung funktioniert.</em>
Send ^c
ClipWait 2
If ErrorLevel
    Return
<strong>Sort</strong> Clipboard
MsgBox Bereit zum Einfügen:`n%Clipboard%
Return

<em>; Die folgenden Beispiele demonstrieren die benutzerdefinierte Sortierung mit einer Callback-Funktion.</em>
EigeneVar = def`nabc`nmno`nFGH`nco-op`ncoop`ncop`ncon`n
<strong>Sort</strong>, EigeneVar, F StringSort
StringSort(a1, a2)
{
    Return a1 &gt; a2 ? 1 : a1 &lt; a2 ? -1 : 0  <em>; Sortiert alphabetisch, basierend auf die Einstellung von <a href="StringCaseSense.htm">StringCaseSense</a>.</em>
}

EigeneVar = 5,3,7,9,1,13,999,-4
<strong>Sort</strong>, EigeneVar, F IntegerSort D,
IntegerSort(a1, a2)
{
    Return a1 - a2  <em>; Sortiert in aufsteigender numerischer Reihenfolge. Diese Methode funktioniert nur, solange die Differenz nicht ausreicht, einen vorzeichenbehafteten 64-Bit-Integer zu überschreiten.</em>
}

EigeneVar = 1,2,3,4
<strong>Sort</strong>, EigeneVar, F UmgekehrteRichtung D,  <em>; Kehrt die Liste um, so dass sie 4,3,2,1 enthält.</em>
UmgekehrteRichtung(a1, a2, offset)
{
    Return offset  <em>; Offset ist positiv, wenn in der originalen Liste a2 nach a1 kommt; ansonsten negativ.</em>
}</pre>
    </article>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>
