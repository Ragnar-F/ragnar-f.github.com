<!DOCTYPE HTML>
<html>
<head>
<title>TreeView (GUI)</title>
<meta name="keywords" content="Befehl, Grafische Benutzeroberfläche">
<meta name="description" content="Erstellt mit dieser freien Scriptsprache mühelos TreeView-Steuerelemente. Beinhaltet zudem Kontextmenüs, Icons and wahlweise mehrere ListView-Steuerelemente gleichzeitig.">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
<style type="text/css">
<!--
h1 {
	font-size: 200%;
}
hr {
	margin-bottom: 0em;
}
-->
</style>
</head>

<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
    <h1>TreeView <span class="ver">[v1.0.44+]</span></h1>
    <h2>Inhaltsverzeichnis</h2>
    <ul>
      <li><a href="#Intro">Einführung und einfaches Beispiel</a></li>
      <li><a href="#Options">Optionen und Styles</a></li>
      <li><a href="#BuiltIn">Interne Funktionen</a>:
        <ul>
          <li><a href="#bifAddModifyDelete">Hinzufügen/Ändern/Löschen von Elementen</a></li>
          <li><a href="#bifGet">Daten aus einer TreeView abrufen</a></li>
        </ul>
      </li>
      <li><a href="#notify">g-Label-Meldungen</a></li>
      <li><a href="#Remarks">Bemerkungen</a></li>
      <li><a href="#Examples">Längeres Beispiel</a></li>
    </ul>
    <h2 id="Intro">Einführung und einfaches Beispiel</h2>
    <p>Eine Baum-Ansicht zeigt eine Hierarchie von Elementen, indem untergeordnete Elemente der übergeordneten Elemente eingerückt werden. Das bekannteste Beispiel dafür ist der Navigationsbereich des Explorers.</p>
    <p>Die Syntax zur Erstellung eines TreeView ist:</p>
    <pre class="Syntax" id="GuiAdd">Gui, Add, TreeView, Optionen</pre>
    <p>Hier ist ein funktionierendes Script, das eine einfache Hierarchie von Elementen erstellt und anzeigt:</p>
    <pre>Gui, Add, TreeView
<span class="red">P1</span> := <a href="#TV_Add">TV_Add</a>("Erstes Oberelement")
P1C1 := TV_Add("Erstes Unterelement von Oberelement 1", <span class="red">P1</span>)  <em>; Verwendet P1 des ersten Oberelements.</em>
P2 := TV_Add("Zweites Oberelement")
P2C1 := TV_Add("Erstes Unterelement von Oberelement 2", P2)
P2C2 := TV_Add("Zweites Unterelement von Oberelement 2", P2)
P2C2C1 := TV_Add("Erstes Unterelement von Unterelement 2", P2C2)

Gui, Show  <em>; Anzeigen des Fensters mit TreeView.</em>
Return

GuiClose:  <em>; Beendet das Script, wenn der Benutzer das TreeView-GUI-Fenster schließt.</em>
ExitApp</pre>
    <h2 id="Options">Optionen und Styles für "<em>Gui, Add, TreeView, <u>Optionen</u></em>"</h2>
    <p id="AltSubmit"><strong>AltSubmit:</strong> Teilt dem Script mehr TreeView-Ereignisse als normal mit. Das heißt, dass das g-Label öfters aufgerufen wird. Siehe <a href="#notify">TreeView-Meldungen</a> für Details.</p>
    <p><strong>Background:</strong> Nach dem Wort Background erfolgt der Name einer Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>) oder ein RGB-Wert (der 0x-Präfix ist optional). Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. Wenn diese Option nicht vorhanden ist, dann wird zunächst die Hintergrundfarbe von <a href="Gui.htm#Color">Gui, Color</a> verwendet (wenn nicht verwendet, dann die Standard-Hintergrundfarbe vom Betriebssystem). Mit <code>BackgroundDefault</code> wird die Standard-Hintergrundfarbe des Betriebssystems erzwungen (in der Regel weiß). Mit <code>GuiControl, +BackgroundDefault, MeinTreeView</code> wird beispielsweise die Standardfarbe wiederhergestellt.</p>
    <p><strong>Buttons</strong>: Mit <code>-Buttons</code> werden die Plus- oder Minus-Schaltflächen links neben den Elementen mit Unterelementen nicht angezeigt.</p>
    <p><strong>C</strong>: Textfarbe. Nach dem Buchstaben C erfolgt der Name einer Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>) oder ein RGB-Wert (das 0x-Präfix ist optional). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
    <p id="Checked"><strong>Checked:</strong> Ermöglicht eine CheckBox auf der linken Seite jeden Elements. Beim <a href="#TV_Add">Hinzufügen</a> eines Elements wird mit dem Wort <em>Check</em> in den Optionen die CheckBox markiert. Der Benutzer kann das Element aktivieren oder deaktivieren, wenn er auf die CheckBox klickt oder die Leertaste drückt. Um herauszufinden, welches Element zurzeit im TreeView aktiviert ist, verwendet <a href="#TV_GetNext">TV_GetNext()</a> oder <a href="#TV_Get">TV_Get()</a>.</p>
    <p><strong>HScroll</strong>: Mit <code>-HScroll</code> wird der horizontale Bildlauf im Steuerelement deaktiviert (zusätzlich wird keine horizontale Bildlaufleiste im Steuerelement angezeigt). Bei Betriebssystemen älter als Windows 2000/Me hat diese Option keine Auswirkung, es sei denn, das System hat Comctl32.dll mit der Version 5.8 oder höher (bei Anwendungen wie der Internet Explorer 5 oder höher mitgeliefert).</p>
    <p id="ImageList"><strong>ImageList</strong>: Bedeutet, welche Icons zur ListView hinzufügen werden. Verwendet das Wort <em>ImageList</em> unmittelbar gefolgt von der BildlisteID, die durch den vorherigen Aufruf von <a href="ListView.htm#IL_Create">IL_Create()</a> zurückgegeben wird. Diese Option funktioniert nur, wenn ein TreeView erstellt wird (allerdings hat <a href="#TV_SetImageList">TV_SetImageList()</a> nicht diese Einschränkung). Hier ist ein funktionierendes Beispiel:</p>
    <pre>BildlisteID := <a href="ListView.htm#IL_Create">IL_Create</a>(10)  <em>; Erstellt eine Bildliste, die 10 Icons umfasst.</em>
Loop 10  <em>; Lädt die Bildliste mit beliebigen Standard-Systemicons.</em>
    <a href="ListView.htm#IL_Add">IL_Add</a>(BildlisteID, "shell32.dll", A_Index)  <em>; Den Pfad der DLL-Datei weglassen, damit es in Windows 9x auch funktioniert.</em>
Gui, Add, TreeView, <strong>ImageList%BildlisteID%</strong>
<a href="#TV_Add">TV_Add</a>("Elementname", 0, "Icon4")  <em>; Fügt ein Element mit einem Ordner-Icon hinzu.</em>
Gui Show</pre>
    <p><strong>Lines</strong>: Mit <code>-Lines</code> werden Linienverbindungen, die Ober- mit Unterelement verbinden, nicht angezeigt. Allerdings werden dadurch auch die Plus/Minus-Schaltflächen bei Oberelementen nicht angezeigt.</p>
    <p id="ReadOnly"><strong>ReadOnly:</strong> Mit <code>-ReadOnly</code> kann der Text/Name jeden Elements bearbeitet werden. Durch das Drücken der <a href="#WantF2">F2-Taste</a> kann das Element bearbeitet werden. Alternativ kann das Element auch einmal angeklickt werden, um es zu markieren und nach einer halben Sekunde nochmal, um es zu bearbeiten. Nachdem es bearbeitet wurde, kann ein Element relativ zu den Elementen auf der gleichen Ebene wie im folgenden Beispiel alphabetisch neu sortiert werden:</p>
    <pre>Gui, Add, TreeView, -ReadOnly <a href="#notify">gMyTree</a>
<em>; ...</em>
MyTree:
If (A_GuiEvent == "e")  <em>; Der Benutzer hat die Bearbeitung des Elements beendet (verwendet == für einen Vergleich, abhängig von der Groß- und Kleinschreibung).</em>
    TV_Modify(TV_GetParent(A_EventInfo), "Sort")  <em>; Funktioniert auch, wenn das Element kein Oberelement hat.</em>
Return</pre>
    <p><strong>R</strong>: Reihen-Höhe (bei der Erstellung). Mit dem Buchstaben R, unmittelbar gefolgt von der Anzahl der Zeilen, wird Platz innerhalb des Steuerelements geschaffen. Mit <code>R10</code> beispielsweise ist das Steuerelement 10 Elemente hoch.</p>
    <p id="WantF2"><strong>WantF2</strong>: Mit <code>-WantF2</code> wird verhindert, dass die F2-Taste gedrückt werden kann, um das aktuell ausgewählte Element zu <a href="#ReadOnly">bearbeiten</a>. Diese Einstellung wird ignoriert, es sei denn, <a href="#ReadOnly">-ReadOnly</a> ist aktiv. Unabhängig dieser Einstellung erhält g-Label weiterhin <a href="#NotifyK">F2-Meldungen</a>.</p>
    <p><strong>(Unbenannte numerische Styles):</strong> Styles, die selten verwendet werden, haben keine Namen. Siehe <a href="../misc/Styles.htm#TreeView">Style-Tabelle der TreeView</a>.</p>
    <h2 id="BuiltIn">Interne Funktionen</h2>
    <p>Alle TreeView-Funktionen laufen im <a href="Gui.htm#DefaultWin">Standard-GUI-Fenster</a> des aktuellen Threads (kann mit <code><a href="Gui.htm#Default">Gui, 2:Default</a></code> geändert werden). Wenn das Standard-Fenster weder vorhanden ist noch TreeView-Steuerelemente hat, dann geben alle Funktionen eine 0 zurück, um auf ein Problem hinzuweisen.</p>
    <p id="GuiTV">Wenn das Fenster mehr als ein TreeView-Steuerelement hat, dann arbeiten die Funktionen standardmäßig mit dem zuletzt hinzugefügten Steuerelement. Um dies zu verändern, verwendet <code>Gui, TreeView, TreeViewName</code>, wobei <em>TreeViewName</em> der Name der <a href="Gui.htm#var">zugewiesenen Variable</a>, ClassNN (wie von Windows Spy gezeigt) oder HWND (seit v1.1.04) ist. Einmal verändert verwenden alle bestehenden und zukünftigen <a href="../misc/Threads.htm">Threads</a> das angezeigte TreeView.</p>
    <h3 id="TV_SetImageList">TV_SetImageList(BildlisteID [, 0|2]) <span class="ver">[v1.1.02+]</span></h3>
    <p>Setzt oder ersetzt die <a href="#ImageList">Bildliste</a> von TreeView. Die BildlisteID ist die zurückgegebene Zahl vom vorherigen Aufruf von <a href="ListView.htm#IL_Create">IL_Create()</a>. Der zweite Parameter wird normalerweise weggelassen, dabei wird standardmäßig eine 0 verwendet. Ansonsten kann eine 2 für Status-Icons angegeben werden (die zurzeit nicht direkt unterstützt werden, aber mithilfe von <a href="PostMessage.htm">SendMessage</a> benutzt werden können). Bei Erfolg gibt TV_SetImageList() die BildlisteID zurück, welche vorher dem TreeView zugewiesen wurde (oder 0 bei Misserfolg). So eine alleinstehende Bildliste sollte normalerweise mittels <a href="ListView.htm#IL_Destroy">IL_Destroy(BildlisteID)</a> zerstört werden.</p>
    <h2 id="bifAddModifyDelete">Hinzufügen, Ändern und Löschen von Elementen</h2>
    <h3 id="TV_Add">TV_Add(Name, [OberelementID, Optionen])</h3>
    <p>Fügt ein neues Element zur TreeView hinzu und gibt eine eindeutige Element-ID-Nummer zurück (oder 0 bei Misserfolg). Der <em>Name</em> ist der Anzeigetext des Elements, der auch numerisch sein kann (einschließlich numerische <a href="../Variables.htm#Expressions">Ausdrücke</a>). Die <em>OberelementID</em> ist die ID-Nummer des neuen Oberelements (weglassen oder auf 0 setzen, um das Element auf höchster Ebene hinzuzufügen). Wenn eine hohe Anzahl an Elementen hinzugefügt wird, dann kann die Performance verbessert werden, indem <code>GuiControl, -Redraw, MyTreeView</code> vor der Operation und <code>GuiControl, +Redraw, MyTreeView</code> nach der Operation verwendet werden.</p>
    <h4>Optionen für TV_Add() und TV_Modify()</h4>
    <p>Der <em>Optionen</em>-Parameter ist ein String, der beliebig viele Wörter von der unteren Liste enthält (nicht abhängig von der Groß-/Kleinschreibung). Die Wörter müssen mit einem Leerzeichen oder Tabulator getrennt werden. Mit einem Minuszeichen wird eine Option entfernt. Mit einem Pluszeichen wird eine Option hinzugefügt (nicht unbedingt erforderlich).</p>
    <p id="Bold"><strong>Bold</strong>: Zeigt den Namen des Elements in fetter Schrift an. Um die Schrift später wieder zu normalisieren, verwendet <code>TV_Modify(ElementID, "-Bold")</code>.</p>
    <p id="Check"><strong>Check</strong>: Zeigt ein Häkchen an der linken Seite des Elements an (wenn das TreeView <a href="#Checked">Kontrollkästchen</a> hat). Um das Häkchen später zu entfernen, verwendet <code>TV_Modify(ElementID, "-Check")</code>. Nach dem Wort <em>Check</em> kann auch eine 0 oder 1 für den Anfangsstatus erfolgen: Das heißt, dass sowohl <code>"Check"</code> als auch <code>"Check" <strong>.</strong> VarEnhältEins</code> identisch sind (der verwendete Punkt ist ein <a href="../Variables.htm#concat">Verkettungsoperator</a>).</p>
    <p id="Expand"><strong>Expand</strong>: Klappt das Element auf, um die Unterelemente zu enthüllen (falls vorhanden). Um das Element später wieder zu zuklappen, verwendet <code>TV_Modify(ElementID, "-Expand")</code>. Wenn keine Unterelemente vorhanden sind, dann gibt <a href="#TV_Modify">TV_Modify()</a> eine 0 anstelle der ID des Elements zurück. <a href="#TV_Add">TV_Add()</a> markiert das Element hingegen als aufgeklappt, wenn Unterelemente später hinzugefügt werden. Im Gegensatz zu "Select" (unten) wird ein Unterelement nicht automatisch aufgeklappt, wenn das Oberelement aufgeklappt wird. Nach dem Wort <em>Expand</em> kann auch eine 0 oder 1 für den Anfangsstatus erfolgen. Das heißt, dass sowohl <code>"Expand"</code> als auch <code>"Expand" <strong>.</strong> VarEnhältEins</code> identisch sind.</p>
    <p><strong>First | Sort | N</strong>: Diese Optionen gelten nur für <a href="#TV_Add">TV_Add()</a>. Sie bestimmen die neue Position des Elements relativ zu den anderen Elementen der <em>gleichen</em> Ebene. Wenn keine dieser Optionen vorhanden ist, dann wird das Element als letztes/unterstes Element hinzugefügt. Andernfalls verwendet <em>First</em>, um das Element als erstes/oberstes Element hinzuzufügen, oder <em>Sort</em>, um das Element relativ zu den Elementen auf der gleichen Ebene einzufügen, abhängig von der alphabetischen Reihenfolge. Wenn ein reiner Integer (<strong>N</strong>) angegeben wird, dann ist das die ID-Nummer des Elements, dem das neue Element angefügt wird (falls nur die N-Option vorhanden ist, dann muss der Integer nicht von Anführungszeichen umschlossen werden).</p>
    <p><strong>Icon</strong>: Mit dem Wort <em>Icon</em>, unmittelbar gefolgt von der Nummer des Icons, wird das Icon auf der linken Seite des Elementnamens angezeigt. Wenn diese Option fehlt, dann wird das erste Icon in der <a href="#ImageList">Bildliste</a> verwendet. Um ein leeres Icon darzustellen, verwendet eine Nummer, die größer als die Anzahl der Icons in der Bildliste ist. Wenn dem Steuerelement eine Bildliste mit Icons fehlt, dann wird kein Icon angezeigt, sowie kein Speicher dafür reserviert.</p>
    <p id="Select"><strong>Select</strong>: Wählt das Element aus. Da nur ein Element zur gleichen Zeit ausgewählt werden kann, wird jedes vorher ausgewählte Element automatisch abgewählt. Darüber hinaus wird das neu ausgewählte Element enthüllt, indem das Oberelement aufgeklappt wird, falls erforderlich. Um die aktuelle Auswahl herauszufinden, verwendet <a href="#TV_GetSelection">TV_GetSelection()</a>.</p>
    <p><strong>Sort</strong>: Mit <a href="#TV_Modify">TV_Modify()</a> sortiert diese Option die Unterelemente des angegebenen Elements in alphabetischer Reihenfolge. Um stattdessen alle Elemente auf höchster Ebene zu sortieren, verwendet <code>TV_Modify(0, "Sort")</code>. Wenn keine Unterelemente vorhanden sind, dann wird eine 0 anstelle der ID des bearbeiteten Elements zurückgegeben.</p>
    <p><strong>Vis</strong>: Sorgt dafür, dass das Element komplett sichtbar ist, indem das TreeView gescrollt und/oder das Oberelement aufgeklappt wird, falls erforderlich.</p>
    <p><strong>VisFirst</strong>: Wie oben, nur mit der Ausnahme, dass das TreeView auch gescrollt wird, damit das oberste Element sichtbar wird, wenn möglich. Diese Option ist mit <a href="#TV_Modify">TV_Modify()</a> in der Regel effektiver als mit <a href="#TV_Add">TV_Add()</a>.</p>
    <h3 id="TV_Modify">TV_Modify(ElementID [, Optionen, Neuname])</h3>
    <p>Bearbeitet die Attribute und/oder den Namen eines Elements. Bei Erfolg wird die ID des Elements und bei Misserfolg eine 0 zurückgegeben. Wenn nur der erste Parameter vorhanden ist, dann wird das Element <a href="#Select">ausgewählt</a>. Wenn der <em>Neuname</em> weggelassen wird, dann bleibt der aktuelle Name unverändert. Für die <em>Optionen</em>, siehe obere Liste.</p>
    <h3 id="TV_Delete">TV_Delete([ElementID])</h3>
    <p>Wird die <em>ElementID</em> weggelassen, dann werden <strong>alle</strong> Elemente im TreeView gelöscht. Andernfalls wird nur die angegebene <em>ElementID</em> gelöscht. Diese Funktion gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
    <h2 id="bifGet">Daten aus einer TreeView abrufen</h2>
    <h3 id="TV_GetSelection">TV_GetSelection()</h3>
    <p>Ermittelt die ID-Nummer des ausgewählten Elements.</p>
    <h3 id="TV_GetCount">TV_GetCount()</h3>
    <p>Ermittelt die Gesamtzahl der Elemente im Steuerelement. Diese Funktion wird ohne Verzögerung ausgeführt, weil das Steuerelement diese Zählungen im Auge behält.</p>
    <h3 id="TV_GetParent">TV_GetParent(ElementID)</h3>
    <p>Ermittelt die ID-Nummer des Oberelements vom angegebenen Element. Elemente auf höchster Ebene haben keine Oberelemente und geben eine 0 zurück.</p>
    <h3 id="TV_GetChild">TV_GetChild(OberelementID)</h3>
    <p>Ermittelt die ID-Nummer des ersten/obersten Unterelements vom angegebenen Element (oder 0, wenn keine).</p>
    <h3 id="TV_GetPrev">TV_GetPrev(ElementID)</h3>
    <p>Ermittelt die ID-Nummer des vorherigen Elements relativ zu den Elementen auf der gleichen Ebene (oder 0, wenn keine).</p>
    <h3 id="TV_GetNext">TV_GetNext([ElementID, "Checked | Full"])</h3>
    <p>Folgende Modi sind vorhanden:</p>
    <ol>
      <li>Wenn alle Parameter weggelassen werden, dann wird die ID-Nummer des ersten/obersten Elements in einem TreeView zurückgegeben (oder 0, wenn keine).</li>
      <li>Wenn nur der erste Parameter (ElementID) vorhanden ist, dann wird die ID-Nummer des Elements zurückgegeben, dass sich unter dem angegebenen Element befindet (0, wenn keine). Wenn der erste Parameter eine 0 ist, dann wird die ID-Nummer des ersten/obersten Elements in einem TreeView zurückgegeben (oder 0, wenn keine).</li>
      <li>Wenn der zweite Parameter "Full" oder "F" enthält, dann wird das nächste Element ermittelt, unabhängig vom Verhältnis zum angegebenen Element. Ermöglicht dem Script, den gesamten Baum einfach Element für Element zu durchqueren. Zum Beispiel:
        <pre>ElementID = 0  <em>; Beginnt die Suche beim ersten Element.</em>
Loop
{
    ElementID := TV_GetNext(ElementID, "Full")  <em>; Ersetzt "Full" mit "Checked" , um alle markierten Elemente zu finden.</em>
    If not ElementID <em>; Keine Elemente mehr vorhanden.</em>
        break
    TV_GetText(Elementtext, ElementID)
    MsgBox Das nächste Element ist %ElementID% mit dem Textinhalt "%Elementtext%".
}</pre>
      </li>
      <li>Wenn der zweite Parameter entweder "Check", "Checked" oder "C" enthält, dann verhält sich die Operation gleich, nur mit der Ausnahme, dass Elemente ohne Häkchen übersprungen werden. Dadurch können alle markierten Elemente in TreeView nacheinander ermittelt werden.</li>
    </ol>
    <h3 id="TV_GetText">TV_GetText(AusgabeVar, ElementID)</h3>
    <p>Ermittelt den Text/Namen der angegebenen <em>ElementID</em> und speichert ihn in <em>AusgabeVar</em>. Wenn der Text länger als 8191 ist, dann werden nur die ersten 8191 Zeichen abgerufen. Bei Erfolg gibt die Funktion die ID des Elements zurück. Bei Misserfolg eine 0 (und <em>AusgabeVar</em> wird auch leer gemacht).</p>
    <h3 id="TV_Get">TV_Get(ElementID, "Expand | Check | Bold")</h3>
    <p>Wenn das angegebene Element das angegebene Attribut hat, dann wird die <em>ElementID</em> zurückgegeben. Ansonsten wird eine 0 zurückgegeben. Für den zweiten Parameter kann "E", "Expand" oder "Expanded" angegeben werden, um festzustellen, ob das Element zurzeit <a href="#Expand">aufgeklappt</a> ist (die Unterelemente werden angezeigt); "C", "Check" oder "Checked", um festzustellen, ob das Element ein <a href="#Check">Häkchen</a> hat; oder "B" oder "Bold", um festzustellen, ob das Element zurzeit eine <a href="#Bold">fette</a> Schrift hat.</p>
    <p>Tipp: Da eine IF-Anweisung jeden Wert ungleich 0 als "Wahr" ansieht, sind die folgenden zwei Zeilen funktionsgemäß identisch:</p>
    <ol>
      <li><code>If TV_Get(ElementID, "Checked") = ElementID</code></li>
      <li><code>If TV_Get(ElementID, "Checked")</code></li>
    </ol>
    <h2 id="notify">g-Label-Meldungen (Primär) </h2>
    <p>Ein <a href="Gui.htm#label">g-Label</a> wie <code><strong>g</strong>EigeneSubroutine</code> kann in den Optionen des Steuerelements angegeben werden. Damit wird <em>EigeneSubroutine</em> automatisch ausgeführt, sobald der Benutzer eine Aktion im Steuerelement macht. Diese Subroutine kann auf die internen Variablen <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> zurückgreifen, um herauszufinden, welches Fenster oder TreeView das Ereignis erzeugt hat. Noch wichtiger ist, dass sie auf <strong>A_GuiEvent</strong> zurückgreifen kann, die einen der folgenden Strings enthalten kann (für die Kompatibilität mit zukünftigen Versionen sollte ein Script nicht davon ausgehen, dass das die einzigen möglichen Werte sind):</p>
    <p><strong>DoubleClick</strong>: Der Benutzer hat auf einem Element doppelt geklickt. Die interne Variable A_EventInfo enthält die ID des Elements.</p>
    <p><strong>D</strong>: Der Benutzer hat angefangen, ein Element zu verschieben (es gibt derzeit keine interne Unterstützung für das Verschieben von Elementen). Die interne Variable A_EventInfo enthält die ID des Elements.</p>
    <p><strong>d</strong>: Wie oben, nur mit der Ausnahme, dass eine Reihe oder Icon mit der rechten Maustaste verschoben wird.</p>
    <p><strong>e</strong>: Der Benutzer hat die Bearbeitung des Elements beendet (der Benutzer kann es nur bearbeiten, wenn <a href="#ReadOnly"><code><strong>-</strong>ReadOnly</code></a> in den Optionen vorhanden ist). Die interne Variable A_EventInfo enthält die ID des Elements.</p>
    <p><strong>S</strong>: Ein neues Element wurde entweder vom Benutzer oder vom Script selbst ausgewählt. Die interne Variable A_EventInfo enthält die ID des neu ausgewählten Elements.</p>
    <h2>g-Label-Meldungen (Sekundär)</h2>
    <p>Wenn das Wort AltSubmit in den <a href="#Options">Optionen</a> vorhanden ist, dann wird g-Label öfters aufgerufen und <strong>A_GuiEvent</strong> kann folgende Werte enthalten:</p>
    <p><strong>Normal</strong>: Der Benutzer hat mit der linken Maustaste auf ein Element geklickt. Die interne Variable A_EventInfo enthält die ID des Elements.</p>
    <p><strong>RightClick</strong>: Der Benutzer hat mit der rechten Maustaste auf ein Element geklickt. Die interne Variable A_EventInfo enthält die ID des Elements. In den meisten Fällen ist es am besten, ein Menü nicht als Reaktion darauf anzuzeigen. Verwendet stattdessen das <a href="Gui.htm#GuiContextMenu">GuiContextMenu-Label</a>, weil es auch die MENÜ-Taste erkennt. Zum Beispiel:</p>
    <pre>GuiContextMenu:  <em>; Wird als Reaktion auf einen Rechtsklick oder das Drücken der MENÜ-Taste ausgeführt.</em>
If A_GuiControl &lt;&gt; MyTreeView  <em>; Diese Überprüfung ist optional. Das Menü wird nur angezeigt, wenn in das TreeView geklickt wird.</em>
    Return
<em>; Zeigt das Menü auf den angegebenen Koordinaten A_GuiX und A_GuiY.  Diese sollten verwendet werden,
; weil sie die richtigen Koordinaten bereitstellen, selbst wenn der Benutzer die MENÜ-Taste drückt:</em>
Menu, Kontextmenü, Show, %A_GuiX%, %A_GuiY%
Return</pre>
    <p><strong>E</strong>: Der Benutzer hat die Bearbeitung des Elements begonnen (der Benutzer kann es nur bearbeiten, wenn <a href="#ReadOnly">-ReadOnly</a> in den Optionen vorhanden ist). Die interne Variable A_EventInfo enthält die ID des Elements.</p>
    <p><strong>F</strong>: Das TreeView hat den Tastaturfokus erhalten.</p>
    <p><strong>f</strong>: Das TreeView hat den Tastaturfokus verloren.</p>
    <p id="NotifyK"><strong>K</strong>: Der Benutzer hat eine Taste gedrückt, während das TreeView den Fokus hat. A_EventInfo enthält den virtuellen Tastencode der Taste, eine Zahl zwischen 1 und 255. Wenn die Taste alphabetisch ist, kann sie in den meisten Tastaturbelegungen mittels <a href="../Functions.htm#Chr"><code>Chr(A_EventInfo)</code></a> in das entsprechende Zeichen umgewandelt werden. F2-Eingaben werden erkannt, unabhängig von <a href="#WantF2">WantF2</a>. Allerdings wird die ENTER-Taste nicht empfangen; um sie zu empfangen, verwendet eine Standard-Schaltfläche, wie <a href="#Enter">unten</a> beschrieben.</p>
    <p><strong>+</strong> (Pluszeichen): Ein Element wurde aufgeklappt, um die Unterelemente zu enthüllen. Die interne Variable A_EventInfo enthält die ID des Elements.</p>
    <p><strong>-</strong> (Minuszeichen): Ein Element wurde zugeklappt, um die Unterelemente zu verstecken. Die interne Variable A_EventInfo enthält die ID des Elements.</p>
    <h2 id="Remarks">Bemerkungen</h2>
    <p>Der Befehl <a href="Gui.htm#Submit">Gui Submit</a> hat keine Auswirkung auf ein TreeView-Steuerelement. Daher kann das Script die <a href="Gui.htm#var">zugewiesene Variable</a> (falls vorhanden) verwenden, um andere Daten zu speichern, ohne Sorge, dass sie jemals überschrieben werden kann.</p>
    <p id="Enter">Um festzustellen, ob der Benutzer die ENTER-Taste gedrückt hat, während ein TreeView den Fokus hat, verwendet eine <a href="GuiControls.htm#DefaultButton">Standard-Schaltfläche</a> (die versteckt werden kann, wenn gewünscht). Zum Beispiel:</p>
    <pre>Gui, Add, Button, Hidden Default, OK
...
ButtonOK:
GuiControlGet, FokussiertesSteuerelement, FocusV
If FokussiertesSteuerelement &lt;&gt; MyTreeView
    Return
MsgBox % "Enter wurde gedrückt. Die ID des ausgewählten Elements ist " . TV_GetSelection()
Return</pre>
    <p>Um zusätzlich mit der Tastatur von Element zu Element zu navigieren, kann der Benutzer eine inkrementelle Suche durchführen, wenn er die ersten Zeichen des Elementnamens eingibt. Dadurch springt die Auswahl auf das nächste passende Element.</p>
    <p>Obwohl ein Text mit beliebiger Länge in jedem Element eines TreeView gespeichert werden kann, werden nur die ersten 260 Zeichen angezeigt.</p>
    <p>Obwohl das TreeView eine theoretische Gesamtanzahl von 65536 Elementen hat, sinkt deutlich die Performance bereits lange davor. Kann durch die Methode mit dem Neuzeichnen gemindert wird, die in <a href="#TV_Add">TV_Add</a> beschrieben wird.</p>
    <p id="ILremarks">Im Gegensatz zu <a href="ListView.htm">ListView</a> wird eine Bildliste vom TreeView nicht automatisch zerstört, wenn das TreeView zerstört wird. Daher sollte ein Script <a href="ListView.htm#IL_Destroy">IL_Destroy(BildlisteID)</a> nach der Zerstörung eines TreeView-Fensters aufrufen, wenn die Bildliste nicht weiter verwendet wird. Ist allerdings nicht erforderlich, wenn das Script in Kürze beendet wird, da alle Bildlisten automatisch bei diesem Ereignis automatisch zerstört werden.</p>
    <p>Ein Script kann mehr als ein TreeView pro Fenster erstellen. Um mit einem TreeView zu arbeiten, dass nicht das Standard-TreeView ist, siehe <a href="#BuiltIn">interne Funktionen</a>.</p>
    <p>Um Aktionen (z. B. Größe anpassen, verstecken oder Schrift des TreeViews verändern) durchzuführen, verwendet <a href="GuiControl.htm">GuiControl</a>.</p>
    <p>Tree View eXtension (TVX) unterstützt TreeViews zusätzlich mit Verschieben, Einfügen und Löschen. Es ist wird auf <a href="http://www.autohotkey.com/forum/topic19021.html">www.autohotkey.com/forum/topic19021.html</a> demonstriert.</p>
    <p>Windows 95 und NT4: Wenn dem System die Version 4.70 oder höher von Comctl32.dll, Shell32.dll und Shlwapi.dll fehlt, die durch verschiedene Updates und Anwendungen (z. B. Internet Explorer 3.0 oder höher) veröffentlicht wurden, dann sind die TreeViews eingeschränkt und einige Funktionen verhalten sich möglicherweise nicht wie erwartet.</p>
    <h2>Verwandte Befehle</h2>
    <p><a href="ListView.htm">TreeView</a>, <a href="GuiControls.htm">Andere Steuerelementarten</a>, <a href="Gui.htm">Gui</a>, <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="../misc/Styles.htm#TreeView">Style-Tabelle des TreeViews</a></p>
    <h2 id="Examples">Beispiel</h2>
    <pre class="NoIndent"><em>; Das Folgende ist ein funktionierendes Script, das viel aufwendiger als das obere Beispiel ist.
; Es erstellt und zeigt ein TreeView mit Ordnern aus dem Startmenü für alle Benutzer an.  Wenn der
; Benutzer ein Ordner auswählt, dann wird dessen Inhalt auf der rechten Seite angezeigt (wie beim Windows Explorer).
; Darüber hinaus zeigt ein <a href="GuiControls.htm#StatusBar">StatusBar</a>-Steuerelement Information über den aktuell ausgewählten Ordner an.</em>

<em>; Der folgende Ordner wird der Stammordner für das TreeView. Beachtet, dass die Ladezeit hoch ist,
; wenn ein Laufwerk wie C:\ angegeben wird:</em>
Stammordner = %A_StartMenuCommon%
TreeViewBreite := 280
ListViewBreite := A_ScreenWidth - TreeViewWidth - 30

<em>; Erlaubt dem Benutzer, das Fenster zu maximieren oder zu skalieren.</em>
Gui +Resize

<em>; Erstellt eine Bildliste und fügt beliebige Systemicons hinzu:</em>
BildlisteID := <a href="ListView.htm#IL_Create">IL_Create</a>(5)
Loop 5  <em>; Lässt unten den Pfad der DLL weg, damit das auch für Windows 9x funktioniert:</em>
    <a href="ListView.htm#IL_Add">IL_Add</a>(BildlisteID, "shell32.dll", A_Index)

<em>; Erstellt ein TreeView und ListView nebeneinander, um ein Windows Explorer zu simulieren:</em>
<a href="#GuiAdd">Gui, Add, TreeView</a>, vMyTreeView r20 w%TreeViewBreite% gMyTreeView <a href="#ImageList">ImageList</a>%BildlisteID%
Gui, Add, ListView, vMyListView r20 w%ListViewBreite% x+10, Name|Bearbeitet

<em>; Bestimmt die Spaltenbreite von ListView (optional):</em>
Spalte2Breite = 70  <em>; Kürzen, damit nur der YYYYMMDD-Teil sichtbar ist.</em>
LV_ModifyCol(1, ListViewBreite - Spalte2Breite - 30)  <em>; Genug Platz für vertikale Bildlaufleiste.</em>
LV_ModifyCol(2, Spalte2Breite)

<em>; Erstellt eine Statusleiste, um Infos über die Dateianzahl und Dateigröße anzuzeigen:</em>
<a href="GuiControls.htm#StatusBar">Gui, Add, StatusBar</a>
<a href="GuiControls.htm#SB_SetParts">SB_SetParts</a>(60, 85)  <em>; Erstellt drei Bereiche in der Leiste (der dritte Bereich füllt die restliche Breite).</em>

<em>; Fügt Ordner und Unterordner zum Baum hinzu. Zeigt ein Ladebildschirm an, falls es länger dauert:</em>
SplashTextOn, 200, 25, TreeView- und StatusBar-Beispiel, Baum wird geladen ...
AddSubFoldersToTree(Stammordner)
SplashTextOff

<em>; Zeigt das Fenster an und kehrt zurück. Das Betriebssystem benachrichtigt das Script, wenn der Benutzer eine berechtigte Aktion ausführt:</em>
Gui, Show,, %Stammordner%  <em>; Zeigt das Quellverzeichnis (Stammordner) in der Titelleiste an.</em>
Return

AddSubFoldersToTree(Ordner, OberelementID = 0)
{
    <em>; Diese Funktion fügt alle Unterordner des angegeben Ordners zum TreeView hinzu.</em>
    <em>; Es ruft sich auch selbst rekursiv auf, um tief verschachtelte Ordner zu sammeln.</em>
    Loop %Ordner%\*.*, 2  <em>; Ermittelt alle Unterordner des Ordners.</em>
        AddSubFoldersToTree(A_LoopFileFullPath, <a href="#TV_Add">TV_Add</a>(A_LoopFileName, OberelementID, "Icon4"))
}

MyTreeView:  <em>; Diese Subroutine behandelt Benutzeraktionen (beispielsweise durch Klicken).</em>
If A_GuiEvent &lt;&gt; S  <em>; z. B. ein Ereignis anderes als "das Auswählen eines neuen Baumelements".</em>
    Return  <em>; Nichts machen.
; Ansonsten die ListView mit dem Inhalt des ausgewählten Ordners füllen.
; Bestimmt zuerst den vollständigen Pfad des ausgewählten Ordners:</em>
<a href="#TV_GetText">TV_GetText</a>(AusgewählterElementtext, A_EventInfo)
OberelementID := A_EventInfo
Loop  <em>; Vollständigen Pfad zum ausgewählten Ordner zusammenbauen.</em>
{
    OberelementID := <a href="#TV_GetParent">TV_GetParent</a>(OberelementID)
    If not OberelementID <em>; Keine weiteren übergeordneten Elemente.</em>
        break
    TV_GetText(Oberelementtext, OberelementID)
    AusgewählterElementtext = %Oberelementtext%\%AusgewählterElementtext%
}
AusgewählterVollpfad = %Stammordner%\%AusgewählterElementtext%

<em>; Dateien in die ListView einfügen:</em>
LV_Delete()  <em>; Alle Reihen leeren.</em>
GuiControl, -Redraw, EigenesListView  <em>; Verbessert die Performance, wenn das Neuzeichnen deaktiviert wird, während es lädt.</em>
Dateienanzahl = 0  <em>; Vorher für die untere Schleife initialisieren.</em>
Gesamtgröße = 0
Loop %AusgewählterVollpfad%\*.*  <em>; Der Einfachheit halber werden die Ordner weggelassen, nur um die Dateien in der Listview anzuzeigen.</em>
{
    LV_Add("", A_LoopFileName, A_LoopFileTimeModified)
    Dateienanzahl += 1
    Gesamtgröße += A_LoopFileSize
}
GuiControl, +Redraw, MyListView

<em>; Aktualisiert die drei Bereiche der Statusleiste, um Infos über den derzeit ausgewählten Ordner anzuzeigen:</em>
<a href="GuiControls.htm#SB_SetText">SB_SetText</a>(Dateienanzahl . " Dateien", 1)
SB_SetText(Round(Gesamtgröße / 1024, 1) . " KB", 2)
SB_SetText(AusgewählterVollpfad, 3)
Return

GuiSize:  <em>; Erweitert/Schrumpft das ListView und TreeView, wenn der Benutzer das Fenster skaliert.</em>
If A_EventInfo = 1  <em>; Das Fenster wurde minimiert.  Keine Aktion notwendig.</em>
    Return
<em>; Ansonsten wurde die Größe des Fensters geändert oder maximiert. Die Größe des Steuerelements anpassen.</em>
GuiControl, Move, MyTreeView, % "H" . (A_GuiHeight - 30)  <em>; -30 für Statusleiste und Abstände.</em>
GuiControl, Move, MyListView, % "H" . (A_GuiHeight - 30) . " W" . (A_GuiWidth - TreeViewBreite - 30)
Return

GuiClose:  <em>; Beendet das Script, wenn der Benutzer das TreeView-GUI-Fenster schließt.</em>
ExitApp</pre>
  </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>
