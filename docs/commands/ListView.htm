<!DOCTYPE HTML>
<html>
<head>
<title>ListView (GUI)</title>
<meta name="description" content="Erstelle auf einfache Weise ListView-Steuerelemente mit dieser freien Script-Sprache. Umfasst Kontextmenüs, Reihen-/Spalten-Icons und klickbare Spaltenüberschriften zum Sortieren.">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>ListView</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfaches Beispiel</a></li>
  <li><a href="#Options">Optionen und Styles</a></li>
  <li><a href="#View">Anzeigemethoden</a>: Report (Standard), Icon, Tile, Small-Icon und List.</li>
  <li><a href="#BuiltIn">Integrierte Funktionen</a>:
    <ul>
      <li><a href="#bifRow">Reihen-Funktionen (Hinzufügen, Ändern und Löschen von Reihen)</a></li>
      <li><a href="#bifCol">Spalten-Funktionen</a></li>
      <li><a href="#bifGet">Daten aus einer ListView bekommen</a></li>
    </ul>
  </li>
  <li><a href="#notify">G-Label-Meldungen</a></li>
  <li><a href="#IL">Bildlisten</a> (Icons zur ListView hinzufügen)</li>
  <li><a href="#Remarks">ListView-Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a></li>
</ul>
<h2 id="Intro">Einführung und einfaches Beispiel</h2>
<p>ListView ist eines der umfangreichsten Steuerelemente, das vom Betriebssystem zur Verfügung gestellt wird. Die bekannteste Form davon ist die tabellarische Ansicht mit Reihen und Spalten. Das bekannteste Beispiel dafür ist die Explorer-Liste für Dateien und Ordner (Detailansicht).</p>
<p>Obwohl es aufwendig erscheint, sind die grundlegenden Funktionen einfach zu bedienen. Die Syntax zur Erstellung eines ListViews ist:</p>
<pre class="Syntax"><a name="GuiAdd"></a>Gui, Add, ListView, Optionen, Spaltentitel1|Spaltentitel2|...</pre>
<p>Mit dem nachfolgenden Script wird ein ListView erstellt und angezeigt, das eine Liste mit Dateien aus dem Benutzerordner "Eigene Dokumente" enthält:</p>
<pre><em>; Erstellt ein ListView mit zwei Spalten - Name und Größe:</em>
Gui, Add, ListView, r20 w700 gMeinListView, Name|Größe (KB)

<em>; Eine Liste mit Dateinamen von einem Ordner erstellen und diese im ListView einfügen:</em>
Loop, %A_MyDocuments%\*.*
    <a href="#LV_Add">LV_Add</a>("", A_LoopFileName, A_LoopFileSizeKB)

<a href="#LV_ModifyCol">LV_ModifyCol</a>()  <em>; Die Größe jeder Spalte an deren Inhalt automatisch anpassen.</em>
LV_ModifyCol(2, "Integer")  <em>; Aus Sortierungsgründen wird Spalte 2 als Integer gekennzeichnet.</em>

<em>; Fenster anzeigen und in den Leerlauf gehen. Das Script wird benachrichtigt, sobald der Benutzer eine Reihe zweimal anklickt.</em>
Gui, Show
return

MeinListView:
if A_GuiEvent = DoubleClick
{
    <a href="#LV_GetText">LV_GetText</a>(Reihentext, A_EventInfo)  <em>; Den Text aus dem ersten Reihenfeld abrufen.</em>
    ToolTip Die Reihe %A_EventInfo% wurde zweimal angeklickt. Text: "%Reihentext%"
}
return

GuiClose:  <em>; Script automatisch schließen, wenn das Fenster geschlossen wird.</em>
ExitApp</pre>
<h2 id="Options">Optionen und Styles für "<em>Gui, Add, ListView, <u>Optionen</u></em>"</h2>
<p><strong><a name="AltSubmit"></a>AltSubmit</strong>: Teilt dem Script mehr ListView-Ereignisse als normal mit. Das heißt, dass das g-Label öfters aufgerufen wird. Siehe <a href="#notify">ListView-Meldungen</a> für Details.</p>
<p><strong>Background</strong>: Nach dem Wort Background erfolgt der Name einer Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>) oder ein RGB-Wert (der 0x-Präfix ist optional). Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. Ist diese Option nicht vorhanden, wird zunächst die Hintergrundfarbe von <a href="Gui.htm#Color">Gui Color</a> verwendet (wurde diese nicht bestimmt, die Standard-Hintergrundfarbe vom Betriebssystem). Mit <code>BackgroundDefault</code> wird die Standard-Hintergrundfarbe des Betriebssystems erzwungen (in der Regel weiß). Zum Beispiel kann die Standardfarbe von ListView mit <code>GuiControl, +BackgroundDefault, MeinListView</code> wiederhergestellt werden.</p>
<p><strong>C</strong>: Textfarbe. Nach dem Buchstaben C erfolgt der Name einer Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>) oder ein RGB-Wert (das 0x-Präfix ist optional). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p><strong><a name="Checked"></a>Checked</strong>: Ermöglicht ein Kontrollkästchen auf der linken Seite jeder Reihe. Beim <a href="#LV_Add">Hinzufügen</a> einer Reihe kann das Wort <em>Check</em> in den Optionen angegeben werden, um das Kontrollkästchen zu markieren. Durch Anklicken des Kontrollkästchens oder Drücken der Leertaste kann der Benutzer ein Häkchen bei der Reihe setzen oder entfernen.</p>
<p><strong><a name="Count"></a>Count</strong>: Nach dem Wort Count erfolgt die Gesamtanzahl der Reihen, die ListView letztendlich enthalten wird. Das ist nicht der Grenzwert: es können weiterhin neue Reihen hinzugefügt werden. Stattdessen dient diese Option eher als Hinweis, dass das Steuerelement den Speicher nur einmal bereitstellen muss, anstatt jedesmal, wenn eine neue Reihe hinzugefügt wird. Dadurch erhöht sich deutlich die Performance beim Hinzufügen neuer Reihen (kann auch die Performance beim Sortieren verbessern). Um die Performance weiter zu erhöhen, kann <code>GuiControl, -Redraw, MeinListView</code> benutzt werden, bevor eine große Anzahl an Reihen hinzugefügt wird, und danach <code>GuiControl, +Redraw, MeinListView</code>, um das Neuzeichnen wieder zu aktivieren (wodurch auch das Steuerelement neugezeichnet wird).</p>
<p><strong>Grid</strong>: Ermöglicht horizontale und vertikale Linien, um die Abgrenzungen zwischen den Reihen und Spalten hervorzuheben.</p>
<p><strong>Hdr</strong>: Die Angabe von <code>-Hdr</code> bewirkt, dass die oberste Reihe mit den Spaltenüberschriften weggelassen wird. Um diese später wieder sichtbar zu machen, kann <code>GuiControl, +Hdr, MeinListView</code> verwendet werden.</p>
<p><strong>LV</strong>: Nach dem String LV erfolgt die Nummer eines <a href="../misc/Styles.htm#ListView">erweiterten ListView-Styles</a>. Diese Styles unterscheiden sich vollständig von den gewöhnlichen erweiterten Styles. Zum Beispiel würde mit <code><strong>-E</strong>0x200</code> der allgemeine erweiterte Style WS_EX_CLIENTEDGE entfernt werden, um den Standardrahmen des Steuerelements zu beseitigen. Mit <code><strong>-LV</strong>0x20</code> würde hingegen <a href="#frs">LVS_EX_FULLROWSELECT</a> entfernt.</p>
<p><strong>LV0x10</strong>: Die Angabe von <code>-LV0x10</code> bewirkt, dass der Benutzer die Spaltenüberschriften nicht länger nach links oder rechts verschieben kann, um diese neu anzuordnen. Normalerweise ist das nicht notwendig, da das physische Sortieren der Spalten nicht die Spaltenanordnung beeinflusst, die vom Script gesehen wird. Zum Beispiel ist aus Sicht des Scripts die erste Spalte immer Spalte 1, auch dann, wenn der Benutzer die Spalte physisch nach rechts verschiebt.</p>
<p><strong><a name="frs"></a>LV0x20</strong>: Die Angabe von <code>-LV0x20</code> bewirkt, dass das erste Feld angeklickt werden muss, um die Reihe zu markieren (normalerweise ist es <em>egal</em>, welches Feld in der Reihe angeklickt wird). Der Vorteil davon ist, dass der Benutzer es einfacher hat, ein Rechteck auf mehrere Reihen zuziehen, um diese zu markieren.</p>
<p><strong>Multi</strong>: Die Angabe von <code>-Multi</code> bewirkt, dass der Benutzer nicht mehr als eine Reihe markieren kann.</p>
<p><strong>NoSortHdr</strong>: Verhindert, dass die Spaltenüberschriften anklickbar sind. Außerdem werden diese flacher dargestellt, anstatt als normale Buttons. Im Gegensatz zu den meisten anderen ListView-Styles kann dieser Style nicht geändert werden, nachdem das ListView erstellt wurde.</p>
<p><strong><a name="NoSort"></a>NoSort</strong>: Deaktiviert die automatische Sortierung, die durchgeführt wird, sobald der Benutzer auf eine Spaltenüberschrift klickt. Allerdings sieht die Spaltenüberschrift weiterhin wie ein Button aus (sofern NoSortHdr nicht vorhanden ist). Darüber hinaus empfängt das g-Label weiterhin die <a href="#ColClick">ColClick-Meldung</a>, um z. B. benutzerdefiniertes Sortieren zu ermöglichen.</p>
<p><strong><a name="ReadOnly"></a>ReadOnly</strong>: Die Angabe von <code>-ReadOnly</code> bewirkt, dass der Text in der ersten Spalte nachträglich bearbeitet werden kann. Um die Reihe bearbeiten zu können, muss der Benutzer die Reihe zuerst anklicken und danach die <a href="#WantF2">F2-Taste</a> drücken. Alternativ kann der Benutzer die Reihe anklicken und in einer halben Sekunde nochmal, um den gleichen Effekt zu erzielen.</p>
<p><strong>R</strong>: Reihen-Höhe (bei der Erstellung). Mit dem Buchstaben R, unmittelbar gefolgt von der Anzahl der Zeilen, wird Platz innerhalb des Steuerelements geschaffen. Zum Beispiel wäre mit <code>R10</code> das Steuerelement 10 Reihen hoch. Falls das ListView mit einer <a href="#View">Anzeigemethode</a>, außer Report, erstellt wurde, wird die Größe des Steuerelements angepasst, so dass Iconreihen anstelle von Textreihen hineinpassen. Hinweis: Sobald <a href="#IL">Icons</a> in den Reihen eines ListViews nachträglich eingefügt werden, erhöht sich die Höhe jeder Reihe - folglich wird diese Option ungenau.</p>
<p><strong><a name="Sort"></a>Sort</strong>: Das Steuerelement wird alphabetisch sortiert, basierend auf dem Inhalt der ersten Spalte.</p>
<p><strong><a name="SortDesc" id="SortDesc"></a>SortDesc</strong>: Wie oben, nur in absteigender Reihenfolge.</p>
<p><strong><a name="WantF2"></a>WantF2</strong> <span class="ver">[v1.0.44+]:</span> Die Angabe von <code>-WantF2</code> bewirkt, dass die F2-Taste nicht mehr verwendet werden kann, um die aktuell fokussierte Reihe zu <a href="#ReadOnly">bearbeiten</a>. Diese Einstellung ist nur wirksam, wenn <code><a href="#ReadOnly">-ReadOnly</a></code> aktiv ist. Unabhängig davon empfängt das g-Label weiterhin F2-<a href="#NotifyK">Meldungen</a>.</p>
<p><strong>(Unbenannte numerische Styles)</strong>: Selten verwendete Styles haben keine Namen. Siehe <a href="../misc/Styles.htm#ListView">Style-Tabelle</a> von ListView.</p>
<h2 id="View">Anzeigemethoden</h2>
<p>Ein ListView hat fünf Anzeigemethoden, von denen die Report-Ansicht am häufigsten verwendet wird (Standardeinstellung). Um eine der anderen Ansichten zu verwenden, muss deren Name in den Optionen angegeben werden. Die Ansicht kann auch geändert werden, nachdem das Steuerelement erstellt wurde. Zum Beispiel: <code>GuiControl, +IconSmall, MeinListView</code>.</p>
<p><strong>Icon</strong>: Ansicht mit großen Icons. In dieser und allen anderen Ansichten - außer <em>Report</em> - sind nur die Texte der ersten Spalte sichtbar. Damit Icons in dieser Methode angezeigt werden können, muss dem ListView eine <a href="#IL">Bildliste</a> mit großen Icons zugewiesen werden.</p>
<p><strong>Tile</strong>: Ansicht mit großen Icons, aber zum Beispiel mit ergonomischen Unterschieden, dass der Text des Elements auf der rechten Seite des Icons angezeigt wird, anstatt darunter. <a href="#Checked">Checkbox</a>-Steuerelemente funktionieren nicht in dieser Ansicht. Auch der Versuch, diese Ansicht auf Betriebssystemen älter als Windows XP anzuzeigen, hat keine Wirkung.</p>
<p><strong>IconSmall</strong>: Ansicht mit kleinen Icons.</p>
<p><strong>List</strong>: Ansicht mit kleinen Icons im Listenformat, in der die Icons in Spalten dargestellt werden. Die Anzahl der Spalten hängt von der Breite des Steuerelements und der Breite des längsten Texteintrags ab.</p>
<p><strong>Report</strong>: Wechselt wieder zur Report-Ansicht, die zu Beginn die Standardeinstellung ist. Zum Beispiel: <code>GuiControl, +Report, MeinListView</code>.</p>
<h2 id="BuiltIn">Integrierte Funktionen von ListView</h2>
<p>Alle ListView-Funktionen beziehen sich auf das <a href="Gui.htm#DefaultWin">Standard-GUI-Fenster</a> des aktuellen Threads (das mit <a href="Gui.htm#Default"><code>Gui, 2:Default</code></a> geändert werden kann). Wenn das Standardfenster weder vorhanden ist noch ListView-Steuerelemente hat, geben alle Funktionen eine 0 zurück, um das Problem zu kennzeichnen.</p>
<p><a name="GuiLV"></a>Wenn das Fenster mehrere ListView-Steuerelemente hat, beziehen sich die Funktionen standardmäßig auf das zuletzt hinzugefügte Steuerelement. Um das zu ändern, muss <code>Gui, ListView, ListViewName</code> verwendet werden, wobei <em>ListViewName</em> der Name der <a href="Gui.htm#var">zugeordneten Variable</a>, ClassNN (wie von Windows Spy gezeigt) oder HWND (seit v1.1.04) ist. Einmal geändert verwenden alle bestehenden und zukünftigen <a href="../misc/Threads.htm">Threads</a> das angezeigte ListView.</p>
<p><a name="RowNumber"></a>Der auf diese Seite verwendete Begriff "Reihennummer" bezieht sich auf die aktuelle Position einer Reihe innerhalb des ListViews. Die oberste Reihe ist 1, die zweite Reihe ist 2 und so weiter. Nachdem eine Reihe hinzugefügt wurde, ändert sich wahrscheinlich deren Reihennummer, wenn sie sortiert, gelöscht oder von anderen Reihen ersetzt wird. Um daher eine oder mehrere Reihen auf Basis ihrer Inhalte zu lokalisieren, ist es meist das Beste, <a href="#LV_GetText">LV_GetText()</a> in einer Schleife zu verwenden.</p>
<h2 id="bifRow">Reihen-Funktionen</h2>
<h3><a name="LV_Add"></a>LV_Add([Optionen, Feld1, Feld2, ...])</h3>
<p>Fügt eine neue Reihe ans untere Ende der Liste hinzu. Die Parameter <em>Feld1</em> und so weiter sind die Spalten der neuen Reihe, die Text oder numerisch sein können (einschließlich numerische Ergebnisse von <a href="../Variables.htm#Expressions">Ausdrücken</a>). Um ein beliebiges Feld leer zu machen, muss "" oder Gleichwertiges verwendet werden. Falls zu wenig Felder zum Füllen der Spalten vorhanden sind, bleiben die Spalten am Ende leer. Zuviel angegebene Felder werden einfach ignoriert.</p>
<p>Bei Misserfolg gibt LV_Add() eine 0 zurück. Bei Erfolg wird die neue <a href="#RowNumber">Reihennummer</a> zurückgegeben. Allerdings repräsentiert diese Nummer nicht unbedingt die letzte Reihe, wenn ListView den <a href="#Sort">Sort</a>- oder <a href="#SortDesc">SortDesc</a>-Style verwendet.</p>
<h4><a name="RowOptions"></a>Reihen-Optionen</h4>
<p>Der <em>Optionen</em>-Parameter kann beliebig viele Wörter von der unteren Liste enthalten (nicht abhängig von der Groß-/Kleinschreibung). Dabei muss jedes Wort mit einem Leer- oder Tabulatorzeichen getrennt werden. Mit einem Minuszeichen wird eine Option entfernt. Mit einem Pluszeichen wird eine Option hinzugefügt (nicht unbedingt erforderlich).</p>
<p><strong>Check</strong>: Zeigt ein Häkchen in der Reihe (wenn das ListView <a href="#Checked">Kontrollkästchen</a> hat). Mit <code>LV_Modify(Reihennummer, "-Check")</code> kann das Häkchen später entfernt werden.</p>
<p><a name="ColN"></a><strong>Col</strong>: Nach dem Wort Col erfolgt die Spaltennummer als Startpunkt, an der die Parameter <em>Spalte1</em> und so weiter zugewiesen werden. Das wird häufig in Verbindung mit <a href="#LV_Modify">LV_Modify()</a> verwendet, um einzelne Felder in einer Reihe zu ändern, ohne dabei links befindliche Felder zu beeinflussen.</p>
<p><a name="Focus"></a><strong>Focus</strong>: Setzt den Tastaturfokus auf eine Reihe (wird oft in Verbindung mit Select verwendet). Mit <code>LV_Modify(Reihennummer, "-Focus")</code> kann der Fokus später entfernt werden.</p>
<p><strong>Icon</strong>: Nach dem Wort Icon erfolgt die Nummer des Icons, das auf der linken Seite der ersten Spalte angezeigt wird. Falls diese Option fehlt, wird das erste Icon aus der <a href="#IL">Bildliste</a> verwendet. Um ein leeres Icon darzustellen, kann eine Nummer angegeben werden, die größer ist als die Anzahl der Icons in der Bildliste. Wenn dem Steuerelement eine Bildliste mit kleinen Icons fehlt, wird weder ein Icon angezeigt noch dafür Speicher in der <a href="#View">Report-Ansicht</a> reserviert.</p>
<p><strong>Select</strong>: Wählt die Reihe aus. Mit <code>LV_Modify(Reihennummer, "-Select")</code> kann die Auswahl später aufgehoben werden. Beim Auswählen der Reihen sollte sichergestellt werden, dass immer mindestens eine Reihe die <a href="#Focus">Fokus-Eigenschaft</a> hat. Dadurch kann die MENÜ-Taste ihr <a href="Gui.htm#GuiContextMenu">Kontextmenü</a> (falls vorhanden) in der Nähe der fokussierten Reihe anzeigen. Optional kann nach dem Wort <em>Select</em> eine 0 oder 1 erfolgen, um den Anfangsstatus zu kennzeichnen. Das heißt, dass sowohl <code>"Select"</code> als auch <code>"Select" <strong>.</strong> VarEnhältEins</code> identisch sind (der hier verwendete Punkt ist ein <a href="../Variables.htm#concat">Verkettungsoperator</a>). Diese Vorgehensweise funktioniert auch mit <em>Focus</em> und <em>Check</em>.</p>
<p><strong><a name="Vis"></a>Vis</strong> <span class="ver">[v1.0.44+]</span>: Sorgt dafür, dass die angegebene Reihe beim Scrollen des ListViews sichtbar gemacht wird, falls notwendig. Das funktioniert nur mit LV_Modify(). Zum Beispiel: <code>LV_Modify(Reihennummer, "Vis")</code>.</p>
<h3><a name="LV_Insert"></a>LV_Insert(Reihennummer [, Optionen, Spalte1, Spalte2, ...])</h3>
<p>Verhält sich genauso wie LV_Add(), aber mit dem Unterschied, dass der erste Parameter die neue Position bestimmt, auf der eine neue Reihe eingefügt wird. Jede Reihe, auf oder unterhalb der <em>Reihennummer</em>, wird nach unten verschoben, um Platz für die neue Reihe zu schaffen. Falls die <em>Reihennummer</em> größer als die Anzahl der Reihen in der Liste ist (sogar so hoch wie 2147483647), wird die neue Reihe ans untere Ende der Liste gesetzt. Siehe <a href="#RowOptions">Reihe-Optionen</a> (oben) für weitere <em>Optionen</em>.</p>
<h3><a name="LV_Modify"></a>LV_Modify(Reihennummer, Optionen [, NeueSpalte1, NeueSpalte2, ...])</h3>
<p>Ändert die Attribute und/oder den Text einer Reihe, und gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück. Ist die <em>Reihennummer</em> eine 0, werden <u>alle</u> Reihen im Steuerelement geändert (in diesem Fall gibt die Funktion eine 1 bei Erfolg zurück und eine 0, sobald die Operation bei einer Reihe fehlschlägt). Sind nur die ersten beiden Parameter vorhanden, werden nur die Attribute der Reihe geändert, aber nicht der Text. Falls zu wenig Parameter zum Füllen der Spalten vorhanden sind, bleiben die Spalten am Ende unverändert. Die <a href="#ColN">ColN-Option</a> kann dazu verwendet werden, bestimmte Spalten zu aktualisieren, ohne dabei andere zu beeinflussen. Siehe <a href="#RowOptions">Reihe-Optionen</a> (oben) für weitere Optionen.</p>
<h3><a name="LV_Delete"></a>LV_Delete([Reihennummer])</h3>
<p>Sobald der Parameter weggelassen wird, werden <strong>alle</strong> Reihen im ListView gelöscht. Andernfalls wird nur die angegebene <em>Reihennummer</em> gelöscht. Diese Funktion gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
<h2 id="bifCol">Spalten-Funktionen</h2>
<h3><a name="LV_ModifyCol"></a>LV_ModifyCol([Spaltennummer, Optionen, Spaltentitel])</h3>
<p>Ändert die Attribute und/oder den Text der angegebenen Spalte und der dazugehörigen Spaltenüberschrift. Die erste Spalte beginnt bei 1 (nicht 0). Sobald alle Parameter weggelassen werden, wird die Breite jeder Spalte an den Inhalt der Reihen angepasst. Ist nur der erste Parameter vorhanden, wird nur die Größe der angegebenen Spalte automatisch angepasst. Die automatische Größenanpassung funktioniert nur in der Report-Ansicht (Details). Diese Funktion gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
<h4><a name="ColOptions"></a>Spaltenoptionen</h4>
<p>Der <em>Optionen</em>-Parameter kann beliebig viele Wörter von der unteren Liste enthalten (nicht abhängig von der Groß-/Kleinschreibung). Dabei muss jedes Wort mit einem Leer- oder Tabulatorzeichen getrennt werden. Mit einem Minuszeichen wird eine Option entfernt. Mit einem Pluszeichen wird eine Option hinzugefügt (nicht unbedingt erforderlich).</p>
<h4>Spalten-Optionen: Allgemein</h4>
<p><strong>N</strong>: Für N kann die neue Breite der Spalte (in Pixel) angegeben werden. Diese Nummer muss nicht in Anführungszeichen gesetzt werden, wenn sie die einzige Option ist. Zum Beispiel sind beide folgenden Anweisungen gültig: <code>LV_ModifyCol(1, 50)</code>, <code>LV_ModifyCol(1, "50 Integer")</code>.</p>
<p><strong>Auto</strong>: Passt die Breite der Spalte am Inhalt an. Diese Option funktioniert nur in der Report-Ansicht (Details).</p>
<p><strong>AutoHdr</strong>: Passt die Breite der Spalte am Inhalt und an der Spaltenüberschrift an - je nachdem, was breiter ist. Bei der letzten Spalte bewirkt diese Option, dass deren Breite mindestens so groß ist wie der restliche Platz des ListViews. Am Besten sollte diese Einstellung nur verwendet werden, nachdem die Reihen hinzugefügt wurden. Dadurch kann jede neu aufgetauchte vertikale Bildlaufleiste einbezogen werden, sobald die Größe der letzten Spalte geändert wird. Diese Option funktioniert nur in der Report-Ansicht (Details).</p>
<p><strong>Icon</strong>: Nach dem Wort Icon erfolgt die Nummer des Icons aus der <a href="#IL">Bildliste</a>, das neben der Spaltenüberschrift angezeigt wird. Mit <code>-Icon</code> wird jedes vorhandene Icon entfernt.</p>
<p><strong>IconRight</strong>: Setzt das Icon auf die rechte Seite der Spalte, anstatt auf die linke Seite.</p>
<h4>Spalten-Optionen: Datentyp</h4>
<p><strong>Float</strong>: Aus Sortierungsgründen enthält diese Spalte Fließkommazahlen (hexadezimales Format wird nicht unterstützt). Die Performance ist beim Sortieren von Fließkommazahl- und Text-Spalten im Gegensatz zu Integer-Spalten 25-mal langsamer.</p>
<p><a name="Integer"></a><strong>Integer</strong>: Aus Sortierungsgründen enthält diese Spalte Integer-Werte. Damit die Spalte richtig sortiert wird, muss jeder Integer 32-bit groß sein - im Bereich von -2147483648 bis 2147483647. Sobald einer der Werte kein Integer ist, wird dieser beim Sortieren als 0 angesehen (falls dieser Wert jedoch mit einer Zahl beginnt, wird stattdessen die Zahl verwendet). Die Zahlen können entweder dezimal oder hexadezimal (z. B. <code>0xF9E0</code>) sein.</p>
<p><a name="Text"></a><strong>Text</strong>: Wechselt den Sortierungsmodus wieder auf Text (Standardeinstellung). Nur die ersten 8190 Zeichen im Text sind für die Sortierung von Bedeutung (außer bei der <a href="#Logical"><em>Logical</em>-Option</a>, hierbei liegt der Grenzwert bei 4094).</p>
<h4>Spalten-Optionen: Ausrichtung</h4>
<p><strong>Center</strong>: Zentriert den Spaltentext. Um eine Integer- oder Fließkommazahl-Spalte zu zentrieren, muss das Wort Center nach dem Wort Integer oder Float erfolgen.</p>
<p><strong>Left</strong>: Der Spaltentext wird linksbündig ausgerichtet (Standardeinstellung). Bei älteren Betriebssystemen könnte die linksbündige Ausrichtung in der ersten Spalte erzwungen sein.</p>
<p><strong>Right</strong>: Der Spaltentext wird rechtsbündig ausgerichtet. Dieses Attribut muss bei Integer- und Float-Spalten nicht angegeben werden, weil diese standardmäßig rechtsbündig ausgerichtet werden. Dieses Standardverhalten kann überschrieben werden, wenn so etwas wie <code>"Integer Left"</code> oder <code>"Float Center"</code> angegeben wird.</p>
<h4>Spalten-Optionen: Sortierung</h4>
<p><strong><a name="Case" id="Case"></a>Case</strong>: Die Sortierung der Spalte ist von der Groß- und Kleinschreibung abhängig (betrifft nur <a href="#Text">Text</a>-Spalten). Sind die Optionen <em>Case</em>, <em>CaseLocale</em> und <em>Logical</em> nicht vorhanden, werden die Großbuchstaben A-Z beim Sortieren wie ihre Kleinbuchstaben behandelt.</p>
<p><strong>CaseLocale</strong> <span class="ver">[v1.0.43.03+]:</span> Die Sortierung der Spalte ist nicht von der Groß- und Kleinschreibung, sondern vom aktuellen Gebietsschema des Benutzers abhängig (betrifft nur <a href="#Text">Text</a>-Spalten). Bei den meisten englischen und westeuropäischen Gebietsschemen werden die Großbuchstaben A-Z und ANSI-Zeichen wie Ä und Ü wie ihre Kleinbuchstaben behandelt. Diese Methode verwendet zudem eine "Wortsortierung", dabei werden Wörter wie "coop" und "co-op" gleichwertig behandelt (Bindestriche und Apostrophe).</p>
<p><a name="Desc"></a><strong>Desc</strong>: Absteigende Reihenfolge. Die Spalte beginnt in absteigender Reihenfolge, sobald der Benutzer die Spalte das erste Mal sortiert.</p>
<p><a name="Logical"></a><strong>Logical</strong> <span class="ver">[v1.0.44.12+]:</span> Das Gleiche wie <em>CaseLocale</em>, aber mit der Ausnahme, dass alle Ziffern im Text als richtige Zahlen angesehen werden, anstatt als gewöhnliche Zeichen. Zum Beispiel würde der String "T33" größer als "T4" angesehen. <em>Logical</em> benötigt Windows XP oder höher (bei älteren Betriebssystemen wird stattdessen automatisch <em>CaseLocale</em> verwendet). Darüber hinaus schließen sich <em>Logical</em> und <em>Case</em> gegenseitig aus: nur das zuletzt angegebene Wort tritt in Effekt.</p>
<p><strong>NoSort</strong>: Verhindert, dass die Spalte beim Anklicken automatisch sortiert wird. Um das Sortieren nicht nur für eine, sondern für alle Spalten zu deaktivieren, muss <a href="#NoSort">NoSort</a> in den Optionen des ListViews angegeben werden. Falls das ListView ein g-Label hat, werden <a href="#ColClick">ColClick-Meldungen</a> weiterhin empfangen, sobald der Benutzer eine NoSort-Spalte anklickt.</p>
<p><strong>Sort</strong>: Sortiert die Spalte sofort in aufsteigender Reihenfolge (selbst wenn die Option <a href="#Desc">Desc</a> aktiv ist).</p>
<p><strong>SortDesc</strong>: Sortiert die Spalte sofort in absteigender Reihenfolge.</p>
<p><strong>Uni</strong>: Einseitige Sortierung. Verhindert, dass die Sortierungsrichtung durch einen zweiten Klick auf derselben Spalte umgekehrt wird.</p>
<h3><a name="LV_InsertCol"></a>LV_InsertCol(Spaltennummer [, Optionen, Spaltentitel])</h3>
<p>Erstellt eine neue Spalte bei der angegebenen <em>Spaltennummer</em> (verschiebt andere Spalten nach rechts, um Platz zu schaffen). Die erste Spalte beginnt bei Nummer 1 (nicht 0). Falls die <em>Spaltennummer</em> größer als die Anzahl der Spalten im Steuerelement ist, wird die neue Spalte ans untere Ende der Liste hinzugefügt. Die neue hinzugefügte Spalte beginnt mit leerem Inhalt, es sei denn, sie ist die erste Spalte, in diesem Fall erbt sie den Inhalt der vorherigen ersten Spalte, wobei die alte erste Spalte leer gemacht wird. Die Attribute der neuen Spalte (z. B. <a href="#Integer">Integer-Sortierung</a>) beginnen immer mit ihren Standardwerten, sofern diese nicht in den <em><a href="#ColOptions">Optionen</a></em> geändert wurden. Diese Funktion gibt die neue Positionsnummer der Spalte zurück (oder 0 bei Misserfolg). Es können maximal 200 Spalten in einem ListView erstellt werden.</p>
<h3><a name="LV_DeleteCol"></a>LV_DeleteCol(Spaltennummer)</h3>
<p>Entfernt die angegebene Spalte und deren Inhalt. Diese Funktion gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück. Sobald eine Spalte gelöscht wird, werden die Spaltennummern der rechts befindlichen Spalten um 1 reduziert. Folglich würde das zweimalige Aufrufen von <code>LV_DeleteCol(2)</code> bewirken, dass die zweite und dritte Spalte gelöscht wird. Bei Betriebssystemen älter als Windows XP ist es möglich, dass das Entfernen der originalen ersten Spalte fehlschlagen und eine 0 zurückgeben wird.</p>
<h2 id="bifGet">Daten aus einer ListView bekommen</h2>
<h3><a name="LV_GetCount"></a>LV_GetCount(["Selected | Column"])</h3>
<p>Wenn der Parameter weggelassen wird, gibt die Funktion die Anzahl der Reihen im Steuerelement zurück. Wenn der Parameter "S" oder "Select" enthält, werden nur die ausgewählten/markierten Reihen gezählt. Wenn der Parameter "Col" oder "Column" enthält, gibt die Funktion die Anzahl der Spalten im Steuerelement zurück. Diese Funktion wird immer ohne Verzögerung ausgeführt, weil das Steuerelement solche Zählungen protokolliert.</p>
<p>Diese Funktion wird häufig in der obersten Zeile einer Schleife verwendet, wodurch die Funktion nur einmal aufgerufen werden würde (vor dem ersten Durchlauf). Zum Beispiel:</p>
<pre>Loop % LV_GetCount()
{
    LV_GetText(AbgerufenerText, A_Index)
    if InStr(AbgerufenerText, "beliebiger Filtertext")
        LV_Modify(A_Index, "Select")  <em>; Markiert jede Reihe, deren erstes Feld den Filtertext enthält.</em>
}</pre>
<p>Mit dem folgenden Beispiel können die Breiten der Spalten ermittelt werden (um diese beispielsweise in einer INI-Datei zwischenzuspeichern):</p>
<pre>Gui +LastFound
Loop % LV_GetCount("Column")
{
    SendMessage, 4125, A_Index - 1, 0, SysListView321  <em>; 4125 ist LVM_GETCOLUMNWIDTH.</em>
    MsgBox Die Spalte %A_Index% hat eine Breite von %ErrorLevel%.
}</pre>
<h3><a name="LV_GetNext"></a>LV_GetNext([Startreihennummer, "Checked | Focused"])</h3>
<p>Ermittelt die Reihennummer der nächsten ausgewählten, aktivierten oder fokussierten Reihe. Kann keine Reihe gefunden werden, wird 0 zurückgegeben. Ist die <em>Startreihennummer</em> nicht vorhanden oder kleiner als 1, beginnt die Suche am Anfang der Liste. Andernfalls beginnt die Suche bei der Reihe nach <em>Startreihennummer</em>. Sobald der zweite Parameter weggelassen wird, sucht die Funktion die nächste ausgewählte/aktivierte Reihe. Andernfalls wird mit "C" oder "Checked" die nächste Reihe gefunden, bei der ein Häkchen gesetzt ist; oder mit "F" oder "Focused" die fokussierte Reihe (es kann immer nur eine Reihe fokussiert sein, manchmal ist gar keine Reihe fokussiert). Im folgenden Beispiel werden alle ausgewählten Reihen im ListView gemeldet:</p>
<pre>Reihennummer = 0  <em>; Bewirkt, dass der erste Schleifendurchlauf beim Listenanfang beginnt.</em>
Loop
{
    Reihennummer := LV_GetNext(Reihennummer)  <em>; Setzt die Suche bei der nächsten Reihe fort.</em>
    if not Reihennummer  <em>; Wenn die obige Funktion eine 0 zurückgibt, ist keine weitere Reihe ausgewählt.</em>
        break
    LV_GetText(Text, Reihennummer)
    MsgBox Die nächste Reihe ist #%Reihennummer%, deren erstes Feld "%Text%" enthält.
}</pre>
<p>Eine alternative Methode, um herauszufinden, ob bei einer bestimmten Reihennummer ein Häkchen gesetzt wurde:</p>
<pre>Gui +LastFound
SendMessage, 4140, <i>Reihennummer</i> - 1, 0xF000, SysListView321  <em>; 4140 ist LVM_GETITEMSTATE.  0xF000 ist LVIS_STATEIMAGEMASK.</em>
IsChecked := (ErrorLevel &gt;&gt; 12) - 1  <em>; Setzt IsChecked auf wahr, wenn bei <i>Reihennummer</i> ein Häkchen gesetzt wurde, ansonsten auf falsch.</em></pre>
<h3><a name="LV_GetText"></a>LV_GetText(AusgabeVar, Reihennummer [, Spaltennummer])</h3>
<p>Ermittelt den Text bei der angegebenen <em>Reihennummer</em> und <em>Spaltennummer</em> und speichert ihn in <em>AusgabeVar</em>. Ist die <em>Spaltennummer</em> nicht vorhanden, wird standardmäßig eine 1 verwendet (der Text in der ersten Spalte). Wenn die <em>Reihennummer</em> eine 0 ist, wird die Spaltenüberschrift abgerufen. Es werden nur die ersten 8191 Zeichen des Textes abgerufen. Diese Funktion gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück. Bei Misserfolg wird <em>AusgabeVar</em> leer gemacht.</p>
<p>Die vom Script gesehene Spaltennummerierung ändert sich nicht, wenn die Spalten vom Benutzer verschoben werden. Zum Beispiel ist die originale erste Spalte auch dann weiterhin die Nummer 1, wenn der Benutzer diese nach rechts verschiebt.</p>
<h2 id="notify">g-Label-Meldungen (Primär)</h2>
<p>Es ist möglich, ein <a href="Gui.htm#label">g-Label</a> wie <code><strong>g</strong>MeineSubroutine</code> in den Optionen des Steuerelements aufzulisten. Dies würde bewirken, dass das Label <em>MeineSubroutine</em> automatisch gestartet, wann immer der Benutzer eine Aktion im Steuerelement durchführt. Diese Subroutine kann auf die integrierten Variablen <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> zurückgreifen, um herauszufinden, welches Fenster oder ListView das Ereignis erzeugt hat. Noch wichtiger ist, dass sie auf <strong>A_GuiEvent</strong> zurückgreifen kann, die einen der folgenden Strings enthalten kann (für die Kompatibilität mit zukünftigen Versionen sollte ein Script nicht davon ausgehen, dass das die einzigen möglichen Werte sind):</p>
<p><strong>DoubleClick</strong>: Der Benutzer hat das Steuerelement zweimal angeklickt. Die Variable A_EventInfo enthält die fokussierte Reihennummer. <a href="#LV_GetNext">LV_GetNext()</a> kann dazu verwendet werden, stattdessen die erste <em>markierte</em> Reihennummer zu erhalten, die eine 0 ist, falls der Benutzer eine leere Fläche zweimal anklickt.</p>
<p><strong>R</strong>: Der Benutzer hat das Steuerelement <em>zweimal mit der rechten Maustaste</em> angeklickt. Die Variable A_EventInfo enthält die fokussierte Reihennummer.</p>
<p><strong><a name="ColClick"></a>ColClick</strong>: Der Benutzer hat eine Spaltenüberschrift angeklickt. Die Variable A_EventInfo enthält die originale Nummer, die der Spalte beim Erstellen zugewiesen wurde; auch dann, wenn der Benutzer die Spalten per Maus verschieben würde. Zum Beispiel kann beim Anklicken der Spalte eine Sortierung durch eine versteckte Spalte (Breite 0) erfolgen, die Daten im sortierfreundlichen Format enthält (z. B. als Integer-Datum im YYYYMMDD-Format). Diese versteckte Spalte spiegelt dann eine andere Spalte wieder, die die gleichen Daten im freundlicheren Format (z. B. DD.MM.YY) darstellt. Zum Beispiel könnte ein Script die dritte Spalte mittels <code><a href="#LV_ModifyCol">LV_ModifyCol(3, 0)</a></code> verstecken und danach die automatische Sortierung in der sichtbaren zweiten Spalte mittels <code>LV_ModifyCol(2, "NoSort")</code> deaktivieren. Dann, als Reaktion auf die ColClick-Meldung der Spalte 2, wird das ListView von der versteckten Spalte mittels <code>LV_ModifyCol(3, "Sort")</code> sortiert.</p>
<p><strong><a name="Drag" id="Drag"></a>D</strong>: Der Benutzer hat den Versuch gestartet, eine Reihe oder ein Icon zu verschieben (es gibt derzeit keine integrierte Unterstützung für das Verschieben von Reihen oder Icons). Die Variable A_EventInfo enthält die fokussierte Reihennummer. Seit v1.0.44 erscheint diese Meldung auch ohne <a href="#AltSubmit">AltSubmit</a>.</p>
<p><strong>d</strong>: Wie oben, aber mit der rechten Maustaste.</p>
<p><strong>e</strong>: Der Benutzer hat die Bearbeitung des ersten Feldes in der Reihe beendet (der Benutzer kann dieses Feld nur bearbeiten, wenn <code><a href="#ReadOnly"><strong>-</strong>ReadOnly</a></code> in den Optionen vorhanden ist). Die Variable A_EventInfo enthält die Reihennummer.</p>
<h2>g-Label-Meldungen (Sekundär)</h2>
<p>Wenn das Wort AltSubmit in den <a href="#Options">Optionen</a> vorhanden ist, wird g-Label öfters aufgerufen und <strong>A_GuiEvent</strong> zusätzlich folgende Werte enthalten:</p>
<p><strong>Normal</strong>: Der Benutzer hat eine Reihe mit der linken Maustaste angeklickt. Die Variable A_EventInfo enthält die fokussierte Reihennummer.</p>
<p><strong>RightClick</strong>: Der Benutzer hat eine Reihe mit der rechten Maustaste angeklickt. Die Variable A_EventInfo enthält die fokussierte Reihennummer. In den meisten Fällen ist es am besten, ein Menü nicht als Reaktion darauf anzuzeigen. Verwendet stattdessen das <a href="Gui.htm#GuiContextMenu">GuiContextMenu-Label</a>, weil es auch die MENÜ-Taste erkennt. Zum Beispiel:</p>
<pre>GuiContextMenu:  <em>; Wird ausgeführt, sobald die rechte Maustaste oder die MENÜ-Taste gedrückt wird.</em>
if A_GuiControl &lt;&gt; MeinListView  <em>; Diese Überprüfung ist optional. Das Menü wird nur angezeigt, wenn das ListView angeklickt wird.</em>
    return
<em>; Öffnet das Menü auf den angegebenen Koordinaten A_GuiX und A_GuiY.  Diese sollten verwendet werden,
; weil sie die richtigen Koordinaten bereitstellen, selbst wenn der Benutzer die MENÜ-Taste drückt:</em>
Menu, Kontextmenü, Show, %A_GuiX%, %A_GuiY%
return</pre>
<p><strong>A</strong>: Eine Reihe wurde aktiviert. Erfolgt standardmäßig, wenn die Reihe zweimal angeklickt wird. Die Variable A_EventInfo enthält die Reihennummer.</p>
<p><strong>C</strong>: Das ListView hat die Mauserfassung ausgelöst.</p>
<p><strong>E</strong>: Der Benutzer hat die Bearbeitung des ersten Feldes in der Reihe begonnen (der Benutzer kann das Feld nur bearbeiten, wenn <code><a href="#ReadOnly">-ReadOnly</a></code> in den Optionen vorhanden ist). Die Variable A_EventInfo enthält die Reihennummer.</p>
<p><strong>F</strong>: Das ListView hat den Tastaturfokus erhalten.</p>
<p><strong>f</strong>: Das ListView hat den Tastaturfokus verloren.</p>
<p><strong><a name="ItemChanged"></a>I</strong>: Element geändert. Eine Reihe wurde durch Auswählen/Abwählen, Häkchen setzen/entfernen und so weiter geändert. Sobald der Benutzer eine neue Reihe auswählt, werden mindestens zwei solcher Meldungen empfangen: eine Meldung durch Abwählen der vorherigen Reihe und eine Meldung durch Auswählen der neuen Reihe. Seit v1.0.44 enthält die Variable A_EventInfo die Reihennummer. Seit v1.0.46.10 enthält ErrorLevel beliebig viele folgende Buchstaben, auf welche Weise die Reihe geändert wurde: S (ausgewählt) oder s (abgewählt), und/oder F (fokussiert) oder f (Fokus aufgehoben), und/oder C (Häkchen gesetzt) oder c (Häkchen entfernt). Zum Beispiel bedeutet SF, dass die Reihe ausgewählt und fokussiert wurde. Mithilfe einer <a href="LoopParse.htm">Parsing-Schleife</a> oder der Zeichengenauigkeit-Option der Funktion <a href="../Functions.htm#InStr">InStr()</a> kann festgestellt werden, ob ein bestimmter Buchstabe vorkommt. Zum Beispiel: <code>InStr(ErrorLevel, "S", true)</code>. Hinweis: Für die Kompatibilität mit zukünftigen Versionen sollte ein Script nicht davon ausgehen, das "SsFfCc" die einzigen möglichen Werte sind. Auch die Angabe von <a href="Critical.htm">Critical</a> in der ersten Zeile von <a href="Gui.htm#label">g-Label</a> stellt sicher, dass alle "I"-Meldungen empfangen werden können (sonst könnten einige verloren gehen, falls das Script nicht mithalten kann).</p>
<p><strong><a name="NotifyK"></a>K</strong>: Der Benutzer hat eine Taste gedrückt, während das ListView den Fokus hatte. A_EventInfo enthält den virtuellen Tastencode der Taste - eine Zahl zwischen 1 und 255. Wenn die Taste alphabetisch ist, kann sie bei den meisten Tastaturbelegungen mittels <code><a href="../Functions.htm#Chr">Chr(A_EventInfo)</a></code> in das entsprechende Zeichen umgewandelt werden. F2-Eingaben werden auch erkannt, unabhängig von <a href="#WantF2">WantF2</a>. Die ENTER-Taste wird jedoch nicht erkannt; als Übergangslösung kann ein Standard-Button verwendet werden, wie <a href="#Enter">unten</a> beschrieben.</p>
<p><strong>M</strong>: Auswahlrechteck. Der Benutzer hat damit begonnen, ein Auswahlrechteck auf mehrere Reihen oder Icons zuziehen.</p>
<p><strong>S</strong>: Der Benutzer hat damit begonnen, das ListView zu scrollen.</p>
<p><strong>s</strong>: Der Benutzer ist damit fertig, das ListView zu scrollen.</p>
<h2 id="IL">Bildliste <span class="ver">(Icons zur ListView hinzufügen)</span></h2>
<p>Eine Bildliste ist eine Gruppe von gleich großen Icons, die im Speicher abgelegt ist. Beim Erstellen ist jede Bildliste leer. Das Script ruft IL_Add() mehrmals auf, um Icons zur Liste hinzuzufügen. Jedem Icon wird dabei eine fortlaufende Nummer zugeordnet, beginnend bei 1. Das ist die Nummer, auf die das Script verweist, um ein bestimmtes Icon in einer Reihe oder Spaltenüberschrift anzuzeigen. Nachfolgend ein Beispiel, wie man Icons in den Reihen einfügen kann:</p>
<pre>Gui, Add, ListView, h200 w180, Icon &amp; Nummer|Beschreibung  <em>; Erstellt ein ListView.</em>
BildlisteID := <a href="#IL_Create">IL_Create</a>(10)  <em>; Erstellt eine Bildliste, die 10 kleine Icons umfasst.</em>
<a href="#LV_SetImageList">LV_SetImageList</a>(BildlisteID)  <em>; Weist die obige Bildliste dem aktuellen ListView zu.</em>
Loop 10  <em>; Lädt die Bildliste mit mehreren Icons von der DLL.</em>
    <a href="#IL_Add">IL_Add</a>(BildlisteID, "shell32.dll", A_Index)
Loop 10  <em>; Fügt Reihen zur ListView hinzu (zur Veranschaulichung hat jedes Icon eine Reihe).</em>
    LV_Add("Icon" . A_Index, A_Index, "n/a")
LV_ModifyCol("Hdr")  <em>; Passt die Breite der Spalte automatisch an.</em>
Gui Show
return

GuiClose:  <em>; Beendet das Script, sobald der Benutzer das GUI-Fenster schließt.</em>
ExitApp</pre>
<h3><a name="IL_Create"></a>IL_Create([Anfangsanzahl, Steigerungsanzahl, GroßeIcons?])</h3>
<p>Erstellt eine neue Bildliste, die zunächst leer ist und die eindeutige ID der Bildliste zurückgibt (oder bei Misserfolg eine 0). <em>Anfangsanzahl</em> ist die zu erwartende Anzahl der Icons, die sofort in die Liste eingefügt werden (falls weggelassen, standardmäßig 2). <em>Steigerungsanzahl</em> ist die Anzahl der Icons, mit denen die Liste jedes Mal erweitert wird, sobald deren aktuelle Kapazität überschritten wird (falls weggelassen, standardmäßig 5). <em>GroßeIcons</em> sollte ein numerischer Wert sein: Ist dieser ungleich 0, wird die Bildliste große Icons enthalten. Falls dieser Wert eine 0 ist, wird die Bildliste kleine Icons enthalten (Standardeinstellung, falls weggelassen). Die zur Liste hinzugefügten Icons werden automatisch auf die Standardgrößen des Betriebssystems für kleine und große Icons skaliert.</p>
<h3><a name="LV_SetImageList"></a>LV_SetImageList(BildlisteID [, 0|1|2])</h3>
<p>Diese Funktion wird normalerweise aufgerufen, bevor Reihen in das ListView eingefügt werden. Damit wird die <a href="#IL">Bildliste</a> bestimmt, deren Icons von den ListView-Reihen angezeigt werden (und optional dessen Spalten). Die BildlisteID ist die zurückgegebene Zahl vom vorherigen Aufruf von <a href="#IL_Create">IL_Create()</a>. Falls der zweite Parameter nicht vorhanden ist, werden die Icon-Typen in der Bildliste automatisch als große oder kleine Icons erkannt. Ansonsten kann eine 0 für große Icons, eine 1 für kleine Icons und eine 2 für Status-Icons angegeben werden (obwohl Status-Icons nicht direkt unterstützt werden, können diese mittels <a href="PostMessage.htm">SendMessage</a> verwendet werden).</p>
<p>Ein ListView kann bis zu zwei Bildlisten haben: kleine Icons und/oder große Icons. Das ist nützlich, wenn das Script dem Benutzer ermöglicht, zwischen den Icon-Ansichten zu wechseln. Um mehr als eine Bildliste zum ListView hinzuzufügen, muss LV_SetImageList() ein zweites Mal aufgerufen werden - mit der BildlisteID der zweiten Liste. Bei einem ListView mit Bildlisten für große und kleine Icons sollte sichergestellt werden, dass beide Listen die Icons in der gleichen Reihenfolge enthalten. Das kommt daher, dass die gleiche ID-Nummer verwendet wird, um sowohl auf die große als auch auf die kleine Version eines bestimmten Icons zu verweisen.</p>
<p>Traditionell zeigen alle <a href="#View">Anzeigemethoden</a> (außer Icon und Tile) kleine Icons an. Dieses Verhalten kann jedoch überschrieben werden, wenn eine Liste für große Icons an LV_SetImageList übergeben und eine 1 (kleine Icons) im zweiten Parameter angegeben wird. Dadurch erhöht sich auch die Höhe jeder Reihe im ListView, damit die großen Icons passen.</p>
<p>Bei Erfolg gibt LV_SetImageList() die BildlisteID zurück, welche zuvor dem ListView zugeordnet wurde (oder eine 0 bei Misserfolg). Jede einzelne Bildliste sollte mit <a href="#IL_Destroy">IL_Destroy(BildlisteID)</a> zerstört werden.</p>
<h3><a name="IL_Add"></a>IL_Add(BildlisteID, Dateiname [, Iconnummer, BildSkalieren?])</h3>
<p>Fügt ein Icon oder Bild zur <em>BildlisteID</em> hinzu und gibt den neuen Index des Icons zurück (1 ist das erste Icon, 2 das zweite Icon und so weiter). <em>Dateiname</em> ist der Name einer Icon-Datei (.ICO), einer Cursor-Datei (.CUR) oder einer animierten Cursor-Datei (.ANI) (animierte Cursor werden zurzeit nicht im ListView animiert). Andere Quellen von Icons können sein: EXE, DLL, CPL, SCR und andere Typen, die Icon-Ressourcen enthalten. Wenn anstelle der ersten Icon-Gruppe eine andere verwendet werden soll, muss bei <em>Iconnummer</em> deren Nummer angegeben werden. Wenn <em>Iconnummer</em> negativ ist, wird davon ausgegangen, dass sein absoluter Wert die Ressourcen-ID eines Icons innerhalb einer ausführbaren Datei ist. Im folgenden Beispiel wird das Standard-Icon aus der zweiten Icon-Gruppe verwendet: <code>IL_Add(BildlisteID, "C:\Meine Anwendung.exe", 2)</code>.</p>
<p>Bilder wie BMP, GIF und JPG können ebenfalls geladen werden. In diesem Fall sollten die letzten beiden Parameter mit angegeben werden, um das richtige Verhalten zu gewährleisten: <em>Iconnummer</em> sollte die Nummer der Farbmaske/Transparenzfarbe sein (meistens 0xFFFFFF [die Farbe weiß]); und <em>BildSkalieren</em> sollte ungleich 0 sein, damit das Bild in ein einzelnes Icon verwandelt wird; oder 0, um das Bild in mehrere Icons aufzuteilen.</p>
<p>Alle Betriebssysteme unterstützen GIF, JPG, BMP, ICO, CUR und ANI. In Windows XP (oder höher) werden zusätzliche Bildformate wie PNG, TIF, Exif, WMF und EMF unterstützt. Betriebssysteme älter als XP können auch unterstützt werden, wenn die frei verfügbare GDIPlus.dll von Microsoft in den AutoHotkey-Ordner kopiert wird (aber im Falle eines <a href="../Scripts.htm#ahk2exe">kompilierten Scripts</a> muss die DLL in den Ordner des Scripts kopiert werden). Die DLL kann durch Suchen folgender Begriffe auf <a href="http://www.microsoft.com">www.microsoft.com</a> heruntergeladen werden: gdi redistributable</p>
<h3><a name="IL_Destroy"></a>IL_Destroy(BildlisteID)</h3>
<p>Entfernt die angegebene Bildliste und gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück. Normalerweise ist es nicht notwendig, Bildlisten zu zerstören - sind die Bildlisten bereits zugewiesen, werden diese automatisch zerstört, sobald das ListView oder übergeordnete Fenster auch zerstört wird. Wenn das ListView sich allerdings eine Bildliste mit anderen ListViews teilt (wenn <code>0x40</code> in den Optionen ist), sollte das Script die Bildliste explizit zerstören, nachdem alle ListViews zerstört wurden. Falls das Script eine alte Bildliste mit einer neuen ersetzt, sollte es explizit die alte Bildliste zerstören.</p>
<h2 id="Remarks">ListView-Bemerkungen</h2>
<p>Der Befehl <a href="Gui.htm#Submit">Gui Submit</a> hat keine Auswirkung auf ein ListView-Steuerelement. Daher kann das Script die <a href="Gui.htm#var">zugeordnete Variable</a> von ListView verwenden (falls vorhanden), um andere Daten zu speichern, ohne Sorge, dass diese jemals überschrieben wird.</p>
<p>Nach dem Sortieren einer Spalte (durch Anklicken der Spaltenüberschrift oder Aufrufen von <code><a href="#LV_ModifyCol">LV_ModifyCol(1, "Sort")</a></code>) erscheinen alle danach hinzugefügten Reihen am unteren Ende der Liste, anstatt die aktuelle Sortierungsreihenfolge zu beachten. Die Ausnahme machen die Styles <a href="#Sort">Sort</a> und <a href="#SortDesc">SortDesc</a>, da sie neu hinzugefügte Reihen an die korrekte Position verschieben.</p>
<p><a name="Enter"></a>Um das Drücken von Enter festzustellen, während ein ListView den Fokus hat, kann ein <a href="GuiControls.htm#DefaultButton">Standard-Button</a> verwendet werden (die je nach Bedarf versteckt werden kann). Zum Beispiel:</p>
<pre>Gui, Add, Button, Hidden Default, OK
...
ButtonOK:
GuiControlGet, FokussiertesSteuerelement, FocusV
if FokussiertesSteuerelement &lt;&gt; MeinListView
    return
MsgBox % "Enter wurde gedrückt. Die fokussierte Reihennummer ist " . LV_GetNext(0, "Focused")
return</pre>
<p>Neben der Navigation mit der Tastatur von Reihe zu Reihe kann der Benutzer auch eine inkrementelle Suche durchführen, indem er die ersten Zeichen eines Feldes aus der ersten Spalte eingibt. Dadurch springt die Auswahl auf die nächste passende Reihe.</p>
<p>Obwohl Texte mit beliebiger Länge in den Feldern eines ListViews gespeichert werden können, werden nur die ersten 260 Zeichen angezeigt.</p>
<p>Obwohl die maximale Reihenanzahl nur vom verfügbaren Systemspeicher begrenzt wird, kann die Performance beim Sortieren verbessert werden, wie es bei der <a href="#Count">Count</a>-Option geschrieben steht.</p>
<p>Ein Bild kann als Hintergrund um ein ListView verwendet werden (das heißt, um das ListView damit einzurahmen). Erstellt dazu ein <a href="GuiControls.htm#Picture">Bild-Steuerelement</a> nach dem ListView und fügt <code>0x4000000</code> (WS_CLIPSIBLINGS) in den <em>Optionen</em> des Bild-Steuerelements ein.</p>
<p>Ein Script kann pro Fenster mehrere ListViews erstellen. Um anstelle des Standard-ListViews ein anderes zu bearbeiten, siehe <a href="#BuiltIn">integrierte Funktionen</a>.</p>
<p>Am besten sollten Spalten nicht direkt mit <a href="PostMessage.htm">SendMessage</a> eingefügt oder entfernt werden. Das liegt daran, dass das Programm mehrere <a href="#Integer">Sortier-Einstellungen</a> für jede Spalte verwaltet, wodurch dann die Synchronisation verloren gehen würde. Verwende stattdessen die <a href="#bifCol">integrierten Spalten-Funktionen</a>.</p>
<p>Mit <a href="GuiControl.htm">GuiControl</a> können beim ListView Aktionen wie Skalieren, Verstecken oder Ändern der Schriftart durchgeführt werden.</p>
<p>Mit <a href="ControlGet.htm#List">ControlGet List</a> können Texte aus externe ListViews extrahiert werden (die nicht zum Script gehören).</p>
<h2>Siehe auch</h2>
<p><a href="TreeView.htm">TreeView</a>, <a href="GuiControls.htm">Andere Steuerelementarten</a>, <a href="Gui.htm">Gui</a>, <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="../misc/Styles.htm#ListView">Style-Tabelle von ListView</a></p>
<h2 id="Examples">Beispiele</h2>
<pre class="NoIndent"><em>; Alle Reihen aus- oder abwählen durch Angabe von 0 als Reihennummer:</em>
<a href="#LV_Modify">LV_Modify</a>(0, "Select")   <em>; Alle auswählen.</em>
LV_Modify(0, "-Select")  <em>; Alle abwählen.</em>
LV_Modify(0, "-Check")  <em>; Alle <a href="#Checked">Kontrollkästchen</a> deaktivieren.</em>

<em>; Breite der Spalten an den Inhalt der Reihen anpassen:</em>
<a href="#LV_ModifyCol">LV_ModifyCol</a>()  <em>; In diesem Modus sind keine Parameter vorhanden.</em></pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; HAUPTBEISPIEL
; Das folgende Script ist viel aufwendiger als das am Seitenanfang befindliche Beispiel.
; Es zeigt Dateien eines ausgewählten Ordners, dessen Dateien ihr Icon zugewiesen bekommen. Der Benutzer kann eine Datei zweimal anklicken oder beliebig viele Dateien mit der rechten Maustaste anklicken, um das Kontextmenü anzuzeigen.</em>

<em>; Erlaubt dem Benutzer, das Fenster zu maximieren oder dessen Größe beliebig anzupassen.</em>
Gui +Resize

<em>; Einige Buttons erstellen:</em>
Gui, Add, Button, Default gButtonOrdnerLaden, Ordner laden
Gui, Add, Button, x+20 gButtonLeeren, Liste leeren
Gui, Add, Button, x+20, Ansicht wechseln

<em>; Erstellt das ListView und dessen Spalten:</em>
<a href="#GuiAdd">Gui, Add, ListView</a>, xm r20 w700 vMeinListView gMeinListView, Name|Ordner|Größe (KB)|Typ
<a href="#LV_ModifyCol">LV_ModifyCol</a>(3, "Integer")  <em>; Aus Sortierungsgründen wird Spalte Größe als Integer gekennzeichnet.</em>

<em>; Erstellt eine Bildliste, damit das ListView einige Icons anzeigen kann:</em>
BildlisteID1 := <a href="#IL_Create">IL_Create</a>(10)
BildlisteID2 := IL_Create(10, 10, true)  <em>; Eine Liste mit großen Icons, verbunden mit den kleinen Icons.</em>

<em>; Verbindet die Bildlisten mit dem ListView, damit später die Icons angezeigt werden können:</em>
<a href="#LV_SetImageList">LV_SetImageList</a>(BildlisteID1)
LV_SetImageList(BildlisteID2)

<em>; Erstellt ein aufklappbares Menü, das als Kontextmenü verwendet wird:</em>
<a href="Menu.htm">Menu</a>, Kontextmenü, Add, Öffnen, KontextDateiÖffnen
Menu, Kontextmenü, Add, Eigenschaften, KontextEigenschaften
Menu, Kontextmenü, Add, Von ListView entfernen, KontextReihenLeeren
Menu, Kontextmenü, Default, Öffnen  <em>; "Öffnen" ist fett geschrieben, das heißt, dass ein Doppelklick dasselbe bewirkt.</em>

<em>; Fenster anzeigen und in den Leerlauf gehen. Das Script wird benachrichtigt, wenn der Benutzer
; eine gültige Aktion ausführt:</em>
Gui, Show
return


ButtonOrdnerLaden:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das folgende Dialogfenster zu schließen, bevor das Hauptfenster verwendet werden kann.</em>
FileSelectFolder, Ordner,, 3, Ordner auswählen, um einzulesen:
if not Ordner  <em>; Der Benutzer hat das Dialogfenster abgebrochen.</em>
    return

<em>; Überprüft, ob das letzte Zeichen im Ordnernamen ein umgekehrter Schrägstrich ist, dass bei Wurzelverzeichnissen
; wie C:\ vorkommt. In diesem Fall wird das Zeichen entfernt, um zwei umgekehrte Schrägstriche später zu vermeiden.</em>
StringRight, LetztesZeichen, Ordner, 1
If LetztesZeichen = \
    StringTrimRight, Ordner, Ordner, 1  <em>; Nachfolgenden Backslash entfernen.</em>

<em>; Berechnet die notwendige Puffergröße für die SHFILEINFO-Struktur.</em>
sfi_size := A_PtrSize + 8 + (A_IsUnicode ? 680 : 340)
VarSetCapacity(sfi, sfi_size)

<em>; Sammelt eine Liste mit Dateinamen vom ausgewählten Ordner und fügt sie an der ListView an:</em>
GuiControl, -Redraw, MeinListView  <em>; Verbessert die Performance, indem das Neuzeichnen beim Laden deaktiviert wird.</em>
Loop %Ordner%\*.*
{
    Dateiname := A_LoopFileFullPath  <em>; Muss in eine schreibbare Variable gespeichert werden, damit sie unten verwendet werden kann.</em>

    <em>; Erstellt eine eindeutige Erweiterungs-ID, um Zeichen zu vermeiden, die in einem Variablennamen illegal sind,</em>
    <em>; wie z. B. Bindestriche.  Zudem wird diese Methode besser durchgeführt, weil das Suchen eines Elements</em>
    <em>; in einem Array keine Such-Schleife erfordert.</em>
    SplitPath, Dateiname,,, Erweiterung  <em>; Ermittelt die Dateierweiterung.</em>
    if Erweiterung in EXE,ICO,ANI,CUR
    {
        ErweiterungID := Erweiterung  <em>; Spezial-ID als Platzhalter.</em>
        Iconnummer = 0  <em>; Als "nicht gefunden" markieren, damit jeder Typ ein einzigartiges Icon erhält.</em>
    }
    else  <em>; Andere Erweiterung/Dateityp, daher dessen eindeutige ID berechnen.</em>
    {
        ErweiterungID = 0  <em>; Initialisieren, um Erweiterungen zu behandeln, die kürzer als andere sind.</em>
        Loop 7     <em>; Die Erweiterung auf 7 Zeichen beschränken, damit diese in einem 64-Bit-Wert passt.</em>
        {
            StringMid, Erweiterungszeichen, Erweiterung, A_Index, 1
            if not Erweiterungszeichen  <em>; Keine weiteren Zeichen.</em>
                break
            <em>; Eine eindeutige ID einleiten, indem jedem Zeichen eine unterschiedliche Bit-Position zugewiesen wird:</em>
            ErweiterungID := ErweiterungID | (Asc(Erweiterungszeichen) &lt;&lt; (8 * (A_Index - 1)))
        }
        <em>; Überprüfen, ob die Dateierweiterung bereits ein Icon in den Bildlisten hat. Wenn ja,</em>
        <em>; können mehrere Aufrufe vermieden und die Lade-Performance stark verbessert werden,</em>
        <em>; besonders bei einem Ordner mit mehreren hundert Dateien:</em>
        Iconnummer := IconArray%ErweiterungID%
    }
    if not Iconnummer  <em>; Diese Erweiterung hat noch kein Icon, daher kann es geladen werden.</em>
    {
        <em>; Ermittelt die qualitativ hochwertigen kleinen Icons, die zu dieser Dateierweiterung gehören:</em>
        if not DllCall("Shell32\SHGetFileInfo" . (A_IsUnicode ? "W":"A"), "str", Dateiname
            , "uint", 0, "str", sfi, "uint", sfi_size, "uint", 0x101)  <em>; 0x101 ist SHGFI_ICON+SHGFI_SMALLICON</em>
            Iconnummer = 9999999  <em>; Auf einen Wert außerhalb des Bereichs setzen, um ein leeres Icon anzuzeigen.</em>
        else <em>; Icon erfolgreich geladen.</em>
        {
            <em>; hIcon-Element aus der Struktur extrahieren:</em>
            hIcon := NumGet(sfi, 0)
            <em>; Fügt das HICON direkt in die Listen für kleine und große Icons.</em>
            <em>; In der nächsten Zeile wird +1 verwendet, um den 0-basierten Index in einen 1-basierten umzuwandeln:</em>
            Iconnummer := DllCall("ImageList_ReplaceIcon", "ptr", BildlisteID1, "int", -1, "ptr", hIcon) + 1
            DllCall("ImageList_ReplaceIcon", "ptr", BildlisteID2, "int", -1, "ptr", hIcon)
            <em>; Da das nun in die Bildlisten kopiert wurde, sollte das Original zerstört werden:</em>
            DllCall("DestroyIcon", "ptr", hIcon)
            <em>; Icon zwischenspeichern, um Speicher zu sparen und Lade-Performance zu erhöhen.</em>
            IconArray%ErweiterungID% := Iconnummer
        }
    }

    <em>; Erstellt eine neue Reihe im ListView, die die oben festgestellte Icon-Nummer zugewiesen bekommt:</em>
    <a href="#LV_Add">LV_Add</a>("Icon" . Iconnummer, A_LoopFileName, A_LoopFileDir, A_LoopFileSizeKB, Erweiterung)
}
GuiControl, +Redraw, MeinListView  <em>; Neuzeichnen wieder aktivieren (das weiter oben deaktiviert wurde).</em>
LV_ModifyCol()  <em>; Breite der Spalten an den Inhalt der Reihen anpassen.</em>
LV_ModifyCol(3, 60) <em>; Macht die Spalte "Größe" etwas breiter, damit die Spaltenüberschrift vollständig sichtbar ist.</em>
return


ButtonLeeren:
<a href="#LV_Delete">LV_Delete</a>()  <em>; ListView leeren, aber Icon-Cache beibehalten.</em>
return

ButtonAnsichtWechseln:
if not IconView
    GuiControl, +Icon, MeinListView    <em>; Zur Icon-Ansicht wechseln.</em>
else
    GuiControl, +Report, MeinListView  <em>; Wieder zur Detail-Ansicht wechseln.</em>
Iconansicht:= not Iconansicht            <em>; Umkehren, in Vorbereitung auf das nächste Mal.</em>
return

MeinListView:
if A_GuiEvent = DoubleClick  <em>; Es gibt noch viele andere Werte, die das Script überprüfen kann.</em>
{
    <a href="#LV_GetText">LV_GetText</a>(Dateiname, A_EventInfo, 1) <em>; Den Text des ersten Felds ermitteln.</em>
    LV_GetText(Dateiverzeichnis, A_EventInfo, 2)  <em>; Den Text des zweiten Felds ermitteln.</em>
    Run %Dateiverzeichnis%\%Dateiname%,, UseErrorLevel
    if ErrorLevel
        MsgBox "%Dateiverzeichnis%\%Dateiname%" konnte nicht geöffnet werden.
}
return

<a href="Gui.htm#GuiContextMenu">GuiContextMenu</a>:  <em>; Wird durch Rechtsklick oder Drücken der MENÜ-Taste ausgeführt.</em>
if A_GuiControl &lt;&gt; MeinListView  <em>; Das Menü wird nur bei Klicks innerhalb des ListViews angezeigt.</em>
    return
<em>; Zeigt das Menü auf den angegebenen Koordinaten A_GuiX und A_GuiY.  Diese sollten verwendet werden,
; weil sie die richtigen Koordinaten bereitstellen, selbst wenn der Benutzer die MENÜ-Taste drückt:</em>
Menu, Kontextmenü, Show, %A_GuiX%, %A_GuiY%
return

KontextDateiÖffnen:  <em>; Der Benutzer hat "Öffnen" im Kontextmenü ausgewählt.</em>
KontextEigenschaften:  <em>; Der Benutzer hat "Eigenschaften" im Kontextmenü ausgewählt.
; Der Einfachheit halber nur die fokussierte Reihe bearbeiten, anstatt alle ausgewählte Reihen:</em>
FokussierteReihennummer := <a href="#LV_GetNext">LV_GetNext</a>(0, "F")  <em>; Die fokussierte Reihe finden.</em>
if not FokussierteReihennummer  <em>; Keine Reihe fokussiert.</em>
    return
LV_GetText(Dateiname, FokussierteReihennummer, 1) <em>; Den Text des ersten Feldes ermitteln.</em>
LV_GetText(Dateiverzeichnis, FokussierteReihennummer, 2)  <em>; Den Text des zweiten Feldes ermitteln.</em>
IfInString A_ThisMenuItem, Öffnen <em>; Der Benutzer hat "Öffnen" im Kontextmenü ausgewählt.</em>
    Run %Dateiverzeichnis%\%Dateiname%,, UseErrorLevel
else  <em>; Der Benutzer hat "Eigenschaften" im Kontextmenü ausgewählt.</em>
    Run Properties "%Dateiverzeichnis%\%Dateiname%",, UseErrorLevel
if ErrorLevel
    MsgBox Angeforderte Aktion auf "%Dateiverzeichnis%\%Dateiname%" konnte nicht ausgeführt werden.
return

KontextReihenLeeren:  <em>; Der Benutzer hat "Leeren" im Kontextmenü ausgewählt.</em>
Reihennummer = 0  <em>; Bewirkt beim ersten Durchlauf, dass die Suche oben beginnt.</em>
Loop
{
    <em>; Da das Löschen einer Reihe die Reihennummer aller anderen Reihen darüber reduziert,</em>
    <em>; sollte diese um 1 subtrahiert werden, damit die Suche die gleiche Reihennummer mit einbezieht,</em>
    <em>; die zuvor gefunden wurde (falls die benachbarten Reihen ausgewählt sind):</em>
    Reihennummer := LV_GetNext(Reihennummer - 1)
    if not Reihennummer  <em>; Wenn die obige Funktion eine 0 zurückgibt, sind keine weiteren Reihen ausgewählt.</em>
        break
    LV_Delete(Reihennummer)  <em>; Die Reihe des ListViews leeren.</em>
}
return

GuiSize:  <em>; Vergrößert oder verkleinert das ListView, während der Benutzer die Fenstergröße ändert.</em>
if A_EventInfo = 1  <em>; Das Fenster wurde minimiert.  Keine Aktion notwendig.</em>
    return
<em>; Ansonsten wurde die Fenstergröße geändert oder maximiert. Die Größe des ListViews anpassen.</em>
GuiControl, Move, MeinListView, % "W" . (A_GuiWidth - 20) . " H" . (A_GuiHeight - 40)
return

GuiClose:  <em>; Beim Schließen des Fensters das Script automatisch beenden:</em>
ExitApp</pre>

</body>
</html>
