<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>#Warn</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>#Warn <span class="ver">[v1.0.95.00+]</span></h1>

<p>Aktiviert oder deaktiviert Warnungen f&uuml;r ausgew&auml;hlte Ladezeit- und Laufzeitzust&auml;nde, die Entwicklerfehler wie Schreibfehler oder fehlende "globale" Deklarationen kennzeichnen.</p>

<pre class="Syntax">#Warn [, Warnungstyp, Warnungsmodus]</pre>

<p>Das ist als Entwickler-Tool gedacht, um die Script-Entwicklung zu beschleunigen, indem solche Fehler einfach erkennbar gemacht werden.</p>

<p>Diese Funktion bezieht sich konzeptionell auf die Einstellung "Option Explicit" von Visual Basic und auf das Pragma "Strict" von Perl, wobei sie nur hinzugef&uuml;gte Warnungen unterst&uuml;tzt, jedoch keine &Auml;nderungen am Script im Voraus ben&ouml;tigt (z. B. direkte Deklarationen f&uuml;r alle Variablen).</p>

<h3>Parameter</h3>
<table class="info">
  <tr>
    <td width="15%" height="24">Warnungstyp</td>
    <td width="85%">
      <p>Beliebiger unterer Wert. Wenn nicht vorhanden, dann standardm&auml;&szlig;ig <i>All</i>.</p>
      <p><strong>All</strong>: Der angegebene <em>Warnungsmodus</em> gilt f&uuml;r alle unterst&uuml;tzten Warnungstypen.</p>
      <p><strong>UseUnsetLocal</strong> oder <strong>UseUnsetGlobal</strong>: Warnen, wenn eine Variable verwendet wird (d. h. ihr Wert wird gelesen), bevor ihr direkt ein Wert zugewiesen wird.  Diese Warnungstypen sind f&uuml;r lokale und globale Variablen aufgeteilt, weil viele AutoHotkey-Scripts absichtlich unbestimmte globale Variablen entwurfsgem&auml;&szlig; &uuml;berpr&uuml;fen, w&auml;hrend die Verwendung von unbestimmten lokalen Variablen h&ouml;chstwahrscheinlich ein Entwicklerfehler ist. Daher macht es Sinn, diesen Warnungstyp f&uuml;r lokale Variable zu aktivieren und f&uuml;r globale Variablen zu deaktivieren.  Das sind die Laufzeit-Warnungen, weil sie jederzeit erzeugt werden k&ouml;nnen, w&auml;hrend das Script ausgef&uuml;hrt wird.</p>
      <p><strong>UseEnv</strong>: Warnen, wenn eine Umgebungsvariable automatisch anstelle einer leeren Script-Variablen verwendet wird.  Das kann manchmal passieren, wenn der Name einer Umgebungsvariable unbeabsichtigt dem Namen einer Script-Variable entspricht, es sei denn, das Script verwendet <a href="_NoEnv.htm">#NoEnv</a> (empfohlen).  Das ist eine Laufzeit-Warnung, weil sie jederzeit erzeugt werden kann, w&auml;hrend das Script ausgef&uuml;hrt wird.</p>
      <p><strong>LocalSameAsGlobal</strong>: Warnen, wenn eine lokale Variable den gleichen Namen wie eine globale Variable hat. Beachtet, dass diese Warnung nur f&uuml;r indirekt eingef&uuml;hrte lokale Variablen gilt, aber nicht f&uuml;r Funktionsparameter oder Variablen, die direkt deklariert wurden (z. B. <code>local x</code> oder <code>static y</code>). Das ist eine Ladezeit-Warnung, weil sie nur erzeugt wird, wenn das Script geladen wird.</p></td>
  </tr>
  <tr>
    <td width="15%" height="24">Warnungsmodus</td>
    <td width="85%">
      <p>Beliebiger unterer Wert. Wenn nicht vorhanden, dann standardm&auml;&szlig;ig <em>MsgBox</em>.</p>
      <p><strong>MsgBox</strong>: Ein Hinweisfenster mit der Warnung (beachtet, dass das Script normal fortgesetzt wird, wenn das Hinweisfenster geschlossen wird).</p>
      <p><strong>OutputDebug</strong>: Eine Beschreibung der Warnung wird zum Debugger (falls vorhanden) gesendet. F&uuml;r weitere Details, siehe <a href="OutputDebug.htm">OutputDebug</a>.</p>
      <p><strong>Off</strong>: Die angegebene(n) Warnung(en) werden deaktiviert.</p>
    </td>
  </tr>
</table>
<h3>Bemerkungen</h3>
	<p>Standardm&auml;&szlig;ig sind alle Warnungen aus.</p>
	<p>Warnungen k&ouml;nnen nicht w&auml;hrend der Laufzeit aktiviert oder deaktiviert werden. Die Einstellungen werden festgelegt, wenn ein Script geladen wird.  Daher ist die Position der Anweisung im Script bedeutungslos (und kann wie bei anderen Anweisungen nicht bedingt ausgef&uuml;hrt werden).</p>
	<p>Doch die Reihenfolge von mehreren #Warn-Anweisungen ist entscheidend: die unterste/letzte #Warn-Anweisung im Script bestimmt den aktuellen Modus.  So zum Beispiel haben die zwei unteren Anweisungen den kombinierten Effekt, alle Warnungen au&szlig;er UseEnv zu aktivieren:</p>
<pre>#Warn All
#Warn UseEnv, Off

EnvSet EnvVar, 1
x := EnvVar       <em>; Okay, da #NoEnv nicht verwendet wird.</em>
x := NotAnEnvVar  <em>; Warnung.</em>
</pre>
<h3>Verwandte Befehle</h3>
<p><a href="../Functions.htm#Locals">Lokale und globale Variablen</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">
#Warn All, Off                    <em>; Alle Warnungen deaktivieren.  Das ist der Standard-Status.</em>
#Warn                             <em>; Jeden Warnungstyp aktivieren und in einem Hinweisfenster anzeigen.</em>
#Warn UseUnsetLocal, OutputDebug  <em>; Warnen, wenn eine lokale Variable verwendet wird, bevor sie gesetzt wird; Warnungen zum OutputDebug senden.</em>
</pre>

</body>
</html>
