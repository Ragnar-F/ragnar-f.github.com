<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>#Warn</title>
<meta name="keywords" content="Befehl, Direktive, Fehler">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-28224374-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>
<body>
<div id="wrapper">
<div id="content">
<script src="../navbar/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(1);</script>


<h1>#Warn <span class="ver">[v1.0.95.00+]</span></h1>

<p>Aktiviert oder deaktiviert Warnungen f&uuml;r ausgew&auml;hlte Ladezeit- und Laufzeitzust&auml;nde, die Entwicklerfehler wie Schreibfehler oder fehlende "globale" Deklarationen kennzeichnen.</p>

<pre class="Syntax">#Warn [, Warnungstyp, Warnungsmodus]</pre>

<p>Das ist als Entwickler-Tool gedacht, um die Script-Entwicklung zu beschleunigen, indem solche Fehler einfach erkennbar gemacht werden.</p>

<p>Diese Funktion bezieht sich konzeptionell auf die Einstellung "Option Explicit" von Visual Basic und auf das Pragma "Strict" von Perl, wobei sie nur hinzugef&uuml;gte Warnungen unterst&uuml;tzt, jedoch keine &Auml;nderungen am Script im Voraus ben&ouml;tigt (z. B. direkte Deklarationen f&uuml;r alle Variablen).</p>

<h3>Parameter</h3>
<table class="info">
  <tr>
    <td width="15%" height="24">Warnungstyp</td>
    <td width="85%">
      <p>Beliebiger unterer Wert. Wenn nicht vorhanden, dann standardm&auml;&szlig;ig <i>All</i>.</p>
      <p><strong>All</strong>: Der angegebene <em>Warnungsmodus</em> gilt f&uuml;r alle unterst&uuml;tzten Warnungstypen.</p>
      <p><strong>UseUnsetLocal</strong> oder <strong>UseUnsetGlobal</strong>: Warnen, wenn eine Variable verwendet wird (d. h. ihr Wert wird gelesen), bevor ihr direkt ein Wert zugewiesen wird. Diese Warnungstypen sind f&uuml;r lokale und globale Variablen aufgeteilt. Grund: W&auml;hrend eine undefinierte lokale Variable h&ouml;chstwahrscheinlich ein Fehler vom Entwickler ist, &uuml;berpr&uuml;fen viele AutoHotkey-Scripts entwurfsgem&auml;&szlig; absichtlich eine undefinierte globale Variable. Daher macht es Sinn, diesen Warnungstyp f&uuml;r lokale Variable zu aktivieren und f&uuml;r globale Variablen zu deaktivieren. Das sind Laufzeit-Warnungen, weil sie jederzeit erzeugt werden k&ouml;nnen, w&auml;hrend das Script ausgef&uuml;hrt wird.</p>
      <p><strong>UseEnv</strong>: Warnen, wenn eine Umgebungsvariable automatisch anstelle einer leeren Script-Variablen verwendet wird. Das passiert manchmal, wenn der Name einer Umgebungsvariable unabsichtlich mit dem Namen einer Script-Variable &uuml;bereinstimmt, es sei denn, das Script verwendet <a href="_NoEnv.htm">#NoEnv</a> (empfohlen).  Das ist eine Laufzeit-Warnung, weil sie jederzeit erzeugt werden kann, w&auml;hrend das Script ausgef&uuml;hrt wird.</p>
      <p><strong>LocalSameAsGlobal</strong>: Warnen, wenn eine lokale Variable den gleichen Namen wie eine globale Variable hat. Beachtet, dass diese Warnung nur f&uuml;r indirekt eingef&uuml;hrte lokale Variablen gilt, aber nicht f&uuml;r Funktionsparameter oder Variablen, die direkt deklariert wurden (z. B. <code>local x</code> oder <code>static y</code>). Das ist eine Ladezeit-Warnung, weil sie nur erzeugt wird, wenn das Script geladen wird.</p></td>
  </tr>
  <tr>
    <td width="15%" height="24">Warnungsmodus</td>
    <td width="85%">
      <p>Beliebiger unterer Wert. Wenn nicht vorhanden, dann standardm&auml;&szlig;ig <em>MsgBox</em>.</p>
      <p><strong>MsgBox</strong>: Ein Hinweisfenster mit der Warnung (beachtet, dass das Script normal fortgesetzt wird, wenn das Hinweisfenster geschlossen wird).</p>
      <p><strong>StdOut</strong> <span class="ver">[v1.1.04+]</span>: Eine Warnungsbeschreibung mit Dateinamen und Zeilennummer wird zur Standardausgabe gesendet.  Dadurch k&ouml;nnen originelle Editoren wie SciTE die Warnungen abfangen, ohne dabei das Script zu unterbrechen - der Benutzer kann sp&auml;ter mithilfe des Ausgabebereichs des Editors zu jeder fehlerhaften Zeile springen.</p>
      <p><strong>OutputDebug</strong>: Eine Warnungsbeschreibung wird zum Debugger (falls vorhanden) gesendet. F&uuml;r weitere Details, siehe <a href="OutputDebug.htm">OutputDebug</a>.</p>
      <p><strong>Off</strong>: Alle angegebenen Warnungen werden deaktiviert.</p>
    </td>
  </tr>
</table>
<h3>Bemerkungen</h3>
        <p>Standardm&auml;&szlig;ig sind alle Warnungen deaktiviert.</p>
        <p>Warnungen k&ouml;nnen nicht w&auml;hrend der Laufzeit aktiviert oder deaktiviert werden. Die Einstellungen werden festgelegt, wenn ein Script geladen wird. Daher ist die Position der Direktive im Script bedeutungslos (und kann wie bei anderen Direktiven nicht bedingt ausgef&uuml;hrt werden).</p>
        <p>Jedoch ist die Reihenfolge bei mehreren #Warn-Direktiven entscheidend: die unterste/letzte #Warn-Direktive im Script bestimmt den aktuellen Modus. So zum Beispiel haben die zwei unteren Direktiven den kombinierten Effekt, alle Warnungen au&szlig;er UseEnv zu aktivieren:</p>
<pre>#Warn All
#Warn UseEnv, Off

EnvSet EnvVar, 1
x := EnvVar       <em>; Okay, da #NoEnv nicht verwendet wird.</em>
x := NotAnEnvVar  <em>; Warnung.</em>
</pre>
<h3>Verwandte Befehle</h3>
<p><a href="../Functions.htm#Locals">Lokale und globale Variablen</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">
#Warn All, Off                    <em>; Alle Warnungen deaktivieren. Das ist der Standard-Status.</em>
#Warn                             <em>; Jeden Warnungstyp aktivieren und in einem Hinweisfenster anzeigen.</em>
#Warn UseUnsetLocal, OutputDebug  <em>; Warnen, wenn eine lokale Variable verwendet wird, bevor sie gesetzt wird; Warnungen zum OutputDebug senden.</em>
</pre>
</div>
</div>
</body>
</html>