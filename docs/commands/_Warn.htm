<!DOCTYPE HTML>
<html>
<head>
<title>#Warn</title>
<meta name="keywords" content="Befehl, Direktive, Fehler">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>#Warn <span class="ver">[v1.0.95.00+]</span></h1>
      <p>Aktiviert oder deaktiviert Warnungen bei bestimmten Zuständen, die auf ein Fehler hinweisen, wie Schreibfehler oder fehlende "globale" Deklarationen.</p>
      <pre class="Syntax">#Warn [, Warnungstyp, Warnungsmodus]</pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td style="width: 15%;">Warnungstyp</td>
          <td style="width: 85%;"><p>Die zu aktivierende oder deaktivierende Art der Warnung. Ist dieser Parameter nicht vorhanden, gilt standardmäßig <i>All</i>.</p>
            <p><strong>UseUnsetLocal</strong> oder <strong>UseUnsetGlobal</strong>: Warnen, wenn eine Variable gelesen wird, ohne ihr vorher ein Wert zugewiesen oder mit <a href="VarSetCapacity.htm">VarSetCapacity</a> initialisiert zu haben. Falls die Variable dazu gedacht ist, leer zu sein, sollte ihr ein leerer String zugewiesen werden, um diese Warnung zu unterdrücken.</p>
            <p>Es gibt deshalb zwei verschiedene Warnungstypen für lokale und globale Variablen, weil häufig eine globale Variable verwendet wird, ohne sie vorher zu initialisieren, aufgrund ihrer persistenten und scriptweiten Art. Aus diesem Grund haben einige Script-Autoren den Wunsch, diese Art von Warnung für lokale Variablen zu aktivieren, aber für globale Variablen zu deaktivieren.</p>
            <pre>#Warn
<em>;y := ""  ; Das hier würde die Warnung unterdrücken.</em>
x := y    <em>; y enthält keinen Wert.</em></pre>
            <p><strong>UseEnv</strong>: Warnen, wenn automatisch eine Umgebungsvariable anstelle einer Script-Variable verwendet wird. Das passiert manchmal, wenn der Name einer Umgebungsvariable unabsichtlich mit einer Variable übereinstimmt, die vom Script verwendet wird. Diese Warnung tritt auf, wenn auf die Variable zugegriffen wird, aber nie, wenn das Script <a href="_NoEnv.htm">#NoEnv</a> aktiviert (aus mehreren Gründen zu empfehlen).</p>
            <pre>#Warn
<em>;#NoEnv             ; Fügt diese Zeile hinzu, falls "temp" nicht dazu gedacht ist, eine Umgebungsvariable zu sein.</em>
<em>;EnvGet temp, TEMP  ; Diese Zeile würde den Wert der Umgebungsvariable in die Script-Variable speichern.</em>
temp := ""          <em>; Trotz dieser Zeile hat temp scheinbar weiterhin einen Wert.</em>
MsgBox % temp       <em>; Diese Zeile greift auf die Umgebungsvariable namens "TEMP" zu.</em></pre>
            <p><strong>LocalSameAsGlobal</strong>: Bevor das Script ausgeführt wird, wird für jede <em>nicht deklarierte</em> lokale Variable eine Warnung angezeigt, die den gleichen Namen wie eine globale Variable hat. Das ist dazu gedacht, Fehler zu verhindern, die erzeugt werden, sobald der Benutzer vergisst, eine globale Variable innerhalb einer Funktion zu deklarieren, bevor auf ihr zugegriffen wird. Falls die Variable wirklich dazu gedacht ist, lokal zu sein, kann eine Deklaration wie <code>local x</code> oder <code>static y</code> verwendet werden, um die Warnung zu unterdrücken.</p>
            <pre>#Warn
g := 1
ShowG() {       <em>; Die Warnung wird angezeigt, auch dann, wenn die Funktion nie aufgerufen wird.</em>
    <em>;global g   ; &lt;-- Diese Zeile ist notwendig, damit die globale Variable zugreifbar ist.</em>
    MsgBox % g  <em>; Ohne Deklaration ist "g" eine leere lokale Variable.</em>
}</pre>
            <p><strong>All</strong>: Der angegebene <em>Warnungsmodus</em> gilt für alle unterstützten Warnungstypen.</p>
        </tr>
        <tr>
          <td style="width: 15%;">Warnungsmodus</td>
          <td style="width: 85%;"><p>Ein Wert, der kennzeichnet, wie Warnungen übergeben werden sollen. Ist dieser Parameter nicht vorhanden, gilt standardmäßig <em>MsgBox</em>.</p>
            <p><strong>MsgBox</strong>: Zeigt ein Hinweisfenster an, das die Warnung beschreibt. Beachte, dass das Script normal fortgesetzt wird, sobald dieses Fenster geschlossen wird.</p>
            <p><strong>StdOut</strong> <span class="ver">[v1.1.04+]</span>: Sendet eine Beschreibung der Warnung zur Standardausgabe (stdout), einschließlich Dateiname und Zeilennummer. Dadurch können originelle Editoren wie SciTE die Warnungen abfangen, ohne dabei das Script zu unterbrechen - der Benutzer kann später mithilfe des Ausgabebereichs des Editors zu jeder fehlerhaften Zeile springen.</p>
            <p><strong>OutputDebug</strong>: Sendet eine Beschreibung der Warnung zum Debugger (falls vorhanden). Für weitere Details, siehe <a href="OutputDebug.htm">OutputDebug</a>.</p>
            <p><strong>Off</strong>: Deaktiviert alle Warnungen des angegebenen <em>Warnungstyp</em>.</p></td>
        </tr>
      </table>
      <h3>Bemerkungen</h3>
      <p>Standardmäßig sind alle Warnungen deaktiviert.</p>
      <p>Warnungen können nicht während der Laufzeit aktiviert oder deaktiviert werden. Die Einstellungen werden festgelegt, wenn ein Script geladen wird. Daher ist die Position der Direktive im Script bedeutungslos (und kann wie bei anderen Direktiven nicht bedingt ausgeführt werden).</p>
      <p>Jedoch ist die Reihenfolge bei mehreren #Warn-Direktiven entscheidend: die unterste/letzte #Warn-Direktive im Script bestimmt den aktuellen Modus. So zum Beispiel haben die zwei unteren Direktiven den kombinierten Effekt, alle Warnungen außer UseEnv zu aktivieren:</p>
      <pre>#Warn All
#Warn UseEnv, Off

EnvSet EnvVar, 1
x := EnvVar       <em>; Okay, da #NoEnv nicht verwendet wird.</em>
x := NotAnEnvVar  <em>; Warnung.</em>
</pre>
      <h3>Verwandte Befehle</h3>
      <p><a href="../Functions.htm#Locals">Lokale und globale Variablen</a></p>
      <h3>Beispiel</h3>
      <pre class="NoIndent">
#Warn All, Off                    <em>; Alle Warnungen deaktivieren. Das ist der Standard-Status.</em>
#Warn                             <em>; Jeder Warnungstyp aktivieren und in einem Hinweisfenster anzeigen.</em>
#Warn UseUnsetLocal, OutputDebug  <em>; Warnen, wenn eine lokale Variable verwendet wird, bevor sie gesetzt wird; Warnungen zum OutputDebug senden.</em>
</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>