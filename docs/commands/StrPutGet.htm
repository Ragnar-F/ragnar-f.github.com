<!DOCTYPE HTML>
<html>
<head>
<title>StrPut / StrGet</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>StrPut() / StrGet() <span class="ver">[AHK_L 46+]</span></h1>

<p>Kopiert einen String in oder aus einem Speicherbereich unter Beachtung des angegebenen Zeichensatzes.</p>

<pre class="Syntax">StrPut(String [, Codierung = <i>Keine</i> ] )
StrPut(String, Adresse [, Länge] [, Codierung = <i>Keine</i> ] )
StrGet(Adresse [, Länge] [, Codierung = <i>Keine</i> ] )</pre>
<h3>Parameter</h3>
<dl>

  <dt>String</dt>
  <dd><p>Ein beliebiger String. Zahlen werden auch akzeptiert.</p></dd>

  <dt>Adresse</dt>
  <dd><p>Die Adresse des Speicherbereichs, wo der angegeben String gelesen/geschrieben werden soll.</p></dd>

  <dt>Länge</dt>
  <dd><p>Die maximale Anzahl der zu lesenden/schreibenden Zeichen, einschließlich der Null-Terminator, falls notwendig. Siehe Rückgabewert.</p></dd>

  <dt>Codierung</dt>
  <dd><p>Die Quellcodierung bei StrGet oder die Zielcodierung bei StrPut, zum Beispiel: "UTF-8", "UTF-16" oder "CP936". Sind <em>Adresse</em> und <em>Länge</em> nicht angegeben, müssen numerische Kennungen mit "CP" vorangestellt werden. Ein leerer String oder "CP0" kennzeichnet den Standard-ANSI-Zeichensatz des Systems.</p></dd>

</dl>

<h3>Rückgabewert</h3>
<p>Bei beiden Funktion wird ein leerer String zurückgegeben, sobald einer der Parameter ungültig ist.</p>
<p>Wenn StrPut erfolgreich ausgeführt wird, gibt sie die Anzahl der geschriebenen Zeichen zurück. Wenn keine <i>Adresse</i> angegeben ist, wird StrPut die erforderliche Puffergröße in Zeichen zurückgeben. Bei Misserfolg wird StrPut eine 0 zurückgeben. Wenn <em>Länge</em> kleiner als die Länge des Quellstrings ist, wird die Funktion fehlschlagen und eine 0 zurückgeben. Wenn <em>Länge</em> gleich die Länge des Quellstrings ist, wird der String nicht null-terminiert; ansonsten beinhaltet die zurückgegebene Anzahl den Null-Terminator.</p>
<p>StrGet wird den angeforderten String zurückgeben, nach Durchführen notwendiger Umwandlungen.</p>

<h3>Bemerkungen</h3>
<p>Beachte, dass der <i>String</i>-Parameter von StrPut und der Rückgabewert von StrGet immer in der <a href="../Compat.htm#Format">nativen Codierung</a> der aktuell ausführbaren Datei sind, wohingegen Codierung die <i>Codierung</i> des Strings spezifiziert, der auf die angegebene <i>Adresse</i> geschrieben oder von dort gelesen wurde. Ist keine <em>Codierung</em> angegeben, wird der String gemessen oder kopiert, ohne dass eine Umwandlung stattfindet.</p>
<p>Wenn eine Umwandlung zwischen den Zeichensätzen notwendig ist, könnte die erforderliche Puffergröße von der Größe des <em>Quellstrings</em> abweichen.</p>
<p>Scripts, die kompatibel mit AutoHotkey Basic sein müssen, können trotzdem StrPut und StrGet nutzen, wenn <a href="http://www.autohotkey.com/forum/topic59738.html">die entsprechenden Script-Dateien</a> in eine <a href="../Functions.htm#lib">Funktions-Library</a> installiert werden. Solche Scripts können im <a href="http://www.autohotkey.com/forum/">AutoHotkey Community Forum</a> gefunden werden.</p>

<h3>Siehe auch</h3>
<p><a href="../Compat.htm">Script-Kompatibilität</a>, <a href="FileEncoding.htm">FileEncoding</a>, <a href="VarSetCapacity.htm">VarSetCapacity()</a></p>

<h3>Beispiele</h3>
<p>Es ist möglich, <em>Länge</em> oder <em>Codierung</em> direkt nach <em>Adresse</em> anzugeben, aber in diesem Fall darf <em>Codierung</em> nicht numerisch sein:</p>
<pre class="NoIndent">StrA := StrGet(AdresseA, "cp0")     <em>; OK</em>
StrA := StrGet(AdresseA, Länge, 0)  <em>; OK</em>
StrA := StrGet(AdresseA, 0)         <em>; Fehler</em></pre>

<p>StrPut kann einmal aufgerufen werden, um die erforderliche Puffergröße für einen String in einer bestimmten Codierung zu berechnen, und danach nochmal, um den String zu codieren und ihn in den Puffer zu schreiben. Wenn du öfters Variablen mit StrPut verwendest, solltest du folgende Funktion in deine <a href="../Functions.htm#lib">Library</a> aufnehmen:</p>
<pre class="NoIndent">StrPutVar(String, ByRef Var, Codierung)
{
    <em>; Kapazität gewährleisten.</em>
    VarSetCapacity(Var, StrPut(String, Codierung)
        <em>; StrPut gibt die Zeichenanzahl zurück, aber VarSetCapacity benötigt Bytes.</em>
        * ((Codierung = "utf-16" || Codierung = "cp1200") ? 2 : 1) )
    <em>; Kopiert oder wandelt den String um.</em>
    return StrPut(String, &amp;Var, Codierung)
}</pre>

</body>
</html>
