<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>StrPut / StrGet</title>
<meta name="keywords" content="Befehl, Funktion, String, Interoperabilit&auml;t">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-28224374-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>
<body>
<div id="wrapper">
<script src="../navbar/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(1);</script>


<h1>StrPut() / StrGet() <span class="ver">[AHK_L 46+]</span></h1>

<p>Kopiert einen String zu oder von einer Speicheradresse und &auml;ndert optional den Zeichensatz.</p>

<pre class="Syntax">StrPut(String [, Kodierung = <i>Keine</i> ] )
StrPut(String, Adresse [, L&auml;nge] [, Kodierung = <i>Keine</i> ] )
StrGet(Adresse [, L&auml;nge] [, Kodierung= <i>Keine</i> ] )</pre>
<h3>Parameter</h3>
<table class="info">
  <tr><td width="15%">String</td><td width="85%">Ein beliebiger String. Zahlen werden auch akzeptiert.</td></tr>
  <tr><td>Adresse</td><td>Die Adresse, an der der String geschrieben oder gelesen wird.</td></tr>
  <tr><td>L&auml;nge</td><td>Die maximale Anzahl der zu lesenden/schreibenden Zeichen, einschlie&szlig;lich der Null-Terminator je nach Bedarf.  Siehe R&uuml;ckgabewert.</td></tr>
  <tr><td>Kodierung</td><td>Die Quellkodierung f&uuml;r StrGet oder Zielkodierung f&uuml;r StrPut, zum Beispiel: "UTF-8", "UTF-16" oder "CP936".  Wenn die <em>Adresse</em> und <em>L&auml;nge</em> nicht angegeben ist, dann muss eine numerische Kennung mit "CP" vorangestellt werden.  Verwendet einen leeren String oder "CP0", um den Standard-ANSI-Zeichensatz des Systems zu benutzen.</td></tr>
</table>

<h3>R&uuml;ckgabewert</h3>
<p>Bei ung&uuml;ltigen Parametern wird ein leerer String zur&uuml;ckgegeben.</p>
<p>StrPut gibt die Anzahl der geschriebenen Zeichen, ohne <i>Adresse</i> die notwendige Puffergr&ouml;&szlig;e in Zeichen oder bei Misserfolg eine 0 zur&uuml;ck.  Wenn die <em>L&auml;nge</em> kleiner als die L&auml;nge des Quellstrings ist, dann schl&auml;gt die Funktion fehl und gibt eine 0 zur&uuml;ck.  Wenn die <em>L&auml;nge</em> identisch mit der L&auml;nge des Quellstrings ist, dann ist der String nicht null-terminiert. Ansonsten beinhaltet die zur&uuml;ckgegebene Anzahl ein Null-Terminator.</p>
<p>StrGet gibt den angeforderten String nach einer Umwandlung zur&uuml;ck.</p>

<h3>Bemerkungen</h3>
<p>Beachtet, dass der <i>String</i>-Parameter von StrPut und der R&uuml;ckgabewert von StrGet immer in der <a href="../Compat.htm#Format">nativen Kodierung</a> des Scripts sind, w&auml;hrend <i>Kodierung</i> die Kodierung des Strings festgelegt, der von oder zur <i>Adresse</i> gelesen bzw. geschrieben wird. Wenn keine <em>Kodierung</em> angegeben ist, dann wird der String einfach ohne stattfindende Umwandlung angepasst oder kopiert.</p>
<p>Wenn die Umwandlung zwischen den Zeichens&auml;tzen notwendig ist, dann unterscheidet sich die erforderliche Puffergr&ouml;&szlig;e m&ouml;glicherweise von der Gr&ouml;&szlig;e des <em>Quellstrings</em>.</p>
<p>Scripts, die notwendigerweise kompatibel mit AutoHotkey Basic sein m&uuml;ssen, k&ouml;nnen StrPut und StrGet weiterhin verwenden, wenn die <a href="http://www.autohotkey.com/forum/topic59738.html">entsprechenden Script-Dateien</a> in eine <a href="../Functions.htm#lib">Funktionsbibliothek</a> installiert werden. Diese Scripts k&ouml;nnen im <a href="http://www.autohotkey.com/forum/">AutoHotkey Community Forum</a> gefunden werden.</p>

<h3>Verwandte Befehle</h3>
<p><a href="../Compat.htm">Script-Kompatibilit&auml;t</a>, <a href="FileEncoding.htm">FileEncoding</a>, <a href="VarSetCapacity.htm">VarSetCapacity()</a></p>

<h3>Beispiele</h3>
<p>Entweder <em>L&auml;nge</em> oder die <em>Kodierung</em> kann direkt nach der <em>Adresse</em> angegeben werden, dabei darf die <em>Kodierung</em> jedoch nicht numerisch sein:</p>
<pre class="NoIndent">StrA := StrGet(AdresseA, "cp0")     <em>; OK</em>
StrA := StrGet(AdresseA, L&auml;nge, 0) <em>; OK</em>
StrA := StrGet(AdresseA, 0)         <em>; Fehler</em></pre>

<p>StrPut kann einmal aufgerufen werden, um die erforderliche Puffergr&ouml;&szlig;e f&uuml;r einen String in bestimmter Kodierung zu berechnen und dann nochmal, um den String zu kodieren und ihn in den Puffer zu schreiben.  Wenn die Variablen h&auml;ufig mit StrPut verwendet werden, dann kann diese Funktion in die <a href="../Functions.htm#lib">Bibliothek</a> aufgenommen werden:</p>
<pre class="NoIndent">StrPutVar(String, ByRef Variable, Kodierung)
{
    <em>; Kapazit&auml;t sicherstellen.</em>
    VarSetCapacity(Variable, StrPut(String, Kodierung)
        <em>; StrPut gibt die Zeichenanzahl zur&uuml;ck, aber VarSetCapacity ben&ouml;tigt Bytes.</em>
        * ((Kodierung = "utf-16" || Kodierung = "cp1200") ? 2 : 1) )
    <em>; Kopiert oder wandelt den String um.</em>
    Return StrPut(String, &Variable, Kodierung)
}</pre>
</div>
</body>
</html>