<!DOCTYPE HTML>
<html>
<head>
<title>StrPut / StrGet</title>
<meta name="keywords" content="Befehl, Funktion, String, Interoperabilit&auml;t">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <article>
      <h1>StrPut() / StrGet() <span class="ver">[AHK_L 46+]</span></h1>
      <p>Kopiert einen String in oder von einer Speicheradresse und &auml;ndert optional dessen Zeichensatz.</p>
      <pre class="Syntax">StrPut(String [, Codierung = <i>Keine</i> ] )
StrPut(String, Adresse [, L&auml;nge] [, Codierung = <i>Keine</i> ] )
StrGet(Adresse [, L&auml;nge] [, Codierung = <i>Keine</i> ] )</pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td style="width: 15%;">String</td>
          <td style="width: 85%;">Ein beliebiger String. Zahlen werden auch akzeptiert.</td>
        </tr>
        <tr>
          <td>Adresse</td>
          <td>Die Adresse, auf die der String geschrieben oder gelesen wird.</td>
        </tr>
        <tr>
          <td>L&auml;nge</td>
          <td>Die maximale Anzahl der zu lesenden/schreibenden Zeichen, einschlie&szlig;lich der Null-Terminator, falls notwendig. Siehe R&uuml;ckgabewert.</td>
        </tr>
        <tr>
          <td>Codierung</td>
          <td>Die Quellcodierung bei StrGet oder die Zielcodierung bei StrPut, zum Beispiel: "UTF-8", "UTF-16" oder "CP936". Falls <em>Adresse</em> und <em>L&auml;nge</em> nicht angegeben sind, m&uuml;ssen numerische Kennungen mit "CP" vorangestellt werden. Ein leerer String oder "CP0" kennzeichnet den Standard-ANSI-Zeichensatz des Systems.</td>
        </tr>
      </table>
      <h3>R&uuml;ckgabewert</h3>
      <p>Bei beiden Funktionen bewirken ung&uuml;ltige Parameter, dass ein leerer String zur&uuml;ckgegeben wird.</p>
      <p>StrPut wird entweder die Anzahl der geschriebenen Zeichen, bei nicht angegebener <i>Adresse</i> die erforderliche Puffergr&ouml;&szlig;e in Zeichen oder bei Misserfolg eine 0 zur&uuml;ckgeben.  Wenn <em>L&auml;nge</em> k&uuml;rzer als der Quellstring ist, wird die Funktion fehlschlagen und eine 0 zur&uuml;ckgeben.  Wenn <em>L&auml;nge</em> genauso lang wie der Quellstring ist, ist der String nicht null-terminiert; ansonsten schlie&szlig;t die zur&uuml;ckgegebene Anzahl den Null-Terminator mit ein.</p>
      <p>StrGet gibt den angeforderten String nach einer Umwandlung zur&uuml;ck.</p>
      <h3>Bemerkungen</h3>
      <p>Beachte, dass der <i>String</i>-Parameter von StrPut und der R&uuml;ckgabewert von StrGet immer in der <a href="../Compat.htm#Format">nativen Codierung</a> des Scripts sind, w&auml;hrend <i>Codierung</i> die Codierung des Strings spezifiziert, der von oder in <i>Adresse</i> gelesen bzw. geschrieben wird. Ist keine <em>Codierung</em> angegeben, wird der String gemessen oder kopiert, ohne dass eine Umwandlung stattfindet.</p>
      <p>Wenn eine Umwandlung zwischen den Zeichens&auml;tzen notwendig ist, k&ouml;nnte sich die erforderliche Puffergr&ouml;&szlig;e von der Gr&ouml;&szlig;e des <em>Quellstrings</em> unterscheiden.</p>
      <p>Scripts, die kompatibel mit AutoHotkey Basic sein m&uuml;ssen, k&ouml;nnen StrPut und StrGet weiterhin verwenden, aber mit der Voraussetzung, dass <a href="http://www.autohotkey.com/forum/topic59738.html">die entsprechenden Script-Dateien</a> in eine <a href="../Functions.htm#lib">Funktionsbibliothek</a> installiert sind. Solche Scripts k&ouml;nnen im <a href="http://www.autohotkey.com/forum/">AutoHotkey Community Forum</a> gefunden werden.</p>
      <h3>Verwandte Befehle</h3>
      <p><a href="../Compat.htm">Script-Kompatibilit&auml;t</a>, <a href="FileEncoding.htm">FileEncoding</a>, <a href="VarSetCapacity.htm">VarSetCapacity()</a></p>
      <h3>Beispiele</h3>
      <p>Nach <em>Adresse</em> kann entweder <em>L&auml;nge</em> oder <em>Codierung</em> angegeben werden, aber in solchen F&auml;llen darf die <em>Codierung</em> nicht numerisch sein:</p>
      <pre class="NoIndent">StrA := StrGet(AdresseA, "cp0")     <em>; OK</em>
StrA := StrGet(AdresseA, L&auml;nge, 0)  <em>; OK</em>
StrA := StrGet(AdresseA, 0)         <em>; Fehler</em></pre>
      <p>StrPut kann zum einen aufgerufen werden, um die erforderliche Puffergr&ouml;&szlig;e bei einem String in bestimmter Codierung zu berechnen und zum anderen, um den String zu codieren und ihn in den Puffer zu schreiben. Wenn du &ouml;fters Variablen mit StrPut verwendest, solltest du folgende Funktion in deine <a href="../Functions.htm#lib">Bibliothek</a> aufnehmen:</p>
      <pre class="NoIndent">StrPutVar(String, ByRef Var, Codierung)
{
    <em>; Kapazit&auml;t gew&auml;hrleisten.</em>
    VarSetCapacity(Var, StrPut(String, Codierung)
        <em>; StrPut gibt die Zeichenanzahl zur&uuml;ck, aber VarSetCapacity ben&ouml;tigt Bytes.</em>
        * ((Codierung = "utf-16" || Codierung = "cp1200") ? 2 : 1) )
    <em>; Kopiert oder wandelt den String um.</em>
    Return StrPut(String, &amp;Var, Codierung)
}</pre>
    </article>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>