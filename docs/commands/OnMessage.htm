<!DOCTYPE HTML>
<html>
<head>
<title>OnMessage</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>OnMessage()</h1>

<p>Bestimmt eine <a href="../Functions.htm">Funktion</a>, die automatisch aufgerufen werden soll, wenn das Script die angegebene Nachricht empfängt.</p>

<pre class="Syntax">OnMessage(NachrNummer [, "Funktionsname", MaxThreads])</pre>
<h3>Parameter</h3>
<dl>

  <dt>NachrNummer</dt>
  <dd><p>Die Nummer der Nachricht zwischen 0 und 4294967295 (0xFFFFFFFF), die überwacht oder abgefragt werden soll. Sofern das Überwachen einer <a href="../misc/SendMessageList.htm">Systemnachricht</a> nicht erforderlich ist (also eine unter 0x400), sollte man am besten eine Nummer verwenden, die größer ist als 4096 (0x1000). Dies verringert die Chance, dass interne Nachrichten von AutoHotkey gestört werden.</p></dd>

  <dt>Funktionsname</dt>
  <dd><p>Ein <a href="../Functions.htm">Funktion</a>sname, der in Anführungszeichen gesetzt werden muss, wenn er ein literaler String ist. Diese Funktion wird automatisch aufgerufen, wenn das Script die <em>NachrNummer</em> empfängt. Lass diesen Parameter weg, um den Namen der Funktion abzurufen, die gerade <em>NachrNummer</em> überwacht (leer, wenn es keine gibt). Verwende einen leeren String ("") oder eine leere Variable, um das Überwachen der <em>NachrNummer</em> auszuschalten.</p></dd>

  <dt>MaxThreads<br>
    <span class="ver">[v1.0.47+]</span></dt>
  <dd><p><a name="MaxThreads"></a>Normalerweise lässt man diesen Parameter (Integer) weg, um die überwachende Funktion jeweils auf einen einzigen <a href="../misc/Threads.htm">Thread</a> zu begrenzen. Dies ist üblicherweise das Beste, weil das Script sonst Nachrichten in chronologisch falscher Reihenfolge abarbeiten würde, wann immer die überwachende Funktion sich selbst unterbricht. Demzufolge kann <em>Critical</em> als Alternative zu <em>MaxThreads</em> verwendet werden, wie es <a href="#Critical">weiter unten</a> beschrieben wird.</p></dd>

</dl>

<h3>Rückgabewerte</h3>
<p>Fehlt <em>Funktionsname</em>, wird OnMessage den Namen der Funktion zurückgeben, die gerade <em>NachrNummer</em> überwacht (leer, wenn es keine gibt).</p>
<p>Wenn <em>Funktionsname</em> explizit leer ist (also ""), wird OnMessage den Namen der Funktion zurückgeben, die gerade <em>NachrNummer</em> überwacht (leer, wenn es keine gibt), und dann die Überwachung von <em>NachrNummer</em> deaktivieren.</p>
<p>Wenn <em>Funktionsname</em> angegeben ist: Sollte <em>NachrNummer</em> bereits überwacht werden, wird OnMessage den Namen dieser Funktion zurückgeben und die neue Funktion in Kraft setzen. Ansonsten wird OnMessage den <em>Funktionsname</em>n die <em>NachrNummer</em> überwachen lassen und dann den gleichen <em>Funktionsname</em>n zurückgeben. In jedem Fall wird ein leerer Wert bei einem Fehler zurückgegeben. Fehler treten auf, wenn <em>Funktionsname</em>: 1) nicht existiert (weil zum Beispiel die Anführungszeichen bei <em>Funktionsname</em> fehlen); 2) mehr als vier Parameter akzeptiert; oder 3) in v1.0.48.05 oder älter <a href="../Functions.htm#ByRef">ByRef</a>- oder <a href="../Functions.htm#optional">optionale</a> Parameter hat. OnMessage wird auch fehlschlagen, wenn bereits 500 Nachrichten überwacht werden.</p>

<h3>Die Parameter der Funktion</h3>
<p>Eine <a href="../Functions.htm">Funktion</a>, die in OnMessage zum Überwachen von einer oder mehreren Nachrichten angegeben wurde, akzeptiert bis zu vier Parameter:</p>
<pre>MeineNachrichtenüberwachung(wParam, lParam, msg, hwnd)
{
    ... Funktionsbereich ...
}</pre>
<p>Zwar können die Parameter einen beliebigen Namen haben, allerdings müssen sie in einer bestimmten Reihenfolge zugewiesen werden:</p>
<p>Parameter #1: WPARAM-Wert der Nachricht.<br>
Parameter #2: LPARAM-Wert der Nachricht.<br>
Parameter #3: Nachrichtennummer, die dort gebraucht wird, wo eine Funktion mehr als eine Nachricht überwacht.<br>
Parameter #4: HWND (eindeutige ID) des Fensters oder Steuerelements, zu dem die Nachricht gesendet wurde. Das HWND kann in Verbindung mit <a href="../misc/WinTitle.htm#ahk_id">ahk_id</a> verwendet werden.</p>
<p>WPARAM und LPARAM sind vorzeichenlose 32-Bit-Integer (von 0 bis 2<sup>32</sup>-1) oder vorzeichenbehaftete 64-Bit-Integer (von -2<sup>63</sup> bis 2<sup>63</sup>-1), abhängig davon, ob die script-ausführende EXE-Datei 32- oder 64-Bit ist. Wenn bei einem 32-Bit-Script ein eingehender Parameter als vorzeichenbehafteter Integer vorgesehen ist, können negative Zahlen zum Beispiel wie folgt offenbart werden:</p>
<pre>if (A_PtrSize = 4 &amp;&amp; wParam &gt; 0x7FFFFFFF)  <em>; Das Überprüfen von <a href="../Variables.htm#PtrSize">A_PtrSize</a> stellt sicher, dass das Script 32-Bit ist.</em>
    wParam := -(~wParam) - 1</pre>
<p>Du kannst eine oder mehrere Parameter vom Ende der Liste weglassen, wenn du die entsprechende Information nicht benötigst. Zum Beispiel würde eine Funktion, definiert als <code>MeineNachrichtenüberwachung(wParam, lParam)</code>, nur die ersten zwei Parameter empfangen, und eine, definiert als <code>MeineNachrichtenüberwachung()</code>, gar keine von  ihnen.</p>

<h3>Weitere verfügbare Informationen für die Funktion</h3>
<p>Neben den oben genannten Parametern kann die Funktion auch auf die Werte der folgenden integrierten Variablen zurückgreifen:</p>
<ul>
  <li><a href="../Variables.htm#Gui">A_Gui</a>: Wenn die Nachricht zu einem GUI-Fenster oder -Steuerelement gesendet wurde, wird A_Gui die <a href="Gui.htm#MultiWin">Nummer des GUI-Fensters</a> sein (dieses Fenster ist auch das <a href="Gui.htm#DefaultWin">Standard-GUI-Fenster</a> der Funktion).</li>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a>: Wenn die Nachricht zu einem GUI-Steuerelement gesendet wurde, wird A_GuiControl den Variablennamen des Steuerelements oder einen anderen Wert, wie in <a href="../Variables.htm#GuiControl">A_GuiControl</a> beschrieben, enthalten. Einige Steuerelemente können bestimmte Nachrichtentypen nie empfangen. Klickt der Benutzer beispielsweise auf ein <a href="GuiControls.htm#Text">Text-Steuerelement</a>, würde das Betriebssystem die WM_LBUTTONDOWN-Nachricht nicht zum Steuerelement, sondern zum übergeordneten Fenster senden; demzufolge ist A_GuiControl leer.</li>
  <li><a href="../Variables.htm#GuiX">A_GuiX</a> und <a href="../Variables.htm#GuiX">A_GuiY</a>: Beide enthalten -2147483648, wenn die eingehende Nachricht via <a href="PostMessage.htm">SendMessage</a> gesendet wurde. Wenn sie via <a href="PostMessage.htm">PostMessage</a> gesendet wurde, enthalten beide Variablen die Koordinaten des Mauszeigers (relativ zum Bildschirm), die während des Sendens gegolten haben.</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a>: Enthält 0, wenn die eingehende Nachricht via SendMessage gesendet wurde. Wenn sie via PostMessage gesendet wurde, enthält die Variable die <a href="../Variables.htm#TickCount">Tick-Count-Zeit</a>, die während des Sendens gegolten hat.</li>
</ul>
<p>Das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> einer überwachenden Funktion ist zu Beginn das übergeordnete Fenster, zu dem die Nachricht gesendet wurde (selbst wenn sie zu einem Steuerelement gesendet wurde). Ist das Fenster versteckt, aber kein GUI-Fenster (z. B. das Hauptfenster des Scripts), muss zuvor <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> aktiviert werden. Zum Beispiel:</p>
<pre>DetectHiddenWindows On
NachrÜbergeordFenster := WinExist()  <em>; Dies speichert die eindeutige ID des Fensters, zu dem die Nachricht gesendet wurde.</em></pre>

<h3>Was die Funktion per <em>Return</em> zurückgeben sollte</h3>
<p>Verwendet eine überwachende Funktion <a href="Return.htm">Return</a> ohne Parameter oder mit einem leeren Wert wie "" (oder verwendet sie überhaupt kein Return), wird die eingehende Nachricht beim Erreichen des Funktionsendes normal fortgesetzt. Das gleiche passiert, wenn man das Ende der Funktion via <a href="Exit.htm">Exit</a> erzwingt oder einen Laufzeitfehler verursacht (der beispielsweise durch <a href="Run.htm">Ausführen</a> einer nicht-existierenden Datei ausgelöst werden kann). Vewendet man als Rückgabewert hingegen einen Integer, wird dieser Wert sofort als Antwort gesendet; das heißt, dass das Programm die Nachricht nicht weiter fortsetzen wird. Zum Beispiel könnte eine Funktion, die WM_LBUTTONDOWN (0x201) überwacht, einen Integer zurückgeben, um das Zielfenster daran zu hindern, benachrichtigt zu werden, dass ein Mausklick erfolgt ist. In vielen Fällen (z. B. als eine Nachricht, empfangen via <a href="PostMessage.htm">PostMessage</a>) ist es egal, welcher Integer zurückgegeben wird; aber im Zweifelsfall ist eine 0 am sichersten.</p>
<p>Der Bereich von gültigen Rückgabewerten ist abhängig davon, ob die script-ausführende EXE-Datei 32- oder 64-Bit ist. Bei einem 32-Bit-Script (<code><a href="../Variables.htm#PtrSize">A_PtrSize</a> = 4</code>) müssen die Rückgabewerte in einem Bereich von -2<sup>31</sup> und 2<sup>32</sup>-1 sein, und bei einem 64-Bit-Script  (<code><a href="../Variables.htm#PtrSize">A_PtrSize</a> = 8</code>) in einem Bereich von -2<sup>63</sup> und 2<sup>63</sup>-1.</p>

<h3 id="Remarks">Allgemeine Bemerkungen</h3>
<p>Im Gegensatz zu einem normalen Funktionsaufruf wird die überwachende Funktion, wenn sie eine neue Nachricht empfängt, als neuer <a href="../misc/Threads.htm">Thread</a> aufgerufen. Aus diesem Grund beginnt die Funktion mit den Standardeinstellungen bei Befehlen wie <a href="SendMode.htm">SendMode</a> und <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a>. Diese Standardeinstellungen können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<p>Nachrichten, die via SendMessage (statt PostMessage) zu einem Steuerelement gesendet wurden, werden nicht überwacht, weil das Betriebssystem diese Nachrichten direkt auf das Steuerelement überträgt, ohne dass jemand etwas mitbekommt. Dies ist selten ein Problem für system-generierte Nachrichten, weil die meisten von denen via PostMessage gesendet werden.</p>
<p>Jedes Script, das OnMessage irgendwo aufruft, ist automatisch <a href="_Persistent.htm">persistent</a>. Außerdem darf es standardmäßig nur einmal vorkommen, sofern man das nicht mit <a href="_SingleInstance.htm">#SingleInstance</a> überschreibt.</p>
<p><a name="Critical"></a>Kommt eine Nachricht an, während die Funktion noch läuft, wird die Funktion nicht erneut aufgerufen (außer wenn <a href="#MaxThreads">MaxThreads</a> größer als 1 ist); stattdessen wird die Nachricht so behandelt, als wurde sie nicht überwacht. Wenn dies nicht erwünscht ist, muss man <a href="Critical.htm">Critical</a>  in der ersten Zeile der Funktion verwenden, um eine Nachricht größer gleich 0x312 zwischenspeichern zu können. Alternativ könnte <a href="Thread.htm">Thread Interrupt</a> das gleiche bewirken, sofern die Funktion genug Zeit zum Beenden hat. Eine Nachricht kleiner als 0x312 kann hingegen nicht via Critical oder "Thread Interrupt" zwischengespeichert werden (seit v1.0.46 kann Critical allerdings verwendet werden, um die Nachrichten <a href="Critical.htm#Interval">seltener</a> überprüfen zu lassen, so dass die Funktion mehr Zeit zum Beenden hat). Um zu garantieren, dass solche Nachrichten nicht verloren gehen, muss die Funktion innerhalb von 6 Millisekunden zum Ende kommen (dieses Limit kann mit <a href="Critical.htm#Interval"><em>Critical 30</em></a> erhöht werden). Eine Möglichkeit, dies zu tun, ist es, einen zukünftigen Thread in die Warteschlange zu setzen, indem man eine überwachte Nachrichtennummer größer als 0x312 via <a href="PostMessage.htm">PostMessage</a> sendet. Die Funktion dieser Nachricht sollte <a href="Critical.htm">Critical</a> in der ersten Zeile verwenden, um sicherzustellen, dass ihre Nachrichten zwischengespeichert werden.</p>
<p>Kommt eine überwachte Nachricht kleiner als 0x312 an, während das Script absolut unterbrechungsfrei ist - z. B. während ein <a href="Menu.htm">Menü</a> angezeigt wird, <a href="SetKeyDelay.htm">KeyDelay</a>/<a href="SetMouseDelay.htm">MouseDelay</a> im Gange ist oder die Zwischenablage <a href="_ClipboardTimeout.htm">offen</a> ist - wird die Funktion der Nachricht nicht aufgerufen und die Nachricht so behandelt, als wurde sie nicht überwacht. Im Gegensatz dazu wird eine überwachte Nachricht größer gleich 0x312 während diesen unterbrechungsfreien Perioden zwischengespeichert; das heißt, dass ihre Funktion aufgerufen wird, wenn das Script wieder unterbrochen werden kann.</p>
<p>Kommt eine überwachte Nachricht kleiner als 0x312 an, während das Script aufgrund von <a href="Thread.htm">Thread Interrupt</a> oder <a href="Critical.htm">Critical</a> unterbrechungsfrei ist, wird der aktuelle Thread unterbrochen, so dass die Funktion aufgerufen werden kann. Im Gegensatz dazu wird eine überwachte Nachricht größer gleich 0x312 zwischengespeichert, bis der Thread endet oder wieder unterbrochen werden kann.</p>
<p>Die <a href="../misc/Threads.htm">Priorität</a> von OnMessage-Threads ist immer 0. Demzufolge werden keine Nachrichten überwacht oder zwischengespeichert, wenn der aktuelle Thread eine Priorität höher als 0 hat.</p>
<p>Sei vorsichtig, wenn du Systemnachrichten (solche unter 0x400) überwachst. Kommt eine überwachende Funktion beispielsweise nicht schnell genug zum Ende, kann die Antwort auf die Nachricht länger dauern als vom System erwartet, was zu Nebeneffekten führen könnte. Unerwünschtes Verhalten kann auch auftreten, wenn eine überwachende Funktion die Nachricht durch Zurückgeben eines Integers nicht weiter fortsetzen lässt, während das System etwas anderes erwartet.</p>
<p>Zeigt das Script einen Dialogfenster wie <a href="MsgBox.htm">MsgBox</a> an, werden Nachrichten, die via PostMessage zu einem Steuerelement gesendet werden, nicht überwacht. Zeigt das Script beispielsweise eine MsgBox an und klickt der Benutzer innerhalb eines GUI-Fensters auf einen Button, wird die WM_LBUTTONDOWN-Nachricht direkt zum Button gesendet, ohne dass die überwachende Funktion aufgerufen wird.</p>
<p>Zwar kann ein externes Programm direkt via PostThreadMessage() oder anderen API-Funktionen Nachrichten zu einem Script-Thread senden, allerdings könnten dabei Nachrichten verloren gehen, wenn das Script einen Dialogfenster wie <a href="MsgBox.htm">MsgBox</a> anzeigt. Stattdessen ist es besser, Nachrichten zum Hauptfenster des Scripts oder zu einem seiner GUI-Fenster zu senden.</p>
<h3>Siehe auch</h3>
<p><a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="OnExit.htm">OnExit</a>, <a href="../misc/Clipboard.htm#OnClipboardChange">OnClipboardChange</a>, <a href="PostMessage.htm">Post/SendMessage</a>, <a href="../Functions.htm">Funktionen</a>, <a href="../misc/SendMessageList.htm">Liste mit Fensternachrichten</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Critical.htm">Critical</a>, <a href="DllCall.htm">DllCall()</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Beispiel: Das folgende Script zeigt, wie Mausklicks innerhalb eines GUI-Fensters überwacht werden können.
; Verwandtes Thema: <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a></em>

Gui, Add, Text,, Klicken Sie irgendwo auf das Fenster.
Gui, Add, Edit, w200 vMeinEdit
Gui, Show
OnMessage(0x201, "WM_LBUTTONDOWN")
return

WM_LBUTTONDOWN(wParam, lParam)
{
    X := lParam &amp; 0xFFFF
    Y := lParam &gt;&gt; 16
    if A_GuiControl
        Steuerelement := "`n(im Steuerelement " . A_GuiControl . ")"
    ToolTip Sie haben im GUI-Fenster #%A_Gui% auf die Koordinaten %X%x%Y% geklickt.%Steuerelement%
}

GuiClose:
ExitApp</pre>

<pre class="NoIndent"><a name="shutdown"></a><em>; Beispiel: Das folgende Script zeigt, wie man das Abmelden/Herunterfahren des Systems erkennen und unterbrechen kann (es wurde gemeldet, dass dies NICHT in Windows Vista und höher funktioniert).
; Verwandtes Thema: <a href="OnExit.htm">OnExit</a></em>

<em>; Der folgende DllCall-Befehl ist optional: er teilt dem OS mit, dass dieses Script <i>zuerst</i> beendet werden soll (bevor alle anderen Anwendungen beendet werden).</em>
DllCall("kernel32.dll\SetProcessShutdownParameters", UInt, 0x4FF, UInt, 0)
OnMessage(0x11, "WM_QUERYENDSESSION")
return

WM_QUERYENDSESSION(wParam, lParam)
{
    ENDSESSION_LOGOFF = 0x80000000
    if (lParam &amp; ENDSESSION_LOGOFF)  <em>; Benutzer meldet sich ab.</em>
        Ereignis = Abmelden
    else  <em>; System wird entweder heruntergefahren oder neu gestartet.</em>
        Ereignis = Herunterfahren
    MsgBox, 4,, %Ereignis% im Gange.  Erlauben?
    IfMsgBox Yes
        return true  <em>; Erlaubt dem OS das Herunterfahren/Abmelden.</em>
    else
        return false  <em>; Verbietet dem OS das Herunterfahren/Abmelden.</em>
}</pre>

<pre class="NoIndent"><em>; Beispiel: Zeigt, wie ein Script eine benutzerdefinierte Nachricht und bis zu zwei Zahlen von einem anderen Script oder Programm empfängt
; (siehe das Beispiel danach, wie man Strings sendet).</em>

OnMessage(0x5555, "NachrÜberwachung")
OnMessage(0x5556, "NachrÜberwachung")

NachrÜberwachung(wParam, lParam, msg)
{
    <em>; Damit die Funktion schnell zum Ende kommen kann, ist es besser, ein ToolTip zu verwenden,</em>
    <em>; weil so etwas wie eine MsgBox dies verhindern würde:</em>
    ToolTip Nachricht %msg% angekommen:`nWPARAM: %wParam%`nLPARAM: %lParam%
}

<em>; Mit den folgenden Zeilen innerhalb eines anderen Scripts kann die Funktion im oberen Script ausgeführt werden:</em>
SetTitleMatchMode 2
DetectHiddenWindows On
if WinExist("Empfänger.ahk ahk_class AutoHotkey")
    PostMessage, 0x5555, 11, 22  <em>; Aufgrund von WinExist() wird die Nachricht zum "<a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenen Fenster</a>" gesendet.</em>
DetectHiddenWindows Off  <em>; Kann nach PostMessage wieder deaktiviert werden.</em></pre>

<pre class="NoIndent"><a name="SendString"></a><em>; Beispiel: Sendet einen String mit beliebiger Länge zu einem anderen Script.  Um dieses Beispiel 
; verwenden zu können, musst du beide der folgenden Scripts speichern und ausführen und dann WIN+LEERTASTE drücken,
; um eine InputBox anzuzeigen, die den Benutzer zur Eingabe eines Strings auffordert.</em>

<em>; Speichere das folgende Script als "<strong>Empfänger.ahk</strong>" und starte es:</em>
#SingleInstance
OnMessage(0x4a, "Empfange_WM_COPYDATA")  <em>; 0x4a ist WM_COPYDATA</em>
return

Empfange_WM_COPYDATA(wParam, lParam)
{
    Stringadresse := NumGet(lParam + 2*A_PtrSize)  <em>; Ermittelt die Adresse des lpData-Elements in CopyDataStruct.</em>
    Datenkopie := StrGet(Stringadresse)  <em>; Kopiert den String aus der Struktur.</em>
    <em>; Zeige ihn via ToolTip statt MsgBox an, so dass wir rechtzeitig fertig werden:</em>
    ToolTip %A_ScriptName%`nhat den folgenden String empfangen:`n%Datenkopie%
    return true  <em>; Die Rückgabe einer 1 (wahr) ist der übliche Weg, um diese Nachricht zu bestätigen.</em>
}

<em>; Speichere das folgende Script als "<strong>Sender.ahk</strong>" und starte es:  Drücke danach den Hotkey WIN+LEERTASTE.</em>
ZielScriptTitel = Empfänger.ahk ahk_class AutoHotkey

#space::  <em>; Hotkey: WIN+LEERTASTE. Drücke ihn, um eine InputBox zur Eingabe eines String anzuzeigen.</em>
InputBox, ZuSendendeString, Text via WM_COPYDATA senden, Tragen Sie den zu sendenden Text ein:
if ErrorLevel  <em>; Benutzer hat den Abbrechen-Button gedrückt.</em>
    return
Ergebnis := Sende_WM_COPYDATA(ZuSendendeString, ZielScriptTitel)
if Ergebnis = FAIL
    MsgBox SendMessage fehlgeschlagen. Gibt es den folgenden Fenstertitel?:`n%ZielScriptTitel%
else if Ergebnis = 0
    MsgBox Nachricht wurde gesendet, aber das Zielfenster hat mit 0 geantwortet, was bedeuten könnte, dass sie ignoriert wurde.
return

Sende_WM_COPYDATA(ByRef ZuSendendeString, ByRef ZielScriptTitel)  <em>; ByRef verbraucht in diesem Fall weniger Speicher.
; Diese Funktion sendet den angegebenen String zum angegebenen Fenster und gibt die Anwort zurück.
; Die Antwort ist 1, wenn das Zielfenster die Nachricht akzeptiert hat, oder 0, wenn die Nachricht ignoriert wurde.</em>
{
    VarSetCapacity(KopieDatenStrukt, 3*A_PtrSize, 0)  <em>; Richtet den Speicherbereich der Struktur ein.</em>
    <em>; Zuerst wird das cbData-Element der Struktur auf die Größe des Strings gesetzt, einschließlich dem Null-Terminator.</em>
    GrößeInBytes := (StrLen(ZuSendendeString) + 1) * (A_IsUnicode ? 2 : 1)
    NumPut(GrößeInBytes, KopieDatenStrukt, A_PtrSize)  <em>; Muss für das OS getan werden.</em>
    NumPut(&amp;ZuSendendeString, KopieDatenStrukt, 2*A_PtrSize)  <em>; Lässt lpData auf den String selbst verweisen.</em>
    Vorher_DetectHiddenWindows := A_DetectHiddenWindows
    Vorher_TitleMatchMode := A_TitleMatchMode
    DetectHiddenWindows On
    SetTitleMatchMode 2
    SendMessage, 0x4a, 0, &amp;KopieDatenStrukt,, %ZielScriptTitel%  <em>; 0x4a ist WM_COPYDATA. Muss Send verwenden, nicht Post.</em>
    DetectHiddenWindows %Vorher_DetectHiddenWindows%  <em>; Stellt die ursprüngliche Einstellung wieder her.</em>
    SetTitleMatchMode %Vorher_TitleMatchMode%         <em>; Hier auch.</em>
    return ErrorLevel  <em>; Gibt SendMessage's Antwort zum Aufrufer zurück.</em>
}</pre>

<pre class="NoIndent"><em>; Beispiel: Siehe <a href="../scripts/WinLIRC.htm">WinLIRC-Client-Script</a>, wie OnMessage() zum Empfangen von Nachrichten verwendet 
; werden kann, die über die Netzwerkverbindung gesendet wurden.</em></pre>

</body>
</html>
