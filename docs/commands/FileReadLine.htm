<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>FileReadLine</title>
<meta name="keywords" content="Befehl, Datei">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-28224374-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>
<body>
<div id="wrapper">
<div id="content">
<script src="../navbar/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(1);</script>


<h1>FileReadLine</h1>

<p>Liest eine bestimme Zeile aus einer Datei und speichert den Text in eine <a href="../Variables.htm">Variable</a>.</p>

<pre class="Syntax">FileReadLine, Ausgabevariable, Dateiname, Zeilennummer</pre>
<h3>Parameter</h3>
<table class="info">
  <tbody>
<tr>
    <td>Ausgabevariable</td>
    <td>Der Name der Variable, in der der ermittelte Text gespeichert wird. </td>
  </tr>
  <tr>
    <td width="15%">Dateiname</td>
    <td width="85%">Der Name der Datei, die sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist. Windows- und Unix-Formate werden unterst&uuml;tzt. Das hei&szlig;t, dass die Zeilen einer Datei sowohl mit CR-LF-Paaren (`r`n) als auch mit LF-Zeichen (`n) enden k&ouml;nnen.</td>
  </tr>
  <tr>
    <td>Zeilennummer</td>
    <td>
<p>Welche Zeile gelesen wird (1 f&uuml;r die erste, 2 f&uuml;r die zweite und so weiter). Das kann auch ein <a href="../Variables.htm#Expressions">Ausdruck</a> sein.</p>
    <p>Wenn die angegebene Zeilennummer gr&ouml;&szlig;er als die Zeilenanzahl der Datei ist, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt und die <em>Ausgabevariable</em> leer gemacht. Das geschieht auch, wenn die angegebene Zeilennummer die letzte Zeile in der Datei ist, aber diese Zeile leer ist und nicht mit einem Zeilenumbruch/CRLF endet.</p></td>
  </tr>
</tbody></table>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span> Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszul&ouml;sen. F&uuml;r mehr Informationen, siehe <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p>Bei Erfolg wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 0 gesetzt. Ansonsten wird es auf 1 gesetzt und der urspr&uuml;ngliche Inhalt der <em>Ausgabevariable</em> beibehalten.</p>
<p>Die interne Variable <a href="../Variables.htm#LastError">A_LastError</a> enth&auml;lt den R&uuml;ckgabewert der Systemfunktion GetLastError().</p>

<h3>Bemerkungen</h3>
<p>Es wird dringend empfohlen, diesen Befehl nur f&uuml;r kleine Dateien zu verwenden, oder falls nur eine einzige Textzeile ben&ouml;tigt wird. Um eine gro&szlig;e Anzahl an Zeilen zu &uuml;berpr&uuml;fen und zu bearbeiten (nacheinander), verwendet eine <a href="LoopReadFile.htm">dateilesende Schleife</a> f&uuml;r eine bessere Performance. Um eine komplette Datei in eine Variable einzulesen, benutzt <a href="FileRead.htm">FileRead</a>.</p>
<p>Obwohl jedes Tabulator- und Leerzeichen, das am Anfang und Ende der Zeile vorkommt, in die <em>Ausgabevariable</em> geschrieben wird, gilt das nicht f&uuml;r das LF-Zeichen (`n) am Zeilenende. Tabulator- und Leerzeichen k&ouml;nnen an beiden Enden jeder Variable entfernt werden, indem sie sich selbst zuweist, w&auml;hrend <a href="AutoTrim.htm">AutoTrim</a> aktiv ist (Standardeinstellung). Zum Beispiel: <code>EigeneZeile = %EigeneZeile%</code>.</p>
<p>Zeilen, die bis zu 65.534 Zeichen lang sind, k&ouml;nnen gelesen werden. Sobald die maximale Zeilenl&auml;nge &uuml;berschritten wird, k&ouml;nnen die restlichen Zeichen nicht mit diesem Befehl ermittelt werden (verwendet stattdessen <a href="FileRead.htm">FileRead</a> oder <a href="LoopReadFile.htm">dateilesende Schleife</a>).</p>
<h3>Verwandte Befehle</h3>
<p><a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm#ReadLine">Datei.ReadLine()</a>, <a href="FileRead.htm">FileRead</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="IniRead.htm">IniRead</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">Loop
{
    FileReadLine, Zeile, C:\Eigene Dokumente\Kontaktliste.txt, %A_Index%
    If ErrorLevel
        break
    MsgBox, 4, , Zeile #%A_Index% ist "%Zeile%". Weiter?
    IfMsgBox, No
        Return
}
MsgBox, Das Ende der Datei wurde erreicht oder es ist ein Problem aufgetreten.
Return</pre>
</div>
</div>
</body></html>