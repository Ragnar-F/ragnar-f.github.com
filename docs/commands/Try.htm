<!DOCTYPE HTML>
<html>
<head>
<title>Try</title>
<meta name="keywords" content="Befehl, Ablaufsteuerung, Fehler">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>Try <span class="ver">[v1.1.04+]</span></h1>
      <p>Sch&uuml;tzt eine oder mehrere Anweisungen (Befehle oder Ausdr&uuml;cke) vor Laufzeitfehler und Ausnahmen, die vom <a href="Throw.htm">Throw</a>-Befehl ausgel&ouml;st wurden.</p>
      <pre class="Syntax">Try <i>Anweisung</i></pre>
      <pre class="Syntax" style="line-height: 100%">Try
{
    <i>Anweisungen</i>
}</pre>
      <h3>Bemerkungen</h3>
      <p>Nach dem <em>Try</em>-Befehl erfolgt &uuml;blicherweise ein <a href="Block.htm">Block</a> - das sind eine oder mehrere Anweisungen (Befehle oder Ausdr&uuml;cke), umschlossen von geschweiften Klammern. Wenn nur eine Anweisung ausgef&uuml;hrt wird, kann diese entweder rechts neben <em>Try</em> oder auf der n&auml;chsten Zeile stehen, ohne dass dabei die Klammern angegeben werden m&uuml;ssen. Mit dem <a href="Catch.htm">Catch</a>-Befehl kann ein Code angegeben werden, der nur ausgef&uuml;hrt wird, wenn <em>Try</em> einen Fehler abf&auml;ngt.</p>
      <p>Sobald der <a href="Throw.htm">Throw</a>-Befehl verwendet wird oder ein Laufzeitfehler beim Ausf&uuml;hren eines <em>Try</em>-Blocks erkannt wird, verl&auml;sst die Ausf&uuml;hrung den Block sofort. Ist eine <a href="Catch.htm">Catch</a>-Anweisung vorhanden, wird sie ausgef&uuml;hrt. Werden beim Ausl&ouml;sen einer Ausnahme keine <em>Try</em>-Blocks ausgef&uuml;hrt, wird eine Fehlermeldung angezeigt und der aktuelle Thread beendet.</p>
      <p>Bei mehreren ausf&uuml;hrenden <em>Try</em>-Befehlen hat der Befehl am meisten Vorrang, der gerade eben ausgef&uuml;hrt wird.</p>
      <p>Der "<a href="Block.htm#otb">One True Brace Style</a>" kann gegebenenfalls f&uuml;r den <em>Try</em>-Befehl verwendet werden. Zum Beispiel:</p>
      <pre>try <strong>{</strong>
    ...
<strong>}</strong> catch e <strong>{</strong>
    ...
<strong>}</strong></pre>
      <h3>Verwandte Befehle</h3>
      <p><a href="Catch.htm">Catch</a>, <a href="Throw.htm">Throw</a>, <a href="Block.htm">Blocks</a></p>
      <h3 id="Examples">Beispiele</h3>
      <pre class="NoIndent" id="ex_basic"><em>; Beispiel #1: Das Grundkonzept von try/catch/throw.</em>

try  <em>; Versucht, den Code auszuf&uuml;hren.</em>
{
    HelloWorld()
    MakeToast()
}
<a href="Catch.htm">catch</a> e  <em>; Verarbeitet den ersten Fehler/Ausnahme, ausgel&ouml;st durch den vorherigen Block.</em>
{
    MsgBox, Eine Ausnahme wurde ausgel&ouml;st!`nSpeziell: %e%
    <a href="Exit.htm">Exit</a>
}

HelloWorld()  <em>; Immer erfolgreich.</em>
{
    MsgBox, Hello, world!
}

MakeToast()  <em>; Immer Fehlschlag.</em>
{
    <em>; Springt sofort zur Fehlerbehandlung des Try-Blocks:</em>
    <a href="Throw.htm">throw</a> A_ThisFunc &quot; ist nicht implementiert, sorry&quot;
}
</pre>
      <pre class="NoIndent" id="ex_el"><em>; Beispiel #2: Verwendet try/catch anstelle von ErrorLevel.</em>

try
{
    <em>; Nachfolgend wird versucht, bestimmte Dateitypen abzusichern:</em>
    FileCopy, %A_MyDocuments%\*.txt, D:\Backup\Textdokumente
    FileCopy, %A_MyDocuments%\*.doc, D:\Backup\Textdokumente
    FileCopy, %A_MyDocuments%\*.jpg, D:\Backup\Fotos
}
catch
{
    MsgBox, 16,, Es trat ein Fehler beim Absichern der Dateien auf!
    ExitApp
}
</pre>
      <pre class="NoIndent" id="ex_com"><em>; Beispiel #3: Umgang mit COM-Fehlern.</em>

try
{
    obj := <a href="ComObjCreate.htm">ComObjCreate</a>(&quot;<a href="http://msdn.microsoft.com/en-us/library/aa227633(v=vs.60).aspx">ScriptControl</a>&quot;)
    obj.ExecuteStatement(&quot;MsgBox &quot;&quot;Das ist ein eingebettetes VBScript&quot;&quot;&quot;)
    obj.InvalidMethod() <em>; Diese Zeile erzeugt einen Laufzeitfehler.</em>
}
catch e
{
    <em>; Um mehr &uuml;ber das Objekt zu erfahren, das in e enthalten ist, siehe <a href="Catch.htm#RuntimeErrors">Catch</a>.</em>
    MsgBox, 16,, % &quot;Ausnahme ausgel&ouml;st!`n`nWas: &quot; e.what &quot;`nDatei: &quot; e.file
        . &quot;`nZeile: &quot; e.line &quot;`nMeldung: &quot; e.message &quot;`nExtra: &quot; e.extra
}
</pre>
      <pre class="NoIndent" id="ex_nesting"><em>; Beispiel #4: Verschachtelte Try-Catch-Anweisungen.</em>

try Beispiel1() <em>; Jede Einzelanweisung kann auf der selben Zeile des Try-Befehls stehen.</em>
catch e
    MsgBox, Beispiel1() hat "%e%" ausgel&ouml;st.

Beispiel1()
{
    try Beispiel2()
    catch e
    {
        if e = 1
            throw e <em>; Ausnahme wird nochmals ausgel&ouml;st, so dass der Aufrufer sie abfangen kann.</em>
        else
            MsgBox, Beispiel2() hat "%e%" ausgel&ouml;st.
    }
}

Beispiel2()
{
    Random, o, 1, 2
    throw o
}</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>