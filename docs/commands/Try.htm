<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Try</title>
<meta name="keywords" content="Befehl, Ablaufsteuerung, Fehler">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-28224374-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>
<body>
<div id="wrapper">
<div id="content">
<script src="../navbar/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(1);</script>


<h1>Try <span class="ver">[v1.1.04+]</span></h1>

<p>Sch&uuml;tzt eine oder mehrere Anweisungen (Befehle oder Ausdr&uuml;cke) vor Laufzeitfehler und Ausnahmen, die vom <a href="Throw.htm">Throw</a>-Befehl ausgel&ouml;st wurden.</p>

<pre class="Syntax">Try <i>Anweisung</i></pre>
<pre class="Syntax" style="line-height: 100%">Try
{
    <i>Anweisungen</i>
}</pre>
<h3>Bemerkungen</h3>
<p>Nach dem <em>Try</em>-Befehl erfolgt f&uuml;r gew&ouml;hnlich ein <a href="Block.htm">Block</a> - eine oder mehrere Anweisungen (Befehle oder Ausdr&uuml;cke) in geschweiften Klammern. Wenn nur eine einzelne Anweisung ausgef&uuml;hrt wird, dann kann sie auf der selben Zeile von <em>Try</em> oder auf der n&auml;chsten Zeile stehen, sowie die Klammern weggelassen werden. Damit ein bestimmter Code nur ausgef&uuml;hrt wird, wenn <em>Try</em> einen Fehler abf&auml;ngt, verwendet den <a href="Catch.htm">Catch</a>-Befehl.</p>
<p>Falls der <a href="Throw.htm">Throw</a>-Befehl verwendet oder ein Laufzeitfehler w&auml;hrend der Ausf&uuml;hrung eines <em>Try</em>-Blocks erkannt wird, dann springt die Ausf&uuml;hrung sofort aus dem Block. Wenn eine <a href="Catch.htm">Catch</a>-Anweisung vorhanden ist, dann wird sie ausgef&uuml;hrt. Wenn eine Ausnahme ausgel&ouml;st werden soll, w&auml;hrend keine <em>Try</em>-Blocks ausgef&uuml;hrt werden, dann wird eine Fehlermeldung angezeigt und der aktuelle Thread beendet.</p>
<p>Wenn mehrere <em>Try</em>-Befehle ausgef&uuml;hrt werden, dann hat der aktuell ausgef&uuml;hrte Befehl Vorrang.</p>
<p>Der "<a href="Block.htm#otb">One True Brace Style</a>" kann gegebenenfalls f&uuml;r den <em>Try</em>-Befehl verwendet werden. Zum Beispiel:</p>
<pre>try <strong>{</strong>
    ...
<strong>}</strong> catch e <strong>{</strong>
    ...
<strong>}</strong></pre>
<h3>Verwandte Befehle</h3>
<p><a href="Catch.htm">Catch</a>, <a href="Throw.htm">Throw</a>, <a href="Block.htm">Blocks</a></p>
<h3 id="Examples">Beispiele</h3>
<pre class="NoIndent" id="ex_basic"><em>; Beispiel #1: Das Grundkonzept von try/catch/throw.</em>

try  <em>; Versucht, den Code auszuf&uuml;hren.</em>
{
    HelloWorld()
    MakeToast()
}
<a href="Catch.htm">catch</a> e  <em>; Verarbeitet den ersten Fehler/die erste Ausnahme, der/die vom vorherigen Block ausgel&ouml;st wurde.</em>
{
    MsgBox, Eine Ausnahme wurde ausgel&ouml;st!`nSpeziell: %e%
    <a href="Exit.htm">Exit</a>
}

HelloWorld()  <em>; Immer erfolgreich.</em>
{
    MsgBox, Hello, world!
}

MakeToast()  <em>; Immer Fehlschlag.</em>
{
    <em>; Springt sofort zur Fehlerbehandlung des Try-Blocks:</em>
    <a href="Throw.htm">throw</a> A_ThisFunc &quot; ist nicht implementiert, sorry&quot;
}
</pre>

<pre class="NoIndent" id="ex_el"><em>; Beispiel #2: try/catch anstelle von ErrorLevel verwenden.</em>

try
{
    <em>; Nachfolgend wird versucht, bestimmte Dateitypen abzusichern:</em>
    FileCopy, %A_MyDocuments%\*.txt, D:\Backup\Textdokumente
    FileCopy, %A_MyDocuments%\*.doc, D:\Backup\Textdokumente
    FileCopy, %A_MyDocuments%\*.jpg, D:\Backup\Fotos
}
catch
{
    MsgBox, 16,, Es trat ein Fehler beim Absichern der Dateien auf!
    ExitApp
}
</pre>

<pre class="NoIndent" id="ex_com"><em>; Beispiel #3: Umgang mit COM-Fehlern.</em>

try
{
    obj := <a href="ComObjCreate.htm">ComObjCreate</a>(&quot;<a href="http://msdn.microsoft.com/en-us/library/aa227633(v=vs.60).aspx">ScriptControl</a>&quot;)
    obj.ExecuteStatement(&quot;MsgBox &quot;&quot;Das ist ein eingebettetes VBScript&quot;&quot;&quot;)
    obj.InvalidMethod() <em>; Diese Zeile erzeugt einen Laufzeitfehler.</em>
}
catch e
{
    <em>; F&uuml;r mehr Details &uuml;ber das Objekt in e, siehe <a href="Catch.htm#RuntimeErrors">Catch</a>.</em>
    MsgBox, 16,, % &quot;Ausnahme ausgel&ouml;st!`n`nWas: &quot; e.what &quot;`nDatei: &quot; e.file
        . &quot;`nZeile: &quot; e.line &quot;`nMeldung: &quot; e.message &quot;`nExtra: &quot; e.extra
}
</pre>

<pre class="NoIndent" id="ex_nesting"><em>; Beispiel #4: Verschachtelte Try-Catch-Anweisungen.</em>

try Beispiel1() <em>; Jede Einzelanweisung kann auf der selben Zeile des Try-Befehls stehen.</em>
catch e
    MsgBox, Beispiel1() hat "%e%" ausgel&ouml;st.

Beispiel1()
{
    try Beispiel2()
    catch e
    {
        if e = 1
            throw e <em>; Ausnahme wird nochmals ausgel&ouml;st, damit der Aufrufer sie abfangen kann.</em>
        else
            MsgBox, Beispiel2() hat "%e%" ausgel&ouml;st.
    }
}

Beispiel2()
{
    Random, o, 1, 2
    throw o
}</pre>
</div>
</div>
</body>
</html>