<!DOCTYPE HTML>
<html>
<head>
<title>StringSplit</title>
<meta name="keywords" content="Befehl, String">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>StringSplit</h1>
      <p>Teilt einen String in mehrere Teilstrings auf, basierend auf die angegebenen Trennzeichen.</p>
      <pre class="Syntax">StringSplit, AusgabeArray, Eingabevariable [, Trennzeichen, ZeichenAuslassen]</pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td>AusgabeArray</td>
          <td><p>Name des <a href="../misc/Arrays.htm">Arrays</a>, in dem jeder extrahierte Teilstring von <em>Eingabevariable</em> gespeichert wird. Wenn zum Beispiel EigenesArray angegeben ist, wird der Befehl die Anzahl der erzeugten Teilstrings (0, wenn keine) in EigenesArray0 speichern, den ersten Teilstring in EigenesArray1, den zweiten in EigenesArray2 und so weiter.</p>
            <p>Um innerhalb einer <a href="../Functions.htm">Funktion</a> einen Array zu erstellen, das global anstatt lokal ist, muss EigenesArray0 innerhalb der Funktion als globale Variable <a href="../Functions.htm#Global">deklariert</a> werden, bevor dieser Befehl verwendet wird (Das Gegenteil davon gilt f&uuml;r <a href="../Functions.htm#AssumeGlobal">global-angesehene</a> Funktionen).</p></td>
        </tr>
        <tr>
          <td style="width: 15%;">Eingabevariable</td>
          <td style="width: 85%;">Name der Variable, deren Inhalt analysiert wird. Der Name sollte nicht mit Prozentzeichen umschlossen werden, sofern nicht die Absicht besteht, den <em>Inhalt</em> der Variable als Namen zu verwenden. HINWEIS: Die <em>Eingabevariable</em> darf keine Variable von <em>AusgabeArray</em> sein.</td>
        </tr>
        <tr>
          <td>Trennzeichen</td>
          <td><p>Ist dieser Parameter leer oder nicht vorhanden, wird jedes Zeichen von <em>Eingabevariable</em> als einzelner Teilstring behandelt.</p>
            <p>Ansonsten kann <em>Trennzeichen</em> ein oder mehr Zeichen enthalten (Unterscheidung zwischen Gro&szlig;- und Kleinschreibung), die als Abgrenzungen zwischen den Teilstrings innerhalb von <em>Eingabevariable</em> dienen. Da die Trennzeichen nicht zu den Teilstrings geh&ouml;ren, werden sie nie in <em>AusgabeArray</em> kopiert. Befindet sich au&szlig;erdem nichts zwischen einem Paar von Trennzeichen innerhalb von <em>Eingabevariable</em>, wird das entsprechende Array-Element leer sein.</p>
            <p>Zum Beispiel w&uuml;rde <code>`,</code> (ein gesch&uuml;tztes Komma) den String jeweils bei einem Komma teilen. Ebenso w&uuml;rde %A_Tab%%A_Space% jedesmal ein neues Array-Element erstellen, wenn ein Leer- oder Tabulatorzeichen in <em>Eingabevariable</em> vorkommt.</p>
            <p>Es ist m&ouml;glich, auch einen String als Trennung zu verwenden. Dazu ist es erforderlich, mithilfe von <a href="StringReplace.htm">StringReplace</a> alle Vorkommen des Strings mit einem Zeichen zu ersetzen, das im Text niemals vorkommen wird. Im folgenden Beispiel wird der String &lt;br&gt; als Trennung verwendet:</p>
            <pre>StringReplace, NeueHTML, HTMLString, &lt;br&gt;, ``, All  <em>; Ersetzt jedes &lt;br&gt; mit einem Akzent.</em>
StringSplit, EigenesArray, NeueHTML, ``  <em>; Teilt den String jeweils bei einem Akzentbuchstaben.</em></pre></td>
        </tr>
        <tr>
          <td>ZeichenAuslassen</td>
          <td><p>Eine optionale Liste von Zeichen (Unterscheidung zwischen Gro&szlig;- und Kleinschreibung), die jeweils am Anfang und Ende eines Array-Elements weggelassen werden. Wenn <em>ZeichenAuslassen</em> zum Beispiel %A_Space%%A_Tab% ist, werden Leer- oder Tabulatorzeichen jeweils am Anfang und Ende (aber nicht in der Mitte) eines Elements entfernt.</p>
            <p>Falls <em>Trennzeichen</em> leer ist, kennzeichnet <em>ZeichenAuslassen</em>, welche Zeichen im Array weggelassen werden sollen.</p>
            <p>Im Gegensatz zum letzten Parameter anderer Befehle m&uuml;ssen in <em>ZeichenAuslassen</em> Kommas gesch&uuml;tzt werden (`,).</p></td>
        </tr>
      </table>
      <h3>Bemerkungen</h3>
      <p>Falls die Array-Elemente bereits vorhanden sind, wird der Befehl die Werte nur von den ersten N Elementen &auml;ndern - N ist dabei die Anzahl der Teilstrings in <em>Eingabevariable</em>. Alle bereits vorhandenen Elemente &uuml;ber N bleiben unver&auml;ndert. Daher sollte man am besten das 0-Element (EigenesArray0) verwenden, um festzustellen, wie viele Elemente tats&auml;chlich mit diesem Befehl erstellt wurden.</p>
      <p>Unsichtbare Zeichen wie Leer- und Tabulatorzeichen werden beibehalten, sofern sie selbst keine Trennzeichen sind. Tabulator- und Leerzeichen k&ouml;nnen an beiden Enden jeder Variable entfernt werden, indem sie sich selbst zuweisen, w&auml;hrend <a href="AutoTrim.htm">AutoTrim</a> aktiv ist (Standardeinstellung). Zum Beispiel: <code>EigenesArray1 = %EigenesArray1%</code>.</p>
      <p>Um einen String mit kommagetrennten Werten (CSV-Format) aufzuteilen, ist es sinnvoll, stattdessen eine <a href="LoopParse.htm">Parsing-Schleife</a> zu verwenden, da sie &uuml;ber eine interne CSV-Handhabung verf&uuml;gt.</p>
      <p>Bevor die Felder aufgeteilt werden, k&ouml;nnen sie mit dem <a href="Sort.htm">Sort</a>-Befehl neu angeordnet werden.</p>
      <p>Wenn du nicht m&ouml;chtest, dass die Teilstrings dauerhaft im Speicher vorhanden sind, verwende eine <a href="LoopParse.htm">Parsing-Schleife</a> - besonders wenn <em>Eingabevariable</em> sehr gro&szlig; ist, in diesem Fall w&uuml;rde man viel Speicherplatz sparen. Zum Beispiel:</p>
      <pre>Farben = rot,gr&uuml;n,blau
Loop, parse, Farben, `,
    MsgBox Farbnummer %A_Index% ist %A_LoopField%.</pre>
      <h3>Verwandte Befehle</h3>
      <p><a href="LoopParse.htm">Parsing-Schleife</a>, <a href="../misc/Arrays.htm">Arrays</a>, <a href="Sort.htm">Sort</a>, <a href="SplitPath.htm">SplitPath</a>, <a href="IfInString.htm">IfInString</a>, <a href="StringGetPos.htm">StringGetPos</a>, <a href="StringMid.htm">StringMid</a>, <a href="StringTrimLeft.htm">StringTrimLeft</a>, <a href="StringTrimLeft.htm">StringTrimRight</a>, <a href="StringLen.htm">StringLen</a>, <a href="StringLower.htm">StringLower</a>, <a href="StringLower.htm">StringUpper</a>, <a href="StringReplace.htm">StringReplace</a></p>
      <h3>Beispiele</h3>
      <pre class="NoIndent">TestString = Das ist ein Test.
StringSplit, wort_array, TestString, %A_Space%, .  <em>; Punkte weglassen.</em>
MsgBox, Das vierte Wort ist %wort_array4%.

Farben = rot,gr&uuml;n,blau
StringSplit, FarbArray, Farben, `,
Loop, %FarbArray0%
{
    diese_Farbe := FarbArray%a_index%
    MsgBox, Farbnummer %a_index% ist %diese_Farbe%.
}</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>