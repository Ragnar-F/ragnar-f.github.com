<!DOCTYPE HTML>
<html>
<head>
<title>GUI</title>
<meta name="keywords" content="Befehl, Grafische Benutzeroberfl&auml;che">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>GUI</h1>
      <p>Erstellt und verwaltet Fenster und Steuerelemente. Solche Fenster k&ouml;nnen zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden.</p>
      <pre class="Syntax">Gui, Unterbefehl [, Param2, Param3, Param4]</pre>
      <h2>Inhaltsverzeichnis</h2>
      <ul>
        <li><a href="#New">New</a>: Erstellt ein neues Fenster.</li>
        <li><a href="#Add">Add</a>: Erstellt ein Steuerelement wie z. B. Text, Button oder CheckBox.</li>
        <li><a href="#Show">Show</a>: Zeigt das Fenster an. Kann ein Fenster auch minimieren, maximieren oder verschieben.</li>
        <li><a href="#Submit">Submit</a>: Speichert die Benutzereingaben und versteckt optional das Fenster.</li>
        <li><a href="#Cancel">Cancel</a> (oder Hide): Versteckt das Fenster.</li>
        <li><a href="#Destroy">Destroy</a>: Entfernt das Fenster.</li>
        <li><a href="#Font">Font</a>: Bestimmt die Schriftart, die Schriftgr&ouml;&szlig;e, den Schriftstil und die Textfarbe f&uuml;r danach erstellte Steuerelemente.</li>
        <li><a href="#Color">Color</a>: Bestimmt die Hintergrundfarbe des Fensters und/oder dessen Steuerelemente.</li>
        <li><a href="#Margin">Margin</a>: Bestimmt den Abstand, der immer dann verwendet wird, wenn keine eindeutige Position f&uuml;r ein Steuerelement definiert ist. </li>
        <li><a href="#Options">Optionen und Styles f&uuml;r ein Fenster</a>: Legt verschiedene Optionen zum Aussehen und Verhalten des Fensters fest.</li>
        <li><a href="#Menu">Menu</a>: Hinzuf&uuml;gen oder Entfernen einer Men&uuml;leiste.</li>
        <li><a href="#Minimize">Minimize / Maximize / Restore</a>: Minimiert, Maximiert oder stellt ein Fenster wieder her.</li>
        <li><a href="#Flash">Flash</a>: L&auml;sst die Taskleistenschaltfl&auml;che des Fensters aufblinken.</li>
        <li><a href="#Default">Default</a>: &Auml;ndert den Standard-GUI-Fensternamen des aktuellen Threads. </li>
        <li><a href="#Position">Position und Gr&ouml;&szlig;e von Steuerelementen anpassen</a></li>
        <li><a href="#Events">Speichern von und Reagieren auf Benutzereingaben</a>: Variablen und g-Label </li>
        <li><a href="#OtherOptions">Optionen und Styles f&uuml;r Steuerelemente</a></li>
        <li><a href="#Labels">Fensterereignisse</a>: <a href="#GuiClose">GuiClose</a> | <a href="#GuiEscape">GuiEscape</a> | <a href="#GuiSize">GuiSize</a> | <a href="#GuiContextMenu">GuiContextMenu</a> | <a href="#GuiDropFiles">GuiDropFiles</a></li>
        <li><a href="#MultiWin">Mehrere GUI-Fenster erstellen</a></li>
        <li><a href="#DefaultWin">GUI-Ereignisse, Threads und Subroutinen</a></li>
        <li>Sonstiges: <a href="#Navigate">Navigation mit der Tastatur</a> | <a href="#Appear">Fensterdarstellung</a> | <a href="#GenRemarks">Allgemeine Bemerkungen</a></li>
        <li><a href="#Examples">Beispiele</a>: Enth&auml;lt funktionierende Scripts, die GUI-Fenster und Steuerelemente zeigen.</li>
      </ul>
      <h2 id="New">Gui, New [, Optionen, Titel] <span class="ver">[v1.1.04]</span></h2>
      <p>Erstellt ein neues Fenster.</p>
      <pre>Gui, New  <em>; Erstellt ein neues unbenanntes GUI.</em>
Gui, Name:New  <em>; Erstellt ein neues GUI und zerst&ouml;rt jedes vorhandene GUI mit diesem Namen.</em>
</pre>
      <p>Zur Vereinfachung  wird das neue Fenster als <a href="#Default">Standard</a> f&uuml;r den aktuellen Thread definiert.</p>
      <p>Wenn kein Name angegeben ist, haben spezielle <a href="#Labels">Label</a> wie <a href="#GuiClose"><em>GuiClose</em></a> standardm&auml;&szlig;ig das Pr&auml;fix &quot;Gui&quot;, sofern das nicht in den Optionen mit <a href="#PlusLabel">+Label<em>Pr&auml;fix</em></a> &uuml;berschrieben wird. Wenn das GUI, das den aktuellen Thread gestartet hat, auf diese Weise erstellt worden ist, enth&auml;lt <a href="../Variables.htm#Gui">A_Gui</a> ein HWND, anstatt einen Namen. Desweiteren kann, wenn <a href="#GuiHwndOutputVar">+Hwnd<em>AusgabeVar</em></a> verwendet wird, das HWND des neuen Fensters in <em>AusgabeVar</em> gespeichert werden.</p>
      <p>Falls ein Name angegeben ist, wird jedes vorhandene GUI mit diesem Namen <strong>zerst&ouml;rt</strong>.</p>
      <p>Der <em>Optionen</em>-Parameter kann <a href="#Options">Optionen</a> enthalten, die vom Haupt-GUI-Befehl unterst&uuml;tzt werden.</p>
      <p>Falls der <em>Titel</em>-Parameter nicht vorhanden ist, wird der Dateiname des Scripts verwendet.</p>
      <p>Dieser Befehl dient nur dazu, Missverst&auml;ndnisse vorzubeugen - er ist nicht zwingend erforderlich. Wenn einer der anderen Gui-Unterbefehle (z. B. <a href="#Add">Gui, Add</a>) verwendet wird und das GUI nicht vorhanden ist, wird es automatisch erstellt.</p>
      <p><strong>Hinweis:</strong> Vor v1.1.08 war dieser Befehl nicht in der Lage, das Standard-Gui zu setzen, falls ein Name angegeben war.</p>
      <h2 id="Add">Gui, Add, Steuerelementart [, Optionen, Text]</h2>
      <p>F&uuml;gt ein Steuerelement in einem GUI-Fenster ein (und erstellt vorher das GUI-Fenster, falls notwendig).</p>
      <p><em>Steuerelementart</em> kann folgendes sein:</p>
      <ul>
        <li><a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#UpDown">UpDown</a>, <a href="GuiControls.htm#Picture">Picture</a></li>
        <li><a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Checkbox">Checkbox</a>, <a href="GuiControls.htm#Radio">Radio</a></li>
        <li><a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a></li>
        <li><a href="GuiControls.htm#ListBox">ListBox</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a></li>
        <li><a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Hotkey">Hotkey</a>, <a href="GuiControls.htm#DateTime">DateTime</a>
        <li><a href="GuiControls.htm#MonthCal">MonthCal</a>, <a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#Progress">Progress</a></li>
        <li><a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a></li>
        <li><a href="GuiControls.htm#ActiveX">ActiveX</a> (z. B.  Internet Explorer Control)</li>
        <li><a href="GuiControls.htm#Custom">Custom</a></li>
      </ul>
      <p>Zum Beispiel:</p>
      <pre>Gui, Add, Text,, Bitte Name eingeben:
Gui, Add, Edit, vName
Gui, Show</pre>
      <h2 id="Show">Gui, Show [, Optionen, Titel]</h2>
      <p>Sofern nicht anders in <em>Optionen</em> angegeben, wird dieser Befehl das Fenster sichtbar machen, dessen Minimierung aufheben (falls notwendig), <a href="WinActivate.htm">aktivieren</a> und dessen Titel festlegen. Ist <em>Titel</em> nicht vorhanden, wird der vorherige Titel weiterverwendet (ist keiner vorhanden, dann der Dateiname des Scripts).</p>
      <p>Man kann die unten genannten Optionen X, Y, W und H weglassen, um die urspr&uuml;ngliche Gr&ouml;&szlig;e und Position des Fensters beizubehalten. Falls keine vorherige Position vorhanden ist, wird das Fenster automatisch auf eine der beiden Abmessungen zentriert, wenn die unten erw&auml;hnten Optionen X und/oder Y fehlen. Falls eine vorherige Gr&ouml;&szlig;e nicht wiederhergestellt werden kann, wird die Fenstergr&ouml;&szlig;e automatisch an den vorhandenen Steuerelementen angepasst.</p>
      <p>Folgende Strings k&ouml;nnen in <em>Optionen</em> angegeben werden (jede Zahl muss im dezimalen Format sein):</p>
      <p><strong>Wn</strong>: Bestimme mit <strong>n</strong> die Breite (in Pixel) des Client-Fensterbereichs (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#Menu">Men&uuml;leiste</a> des Fensters).</p>
      <p><strong>Hn</strong>: Bestimme mit <strong>n</strong> die H&ouml;he des Client-Fensterbereichs (in Pixel).</p>
      <p><strong>Xn</strong>: Bestimme mit <strong>n</strong> die X-Position des Fensters auf dem Bildschirm (in Pixel). Position 0 ist die erste linke sichtbare Pixelspalte auf dem Bildschirm.</p>
      <p><strong>Yn</strong>: Bestimme mit <strong></strong><strong>n</strong> die Y-Position des Fensters auf dem Bildschirm (in Pixel). Position 0 ist die erste obere sichtbare Pixelzeile auf dem Bildschirm.</p>
      <p><strong>Center</strong>: Zentriert das Fenster horizontal und vertikal auf dem Bildschirm.</p>
      <p><strong>xCenter</strong>: Zentriert das Fenster horizontal auf dem Bildschirm. Zum Beispiel: <code>Gui, Show, xCenter y0</code>.</p>
      <p><strong>yCenter</strong>: Zentriert das Fenster vertikal auf dem Bildschirm.</p>
      <p id="AutoSize"><strong>AutoSize</strong>: Passt die Fenstergr&ouml;&szlig;e an den Steuerelementen an, die zurzeit sichtbar sind. Das ist n&uuml;tzlich, um die Fenstergr&ouml;&szlig;e anzupassen, nachdem neue Steuerelemente hinzugef&uuml;gt oder Gr&ouml;&szlig;e und Sichtbarkeit vorhandener Steuerelemente ge&auml;ndert worden sind. Zum Beispiel: <code>Gui, Show, AutoSize Center</code>.</p>
      <br>
      <p><em><strong>Eine der folgenden Optionen kann auch vorhanden sein:</strong></em></p>
      <p><strong>Minimize</strong>: Minimiert das Fenster und aktiviert das darunterliegende Fenster.</p>
      <p><strong>Maximize</strong>: Maximiert und aktiviert das Fenster.</p>
      <p><strong>Restore</strong>: Hebt die Maximierung oder Minimierung des Fensters auf, falls notwendig. Zudem wird das Fenster je nach Bedarf angezeigt und aktiviert.</p>
      <p><strong>NoActivate</strong>: Hebt die Maximierung oder Minimierung des Fensters auf, falls notwendig. Zudem wird das Fenster angezeigt, ohne es zu aktivieren.</p>
      <p><strong>NA</strong>: Zeigt das Fenster an, ohne es zu aktivieren. Ist das Fenster minimiert, wird dieser Zustand beibehalten, steigt aber in der Z-Rangordnung nach oben (die Rangordnung kann im Alt-Tab-Fenster &uuml;berpr&uuml;ft werden). Wurde das Fenster vorher versteckt, f&uuml;hrt das wahrscheinlich dazu, dass es &uuml;ber dem aktiven Fenster erscheint, selbst wenn das aktive Fenster nicht deaktiviert ist.</p>
      <p><strong>Hide</strong>: Versteckt das Fenster und aktiviert das darunterliegende Fenster. Prinzipiell funktioniert es wie <a href="#Cancel">Gui Cancel</a>. Allerdings hat diese Option den Vorteil, dass ein verstecktes Fenster verschoben, skaliert oder dessen Titel ge&auml;ndert werden kann, ohne dass es angezeigt werden muss. Zum Beispiel: <code>Gui, Show, Hide x55 y66 w300 h200, Neuer Titel</code>.</p>
      <h2 id="Submit">Gui, Submit [, NoHide]</h2>
      <p>Speichert den Inhalt von jedem Steuerelement in die <a href="#var">zugewiesene Variable</a> (falls vorhanden) und versteckt das Fenster, solange die NoHide-Option nicht vorhanden ist. Bei Steuerelementen, die mehrere Ausgabefelder erzeugen, wie eine <a href="GuiControls.htm#ListBoxMulti">Mehrfachauswahl</a>-ListBox, verwendet die Ausgabe das <a href="#Delimiter">aktuelle Begrenzungszeichen</a> des Fensters. Wenn das Fenster nicht vorhanden ist (da es z. B. per <a href="#Destroy">Gui Destroy</a> zerst&ouml;rt worden ist), bleibt dieser Befehl unwirksam.</p>
      <h2 id="Cancel">Gui, Cancel</h2>
      <p>Versteckt das Fenster, ohne dabei die Inhalte der Steuerelemente in die jeweils <a href="#var">zugewiesene Variable</a> zu speichern. Wenn das Fenster nicht vorhanden ist (da es z. B. per <a href="#Destroy">Gui Destroy</a> zerst&ouml;rt worden ist), bleibt dieser Befehl unwirksam.</p>
      <h2 id="Destroy">Gui, Destroy</h2>
      <p>Entfernt das Fenster (falls vorhanden) samt aller dazugeh&ouml;rigen Steuerelemente und gibt den entsprechenden Arbeitsspeicher sowie die Systemressourcen frei. Falls das Script sp&auml;ter das Fenster neu erstellt, beginnen alle Fenstereigenschaften wie Farbe und Schriftart wieder mit ihren Standardwerten (als h&auml;tte das Fenster nie existiert). Wird <code>Gui Destroy</code> nicht verwendet, werden alle GUI-Fenster automatisch zerst&ouml;rt, sobald das Script beendet wird.</p>
      <h2 id="Font">Gui, Font [, Optionen, Schriftart]</h2>
      <p>Bestimmt die Schriftart, die Schriftgr&ouml;&szlig;e, den Schriftstil und/oder die Textfarbe f&uuml;r Steuerelemente, die nach diesem Befehl erstellt werden. Zum Beispiel:</p>
      <pre>Gui, Font, s10, Verdana  <em>; Schriftart Verdana mit Gr&ouml;&szlig;e 10.</em></pre>
      <p>Lasse die letzten beiden Parameter weg,  um die Standard-Schriftart, die Standard-Schriftgr&ouml;&szlig;e und die Standard-Textfarbe des Betriebssystems wiederherzustellen.</p>
      <p><em>Schriftart</em> kann der Name einer beliebigen Schriftart sein (siehe <a href="../misc/FontsStandard.htm">Tabelle f&uuml;r Schriftarten</a>). Falls <em>Schriftart</em> weggelassen wird oder nicht im Betriebssystem vorhanden ist, wird die zuvor verwendete Schriftart weiter verwendet (bzw. die Standardschriftart des Betriebssystems, wenn keine vorhanden ist). Das hat den Vorteil, dass ein GUI-Fenster bei mehreren Betriebssystemen die gleiche Schriftart verwendet, selbst wenn die bevorzugte Schriftart auf einigen dieser Systeme fehlt. Im folgenden Beispiel hat Verdana Vorrang vor Arial, welches wiederum Vorrang vor MS Sans Serif hat:</p>
      <pre>Gui, Font,, MS sans serif
Gui, Font,, Arial
Gui, Font,, Verdana  <em>; Bevorzugte Schriftart.</em></pre>
      <p>Ist der <em>Optionen</em>-Parameter leer, werden die zuvor benutzten Schriftartattribute weiter verwendet. Ansonsten k&ouml;nnen ersatzweise beliebig viele der folgenden Optionsbuchstaben angegeben werden:</p>
      <p><strong>C</strong>: Namen der Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>), ein RGB-Wert oder das Wort "Default", um die Standardfarbe des Betriebssystems wiederherzustellen (meistens schwarz). Beispielwerte: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. Hinweis: <a href="GuiControls.htm#Button">Schaltfl&auml;chen</a> ignorieren benutzerdefinierte Farben. Durch Einf&uuml;gen der C-Option ist es m&ouml;glich, ein bestimmtes Steuerelement zu erstellen, das eine andere Schriftfarbe hat. Zum Beispiel: <code>Gui, Add, Text, cRed, Eigener Text</code>.</p>
      <p><strong>S</strong>: Gr&ouml;&szlig;e (in Punkten). Zum Beispiel: <code>s12</code> (muss dezimal sein).</p>
      <p><strong>W</strong>: Breite (Dicke). Eine Nummer zwischen 1 und 1000 (400 ist normal und 700 ist fett). Zum Beispiel: <code>w600</code> (muss dezimal sein).</p>
      <p>Zudem werden folgende W&ouml;rter unterst&uuml;tzt: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> und norm (&uuml;bersetzt: fett, kursiv, durchgestrichen, unterstrichen und normal). <em>Norm</em> stellt die normale Breite/Dicke der Schrift wieder her und deaktiviert italic, strike und underline (Farbe und Gr&ouml;&szlig;e bleiben jedoch erhalten). Es ist m&ouml;glich, erst alle Attribute mit norm zu deaktivieren und danach neue Attribute hinzuzuf&uuml;gen. Mit <code>norm italic</code> beispielsweise wird die Schrift normalisiert und danach kursiv gemacht.</p>
      <p>Sind mehr als eine Option notwendig, m&uuml;ssen diese jeweils mit einem Leerzeichen getrennt werden. Zum Beispiel: <code>cBlue s12 bold</code>.</p>
      <p>Erstellt ein Script <a href="#MultiWin">mehrere GUI-Fenster</a>, wird sich jedes Fenster seine eigene &quot;aktuelle Schriftart&quot; zwecks Erstellung neuer Steuerelemente merken.</p>
      <p>Das Betriebssystem bietet zudem Standard-Dialogfenster, die den Benutzer auffordern k&ouml;nnen, eine Farbe, eine Schriftart oder ein Icon auszuw&auml;hlen. Diese Dialogfenster k&ouml;nnen per <a href="DllCall.htm">DllCall()</a> angezeigt werden, siehe dazu <a href="http://www.autohotkey.com/forum/topic17230.html">www.autohotkey.com/forum/topic17230.html</a>.</p>
      <p id="fontq"><strong>Q</strong>: <span class="ver">[AHK_L 19+]:</span> Textdarstellungsqualit&auml;t. Zum Beispiel: <code>q3</code>. Nach Q sollte eine Zahl aus der folgenden Tabelle erfolgen:</p>
      <table class="info">
        <tr>
          <td>0 = DEFAULT_QUALITY</td>
          <td>Die Darstellung der Schriftart spielt keine Rolle.</td>
        </tr>
        <tr>
          <td>1 = DRAFT_QUALITY</td>
          <td>Die Darstellung der Schriftart ist ein wenig unwichtiger als wie bei PROOF_QUALITY.</td>
        </tr>
        <tr>
          <td>2 = PROOF_QUALITY</td>
          <td>Die Zeichenqualit&auml;t der Schriftart ist wichtiger als die exakte &Uuml;bereinstimmung mit logischen Schriftattributen (z. B. fett, kursiv und so weiter).</td>
        </tr>
        <tr>
          <td>3 = NONANTIALIASED_QUALITY</td>
          <td>Schrift wird nicht gegl&auml;ttet.<br></td>
        </tr>
        <tr>
          <td>4 = ANTIALIASED_QUALITY</td>
          <td>Schrift wird gegl&auml;ttet, wenn die Schriftart so etwas unterst&uuml;tzt und deren Gr&ouml;&szlig;e nicht zu klein und nicht zu gro&szlig; ist.</td>
        </tr>
        <tr>
          <td>5 = CLEARTYPE_QUALITY</td>
          <td>Windows XP und h&ouml;her: Der Text wird gegebenenfalls mithilfe der ClearType-Kantengl&auml;ttung dargestellt.</td>
        </tr>
      </table>
      <p>Um mehr dar&uuml;ber zu erfahren, was diese Werte bedeuten, siehe <a href="http://msdn.microsoft.com/en-us/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
      <p>Standardm&auml;&szlig;ig gilt die h&ouml;chste Qualit&auml;tseinstellung. Deshalb wird dieses Feature eher dazu verwendet, Kantengl&auml;ttung zu deaktivieren, um den Text bei bestimmten F&auml;llen besser lesbar zu machen.</p>
      <h2 id="Color">Gui, Color [, Fensterfarbe, Steuerelementfarbe]</h2>
      <p>Bestimmt die Hintergrundfarbe des Fensters und/oder dessen Steuerelemente. Mit <em>Fensterfarbe</em> wird der Hintergrund des Fensters selbst bestimmt. <em>Steuerelementfarbe</em> gilt f&uuml;r alle gegenw&auml;rtigen und zuk&uuml;nftigen Steuerelemente im Fenster (beachte dabei, dass einige Steuerelemente benutzerdefinierte Farben nicht unterst&uuml;tzen). Obwohl <em>Steuerelementfarbe</em> anfangs von <a href="ListView.htm">ListView</a>- und <a href="TreeView.htm">TreeView</a>-Steuerelemente beachtet wird, sind nachfolgende &Auml;nderungen der <em>Steuerelementfarbe</em> nicht mehr m&ouml;glich. In solchen F&auml;llen kann <code>GuiControl +BackgroundFF9977, EigeneListview</code> verwendet werden, um die Farbe direkt zu &auml;ndern.</p>
      <p>Lass den entsprechenden Parameter leer, wenn die aktuelle Farbe beibehalten werden soll. Ansonsten kann man eine Hauptfarbe aus der <a href="Progress.htm#colors">HTML-Farbtabelle</a>, ein 6-stelliger RGB-Wert (0x-Pr&auml;fix ist optional) oder das Wort "Default" f&uuml;r die Standardfarbe angegeben. Beispielwerte: <code>Silver</code>, <code>FFFFAA</code>, <code>0xFFFFAA</code>, <code>Default</code>.</p>
      <p>Standardm&auml;&szlig;ig ist die Hintergrundfarbe des Fensters die Systemfarbe der Schaltfl&auml;chen, und die Hintergrundfarbe des Steuerelements standardm&auml;&szlig;ig die Systemfarbe des Fensters (&uuml;blicherweise wei&szlig;).</p>
      <p>Die Farbe der <a href="#Menu">Men&uuml;leiste</a> und deren Untermen&uuml;s kann wie folgt ge&auml;ndert werden: <code><a href="Menu.htm">Menu</a>, EigeneMen&uuml;leiste, Color, White</code>.</p>
      <p>Um den Hintergrund in Windows 2000/XP oder h&ouml;her transparent zu machen, verwende <a href="WinSet.htm#TransColor">WinSet TransColor</a>. Macht man das allerdings, ohne vorher ein benutzerdefiniertes Fenster per <a href="#Color">Gui Color</a> zugewiesen zu haben, werden die Schaltfl&auml;chen ebenfalls transparent. Man kann das verhindern, wenn man zun&auml;chst eine benutzerdefinierte Fensterfarbe zuweist und diese dann transparent macht. Zum Beispiel:</p>
      <pre>Gui, Color, EEAA99
Gui +LastFound  <em>; Macht das GUI-Fenster zum <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenen Fenster</a>.</em>
WinSet, TransColor, EEAA99</pre>
      <p>Wenn der Rahmen und die Titelleiste eines Fensters mit transparentem Hintergrund zus&auml;tzlich entfernt werden soll, kann folgendes verwendet werden, <strong>nachdem</strong> das Fenster transparent gemacht worden ist:</p>
      <pre>Gui -Caption  <em>; Oder "<i>Gui, GuiName:-Caption</i>", falls es nicht das <a href="#DefaultWin">Standardfenster</a> ist.</em></pre>
      <p>Die oben genannte Methode wird durch die Bildschirmanzeige (OSD) weiter unten nochmals n&auml;her gebracht.</p>
      <h2 id="Margin">Gui, Margin [, X, Y]</h2>
      <p><strong>X</strong> und <strong>Y</strong> bestimmen die Anzahl an Pixeln, die einen Freiraum an der linken/rechten und oberen/unteren Seite bilden, falls Steuerelemente automatisch positioniert werden, denen eindeutig die <a href="#XY">Koordinaten X und Y</a> fehlen. Au&szlig;erdem werden diese Abst&auml;nde dazu verwendet, den vertikalen und horizontalen Abstand zwischen den automatisch positionierten Steuerelementen festzulegen. Die Abst&auml;nde zur Berechnung der Fenstergr&ouml;&szlig;e werden ber&uuml;cksichtigt, sobald <a href="#Show">Gui Show</a> das erste Mal verwendet wird (falls keine eindeutige Gr&ouml;&szlig;e angegeben worden ist).</p>
      <p>Falls dieser Befehl nicht verwendet wird, erh&auml;lt das Fenster automatisch an jeder Seite einen Standardabstand, sobald das erste Steuerelement hinzugef&uuml;gt wird. Dieser Abstand wird proportional zur Gr&ouml;&szlig;e der aktuell ausgew&auml;hlten  <a href="#Font">Schriftart</a> sein (0.75 x Schrifth&ouml;he f&uuml;r Unten &amp; Oben, 1.25 x Schriftbreite f&uuml;r Links &amp; Rechts).</p>
      <p>Die Abst&auml;nde k&ouml;nnen ge&auml;ndert werden, w&auml;hrend Steuerelemente hinzugef&uuml;gt werden. Allerdings  werden solche &Auml;nderungen nur f&uuml;r Steuerelemente wirksam, die nachtr&auml;glich hinzugef&uuml;gt werden, nicht f&uuml;r solche, die bereits vorhanden sind. Man kann entweder X oder Y leer lassen, um den entsprechenden Abstand unver&auml;ndert zu lassen.</p>
      <h2 id="Options">Gui, +/-Option1 +/-Option2 ...</h2>
      <p>Nach dem GUI-Befehl k&ouml;nnen eine oder mehrere Optionen angegeben werden. Aus Performance-Gr&uuml;nden ist es besser, alle Optionen auf einer Zeile zu setzen, bevor das Fenster erstellt wird (das hei&szlig;t, bevor andere Unterbefehle wie <a href="#Add">Gui Add</a> verwendet werden).</p>
      <p>Der Effekt des Befehls ist kumulativ (summierend). Das hei&szlig;t, dass dieser Befehl nur Einstellungen &auml;ndert, die direkt angegeben worden sind, alle anderen bleiben unver&auml;ndert.</p>
      <p>Mit einem Plus- oder Minuszeichen kann eine Option jeweils hinzugef&uuml;gt oder entfernt werden. Zum Beispiel:</p>
      <pre>Gui +Resize -MaximizeBox  <em>; &Auml;ndert die Einstellungen des <a href="#DefaultWin">Standard</a>-GUI-Fensters.</em>
Gui <strong>EigenesGui:</strong>+Resize -MaximizeBox  <em>; &Auml;ndert die Einstellungen des GUI's namens <i>EigenesGui</i>.</em></pre>
      <p><strong>AlwaysOnTop</strong>: Bewirkt, dass das Fenster immer &uuml;ber allen anderen Fenstern bleibt, was den gleichen Effekt hat wie <a href="WinSet.htm#AlwaysOnTop">WinSet AlwaysOnTop</a>.</p>
      <p><strong>Border</strong>: Stattet das Fenster mit einem d&uuml;nnen Rahmen aus. Das ist un&uuml;blich.</p>
      <p><strong>Caption</strong> (standardm&auml;&szlig;ig vorhanden): Stattet das Fenster mit einer Titelleiste und einem dicken Rahmen aus. Soll die Titelleiste eines Fensters entfernt werden, das <a href="WinSet.htm#TransColor">WinSet TransColor</a> verwenden wird, sollte man diese erst entfernen, wenn TransColor bereits gesetzt worden ist.</p>
      <p id="Delimiter"><strong>Delimiter</strong>: Bestimmt, dass das Fenster anstelle des senkrechten Striches (|) ein anderes Zeichen verwenden soll, sobald Inhalte von Steuerelementen mit <a href="#Add">Gui Add</a> hinzugef&uuml;gt, mit <a href="GuiControl.htm">GuiControl</a> bearbeitet oder mit <a href="#Submit">Gui Submit</a> bzw. <a href="GuiControlGet.htm">GuiControlGet</a> ermittelt werden. F&uuml;ge das gew&uuml;nschte Trennzeichen unmittelbar nach dem Wort Delimiter an. Zum Beispiel w&uuml;rde <code>Gui +Delimiter`n</code> ein Zeilenumbruchszeichen verwenden, das sich besonders gut f&uuml;r <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a> eignen k&ouml;nnte. <code>Gui +Delimiter|</code> w&uuml;rde das Standardtrennzeichen wiederherstellen. Wenn ein Leer- oder Tabulatorzeichen notwendig ist, sollte man <code>Gui +DelimiterSpace</code> oder <code>Gui +DelimiterTab</code> angeben. Wurde das Trennzeichen einmal ge&auml;ndert, beeinflusst diese Option alle vorhandenen und nachfolgenden <a href="../misc/Threads.htm">Threads</a>, die dieses bestimmte Fenster bearbeiten.</p>
      <p><strong>Disabled</strong>: Deaktiviert das Fenster, wodurch der Benutzer nicht l&auml;nger mit den Steuerelementen interagieren kann. Diese Option wird oft bei Fenstern benutzt, die untergeordnete Fenster haben (siehe <a href="#Owner">Owner</a>).</p>
      <p id="DPIScale"><strong>DPIScale</strong> <span class="ver">[v1.1.11+]</span>: Verwende <code>Gui -DPIScale</code>, um die DPI-Skalierung zu deaktivieren, welche standardm&auml;&szlig;ig aktiviert ist. Falls die DPI-Skalierung auf einem System mit nicht-standardm&auml;&szlig;iger DPI-Einstellung aktiviert ist, werden die Gui-Befehle Koordinaten und Gr&ouml;&szlig;en automatisch skalieren, um den Steuerelementen die scheinbar fast gleiche Gr&ouml;&szlig;e  (aber h&ouml;here Aufl&ouml;sung) zuzuweisen. Bei einer DPI von beispielsweise 144 (150%) w&uuml;rde <code>Gui Show, w100</code> das Gui 150 Pixel breit machen, allerdings w&uuml;rde <a href="../Variables.htm#GuiWidth">A_GuiWidth</a> weiterhin 100 zur&uuml;ckgeben. <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> enth&auml;lt die aktuelle DPI des Systems.</p>
      <p id="GuiHwndOutputVar"><strong>Hwnd</strong><em>AusgabeVar</em> <span class="ver">[v1.1.04+]:</span> Diese Option speichert das Fenster-Handle (HWND) des GUIs in <em>AusgabeVar</em>. Zum Beispiel: <code>Gui +HwndEigenesGuiHwnd</code>. Innerhalb einer Funktion wird <em>EigenesGuiHwnd</em> als <a href="../Functions.htm#DynVar">dynamische Variable</a> behandelt. Das HWND eines GUIs wird oft in Verbindung mit <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall</a> verwendet. Au&szlig;erdem kann es direkt als <a href="../misc/WinTitle.htm#ahk_id">ahk_id-Fenstertitel</a> oder anstelle vom GUI-Namen benutzt werden; zum Beispiel <code>Gui %EigenesGuiHwnd%:Destroy</code>.</p>
      <p id="PlusLabel"><strong>Label</strong> <span class="ver">[v1.0.44.09+]:</span> Bestimmt benutzerdefinierte Namen f&uuml;r die <a href="#Labels">speziellen Label</a> des Fensters. Zum Beispiel w&uuml;rde <code>Gui EigenesGui:+LabelEigenesGui_On</code> die Label EigenesGui_OnClose und EigenesGui_OnSize verwenden (falls diese existieren), anstatt EigenesGuiGuiClose und EigenesGuiGuiSize. Das hei&szlig;t, dass innerhalb der Namen aller  <a href="#Labels">speziellen Label</a> der String "EigenesGuiGui" mit "EigenesGui_On" ersetzt wird. Dadurch k&ouml;nnen auch mehrere Fenster dazu gebracht werden, dass sie sich die gleichen Label teilen (in diesem Fall k&ouml;nnte das Script auf <a href="../Variables.htm#Gui">A_Gui</a> zur&uuml;ckgreifen, um zu ermitteln, welches Fenster die Subroutine gestartet hat).</p>
      <p id="LastFound"><strong>LastFound</strong>: Markiert das aktuelle Fenster als <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenes Fenster</a> (das in einem <a href="#DefaultWin">GUI-Thread</a> unn&ouml;tig ist, weil das automatisch geschieht), wodurch Befehle wie <a href="WinSet.htm">WinSet</a> die M&ouml;glichkeit haben, das Fenster zu bearbeiten, selbst wenn es versteckt ist (das hei&szlig;t, dass <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> nicht notwendig ist). Das ist besonders dann n&uuml;tzlich, wenn die Eigenschaften des Fensters ge&auml;ndert werden sollen, bevor es angezeigt wird. Zum Beispiel:</p>
      <pre>Gui +LastFound
WinSet, TransColor, %BeliebigeFarbe% 150
Gui Show</pre>
      <p id="LastFoundExist"><strong>LastFoundExist</strong> <span class="ver">[v1.0.43.09+]:</span> Im Gegensatz zu den anderen Optionen wird LastFoundExist nur erkannt, wenn keine anderen Optionen auf derselben Zeile vorkommen. <em>+LastFoundExist</em> ist das gleiche wie <em>+LastFound</em>, au&szlig;er dass das Fenster nicht erstellt wird, falls es noch nicht vorhanden ist. Der Hauptnutzen davon ist es, zu erkennen, ob ein bestimmtes GUI-Fenster bereits vorhanden ist. Zum Beispiel:</p>
      <pre>Gui EigenesGui:+LastFoundExist
IfWinExist
    MsgBox GUI "EigenesGui" existiert bereits.</pre>
      <p><strong>MaximizeBox</strong>: Aktiviert den Maximieren-Button in der Titelleiste. Diese Option ist bei <em>Resize</em> inbegriffen.</p>
      <p><strong>MinimizeBox</strong> (standardm&auml;&szlig;ig vorhanden): Aktiviert den Minimieren-Button in der Titelleiste.</p>
      <p id="MinSize"><strong>MinSize</strong> und <strong>MaxSize</strong> <span class="ver">[v1.0.44.13+]:</span> Bestimmt die minimale und/oder maximale Gr&ouml;&szlig;e des Fensters, wenn der Benutzer beispielsweise die Gr&ouml;&szlig;e des Fensters durch Ziehen an den Ecken &auml;ndern will. Man kann die W&ouml;rter <em>MinSize</em> und/oder <em>MaxSize</em> ohne Suffix angeben, um die aktuelle Fenstergr&ouml;&szlig;e als Begrenzung zu verwenden (hat das Fenster keine aktuelle Gr&ouml;&szlig;e, gilt die Gr&ouml;&szlig;e, welche von <a href="#Show">Gui Show</a> erstmalig verwendet worden ist). Ansonsten kann Breite mal H&ouml;he angegeben werden: <code>Gui +Resize +MinSize640x480</code>. Die Abmessungen (in Pixel) bestimmen die Gr&ouml;&szlig;e des Client-Fensterbereichs (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#Menu">Men&uuml;leiste</a>). Jede Zahlenangabe muss dezimal sein, nicht hexadezimal.</p>
      <p>Man kann eine der Abmessungen weglassen, um diese unver&auml;ndert zu lassen (z. B. <code>+MinSize640x</code> oder <code>+MinSizex480</code>). Weiterhin kann man Min/MaxSize mehrmals angeben, um die aktuelle Fenstergr&ouml;&szlig;e f&uuml;r eine Abmessung und eine eindeutige Gr&ouml;&szlig;e f&uuml;r die andere Abmessung zu verwenden. Zum Beispiel w&uuml;rde <code>+MinSize +MinSize640x</code> die aktuelle Fenstergr&ouml;&szlig;e f&uuml;r die H&ouml;he und 640 f&uuml;r die Breite verwenden.</p>
      <p>Wenn <em>MinSize</em> und <em>MaxSize</em> nie verwendet werden, gelten die Standardwerte des Betriebssystems (&auml;hnlich wie <code>Gui -MinSize -MaxSize</code>, das diese Standardwerte wiederherstellen kann). Hinweis: das Fenster muss <a href="#Resize">+Resize</a> haben, damit dessen Gr&ouml;&szlig;e vom Benutzer ge&auml;ndert werden kann.</p>
      <p id="OwnDialogs"><strong>OwnDialogs</strong>: <code>Gui +OwnDialogs</code> sollte in einem <a href="../misc/Threads.htm">Thread</a> (z. B. ButtonOK-Subroutine) angegeben werden, bei dem darauffolgende <a href="MsgBox.htm">MsgBox</a>-, <a href="InputBox.htm">InputBox</a>-, <a href="FileSelectFile.htm">FileSelectFile</a>- oder <a href="FileSelectFolder.htm">FileSelectFolder</a>-Dialogfenster einem Fenster untergeordnet werden sollen. Solche Dialogfenster werden dabei modal. Das hei&szlig;t, dass der Benutzer erst wieder mit dem GUI-Fenster interagieren kann, wenn das Dialogfenster geschlossen wird. <a href="ToolTip.htm">ToolTip</a>-, <a href="Progress.htm">Progress</a>- und <a href="Progress.htm">SplashImage</a>-Fenster k&ouml;nnen hingegen nicht modal sein, selbst wenn sie untergeordnet werden. Sie bleiben lediglich immer im Vordergrund. In jedem Fall werden untergeordnete Dialogfenster automatisch zerst&ouml;rt, sobald ihr GUI-Fenster <a href="#Destroy">zerst&ouml;rt</a> wird.</p>
      <p>Normalerweise ist es nicht notwendig, diese Einstellung wieder zu deaktivieren, weil sie keine Auswirkung auf andere <a href="../misc/Threads.htm">Threads</a> hat. Muss ein Thread sowohl untergeordnete als auch nicht-untergeordnete Dialogfenster anzeigen, kann er diese Einstellung per <code>Gui -OwnDialogs</code> deaktivieren.</p>
      <p>Wenn ein Fensternamepr&auml;fix nicht angegeben worden ist (weil beispielsweise <code>Gui +OwnDialogs</code> anstatt <code>Gui EigenesGui:+OwnDialogs</code> verwendet wird), werden die Dialogfenster dem <a href="#DefaultWin">Standardfenster des Threads</a> untergeordnet.</p>
      <p id="Owner"><strong>Owner</strong>: Verwende <em>+Owner</em>, um das Fenster einem anderen unterzuordnen. Ein untergeordnetes Fenster hat standardm&auml;&szlig;ig keine eigenen Taskleistenschaltfl&auml;chen. Ist das Fenster sichtbar, befindet sich es immer im Vordergrund. Dieses Fenster wird automatisch zerst&ouml;rt, sobald das dazugeh&ouml;rige GUI-Fenster zerst&ouml;rt wird. <em>+Owner</em> darf erst <u>nach</u> der Erstellung des &uuml;bergeordneten Fensters verwendet werden, und seit v1.1.05 auch vor und nach der Erstellung des untergeordneten Fensters. Es gibt zwei M&ouml;glichkeiten, <em>+Owner</em> wie folgt zu verwenden:</p>
      <pre>Gui, EigenesGui:+OwnerAnderesGui  <em>; <i>EigenesGui</i> wird <i>AnderesGui</i> untergeordnet.</em>
Gui, EigenesGui:+Owner  <em>; <i>EigenesGui</i> wird dem <a href="Menu.htm#MainWindow">Hauptfenster des Scripts</a> untergeordnet, um die Schaltfl&auml;che in der Taskleiste zu unterdr&uuml;cken.</em></pre>
      <p><span class="ver">[v1.1.03+]:</span> Unmittelbar nach <code>+Owner</code> kann der <a href="#Name">Name</a> oder die Nummer eines vorhandenen Gui-Fensters, oder das <a href="WinGet.htm#ID">HWND</a> eines eigenst&auml;ndigen Fensters erfolgen.</p>
      <p>Hinweis zur Kompatibilit&auml;t: Seit v1.1.03 bewirkt <code>+Owner</code>, dass der WS_CHILD-Style entfernt und der WS_POPUP-Style gesetzt wird. Wenn das &uuml;bergeordnete Fenster eines Gui's gesetzt werden soll, m&uuml;ssen deine Scripts entweder die Option <code>+Parent</code> verwenden oder die entsprechenden Styles <em>nach</em> der Option <code>+Owner</code> &uuml;berschreiben.</p>
      <p>Soll die Interaktion des Benutzers mit dem &uuml;bergeordneten Fenster unterbunden werden, w&auml;hrend ein untergeordnetes Fenster sichtbar ist, muss das &uuml;bergeordnete Fenster mit <code>Gui +Disabled</code> deaktiviert werden. Sobald das untergeordnete Fenster geschlossen oder zerst&ouml;rt wird, kann das &uuml;bergeordnete Fenster wieder mit <code>Gui -Disabled</code> aktiviert werden. Mache das, bevor das Fenster geschlossen bzw. zerst&ouml;rt wird, so dass das &uuml;bergeordnete Fenster wieder automatisch aktiviert werden kann.</p>
      <p id="Parent"><strong>Parent</strong> <span class="ver">[v1.1.03+]</span>: Unmittelbar nach <code>+Parent</code> kann der <a href="#Name">Name</a> oder die Nummer eines vorhandenen Gui-Fensters, oder das <a href="WinGet.htm#ID">HWND</a> eines beliebigen Fensters oder Steuerelements erfolgen, um das Fenster einem anderen unterzuordnen. Wenn das Gui-Fenster wieder in ein eigenst&auml;ndiges Fenster umgewandelt werden soll, verwende <code>-Parent</code>. Diese Option funktioniert auch, nachdem das Fenster erstellt wurde.</p>
      <p id="Resize"><strong>Resize</strong>: Macht das Fenster skalierbar und aktiviert den Maximieren-Button in der Titelleiste. Um das Aktivieren des Buttons zu unterdr&uuml;cken, verwende <code>+Resize -MaximizeBox</code>.</p>
      <p><strong>SysMenu</strong> (standardm&auml;&szlig;ig vorhanden): Verwende <code>-SysMenu</code>, um das Systemmen&uuml; und Icon in der oberen linken Ecke des Fensters zu entfernen, und den Minimieren-, Maximieren- und Schlie&szlig;en-Button auszublenden.</p>
      <p id="Theme"><strong>Theme</strong>: Verwende <code>-Theme</code>, um allen nachfolgenden Steuerelementen im Fenster das klassische Design zuzuweisen (nur ab Windows XP). Sollen danach weitere Steuerelemente unter Ber&uuml;cksichtigung des neuen Designs erstellt werden, verwende <code>+Theme</code>. Hinweis: Diese Option funktioniert nicht, wenn das Betriebssystem &auml;lter als Windows XP ist, oder wenn in Windows XP selbst das klassische Design aktiv ist. Soll diese Einstellung nur f&uuml;r ein bestimmtes Steuerelement ge&auml;ndert werden, schreibe <code>+Theme</code> oder <code>-Theme</code> in dessen Optionen, sobald es erstellt wird.</p>
      <p><strong>ToolWindow</strong>: Stattet das Fenster mit einer schmalen Titelleiste aus, aber ohne Taskleistenschaltfl&auml;che.</p>
      <p><strong>(Unbenannter Style)</strong>: Verwende ein Plus- oder Minuszeichen, gefolgt von einer dezimalen oder hexadezimalen <a href="../misc/Styles.htm">Style-Nummer</a>.</p>
      <p><strong>(Unbenannter ExStyle)</strong>: Verwende ein Plus- oder Minuszeichen, gefolgt von dem Buchstaben "E" und einer dezimalen oder hexadezimalen erweiterten Style-Nummer. Zum Beispiel w&uuml;rde <code>+E0x40000</code> den WS_EX_APPWINDOW-Style hinzuf&uuml;gen, wodurch das Fenster eine Taskleistenschaltfl&auml;che erh&auml;lt, die ansonsten fehlen w&uuml;rde. Weitere nicht-dokumentierte Styles findet man auf <a href="http://www.microsoft.com">www.microsoft.com</a> mit Suchbegriffen wie  WS_EX_APPWINDOW.</p>
      <h2 id="Menu">Gui, Menu [, Men&uuml;name]</h2>
      <p>Befestigt eine Men&uuml;leiste an das Fenster. Verwende dazu den <a href="Menu.htm">Menu</a>-Befehl, um ein normales Men&uuml; zu erstellen. Zum Beispiel:</p>
      <pre>Menu, Dateimen&uuml;, Add, &Ouml;&amp;ffnen<a href="_EscapeChar.htm">`t</a>Ctrl+F, Men&uuml;Datei&Ouml;ffnen  <em>; Siehe untere Bemerkungen zu Ctrl+F.</em>
Menu, Dateimen&uuml;, Add, &amp;Beenden, MenuHandler
Menu, Hilfsmen&uuml;, Add, Inf&amp;o, MenuHandler
Menu, EigeneMen&uuml;leiste, Add, &amp;Datei, :Dateimen&uuml;  <em>; F&uuml;gt die oben erstellten Untermen&uuml;s hinzu.</em>
Menu, EigeneMen&uuml;leiste, Add, &amp;?, :Hilfsmen&uuml;
<strong>Gui, Menu, EigeneMen&uuml;leiste</strong></pre>
      <p>Beachte in der obersten Zeile, dass nach <code>&Ouml;&amp;ffnen</code> die Tastenkombination <code>Ctrl+F</code> erfolgt (mit einem Tabulatorzeichen dazwischen). Anstatt zum Men&uuml;punkt zu navigieren, k&ouml;nnte der Benutzer einfach diese Tastenkombination dr&uuml;cken. <span class="ver">[v1.1.04+]:</span> Verwendet die Tastenkombination nur die Standard-Modifikatortaste Ctrl, Alt oder Shift, wird sie automatisch als <em>Keyboard Accelerator</em> (Zugriffstaste) f&uuml;r das GUI registriert. Einzelzeichen-Zugriffstasten ohne Modifikatoren unterscheiden zwischen Gro&szlig;- und Kleinschreibung und k&ouml;nnen durch ungew&ouml;hnliche Mitteln wie IME oder ALT+NNNN ausgel&ouml;st werden.</p>
      <p>Soll eine bestimmte Tastenkombination nicht automatisch funktionieren, muss m&ouml;glicherweise ein <a href="_IfWinActive.htm">kontextabh&auml;ngiger Hotkey</a> verwendet werden. Beachte aber, dass solche Hotkeys &uuml;blicherweise nicht durch <a href="Send.htm">Send</a> ausgel&ouml;st werden k&ouml;nnen und dass sie eher andere Scripts st&ouml;ren, anstatt eine Standard-Zugriffstaste zu sein.</p>
      <p>Soll die aktuelle Men&uuml;leiste eines Fensters entfernt werden, verwende <code>Gui Menu</code> (lasse den letzten Parameter weg).</p>
      <p>Wurde ein Men&uuml; einmal als Men&uuml;leiste verwendet, sollte es nicht mehr als Popup-Men&uuml; oder Untermen&uuml; eingesetzt werden. Das liegt daran, dass Men&uuml;leisten intern ein anderes Format ben&ouml;tigen (allerdings gilt diese Einschr&auml;nkung nur f&uuml;r die Men&uuml;leiste selbst, nicht f&uuml;r die Untermen&uuml;s). Soll diese Tatsache umgangen werden, erstelle ein Men&uuml;, das die Men&uuml;leiste sein soll, und das gleiche Men&uuml; nochmals, das etwas anderes sein soll.</p>
      <p>Die Verwendung von destruktiven <a href="Menu.htm">Menu-Befehlen</a> wie Delete und DeleteAll bei einem Men&uuml;, das zurzeit eine Men&uuml;leiste ist (und in einigen F&auml;llen auch deren Untermen&uuml;s), wird nicht unterst&uuml;tzt und verursacht eine Fehlermeldung (sofern <a href="Menu.htm">UseErrorLevel</a> nicht aktiv ist). F&uuml;hre die folgenden Schritte durch, um solche &Auml;nderungen vornehmen zu k&ouml;nnen: <br>
      </p>
      <ol>
        <li>Entferne die Men&uuml;leiste mit <code>Gui Menu</code>  (lasse <em>Men&uuml;name</em> weg)</li>
        <li>F&uuml;hre die &Auml;nderungen durch</li>
        <li>F&uuml;ge die Men&uuml;leiste mit <code>Gui, Menu, EigeneMen&uuml;leiste</code> wieder an</li>
      </ol>
      <h2 id="Minimize">Gui, Hide / Minimize / Maximize / Restore</h2>
      <p><code>Gui Hide</code> ist das gleiche wie <a href="#Cancel">Gui Cancel</a>. Die anderen drei Befehle machen das Fenster wieder sichtbar (falls notwendig) und f&uuml;hren dann die entsprechenden Operationen aus. Ist das Fenster nicht vorhanden (da es beispielsweise durch <a href="#Destroy">Gui Destroy</a> zerst&ouml;rt wurde), werden diese Befehle nicht funktionieren.</p>
      <h2 id="Flash">Gui, Flash [, Off]</h2>
      <p>L&auml;sst die Taskleistenschaltfl&auml;che des Fensters aufblinken. Dazu wird die Farbe der Titelleiste und/oder Taskleistenschaltfl&auml;che (falls vorhanden) invertiert. Das optionale Wort "OFF" bewirkt, dass die Titelleiste und Taskleistenschaltfl&auml;che ihre urspr&uuml;nglichen Farben wiederherstellen (das Verhalten ist allerdings vom jeweiligen Betriebssystem abh&auml;ngig). Im folgenden Beispiel wird das Fenster dreimal aufblinken, weil jeweils ein Paar von "Gui Flash" die Darstellung invertiert und wiederherstellt:</p>
      <pre>Loop 6
{
    Gui Flash
    Sleep, 500  <em>; Dieser Wert ist ziemlich empfindlich; &Auml;nderungen k&ouml;nnen zu unerwarteten Ergebnissen f&uuml;hren.</em>
}</pre>
      <h2 id="Default">Gui, GuiName:Default</h2>
      <p>&Auml;ndert den <a href="#MultiWin">GUI-Standardfensternamen</a> des <a href="../misc/Threads.htm">aktuellen Threads</a>, der immer dann verwendet wird, wenn bei <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und dem Gui-Befehl selbst kein Fenstername  angegeben ist. Im folgenden Beispiel wird der Standardname des Fensters auf "EigenesGui" gesetzt: <code>Gui EigenesGui:Default</code>. In "<a href="#DefaultWin">Standardnummer eines Threads</a>" findet man mehr Informationen &uuml;ber das Standardfenster.</p>
      <h2 id="Position">Positionierung und Layout mittels SmartGUI Creator </h2>
      <p>F&uuml;r einfache Layouts reichen die Optionen, die im n&auml;chsten Abschnitt beschrieben sind, vollkommen aus. Mit dem SmartGUI Creator von Rajat kann man auf einfache und visuelle Weise ein GUI-Fenster erstellen. Das hei&szlig;t, dass das erstellt wird, was man sieht (WYSIWYG). Der SmartGUI Creator ist kostenlos und kann auf <a href="http://www.autohotkey.com/docs/SmartGUI/">www.autohotkey.com/docs/SmartGUI/</a> heruntergeladen werden.</p>
      <h2 id="PosSize">Position und Gr&ouml;&szlig;e von Steuerelementen anpassen</h2>
      <p>Wenn man einige Abmessungen oder Koordinaten in <em>Optionen</em> wegl&auml;sst, wird das Steuerelement relativ zum vorherigen Steuerelement positioniert und/oder dessen Gr&ouml;&szlig;e abh&auml;ngig vom Inhalt automatisch angepasst.</p>
      <p>Die folgenden Optionen werden unterst&uuml;tzt:</p>
      <p id="R"><strong>R</strong>: Textzeilen (kann eine Flie&szlig;kommazahl wie bei R2.5 enthalten). <strong>R</strong> wird gegen&uuml;ber <strong>H</strong> (H&ouml;he) meist bevorzugt. Sind sowohl <strong>R</strong> als auch <strong>H</strong> vorhanden, wird <strong>R</strong> Vorrang haben. Bei einer GroupBox bestimmt diese Einstellung die Menge an Steuerelementen, f&uuml;r denen innerhalb der Box Platz geschaffen werden soll. Bei <a href="GuiControls.htm#DropDownList">DropDownLists</a>, <a href="GuiControls.htm#ComboBox">ComboBoxes</a> und <a href="GuiControls.htm#ListBox">ListBoxes</a> ist das die Anzahl an Eintr&auml;gen, die gleichzeitig im Listenbereich sichtbar sein sollen (aber in Windows XP oder h&ouml;her ist es oft besser, die Optionen <strong>R</strong> und <strong>H</strong> bei DropDownList und ComboBox wegzulassen, damit die aufklappbare Liste automatisch die verf&uuml;gbare H&ouml;he des Desktops ausnutzen kann). Bei allen anderen Steuerelementen ist <strong>R</strong>  die Anzahl der Textzeilen, die sichtbar in das Steuerelement reinpassen sollen.</p>
      <p><strong>W</strong>: Breite in Pixeln. Ist diese Option nicht vorhanden, berechnet sich die Breite bei einigen Steuerelementarten automatisch, basierend auf deren Inhalt. Alle anderen Steuerelementarten haben standardm&auml;&szlig;ig folgende Breiten:<br>
        Tab-Steuerelemente: Das 30-fache der aktuellen Schriftgr&ouml;&szlig;e, plus das 3-fache des <a href="#Margin">X-Abstands</a>.<br>
        Vertikale Scrollleiste: Das 2-fache der aktuellen Schriftgr&ouml;&szlig;e.<br>
        Horizontale Scrollleiste, horizontaler Slider, DropDownList, ComboBox, ListBox, GroupBox, Edit und Hotkey: Das 15-fache der aktuellen Schriftgr&ouml;&szlig;e (au&szlig;er GroupBox, das mit 18 multipliziert wird, um  innerhalb der Abst&auml;nde Platz zu schaffen).</p>
      <p><strong>H</strong>: H&ouml;he in Pixeln. Fehlt sowohl <strong>H</strong> als auch <strong>R</strong>, verwenden DropDownLists, ComboBoxes, ListBoxes und leere mehrzeilige Eingabefelder standardm&auml;&szlig;ig eine H&ouml;he von 3 Zeilen; GroupBoxes standardm&auml;&szlig;ig 2 Zeilen; vertikale Slider und Scrollleisten standardm&auml;&szlig;ig 5 Zeilen; horizontale Slider standardm&auml;&szlig;ig 30 Pixel (au&szlig;er wenn eine Dicke angegeben wurde); horizontale Scrollleisten standardm&auml;&szlig;ig das 2-fache der aktuellen Schriftgr&ouml;&szlig;e; Hotkey-Steuerelemente standardm&auml;&szlig;ig 1 Zeile; und Tab-Steuerelemente standardm&auml;&szlig;ig 10 Zeilen. Bei allen anderen Steuerelementen berechnet sich die H&ouml;he automatisch, basierend auf deren Inhalt. Beachte, dass sich <strong>H</strong> bei DropDownLists und ComboBoxes aus dem immer sichtbaren Teil und dem dazugeh&ouml;rigen Listenbereich zusammensetzt (selbst wenn die H&ouml;he zu niedrig ist, wird mindestens immer ein Element in der Liste angezeigt). Auch hier gilt, dass man <strong>R</strong> anstelle von <strong>H</strong> bevorzugen sollte, weil es ein Steuerelement daran hindern kann, unvollst&auml;ndige Textzeilen darzustellen.</p>
      <p><strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong> und <strong>hp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) k&ouml;nnen dazu verwendet werden, die Abmessungen eines Steuerelements an die Abmessungen des zuvor hinzugef&uuml;gten Steuerelements anzupassen, optional mit einem Plus- oder Minuszeichen. Zum Beispiel w&uuml;rde <code>wp</code> die Breite eines Steuerelements auf die Breite des vorherigen Steuerelements setzen, und <code>wp-50</code> w&uuml;rde die Breite des vorherigen Steuerelements verwenden, subtrahiert mit 50.</p>
      <p id="XY"><strong>X</strong>: X-Position. Zum Beispiel w&uuml;rde <code>x0 y0</code> das Steuerelement in die obere linke Ecke des Client-Bereichs positionieren (das ist der Fensterbereich ohne Rahmen, Titelleiste und Men&uuml;leiste). Ist<strong> Y</strong> vorhanden und<strong> X</strong> nicht, wird das Steuerelement auf die rechte Seite der zuvor eingef&uuml;gten Steuerelementen positioniert, als w&uuml;rde eine neue "Spalte" beginnen.</p>
      <p><strong>Y</strong>: Y-Position. Ist <strong>X</strong> vorhanden und <strong>Y</strong> nicht, wird das Steuerelement auf die untere Seite der zuvor eingef&uuml;gten Steuerelementen positioniert, als w&uuml;rde eine neue "Zeile" beginnen.</p>
      <p>Das Weglassen von <strong>X</strong> und/oder <strong>Y</strong> hat den Vorteil, dass sich ein GUI-Layout sp&auml;ter automatisch daran anpassen kann, wenn die Gr&ouml;&szlig;e eines Steuerelements oder die Schriftart ge&auml;ndert wird. Wenn dagegen bei jedem Steuerelement ein absoluter Wert angegeben worden ist, muss man die Position von allen Steuerelementen, die sich darunter oder daneben befinden, manuell verschieben.</p>
      <p>Ist <strong>X</strong> und <strong>Y</strong> nicht vorhanden, wird das Steuerelement unterhalb des vorherigen Steuerelements positioniert, basierend auf den voreingestellten Innenabstand.</p>
      <p id="PosPlus">Bei Bedarf  kann bei <strong>X</strong> und <strong>Y</strong> ein Pluszeichen eingef&uuml;gt werden, um ein Steuerelement relativ zum rechten oder unteren Rand des zuvor eingef&uuml;gten Steuerelements zu positionieren. Zum Beispiel w&uuml;rde <code>Y+10</code> das Steuerelement 10 Pixel unter dem vorherigen Steuerelement positionieren, anstatt den voreingestellten Innenabstand zu verwenden. <code>X+10</code> w&uuml;rde das Steuerelement 10 Pixel rechts neben dem vorherigen Steuerelement positionieren. Da negative Zahlen wie <code>X-10</code> f&uuml;r die absolute Positionierung vorbehalten sind, ist es f&uuml;r einen negativen Offset notwendig, ein Pluszeichen davor einzuf&uuml;gen. Zum Beispiel: <code>X+-10</code>.</p>
      <p><strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong> und <strong>yp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) k&ouml;nnen dazu verwendet werden, Steuerelemente relativ zur linken oberen Ecke des vorherigen Steuerelements zu positionieren, um beispielsweise Steuerelemente in einer <a href="GuiControls.htm#GroupBox">GroupBox</a> einzuschlie&szlig;en.</p>
      <p><strong>xm</strong> und <strong>ym</strong> k&ouml;nnen dazu verwendet werden, ein Steuerelement jeweils am linken und rechten <a href="#Margin">Abstand</a> des Fensters zu positionieren (nach diesen Optionen kann ein Plus-/Minuszeichen und eine Zahl folgen). Wenn <strong>ym</strong> verwendet wird, ohne eine X-Position angegeben zu haben, wird das Steuerelement am oberen Abstand positioniert, aber auf der rechten Seite von allen zuvor eingef&uuml;gten Steuerelementen, als w&uuml;rde eine neue "Spalte" beginnen. Das Gegenteil davon (<strong>xm</strong> ohne Y-Position) gilt auch.</p>
      <p id="xs"><strong>xs</strong> und <strong>ys</strong> sind &auml;hnlich wie <strong>xm</strong> und <strong>ym</strong>, au&szlig;er dass sie sich auf Koordinaten beziehen, die gespeichert wurden, w&auml;hrend ein Steuerelement hinzugef&uuml;gt worden ist, das das Wort <a href="#Section">Section</a> in Option hat (das erste Steuerelement im Fenster beginnt immer eine neue Sektion, auch wenn dieses Wort nicht direkt angegeben wurde). Wenn <strong>ys</strong> verwendet wird, ohne eine X-Position angegeben zu haben, wird das Steuerelement auf die zuvor gespeicherte Y-Position positioniert, aber auf der rechten Seite von allen Steuerelementen, die seit der letzten Verwendung von <a href="#Section">Section</a> hinzugef&uuml;gt worden sind; als w&uuml;rde eine neue "Spalte" innerhalb der Sektion beginnen. Zum Beispiel:</p>
      <pre>Gui, Add, Edit, w600  <em>; F&uuml;gt ein breites Eingabefeld am oberen Rand des Fensters hinzu.</em>
Gui, Add, Text, <strong>Section</strong>, Vorname:  <em>; Speichert die Position des Steuerelements und beginnt eine neue Sektion.</em>
Gui, Add, Text,, Nachname:
Gui, Add, Edit, <strong>ys</strong>  <em>; Beginnt eine neue Spalte innerhalb dieser Sektion.</em>
Gui, Add, Edit
Gui, Show</pre>
      <p>Das Gegenteil davon (<strong>xs</strong> ohne Y-Position) gilt auch.</p>
      <p>Bei Bedarf kann nach <strong>xs</strong> und <strong>ys</strong> ein Plus-/Minuszeichen und eine Zahl erfolgen. Au&szlig;erdem ist es m&ouml;glich, gleichzeitig das Wort <a href="#Section">Section</a> und xs/ys in den Optionen des Steuerelements anzugeben, wodurch es die vorherige Position noch f&uuml;r sich selbst verwendet, aber f&uuml;r nachfolgende Steuerelemente eine neue Sektion erstellt.</p>
      <h2 id="Events">Speichern von und Reagieren auf Benutzereingaben</h2>
      <p id="var"><strong>V</strong>: Variable. Verbindet eine Variable mit einem Steuerelement. Nach dem Buchstaben V kann der Name einer globalen Variable angegeben werden (oder eine <a href="../Functions.htm#ByRef">lokale ByRef-Variable</a>, die auf eine globale Variable verweist, oder eine <a href="../Functions.htm#static">statische Variable</a> seit v1.0.46.01). Zum Beispiel w&uuml;rde <code><strong>v</strong>EigenesEdit</code> den Inhalt des Steuerelements in die Variable <em>EigenesEdit</em> speichern, sobald <a href="#Submit">Gui Submit</a> verwendet wird. Das Zuweisen von Variablen ist auch bei Steuerelementen hilfreich, die nicht eingabef&auml;hig sind (z. B. ein Text oder GroupBox), weil die Namen solcher Variablen beim Verwenden von  <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> auch als eindeutige Kennung f&uuml;r Steuerelemente dienen k&ouml;nnen. Hinweis: <a href="#Submit">Gui Submit</a> &auml;ndert weder die Inhalte der Variablen von nicht-eingabef&auml;higen Steuerelementen (z. B. Text oder GroupBox), noch von anderen, wie in ihren Sektionen beschrieben (z. B. <a href="ListView.htm">ListView</a> und <a href="TreeView.htm">TreeView</a>).</p>
      <p id="label"><strong>G</strong>: Gosub (g-Label). Startet automatisch eine Subroutine, wenn der Benutzer ein Steuerelement anklickt oder &auml;ndert. Gebe nach dem Buchstaben G den Namen des <a href="../misc/Labels.htm">Labels</a> an, das ausgef&uuml;hrt werden soll. Man kann <code>gCancel</code> angeben, um ein indirektes <a href="#Cancel">Gui Cancel</a> durchzuf&uuml;hren (aber falls ein Label namens "Cancel" im Script bereits vorkommt, wird dieser stattdessen ausgef&uuml;hrt). Die Subroutine kann auf folgende interne Variablen zur&uuml;ckgreifen: <a href="../Variables.htm#Gui">A_Gui</a>, <a href="../Variables.htm#GuiControl">A_GuiControl</a>, <a href="../Variables.htm#GuiEvent">A_GuiEvent</a> und <a href="../Variables.htm#EventInfo">A_EventInfo</a>.</p>
      <h2 id="OtherOptions">Steuerelemente: Gew&ouml;hnliche Styles und Optionen</h2>
      <p>Hinweis: Vorzeichenlose Eigenschaften werden standardm&auml;&szlig;ig hinzugef&uuml;gt; zum Beispiel ist <code>Wrap</code> das gleiche wie <code>+Wrap</code>. Dagegen w&uuml;rde <code>-Wrap</code> die Eigenschaft zur Zeilenumbrechung entfernen.</p>
      <p id="AltSubmit"><strong>AltSubmit</strong>: Verwendet eine alternative &Uuml;bermittlungsmethode. Bei DropDownList, ComboBox oder ListBox bewirkt <a href="Gui.htm#Submit">Gui Submit</a>, dass die Position des ausgew&auml;hlten Elements gespeichert wird, anstatt dessen Text.  ComboBox: Ist kein Element ausgew&auml;hlt, wird der Text im Eingabefeld abgespeichert; DropDownList oder ListBox: Ist kein Element ausgew&auml;hlt, werden ihre <a href="#var">zugewiesenen Ausgabevariablen</a> leer gemacht. Hinweis: AltSubmit beeinflusst auch das Verhalten von <a href="GuiControlGet.htm">GuiControlGet</a>, wenn der Inhalt von solchen Steuerelementen abgerufen wird.</p>
      <p><strong>C</strong>: Farbe des Textes (funktioniert nicht bei <a href="GuiControls.htm#Button">Buttons</a>). Gebe nach dem Buchstaben C den Namen einer Farbe (siehe <a href="Progress.htm#colors">Farbtabelle</a>) oder ein RGB-Wert an (das 0x-Pr&auml;fix ist optional). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
      <p><strong>Disabled</strong>: Zeigt ein eingabef&auml;higes Steuerelement in seinem deaktivierten Zustand an, wodurch der Benutzer das Steuerelement weder fokussieren noch dessen Inhalt &auml;ndern kann. Verwende <a href="GuiControl.htm#Enable">GuiControl Enable</a>, um es sp&auml;ter wieder zu aktivieren. Hinweis: Um die Eingabem&ouml;glichkeit eines Edit-Steuerelements zu unterdr&uuml;cken, ist der String <code>ReadOnly</code> besser geeignet. Nach dem Wort <code>Disabled</code> kann auch eine 0 oder 1 f&uuml;r den Anfangsstatus erfolgen (0 f&uuml;r aktiviert, 1 f&uuml;r deaktiviert). Das hei&szlig;t, dass <code>Disabled</code> und <code>Disabled%VarMitEins%</code> identisch sind.</p>
      <p><strong>Hidden</strong>: Das Steuerelement wird zu Beginn unsichtbar gemacht. Verwende <a href="GuiControl.htm#Show">GuiControl Show</a>, um es sp&auml;ter wieder sichtbar zu machen. Nach dem Wort <code>Hidden</code> kann auch eine 0 oder 1 f&uuml;r den Anfangsstatus erfolgen (0 f&uuml;r sichtbar, 1 f&uuml;r versteckt).  Das hei&szlig;t, dass <code>Hidden</code> und <code>Hidden%VarMitEins%</code> identisch sind.</p>
      <p><strong>Left</strong>: Richtet den Text im Steuerelement nach links aus.</p>
      <p><strong>Right</strong>: Richtet den Text im Steuerelement nach rechts aus. Bei CheckBox- und Radio-Steuerelementen wird das Auswahlfeld auf die rechte Seite gesetzt.</p>
      <p><strong>Center</strong>: Zentriert den Text im Steuerelement auf horizontaler Ebene aus.</p>
      <p id="Section"><strong>Section</strong>: Beginnt eine neue Sektion und speichert die Position von diesem Steuerelement ab, das danach mit den Positionierungsoptionen <em>xs</em> und <em>ys</em> weiterverwendet werden kann (siehe <a href="#xs">oben</a>).</p>
      <p id="Tabstop"><strong>Tabstop</strong>: Verwende <code>-Tabstop</code> bei einem eingabef&auml;higen Steuerelement, das beim Dr&uuml;cken der TAB-Taste &uuml;bersprungen werden soll.</p>
      <p id="Wrap"><strong>Wrap</strong>: Aktiviert den automatischen Zeilenumbruch im Steuerelement. Da nahezu alle Steuerelemente den automatischen Zeilenumbruch aktiv haben, sollte man <code>-Wrap</code> verwenden, um den automatischen Zeilenumbruch zu deaktivieren.</p>
      <p><strong>VScroll</strong>: Stellt eine vertikale Scrollleiste zur Verf&uuml;gung, wenn das bei dem Steuerelement m&ouml;glich ist.</p>
      <p><strong>HScroll</strong>: Stellt eine horizontale Scrollleiste zur Verf&uuml;gung, wenn das bei dem Steuerelement m&ouml;glich ist. Der Rest von diesem Absatz gilt nur f&uuml;r die <a href="GuiControls.htm#ListBox">ListBox</a>. Die Breite des scrollbaren Bereichs ist standardm&auml;&szlig;ig 3-mal so gro&szlig; wie die Breite der ListBox. Wenn die Breite des scrollbaren Bereichs selbst definiert werden soll, f&uuml;ge nach dem Wort HScroll eine Zahl ein. Zum Beispiel w&uuml;rde <code>HScroll500</code> einen scrollbaren Bereich von 500 Pixeln innerhalb der ListBox erm&ouml;glichen. Ist die angegebene Breite des Bereichs allerdings kleiner als die Breite der ListBox, wird die Scrollleiste nicht angezeigt (nur mit <em>HScroll</em> ist es sp&auml;ter m&ouml;glich, die horizontale Scrollleiste per <code><a href="GuiControl.htm">GuiControl</a>, +HScroll500, EigeneScrollleiste</code> einzuf&uuml;gen).</p>
      <h2>Steuerelemente: Ungew&ouml;hnliche Styles und Optionen</h2>
      <p id="BackgroundTrans"><strong>BackgroundTrans</strong>: Verwendet einen transparenten Hintergrund, wodurch Steuerelemente, die sich hinter einem Text-, Picture- oder GroupBox-Steuerelement befinden, durchscheinen k&ouml;nnen. Zum Beispiel w&uuml;rde ein transparentes Text-Steuerelement, das sich auf ein Picture-Steuerelement befindet, seinen Text erscheinen lassen, als w&uuml;rde er zum Bild geh&ouml;ren. Mit  <code><a href="GuiControl.htm">GuiControl</a>, +Background</code> kann man diese Optionen wieder entfernen. Im <a href="GuiControls.htm#PicAltSubmit">AltSubmit-Abschnitt des Picture-Steuerelements</a> findet man weitere Informationen &uuml;ber transparente Bilder. Bekannte Einschr&auml;nkung: BackgroundTrans kann sich bei Steuerelementen innerhalb eines  <a href="GuiControls.htm#Tab">Tab-Steuerelements</a> falsch verhalten, das eine <a href="ListView.htm">ListView</a> enth&auml;lt.</p>
      <p><strong>-Background</strong>: Verwendet die Standard-Hintergrundfarbe, anstatt die Farbe, welche von <a href="#Color">Gui Color</a> gesetzt wurde. Das wird h&auml;ufig eingesetzt, um ein Tab-Steuerelement dazu zu bringen, seine Standardfarbe anstelle der Fensterfarbe zu verwenden. Mit <code><a href="GuiControl.htm">GuiControl</a>, +Background</code> kann diese Option wieder entfernt werden.</p>
      <p><strong>Border</strong>: Umrahmt das Steuerelement mit einer d&uuml;nnen Linie. Die meisten Steuerelemente ben&ouml;tigen diese Option nicht, da sie bereits einen typenspezifischen Rahmen haben. Beim Hinzuf&uuml;gen eines Rahmens an ein <em>vorhandenes</em> Steuerelement kann es notwendig sein, die Breite und H&ouml;he des Steuerelements um einen Pixel zu erweitern.</p>
      <p id="HwndOutputVar"><strong>Hwnd</strong><em>AusgabeVar</em> <span class="ver">[v1.0.46.01+]:</span> In Verbindung mit <a href="#Add">Gui Add</a> wird diese Option das Fenster-Handle (HWND) des neu erstellten Steuerelements in <em>AusgabeVar</em> speichern. Zum Beispiel: <code>Gui, Add, Edit, vEigenesEdit HwndEigenesEditHwnd</code>. Befindet sich dieses Beispiel in einer Funktion, wird <em>EigenesEditHwnd</em> als eine <a href="../Functions.htm#DynVar">dynamische Variable</a> behandelt. Das HWND eines Steuerelements wird oft mit <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall</a> verwendet. Es kann direkt als <a href="../misc/WinTitle.htm#ahk_id">ahk_id-Fenstertitel</a> (das auch bei versteckten Steuerelementen funktioniert, selbst wenn <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> deaktiviert ist) oder <span class="ver">[seit v1.1.04+]</span> bei GuiControl und GuiControlGet als <em>SteuerelementID</em>-Parameter verwendet werden. Beachte zudem, dass das HWND eines &uuml;bergeordneten Fensters per <code><a href="#LastFoundExist">Gui EigenesGui:+HwndAusgabeVar</a></code> abgerufen werden kann.</p>
      <p><strong>Theme</strong>: Diese Option kann dazu verwendet werden, das aktuelle Fenster-Design des neu erstellten Steuerelements zu &uuml;berschreiben. Bei bereits vorhandenen Steuerelementen hat diese Option keinen Effekt; allerdings wird das m&ouml;glicherweise in einer zuk&uuml;nftigen Version ge&auml;ndert. Siehe <a href="#Theme">Gui +/-Theme</a> f&uuml;r Details.</p>
      <p><strong>(Unbenannter Style)</strong>: Verwende ein Plus- oder Minuszeichen, gefolgt von einer dezimalen oder hexadezimalen <a href="../misc/Styles.htm">Style-Nummer</a>. Vorzeichenlose Styles werden standardm&auml;&szlig;ig hinzugef&uuml;gt.</p>
      <p><strong>(Unbenannter ExStyle)</strong>: Verwende ein Plus- oder Minuszeichen, gefolgt von dem Buchstaben "E" 
        und einer dezimalen oder hexadezimalen erweiterten Style-Nummer. Vorzeichenlose Styles werden standardm&auml;&szlig;ig hinzugef&uuml;gt. Zum Beispiel w&uuml;rde <code>E0x200</code> den WS_EX_CLIENTEDGE-Style hinzuf&uuml;gen, der einen Rahmen mit abgesenktem Rand bereitstellt, welcher gut geeignet f&uuml;r Picture-Steuerelemente und &auml;hnliches ist. Weitere nicht-dokumentierte Styles findet man auf <a href="http://www.microsoft.com">www.microsoft.com</a>, z. B. mit der Suche nach WS_EX_CLIENTEDGE.</p>
      <h2 id="Labels">Fensterereignisse</h2>
      <p>Die folgenden Label (Subroutinen) werden automatisch mit einem GUI-Fenster verbunden, falls diese im Script vorhanden sind:</p>
      <p id="GuiClose"><strong>GuiClose</strong>: Startet, wenn das Fenster durch Dr&uuml;cken des  X-Buttons in der Titelleiste, durch Ausw&auml;hlen von "Schlie&szlig;en" im Systemmen&uuml; oder per <a href="WinClose.htm">WinClose</a> geschlossen wird. Fehlt dieses Label, bewirkt das Schlie&szlig;en des Fensters, dass es einfach versteckt wird, was den gleichen Effekt hat wie <a href="#Cancel">Gui Cancel</a>. Einer der h&auml;ufigsten Ma&szlig;nahmen f&uuml;r GuiClose ist <a href="ExitApp.htm">ExitApp</a>. Zum Beispiel:</p>
      <pre>GuiClose:
ExitApp</pre>
      <p id="GuiEscape"><strong>GuiEscape</strong>: Startet, wenn der Benutzer die ESC-Taste dr&uuml;ckt, w&auml;hrend das GUI-Fenster aktiv ist. Fehlt dieses Label, wird das Dr&uuml;cken der ESC-Taste nichts bewirken. Bekannte Einschr&auml;nkung: Sollte das erste Steuerelement im Fenster deaktiviert sein (wahrscheinlich abh&auml;ngig vom Typ des Steuerelements), wird das GuiEscape-Label nicht ausgef&uuml;hrt. Dieser Effekt k&ouml;nnte auch durch andere Umst&auml;nde ausgel&ouml;st werden.</p>
      <p id="GuiSize"><strong>GuiSize</strong>: Startet, wenn das Fenster skaliert, minimiert, maximiert oder wiederhergestellt wird. Die internen Variablen <a href="../Variables.htm#GuiWidth">A_GuiWidth</a> und <a href="../Variables.htm#GuiWidth">A_GuiHeight</a> enthalten jeweils die neue Breite und H&ouml;he des Client-Fensterbereichs (das ist der Bereich ohne Rahmen, Titelleiste und Men&uuml;leiste). Au&szlig;erdem enthalten <a href="../Variables.htm#EventInfo">A_EventInfo</a> und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> jeweils eine der folgenden Zahlen:</p>
      <p>0: Das Fenster wurde wiederhergestellt oder dessen Gr&ouml;&szlig;e auf normale Weise ge&auml;ndert, wie durch Ziehen des Rahmens.<br>
        1: Das Fenster wurde minimiert.<br>
        2: Das Fenster wurde maximiert.</p>
      <p>Ein Script kann GuiSize dazu verwenden, die Position und Gr&ouml;&szlig;e der Steuerelemente neu anzupassen, w&auml;hrend der Benutzer die Gr&ouml;&szlig;e des Fensters &auml;ndert. Dieser Ablauf kann z. B. mit dem <a href="http://www.autohotkey.net/%7ETitan/anchor.html">"Anchor"-Script von Titan</a> via <a href="_Include.htm">#Include</a> vereinfacht werden.</p>
      <p id="GuiContextMenu"><strong>GuiContextMenu</strong>: Startet immer dann, wenn der Benutzer  ein Rechtsklick im Fenster macht (au&szlig;er Titelleiste und Men&uuml;leiste).  Es wird auch gestartet, wenn die MEN&Uuml;-Taste oder UMSCHALT+F10 gedr&uuml;ckt wird. Im Gegensatz zu den meisten anderen GUI-Labels k&ouml;nnen mehrere <a href="../misc/Threads.htm">Threads</a> von diesem Label vorhanden sein. Innerhalb des GuiContextMenu-Labels sind folgende interne Variablen verf&uuml;gbar:</p>
      <ol>
        <li><a href="../Variables.htm#GuiControl">A_GuiControl</a>, die den <a href="../Variables.htm#GuiControl">Text oder Variablennamen</a> des Steuerelements enth&auml;lt, das das Ereignis empfangen hat (leer, wenn nichts).</li>
        <li><a href="../Variables.htm#EventInfo">A_EventInfo</a>: Falls ListBox, ListView oder TreeView das Ziel des Kontextmen&uuml;s ist (kann mit A_GuiControl ermittelt werden), gibt A_EventInfo an, welches der Elemente des Steuerelements das Ziel ist:<br>
          <a href="GuiControls.htm#ListBox">ListBox</a> oder <a href="ListView.htm">ListView</a>: A_EventInfo enth&auml;lt die Nummer der aktuell fokussierten Zeile (0, wenn keine).<br>
          <a href="TreeView.htm">TreeView</a>: Bei Rechtsklick enth&auml;lt A_EventInfo die ID-Nummer des angeklickten Elements (0, wenn der Benutzer kein Element angeklickt hat). Beim Dr&uuml;cken der MEN&Uuml;-Taste oder UMSCHALT+F10 enth&auml;lt A_EventInfo die ID-Nummer des ausgew&auml;hlten Elements.</li>
        <li>A_GuiX und A_GuiY, die die Koordinaten X und Y enthalten, auf denen das Men&uuml; angezeigt werden soll (z. B. <code><a href="Menu.htm">Menu</a>, EigenerKontext, Show, %A_GuiX%, %A_GuiY%</code>). Die Koordinaten beziehen sich auf die linke obere Ecke des Fensters. </li>
        <li>A_GuiEvent, die das Wort "RightClick" enth&auml;lt, wenn der Benutzer ein Rechtsklick macht, oder "Normal", wenn das Men&uuml; durch die MEN&Uuml;-Taste oder UMSCHALT+F10 ausgel&ouml;st worden ist.</li>
      </ol>
      <p>Hinweis: Da die Steuerelemente <a href="GuiControls.htm#Edit">Edit</a> und <a href="GuiControls.htm#MonthCal">MonthCal</a> ihre eigenen Kontextmen&uuml;s haben, wird ein Rechtsklick auf solche Steuerelemente GuiContextMenu nicht starten.</p>
      <p id="GuiDropFiles"><strong>GuiDropFiles</strong>: Startet immer dann, wenn Dateien oder Ordner per Drag&amp;Drop auf das Fenster abgelegt worden sind (wenn das Label bereits l&auml;uft, werden Drop-Ereignisse ignoriert). Innerhalb des GuiDropFiles-Labels sind folgende interne Variablen verf&uuml;gbar:</p>
      <ol>
        <li><a href="../Variables.htm#GuiControl">A_GuiControl</a>, die den <a href="../Variables.htm#GuiControl">Text oder Variablennamen</a> des Steuerelements enth&auml;lt, auf dem die Dateien abgelegt worden sind (leer, wenn keine).</li>
        <li><a href="../Variables.htm#EventInfo">A_EventInfo</a> und <a href="../misc/ErrorLevel.htm">ErrorLevel</a>, die die Anzahl an abgelegten Dateien enthalten.</li>
        <li>A_GuiX und A_GuiY, die die Koordinaten X und Y  enthalten, auf denen die Dateien abgelegt worden sind (bezogen auf die obere linke Ecke des Fensters). </li>
        <li>A_GuiEvent, die die Namen der abgelegten Dateien enth&auml;lt. Jeder Dateiname, au&szlig;er der letzte, endet mit einem Zeilenumbruchszeichen (`n).</li>
      </ol>
      <p>Sollen einzelne Dateien extrahiert werden, verwende eine <a href="LoopParse.htm">Parsing-Schleife</a> wie folgt: </p>
      <pre><em>; BEISPIEL #1:</em>
Loop, parse, A_GuiEvent, `n
{
    MsgBox, 4,, Dateinummer %A_Index% ist:`n%A_LoopField%.`n`nWeiter?
    IfMsgBox, No, Break
}

<em>; BEISPIEL #2: Nur die erste Datei extrahieren:</em>
Loop, parse, A_GuiEvent, `n
{
    FirstFile = %A_LoopField%
    Break
}

<em>; BEISPIEL #3: Dateien alphabetisch sortieren:</em>
FileList = %A_GuiEvent%
Sort, FileList
Loop, parse, FileList, `n
    MsgBox Dateinummer %A_Index% ist:`n%A_LoopField%.</pre>
      <p>Soll Drag&amp;Drop nur vor&uuml;bergehend bei einem Fenster deaktiviert werden, entferne den WS_EX_ACCEPTFILES-Style per <code>Gui -E0x10</code>. Mit <code>Gui +E0x10</code> kann das wieder aktiviert werden.</p>
      <p><strong>Erkennen von und reagieren auf andere Ereignisse</strong>: Andere Arten von GUI-Ereignissen k&ouml;nnen per <a href="OnMessage.htm">OnMessage()</a> erkannt und verarbeitet werden. Zum Beispiel kann ein Script dazu gebracht werden, immer dann kontextabh&auml;ngige Hilfe per ToolTip anzuzeigen, wenn der Benutzer den Mauszeiger &uuml;ber bestimmte Steuerelemente im Fenster bewegt. Siehe dazu das Beispiel mit <a href="#ExToolTip">GUI-ToolTip</a>.</p>
      <h2 id="MultiWin">Mehrere GUI-Fenster erstellen</h2>
      <p>Abgesehen vom ersten Fenster m&uuml;ssen bei anderen Fenstern deren Namen oder Nummern (falls vorhanden) angegeben werden, damit sie die oben genannten Labels verwenden k&ouml;nnen. Zum Beispiel w&uuml;rden 2GuiEscape und 2GuiClose die Standard-Label des zweiten Fensters sein, w&auml;hrend <em>EigenesGui</em>GuiEscape und <em>EigenesGui</em>GuiClose die Standard-Label f&uuml;r <em>EigenesGui</em> sind. Um benutzerdefinierte Labelnamen zu verwenden, siehe <a href="#PlusLabel"><code>Gui +Label</code></a>.</p>
      <p>Um neben dem <a href="Gui.htm#DefaultWin">Standard</a>-Fenster auch andere Fenster bearbeiten zu k&ouml;nnen, f&uuml;ge dessen Name oder Nummer (oder seit v1.1.03 dessen <a href="#GuiHwndOutputVar">HWND</a>) gefolgt von einem Doppelpunkt vor dem Unterbefehl wie folgt ein:</p>
      <pre>Gui, <strong>EigenesGui:</strong>Add, Text,, Text f&uuml;r das &Uuml;ber-Fenster.
Gui, <strong>EigenesGui:</strong>Show</pre>
      <p>Mit <a href="#Default"><code>Gui EigenesGui:Default</code></a> kann verhindert werden, dass das oben genannte Pr&auml;fix "EigenesGui:" angegeben werden muss. Innerhalb eines <a href="Gui.htm#DefaultWin">GUI-Threads</a>, der das gleiche Fenster verarbeitet, welches den Thread ausgef&uuml;hrt hat, ist das Pr&auml;fix au&szlig;erdem nicht notwendig.</p>
      <p id="Name"><span class="ver">[v1.1.03+]:</span> F&uuml;r die Gui-Namen gelten die gleichen Regeln wie bei <a href="../Variables.htm#Variable_names">Variablennamen</a>. Jede Nummer gr&ouml;&szlig;er als 99 oder l&auml;nger als zwei Zeichen (wie z. B. 0x01) muss das HWND eines vorhandenen Gui-Fensters sein, denn ansonsten w&uuml;rde dieser Befehl fehlschlagen. Je nach verf&uuml;gbaren Systemressourcen k&ouml;nnen beliebig viele Fenster erstellt werden.</p>
      <p><span class="ver">[v1.1.04+]:</span> Mit <a href="Gui.htm#New">Gui, New</a> k&ouml;nnen beliebig viele unbenannte GUI-Fenster erstellt werden.</p>
      <h2 id="DefaultWin">GUI-Ereignisse, Threads und Subroutinen</h2>
      <p>Ein <a href="../misc/Threads.htm">GUI-Thread</a> wird wie jeder andere Thread definiert, der aufgrund einer GUI-Aktion gestartet wurde. Zu den GUI-Aktionen geh&ouml;rt beispielsweise das Ausw&auml;hlen eines Men&uuml;punkts oder das Ausf&uuml;hren eines <a href="#label">g-Labels</a> (z. B. beim Dr&uuml;cken einer Schaltfl&auml;che).</p>
      <p>Bei einem GUI-Thread ist der <a href="#MultiWin">Standardfenstername</a> der Name des Fensters, das diesen Thread gestartet hat. Nicht-GUI-Threads verwenden standardm&auml;&szlig;ig eine 1.</p>
      <p>Jedes Mal, wenn ein <a href="../misc/Threads.htm">GUI-Thread</a> startet, wird das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> von diesem Thread zu Beginn das GUI-Fenster selbst sein. Dadurch kann man bei Befehlen, die sich auf Fenster und Steuerelemente beziehen (z. B. <a href="WinMove.htm">WinMove</a>, <a href="WinHide.htm">WinHide</a>, <a href="WinSet.htm">WinSet</a>, <a href="WinSetTitle.htm">WinSetTitle</a> und <a href="ControlGetFocus.htm">ControlGetFocus</a>), die Parameter Fenstertitel und Fenstertext weglassen, um das GUI-Fenster selbst bearbeiten zu k&ouml;nnen (selbst wenn es versteckt ist).</p>
      <p>Das Klicken auf ein Steuerelement wird nicht funktionieren, wenn das <a href="#label">g-Label</a> aufgrund eines vorherigen Klicks noch l&auml;uft. Das kann man verhindern, wenn man in der ersten Zeile einer  Subroutine  <a href="Critical.htm">Critical</a> verwendet (allerdings werden dadurch auch andere <a href="../misc/Threads.htm">Threads</a> zwischengespeichert/aufgeschoben, wie das Dr&uuml;cken eines Hotkeys).</p>
      <p>Die internen Variablen A_Gui und A_GuiControl enthalten den Fensternamen und die ID des Steuerelements, das den aktuellen Thread gestartet hat. Siehe <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> f&uuml;r mehr Details.</p>
      <p>Wenn man mehrere Ereignisse dazu bringen will, die gleiche Subroutine durchzuf&uuml;hren, sollte man deren Label einfach &uuml;bereinander setzen. Zum Beispiel:</p>
      <pre>GuiEscape:
GuiClose:
ButtonCancel:
ExitApp  <em>; Alle oberen Labels werden diesen Befehl ausf&uuml;hren.</em></pre>
      <p>Alle neuen <a href="../misc/Threads.htm">GUI-Threads</a> beginnen mit Standardwerten bei Einstellungen wie <a href="SendMode.htm">SendMode</a>. Diese k&ouml;nnen im <a href="../Scripts.htm#auto">automatischen Ausf&uuml;hrungsbereich</a> ge&auml;ndert werden.</p>
      <h2 id="Navigate">Navigation mit der Tastatur</h2>
      <p>Es ist m&ouml;glich, ein GUI-Fenster mit der TAB-Taste zu steuern. Dabei wird der Tastaturfokus auf das n&auml;chste eingabef&auml;hige Steuerelement geschoben (Steuerelemente mit deaktiviertem <a href="#Tabstop">Tabstop</a>-Style werden &uuml;bersprungen). Die Reihenfolge der hinzugef&uuml;gten Steuerelemente bestimmt die Reihenfolge der Navigation. Anfangs befindet sich der Tastaturfokus auf das erste eingabef&auml;hige Steuerelement, das den Tabstop-Style aktiv hat (was die meisten Steuerelemente standardm&auml;&szlig;ig haben).</p>
      <p id="ShortcutKey">Bei einigen Steuerelementen kann ein Und-Zeichen (&amp;) angegeben werden, um eine Tastenkombination zu erzeugen, die im Text des Steuerelements als unterstrichenes Zeichen dargestellt wird (abh&auml;ngig von den Systemeinstellungen). Der Benutzer kann diese Tastenkombination aktivieren, wenn er die ALT-Taste gedr&uuml;ckt h&auml;lt und das entsprechende Zeichen auf der Tastatur dr&uuml;ckt. Bei Button-, CheckBox- und Radio-Steuerelementen entspricht das Dr&uuml;cken der Tastenkombination dem Anklicken des Steuerelements. Bei GroupBox- und Text-Steuerelementen bewirkt das Dr&uuml;cken der Tastenkombination, dass der Tastaturfokus auf das erste eingabef&auml;hige <a href="#Tabstop">Tabstop</a>-Steuerelement springt, welches danach erstellt worden ist. Haben mehrere Steuerelemente allerdings die gleiche Tastenkombination, springt der Tastaturfokus zwischen diesen Steuerelementen abwechselnd hin und her.</p>
      <p>Um ein Und-Zeichen innerhalb der oben genannten Steuerelementarten direkt darstellen zu k&ouml;nnen, m&uuml;ssen zwei aufeinanderfolgende Und-Zeichen wie folgt angegeben werden: <code>Save &amp;&amp; Exit</code>.</p>
      <h2 id="Appear">Fensterdarstellung</h2>
      <p>Ein GUI-Fenster verwendet als Icon das Tray-Icon, das beim Erstellen des Scripts verwendet worden ist. Wenn ein anderes Icon angezeigt werden soll, muss das Tray-Icon daher erst ge&auml;ndert werden, noch bevor das Fenster erstellt wird. Zum Beispiel: <code><a href="Menu.htm">Menu</a>, Tray, Icon, EigenesIcon.ico</code>. Zudem ist es mit DllCall und SendMessage m&ouml;glich, das gro&szlig;e und kleine Icon unterschiedlich aussehen zu lassen (das gro&szlig;e Icon wird in der Programmumschaltung via ALT+TAB angezeigt):</p>
      <pre>hIcon32 := <a href="DllCall.htm">DllCall</a>("LoadImage", uint, 0
    , str, "Eigenes Icon.ico"  <em>; Dateiname des Icons (diese Datei kann mehrere Icons enthalten).</em>
    , uint, 1  <em>; Bildtyp: IMAGE_ICON</em>
    , int, 32, int, 32  <em>; gew&uuml;nschte Breite und H&ouml;he des Bilds (hilft LoadImage zu entscheiden, welches Icon am besten geeignet ist).</em>
    , uint, 0x10)  <em>; Flags: LR_LOADFROMFILE</em>
Gui +LastFound
<a href="PostMessage.htm">SendMessage</a>, 0x80, 1, hIcon32  <em>; 0x80 ist WM_SETICON; und 1 bedeutet ICON_BIG (0 f&uuml;r ICON_SMALL).</em>
Gui Show</pre>
      <p>Aufgrund von Einschr&auml;nkungen in Windows XP und h&ouml;her &uuml;bernehmen CheckBox-, Radio- und GroupBox-Steuerelemente mit einer benutzerdefinierten Textfarbe die klassische Design-Darstellung.</p>
      <p>Verwandtes Thema: <a href="#Margin">Abstand im Fenster</a>.</p>
      <h2 id="GenRemarks">Allgemeine Bemerkungen</h2>
      <p>Mit <a href="GuiControl.htm">GuiControl</a> und <a href="GuiControlGet.htm">GuiControlGet</a> k&ouml;nnen bestimmte Steuerelemente in einem GUI-Fenster bearbeitet werden.</p>
      <p>Jedes GUI-Fenster kann ca. 11000 Steuerelemente enthalten. Allerdings kann das System schon bei 5000 Steuerelementen instabil werden.</p>
      <p>Scripts, die den GUI-Befehl verwenden, sind automatisch <a href="_Persistent.htm">persistent</a> (selbst wenn der GUI-Befehl nie ausgef&uuml;hrt wird). Es kommt auch erst einzeln vor, wenn <a href="_SingleInstance.htm">#SingleInstance</a> verwendet wird.</p>
      <h2>Verwandte Befehle</h2>
      <p><a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="Menu.htm">Menu</a>, <a href="GuiControls.htm">Steuerelemente</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Control.htm">Control</a>, <a href="ControlGet.htm">ControlGet</a>, <a href="Progress.htm">SplashImage</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelectFile.htm">FileSelectFile</a>, <a href="FileSelectFolder.htm">FileSelectFolder</a></p>
      <h2 id="Examples">Beispiele</h2>
      <pre class="NoIndent"><em>; Beispiel: Erzielt einen &auml;hnlichen Effekt wie SplashTextOn:</em>

Gui, +AlwaysOnTop +Disabled -SysMenu +Owner  <em>; +Owner verhindert eine Schaltfl&auml;che in der Taskleiste.</em>
Gui, Add, Text,, Beliebiger Text.
Gui, Show, NoActivate, Fenstertitel  <em>; NoActivate verhindert das Deaktivieren des derzeit aktiven Fensters.</em></pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel: Ein einfaches Eingabefenster zur Abfrage des Vor- und Nachnamens:</em>

Gui, Add, Text,, Vorname:
Gui, Add, Text,, Nachname:
Gui, Add, Edit, vVorname ym  <em>; Die ym-Option beginnt eine neue Spalte f&uuml;r Steuerelemente.</em>
Gui, Add, Edit, vNachname
Gui, Add, Button, default, OK  <em>; ButtonOK-</em><em>Label </em><em>(wenn vorhanden) wird ausgef&uuml;hrt, wenn die Schaltfl&auml;che gedr&uuml;ckt wird.</em>
Gui, Show,, Einfaches Eingabebeispiel
Return  <em>; Ende des automatischen Ausf&uuml;hrungsbereichs. Das Script ist solange im Leerlauf, bis der Benutzer irgendetwas macht.</em>

GuiClose:
ButtonOK:
Gui, Submit  <em>; Speichert die Benutzereingaben in die jeweils zugewiesene Variable.</em>
MsgBox Sie haben "%Vorname% %Nachname%" eingegeben.
ExitApp</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel: Tab-Steuerelement:</em>

Gui, Add, Tab2,, Erster Tab|Zweiter Tab|Dritter Tab  <em>; Tab2 ben&ouml;tigt v1.0.47.05.</em>
Gui, Add, Checkbox, vEigeneCheckBox, Kontrollk&auml;stchen
Gui, Tab, 2
Gui, Add, Radio, vEigenesRadio, Optionsfeld 1
Gui, Add, Radio,, Optionsfeld 2
Gui, Tab, 3
Gui, Add, Edit, vEigenesEdit r5  <em>; r5 bedeutet 5 Reihen hoch.</em>
Gui, Tab  <em>; das hei&szlig;t, dass danach hinzugef&uuml;gte Steuerelemente nicht zum Tab-Steuerelement geh&ouml;ren.</em>
Gui, Add, Button, default xm, OK  <em>; xm positioniert die Schaltfl&auml;che in die untere linke Ecke.</em>
Gui, Show
Return

ButtonOK:
GuiClose:
GuiEscape:
Gui, Submit  <em>; Speichert die </em><em>Benutzereingaben</em><em> in die jeweils zugewiesene Variable.</em>
MsgBox Ihre Eingabe:`n%EigeneCheckBox%`n%EigenesRadio%`n%EigenesEdit%
ExitApp</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel: ListBox mit Dateien aus einem Verzeichnis:</em>

Gui, Add, Text,, Eine Datei zum Ausf&uuml;hren ausw&auml;hlen.`nDr&uuml;cken Sie ESCAPE oder schlie&szlig;en Sie das Fenster, um den Vorgang abzubrechen.
Gui, Add, ListBox, vEigeneListBox gEigeneListBox w640 r10
Gui, Add, Button, Default, OK
Loop, C:\*.*  <em>; Ordner und musterbasierte Suche je nach Bedarf anpassen.</em>
{
    GuiControl,, EigeneListBox, %A_LoopFileFullPath%
}
Gui, Show
Return

EigeneListBox:
If A_GuiEvent &lt;&gt; DoubleClick
    Return
<em>; Ansonsten ist das Doppelklicken auf einem Listeneintrag das gleiche wie das Dr&uuml;cken der OK-Schaltfl&auml;che.
; Also zum n&auml;chsten Label springen.</em>
ButtonOK:
GuiControlGet, EigeneListBox  <em>; Ermittelt die aktuelle Auswahl in der ListBox.</em>
MsgBox, 4,, Wollen Sie die Datei oder das Dokument ausf&uuml;hren?`n`n%EigeneListBox%
IfMsgBox, No
    Return
<em>; Ansonsten versuchen, zu starten:</em>
Run, %EigeneListBox%,, UseErrorLevel
If ErrorLevel = ERROR
    MsgBox Die angegebene Datei konnte nicht ausgef&uuml;hrt werden.  Vielleicht ist die Datei mit keinem Programm verkn&uuml;pft.
Return

GuiClose:
GuiEscape:
ExitApp</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent" id="ExToolTip"><em>; Beispiel: Eine kontextabh&auml;ngige Hilfe (mittels ToolTip) anzeigen, sobald der Benutzer die Maus &uuml;ber ein bestimmtes Steuerelement h&auml;lt:</em>

Gui, Add, Edit, v<strong>EigenesEdit</strong>
<strong>EigenesEdit</strong>_TT := "Das ist ein Tooltip f&uuml;r das Steuerelement mit dem Variablennamen EigenesEdit."
Gui, Add, DropDownList, v<strong>EigeneDDL</strong>, Rot|Gr&uuml;n|Blau
<strong>EigeneDDL</strong>_TT := "W&auml;hlen Sie eine Farbe aus der Liste."
Gui, Add, Checkbox, vEigeneCheckBox, Dieses Steuerelement hat keinen ToolTip.
Gui, Show
<a href="OnMessage.htm">OnMessage</a>(0x200, "WM_MOUSEMOVE")
Return

WM_MOUSEMOVE()
{
    static CurrControl, PrevControl, _TT  <em>; _TT bleibt f&uuml;r den unteren ToolTip-Befehl leer.</em>
    CurrControl := A_GuiControl
    If (CurrControl &lt;&gt; PrevControl and not InStr(CurrControl, " "))
    {
        ToolTip  <em>; Schlie&szlig;t alle offenen ToolTips.</em>
        SetTimer, DisplayToolTip, 1000
        PrevControl := CurrControl
    }
    Return

    DisplayToolTip:
    SetTimer, DisplayToolTip, Off
    <a href="ToolTip.htm">ToolTip</a> % %CurrControl%_TT  <em>; Das Prozentzeichen erm&ouml;glicht einen Ausdruck.</em>
    SetTimer, RemoveToolTip, 3000
    Return

    RemoveToolTip:
    SetTimer, RemoveToolTip, Off
    ToolTip
    Return
}


GuiClose:
ExitApp</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent" id="OSD"><em>; Beispiel: Bildschirmanzeige (OSD) mittels transparentem Fenster:</em>

IndividualFarbe = EEAA99  <em>; Kann eine beliebige RGB-Farbe sein (wird weiter unten transparent gemacht).</em>
Gui +LastFound +AlwaysOnTop -Caption +ToolWindow  <em>; +ToolWindow verhindert eine Schaltfl&auml;che in der Taskleiste und einen Eintrag in der Programmumschaltung via Alt+Tab.</em>
Gui, Color, %IndividualFarbe%
Gui, Font, s32  <em>; Erm&ouml;glicht eine gro&szlig;e Schriftgr&ouml;&szlig;e (32 Punkte).</em>
Gui, Add, Text, vEigenerText cLime, XXXXX YYYYY  <em>; XX &amp; YY passt die Gr&ouml;&szlig;e des Fensters automatisch an.
; Macht alle Pixel dieser Farbe transparent und den Text selbst durchsichtig (150):</em>
WinSet, TransColor, %IndividualFarbe% 150
SetTimer, OSDAktualisieren, 200
Gosub, OSDAktualisieren  <em>; Aktualisierung sofort durchzuf&uuml;hren, anstatt auf den Timer zu warten.</em>
Gui, Show, x0 y400 NoActivate  <em>; NoActivate verhindert das Deaktivieren des aktiven Fensters.</em>
Return

OSDAktualisieren:
MouseGetPos, MausX, MausY
GuiControl,, EigenerText, X%MausX%, Y%MausY%
Return</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel: Eine animierte Fortschrittsleiste auf einem Hintergrundbild.</em>

Gui, Color, White
Gui, Add, Picture, x0 y0 h350 w450, %A_WinDir%\system32\ntimage.gif
Gui, Add, Button, Default xp+20 yp+250, Animation starten
Gui, Add, Progress, vEigenesProgress w416
Gui, Add, Text, vEigenerText wp  <em>; wp bedeutet "vorherige Breite verwenden".</em>
Gui, Show
Return

ButtonStartTheBarMoving:
Loop, %A_WinDir%\*.*
{
    If A_Index &gt; 100
        break
    GuiControl,, EigenesProgress, %A_Index%
    GuiControl,, EigenerText, %A_LoopFileName%
    Sleep 50
}
GuiControl,, EigenerText, Animation beendet.
Return

GuiClose:
ExitApp</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel: Einfacher Bildbetrachter:</em>

Gui, +Resize
Gui, Add, Button, default, Neues Bild &amp;laden
Gui, Add, Radio, ym+5 x+10 vRadio checked, &amp;Aktuelle Gr&ouml;&szlig;e laden
Gui, Add, Radio, ym+5 x+10, Bild &amp;passend laden
Gui, Add, Pic, xm vPic
Gui, Show
Return

ButtonLoadNewImage:
FileSelectFile, file,,, Bild ausw&auml;hlen:, Bilder (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)
If file =
    Return
Gui, Submit, NoHide <em>; Speichert die Werte der Optionsfelder.</em>
If Radio = 1  <em>; Bild mit aktueller Gr&ouml;&szlig;e anzeigen.</em>
{
    Width = 0
    Height = 0
}
Else <em>; Zweites Optionsfeld ausgew&auml;hlt: Gr&ouml;&szlig;e des Bildes anpassen, damit es auf dem Bildschirm passt.</em>
{
    Width := A_ScreenWidth - 28  <em>; Minus 28, um einen Raum f&uuml;r Rahmen und Abst&auml;nde zu gew&auml;hrleisten.</em>
    Height = -1  <em>; "Seitenverh&auml;ltnis beibehalten" ist scheinbar die beste L&ouml;sung.</em>
}
GuiControl,, Pic, *w%width% *h%height% %file%  <em>; Bild laden.</em>
Gui, Show, xCenter y0 AutoSize, %file%  <em>; Die Fenstergr&ouml;&szlig;e auf die Bildgr&ouml;&szlig;e anpassen.</em>
Return

GuiClose:
ExitApp</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel: Einfacher Texteditor mit Men&uuml;leiste.</em>

<em>; Untermen&uuml;s f&uuml;r die Men&uuml;leiste erstellen:</em>
Menu, Dateimen&uuml;, Add, &amp;Neu, DateiNeu
Menu, Dateimen&uuml;, Add, &amp;&Ouml;ffnen, Datei&Ouml;ffnen
Menu, Dateimen&uuml;, Add, &amp;Speichern, DateiSpeichern
Menu, Dateimen&uuml;, Add, Speichern &amp;unter..., DateiSpeichernAls
Menu, Dateimen&uuml;, Add  <em>; Trennlinie.</em>
Menu, Dateimen&uuml;, Add, E&amp;xit, DateiBeenden
Menu, Hilfsmen&uuml;, Add, &amp;&Uuml;ber, Hilfe&Uuml;ber

<em>; Erstellt die Men&uuml;leiste, indem ihr Untermen&uuml;s hinzugef&uuml;gt werden:</em>
Menu, EigeneMen&uuml;leiste, Add, &amp;Datei, :Dateimen&uuml;
Menu, EigeneMen&uuml;leiste, Add, &amp;Hilfe, :Hilfsmen&uuml;

<em>; Men&uuml;leiste an das Fenster anf&uuml;gen:</em>
Gui, Menu, EigeneMen&uuml;leiste

<em>; Erstellt das Haupt-Eingabefeld und zeigt das Fenster an:</em>
Gui, +Resize  <em>; Gr&ouml;&szlig;e des Fensters kann angepasst werden.</em>
Gui, Add, Edit, vHauptEdit WantTab W600 R20
Gui, Show,, Unbenannt
AktuellerDateiname =  <em>; Keine aktuelle Datei vorhanden.</em>
Return

DateiNeu:
GuiControl,, HauptEdit  <em>; Eingabefeld leeren.</em>
Return

Datei&Ouml;ffnen:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das FileSelectFile-Dialogfenster zu schlie&szlig;en, bevor er zum Hauptfenster zur&uuml;ckkehren kann.</em>
FileSelectFile, Ausgew&auml;hlterDateiname, 3,, Datei &ouml;ffnen, Text-Dokumente (*.txt)
If Ausgew&auml;hlterDateiname =  <em>; Keine Datei ausgew&auml;hlt.</em>
    Return
Gosub DateiLesen
Return

DateiLesen:  <em>; Die Variable Ausgew&auml;hlterDateiname wurde vorher gesetzt.</em>
FileRead, HauptEdit, %Ausgew&auml;hlterDateiname%  <em>; Liest den Inhalt der Datei in die Variable.</em>
If ErrorLevel
{
    MsgBox "%Ausgew&auml;hlterDateiname%" konnte nicht ge&ouml;ffnet werden.
    Return
}
GuiControl,, HauptEdit, %HauptEdit%  <em>; F&uuml;gt den Text in das Steuerelement ein.</em>
AktuellerDateiname = %Ausgew&auml;hlterDateiname%
Gui, Show,, %AktuellerDateiname%   <em>; Zeigt den Dateinamen in der Titelleiste an.</em>
Return

DateiSpeichern:
If AktuellerDateiname =   <em>; Keinen Dateinamen ausgew&auml;hlt, daher "Speichern unter...".</em>
    Goto DateiSpeichernAls
Gosub AktuelleDateiSpeichern
Return

DateiSpeichernAls:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das FileSelectFile-Dialogfenster zu schlie&szlig;en, bevor er zum Hauptfenster zur&uuml;ckkehren kann.</em>
FileSelectFile, Ausgew&auml;hlterDateiname, S16,, Datei speichern, Text-Dokumente (*.txt)
If Ausgew&auml;hlterDateiname =  <em>; Keine Datei ausgew&auml;hlt.</em>
    Return
AktuellerDateiname = %Ausgew&auml;hlterDateiname%
Gosub AktuelleDateiSpeichern
Return

AktuelleDateiSpeichern:  <em>; Es ist sichergestellt, dass AktuellerDateiname nicht leer ist.</em>
IfExist %AktuellerDateiname%
{
    FileDelete %AktuellerDateiname%
    If ErrorLevel
    {
        MsgBox &Uuml;berschreiben der Datei "%AktuellerDateiname%" fehlgeschlagen.
        Return
    }
}
GuiControlGet, HauptEdit  <em>; Ermittelt den Inhalt des Eingabefeldes.</em>
FileAppend, %HauptEdit%, %AktuellerDateiname%  <em>; Speichert den Inhalt der Datei.
; Bei Erfolg den Dateinamen in der Titelleiste anzeigen (falls es mit DateiSpeichernAls aufgerufen wurde):</em>
Gui, Show,, %AktuellerDateiname%
Return

Hilfe&Uuml;ber:
Gui, &Uuml;ber:+owner1  <em>; Das Hauptfenster (Gui #1) wird dem Fenster "&Uuml;ber" &uuml;bergeordnet.</em>
Gui +Disabled  <em>; Deaktiviert das Hauptfenster.</em>
Gui, &Uuml;ber:Add, Text,, Beliebiger Text.
Gui, &Uuml;ber:Add, Button, Default, OK
Gui, &Uuml;ber:Show
Return

&Uuml;berButtonOK:  <em>; Dieser Bereich wird vom Fenster "&Uuml;ber" benutzt.</em>
&Uuml;berGuiClose:
&Uuml;berGuiEscape:
Gui, 1:-Disabled  <em>; Reaktiviert das Hauptfenster (muss vor dem n&auml;chsten Schritt getan werden).</em>
Gui Destroy  <em>; Das Fenster "&Uuml;ber" zerst&ouml;ren.</em>
Return

GuiDropFiles:  <em>; Unterst&uuml;tzt Ziehen &amp; Ablegen.</em>
Loop, Parse, A_GuiEvent, `n
{
    Ausgew&auml;hlterDateiname = %A_LoopField%  <em>; Nur die erste Datei nehmen (falls mehrere Dateien vorhanden sind).</em>
    break
}
Gosub DateiLesen
Return

GuiSize:
If ErrorLevel = 1  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
    Return
<em>; Ansonsten wurde die Gr&ouml;&szlig;e des Fensters ge&auml;ndert oder maximiert. Die Gr&ouml;&szlig;e des Eingabefeldes anpassen.</em>
NeueBreite := A_GuiWidth - 20
NeueH&ouml;he := A_GuiHeight - 20
GuiControl, Move, HauptEdit, W%NeueBreite% H%NeueH&ouml;he%
Return

DateiBeenden:     <em>; Benutzer hat "Exit" im Dateimen&uuml; ausgew&auml;hlt.</em>
GuiClose:  <em>; Benutzer hat das Fenster geschlossen.</em>
ExitApp</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>
