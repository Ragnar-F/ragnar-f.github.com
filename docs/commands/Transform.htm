<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Transform</title>
<meta name="keywords" content="Befehl, Berechnung">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-28224374-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>
<body>
<div id="wrapper">
<div id="content">
<script src="../navbar/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(1);</script>


<h1>Transform</h1>

<p>F&uuml;hrt verschiedene mathematische Funktionen, bitweise Operationen und Aufgaben wie ASCII/Unicode-Konvertierung aus.</p>

<pre class="Syntax">Transform, Ausgabevariable, Befehl, Wert1 [, Wert2]</pre>
<h3>Parameter</h3>
<table class="info">
  <tr>
    <td>Ausgabevariable</td>
    <td>Der Name der Variable, in der der R&uuml;ckgabewert vom <em>Befehl</em> gespeichert wird. <a href="SetFormat.htm">SetFormat</a> bestimmt, ob Integer hexadezimal oder dezimal gespeichert werden.</td>
  </tr>
  <tr>
    <td width="15%">Befehl, Wert1/2</td>
    <td width="85%">Siehe untere Liste.</td>
  </tr>
</table>

<h3>Befehl, Wert1, Wert2</h3>
<p>Die Parameter <em>Befehl</em>, <em>Wert1</em> und <em>Wert2</em> sind voneinander abh&auml;ngig und k&ouml;nnen wie folgt verwendet werden.</p>
<p><strong><a name="Unicode"></a>Unicode [, String]</strong>: <em>(Dieser Befehl ist nicht in AutoHotkey_L Unicode verf&uuml;gbar)</em> Ermittelt oder speichert den Unicode-Text in die Zwischenablage. Hinweis: Die gesamte Zwischenablage kann mit <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> gespeichert und wiederhergestellt werden, damit "Transform Unicode" ohne Verlust des originalen Inhalts der Zwischenablage durchgef&uuml;hrt wird.</p>
<p>Es gibt zwei Betriebsarten, die in den folgenden Beispielen veranschaulicht werden:</p>
<pre>Transform, Ausgabevariable, Unicode  <em>; Ermittelt den Unicode-Text als UTF-8-String aus der Zwischenablage.</em>
Transform, Clipboard, Unicode, %EigenerUTF_String%  <em>; Speichert den Unicode-Text in die Zwischenablage.</em></pre>
<p>Im zweiten Beispiel oben kann optional ein direkt vorhandener UTF-8-String anstelle von %EigenerUTF_String% verwendet werden.</p>
<p>Verwendet einen Hotkey wie im folgenden Beispiel, um den UTF-8-String zu bestimmen, der sich auf dem angegebenen Unicode-String bezieht:</p>
<pre>^!u::  <em>; Hotkey Steuerung+Alt+U.</em>
MsgBox Kopiert einen beliebigen Unicode-Text in die Zwischenablage und dr&uuml;ckt danach auf OK, um fortzufahren.
Transform, ClipUTF, Unicode
Clipboard = Transform, Clipboard, Unicode, %ClipUTF%`r`n
MsgBox Die Zwischenablage enth&auml;lt nun die folgende Zeile, die in dem Script eingef&uuml;gt werden kann. Wenn sie ausgef&uuml;hrt wird, dann wird die Zwischenablage mit dem kopierten Unicode-String ersetzt:`n`n%Clipboard%
Return</pre>
<p>Hinweise: 1) Windows 95 ben&ouml;tigt <em>Microsoft Layer for Unicode (MSLU)</em>, um diesen Befehl unterst&uuml;tzen zu k&ouml;nnen (Windows 98/Me/NT4 oder h&ouml;her haben eine integrierte Unterst&uuml;tzung); 2) Der Befehl "<a href="Send.htm#asc">Send {ASC nnnnn}</a>" ist ein alternativer Weg, Unicode-Zeichen zu erzeugen, funktioniert aber nicht in jeder Anwendung.</p>
<p><strong>Asc, String</strong>: Ermittelt den ASCII-Code (eine Zahl zwischen 1 und 255) f&uuml;r das erste Zeichen im <em>String</em>. Wenn der <em>String</em> leer ist, dann wird die <em>Ausgabevariable</em> auch leer gemacht. Zum Beispiel: <em>Transform, Ausgabevariable, Asc, %VariableMitString%</em>. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Asc">Asc(String)</a>.</p>
<p><strong>Chr, Wert1</strong>: Ermittelt ein Zeichen, dass sich auf dem ASCII-Code von <em>Wert1</em> bezieht. Wenn der <em>Wert1</em> keine Zahl zwischen 1 und 255 ist, dann wird die <em>Ausgabevariable</em> leer gemacht, um das Problem zu kennzeichnen. Zum Beispiel: <em>Transform, Ausgabevariable, Chr, 130</em>. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Chr">Chr(Zahl)</a>.</p>
<p><strong><a name="Deref"></a>Deref, String</strong>: Erweitert Variablenverweise und <a href="_EscapeChar.htm">Schutzsequenzen</a>, die sich in anderen Variablen befinden. Jede falsch formatierte Variablenreferenz wird vom erweiterten Ergebnis ausgeschlossen. Das Gleiche gilt auch, wenn sich die <em>Ausgabevariable</em> in sich selbst erweitert. Das hei&szlig;t, dass Verweise auf die <em>Ausgabevariable</em> innerhalb der <em>String</em>-Variablen von der Erweiterung ausgeschlossen werden (beachtet allerdings, dass der <em>String</em> selbst die %<em>Ausgabevariable</em>% <u>sein</u> kann). Wenn im folgenden Beispiel Variable1 den String "Test" und Variable2 den <u>direkt vorhandenen</u> String "%Variable1%" enth&auml;lt, dann wird in die <em>Ausgabevariable</em> der String "Test" gespeichert: <em>Transform, Ausgabevariable, deref, %Variable2%</em>. Innerhalb einer <a href="../Functions.htm">Funktion</a> wird jede Variable im <em>String</em> immer in eine lokale Variable aufgel&ouml;st, es sei denn, es gibt keine solche Variable, in diesem Fall wird sie in eine globale Variable aufgel&ouml;st (oder leer, wenn keine).</p>
<p><strong><a name="HTML"></a>HTML, String [, Flags]</strong>:</p>
<p><em>In AutoHotkey und AutoHotkey_L ANSI:</em> Der <em>Flags</em>-Parameter wird ignoriert. Wandelt den <em>String</em> ins HTML-&Auml;quivalent um, indem Zeichen mit einem ASCII-Wert &uuml;ber 127 in HTML-Namen umgewandelt werden (z. B. wird &pound; zu &amp;pound;). Dar&uuml;ber hinaus werden die vier Zeichen "&&lt;&gt; in &amp;quot;&amp;amp;&amp;lt;&amp;gt; umgewandelt. Schlie&szlig;lich wird jedes LF-Zeichen (`n) in &lt;br&gt;`n umgewandelt (&lt;br&gt; gefolgt von einem LF-Zeichen).</p>
<p><em>In AutoHotkey_L Unicode:</em> Zus&auml;tzlich zur oberen Funktionalit&auml;t kann <em>Flags</em> eine Kombination (Summe) der folgenden Werte enthalten. Wenn nicht vorhanden, dann standardm&auml;&szlig;ig eine 1.</p>
<ul>
    <li>1: Wandelt bestimmte Zeichen in benannte Ausdr&uuml;cke um. Zum Beispiel wird &euro; in <code>&amp;euro;</code> umgewandelt.</li>
    <li>2: Wandelt bestimmte Zeichen in nummerierte Ausdr&uuml;cke um. Zum Beispiel wird &euro; in <code>&amp;#8364;</code> umgewandelt.</li>
</ul>
<p>Nur Nicht-ASCII-Zeichen werden beeinflusst.  Wenn <i>Flags</i> eine 3 ist, dann werden nummerierte Ausdr&uuml;cke nur verwendet, wenn ein benannter Ausdruck nicht verf&uuml;gbar ist.  Die folgenden Zeichen werden immer umgewandelt: <code>&lt;&gt;"&</code> und <code>`n</code> (LF-Zeichen).</p>
<p><strong><a name="FromCodePage"></a>FromCodePage</strong> / <strong><a name="ToCodePage"></a>ToCodePage</strong>: Veraltet. Verwendet stattdessen <a href="StrPutGet.htm">StrPut () / StrGet ()</a>.</p>
<p><strong>Mod, Dividend, Divisor</strong>: Ermittelt den Rest, wenn der <em>Dividend</em> durch den <em>Divisor</em> geteilt wird. Wenn der <em>Divisor</em> eine 0 ist, dann wird die <em>Ausgabevariable</em> leer gemacht. <em>Dividend</em> und <em>Divisor</em> k&ouml;nnen einen Dezimalpunkt enthalten. Wenn negativ, dann wird der <em>Divisor</em> f&uuml;r die Berechnung als eine positive Zahl behandelt. Im folgenden Beispiel ist das Ergebnis eine 2: <em>Transform, Ausgabevariable, mod, 5, 3.</em> Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Mod">Mod(Dividend, Divisor)</a>.</p>
<p><strong>Pow, Basis, Exponent</strong>: Ermittelt die <em>Basis</em>, potenziert mit dem <em>Exponenten</em>. Sowohl die <em>Basis</em> als auch der <em>Exponent</em> k&ouml;nnen einen Dezimalpunkt enthalten. Wenn der <em>Exponent</em> negativ ist, dann wird die <em>Ausgabevariable</em> zur Flie&szlig;kommazahl formatiert, selbst wenn die <em>Basis</em> und der <em>Exponent</em> Integer sind. Eine negative <em>Basis</em>, kombiniert mit einem gebrochenen <em>Exponenten</em> wie 1.5, wird nicht unterst&uuml;tzt. Dadurch wird die <em>Ausgabevariable</em> leer gemacht. Siehe auch: <a href="../Variables.htm#pow">**-Operator</a>.</p>
<p><strong>Exp, N</strong>: Ermittelt e (ungef&auml;hr 2.71828182845905), potenziert mit <em>N</em>. <em>N</em> kann negativ sein und einen Dezimalpunkt enthalten. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Exp">Exp(N)</a>.</p>
<p><strong>Sqrt, Wert1</strong>: Ermittelt die Quadratwurzel von Wert1. Wenn der <em>Wert1</em> negativ ist, dann wird die <em>Ausgabevariable</em> leer gemacht. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Sqrt">Sqrt(Zahl)</a>.</p>
<p><strong>Log, Wert1</strong>: Ermittelt den Logarithmus (Basis 10) von <em>Wert1</em>. Wenn der <em>Wert1</em> negativ ist, dann wird die <em>Ausgabevariable</em> leer gemacht. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Log">Log(Zahl)</a>.</p>
<p><strong>Ln, Wert1</strong>: Ermittelt den Logarithmus (Basis e) von <em>Wert1</em>. Wenn der <em>Wert1</em> negativ ist, dann wird die <em>Ausgabevariable</em> leer gemacht. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Ln">Ln(Zahl)</a>.</p>
<p><strong>Round, Wert1 [, N]</strong>: Wenn <em>N</em> weggelassen wird, dann wird die <em>Ausgabevariable</em> auf <em>Wert1</em> gesetzt und auf dem n&auml;chsten Integer gerundet. Wenn <em>N</em> eine positive Zahl ist, dann wird <em>Wert1</em> auf <em>N</em> Dezimalstellen gerundet. Wenn <em>N</em> negativ ist, dann wird <em>Wert1</em> auf <em>N</em> Stellen nach links gerundet. Zum Beispiel: -1 rundet auf Einer, -2 rundet auf Zehner und-3 rundet auf Hunderter. Hinweis: Round entfernt nicht nachfolgende Nullen, wenn Dezimalstellen gerundet werden. Wenn zum Beispiel 12.333 auf eine Stelle gerundet wird, dann ist das Ergebnis 12.300000. Dieses Verhalten kann ge&auml;ndert werden, wenn zum Beispiel <em><a href="SetFormat.htm">SetFormat</a>, float, 0.1</em> vor der Operation verwendet wird (<a href="SetFormat.htm">SetFormat</a> beseitigt m&ouml;glicherweise die Notwendigkeit, Round in der ersten Stelle zu verwenden). Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Round">Round(Zahl [, N])</a>.</p>
<p><strong>Ceil, Wert1</strong>: Ermittelt <em>Wert1</em>, zum n&auml;chsten Integer aufgerundet. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Ceil">Ceil(Zahl)</a>.</p>
<p><strong>Floor, Wert1</strong>: Ermittelt <em>Wert1</em>, zum n&auml;chsten Integer abgerundet. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Floor">Floor(Zahl)</a>.</p>
<p><strong>Abs, Wert1</strong>: Ermittelt den absoluten Wert von <em>Wert1</em>, indem das f&uuml;hrende Minuszeichen (Bindestrich) von <em>Wert1</em> entfernt wird, falls vorhanden. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Abs">Abs(Zahl)</a>.</p>
<p><strong>Sin, Wert1</strong>: Ermittelt den trigonometrischen Sinus von <em>Wert1</em>. <em>Wert1</em> muss als Bogenma&szlig; angegeben werden. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Sin">Sin(Zahl)</a>.</p>
<p><strong>Cos, Wert1</strong>: Ermittelt den trigonometrischen Kosinus von <em>Wert1</em>. <em>Wert1</em> muss als Bogenma&szlig; angegeben werden. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Cos">Cos(Zahl)</a>.</p>
<p><strong>Tan, Wert1</strong>: Ermittelt den trigonometrischen Tangens von <em>Wert1</em>. <em>Wert1</em> muss als Bogenma&szlig; angegeben werden. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#Tan">Tan(Zahl)</a>.</p>
<p><strong>ASin, Wert1</strong>: Ermittelt den Arkussinus (die Zahl, deren Sinus <em>Wert1</em> ist) als Bogenma&szlig;. Wenn <em>Wert1</em> kleiner als -1 oder gr&ouml;&szlig;er als 1 ist, dann wird die <em>Ausgabevariable</em> leer gemacht. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#ASin">ASin(Zahl)</a>.</p>
<p><strong>ACos, Wert1</strong>: Ermittelt den Arkuskosinus (die Zahl, deren Kosinus <em>Wert1</em> ist) als Bogenma&szlig;. Wenn <em>Wert1</em> kleiner als -1 oder gr&ouml;&szlig;er als 1 ist, dann wird die <em>Ausgabevariable</em> leer gemacht. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#ACos">ACos(Zahl)</a>.</p>
<p><strong>ATan, Wert1</strong>: Ermittelt den Arkustangens (die Zahl, deren Tangens <em>Wert1</em> ist) als Bogenma&szlig;. Dazugeh&ouml;rige Funktion: <a href="../Functions.htm#ATan">ATan(Zahl)</a>.</p>
<p>HINWEIS: Jede folgende bitweise Operation hat einen kurzen <a href="../Variables.htm#bitwise">bitweisen Operator</a> f&uuml;r die Verwendung in Ausdr&uuml;cken.</p>
<p><strong>BitNot, Wert1</strong>: Speichert die bit-invertierte Version von <em>Wert1</em> in die <em>Ausgabevariable</em> (wenn <em>Wert1</em> eine Flie&szlig;kommazahl ist, dann wird sie f&uuml;r die Berechnung auf einem Integer gerundet). Wenn <em>Wert1</em> zwischen 0 und 4294967295 (0xffffffff) liegt, dann wird diese Zahl als <u>unsigned</u> 32-Bit-Wert behandelt. Ansonsten wird diese Zahl als ein <u>signed</u> 64-Bit-Wert behandelt. Im folgenden Beispiel ist das Ergebnis 0xfffff0f0 (4294963440): Transform, Ausgabevariable, BitNot, 0xf0f</p>
<p><strong>BitAnd, Wert1, Wert2</strong>: Ermittelt das Ergebnis des bitweisen UNDs von <em>Wert1</em> und <em>Wert2</em> (Flie&szlig;kommazahlen werden f&uuml;r die Berechnung auf Integer gerundet). Im folgenden Beispiel ist das Ergebnis 0xff00 (65280): Transform, Ausgabevariable, BitAnd, 0xff0f, 0xfff0</p>
<p><strong>BitOr, Wert1, Wert2</strong>: Ermittelt das Ergebnis des bitweisen ODERs von <em>Wert1</em> und <em>Wert2</em> (Flie&szlig;kommazahlen werden f&uuml;r die Berechnung auf Integer gerundet). Im folgenden Beispiel ist das Ergebnis 0xf0f0 (61680): Transform, Ausgabevariable, BitOr, 0xf000, 0x00f0</p>
<p><strong>BitXOr, Wert1, Wert2</strong>: Ermittelt das Ergebnis des bitweisen Exklusiv-ODERs von <em>Wert1</em> und <em>Wert2</em> (Flie&szlig;kommazahlen werden f&uuml;r die Berechnung auf Integer gerundet). Im folgenden Beispiel ist das Ergebnis 0xff00 (65280): Transform, Ausgabevariable, BitXOr, 0xf00f, 0x0f0f</p>
<p><strong>BitShiftLeft, Wert1, Wert2</strong>: Verschiebt den <em>Wert1</em> um <em>Wert2</em> Bit-Positionen nach links, entspricht dem Multiplizieren von <em>Wert1</em> mit "2 potenziert mit <em>Wert2</em>" (Flie&szlig;kommazahlen werden f&uuml;r die Berechnung auf Integer gerundet). Im folgenden Beispiel ist das Ergebnis eine 8: Transform, Ausgabevariable, BitShiftLeft, 1, 3</p>
<p><strong>BitShiftRight, Wert1, Wert2</strong>: Verschiebt den <em>Wert1</em> um <em>Wert2</em> Bit-Positionen nach rechts, entspricht dem Dividieren von <em>Wert1</em> mit "2 potenziert mit <em>Wert2</em>", wobei der Rest abgeschnitten wird (Flie&szlig;kommazahlen werden f&uuml;r die Berechnung auf Integer gerundet). Im folgenden Beispiel ist das Ergebnis eine 2: Transform, Ausgabevariable, BitShiftRight, 17, 3</p>
<h3>Bemerkungen</h3>
<p>Unterbefehle, die numerische Parameter akzeptieren, k&ouml;nnen <a href="../Variables.htm#Expressions">Ausdr&uuml;cke</a> f&uuml;r solche Parameter verwenden.</p>
<p>Wenn <em>Wert1</em> oder <em>Wert2</em> eine Flie&szlig;kommazahl ist, dann ermitteln folgende <em>Befehle</em> eine Flie&szlig;kommazahl anstelle eines Integers: Mod, Pow, Round und Abs. Die Anzahl der abgerufenen Dezimalstellen werden durch <a href="SetFormat.htm">SetFormat</a> festgelegt.</p>
<p>Um Bogenma&szlig; in Grad umzuwandeln, multipliziert es mit


 180/pi (ungef&auml;hr 57.29578). Um Grad in Bogenma&szlig; umzuwandeln, multipliziert es mit pi/180 (ungef&auml;hr 0.01745329252).</p>
<p>Der Wert von pi (ungef&auml;hr 3,141592653589793) ist viermal der Arcustangens von 1.</p>
<h3>Verwandte Befehle</h3>
<p><a href="SetFormat.htm">SetFormat</a>, <a href="../Variables.htm#Expressions">Ausdr&uuml;cke</a>, <a href="EnvMult.htm">EnvMult</a>, <a href="EnvDiv.htm">EnvDiv</a>, <a href="StringLower.htm">StringLower</a>, <a href="IfIs.htm">If Variable is Typ</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">Transform, Ausgabevariable, Asc, A  <em>; Ermittelt den ASCII-Code vom Buchstaben A.</em></pre>
</div>
</div>
</body>
</html>