<!DOCTYPE HTML>
<html>
<head>
<title>Send/SendRaw/SendInput/SendPlay/SendEvent: Tasten &amp; Klicks senden</title>
<meta name="description" content="Sende Tastatureingaben und Mausklicks zu einem beliebigen Fenster mit diesem freien Makro-Programm. SendInput ist generell die schnellste und zuverlässigste Methode.">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
<style type="text/css">
<!--
.red {color: #FF0000; font-weight: bold;}
-->
</style>
</head>
<body>

<h1>Send / SendRaw / SendInput / SendPlay / SendEvent: Tasten &amp; Klicks senden</h1>

<p>Sendet simulierte Tastatureingaben und Mausklicks zum <a href="WinActivate.htm">aktiven</a> Fenster.</p>

<pre class="Syntax">Send Tasten
SendRaw Tasten
SendInput Tasten
SendPlay Tasten
SendEvent Tasten</pre>
<h3>Parameter</h3>
<dl>

  <dt>Tasten</dt>
  <dd><p>Eine Reihe von Tasten, die gesendet werden soll. Das Komma vor dem ersten Parameter ist, wie bei anderen Befehlen auch, optional.</p></dd>

</dl>

<p><strong><a name="SendRaw"></a>Raw-Modus</strong>: Der <em>SendRaw</em>-Befehl interpretiert alle Zeichen literal, anstatt beispielsweise {Enter} in ENTER-Taste, ^c in STRG+C und so weiter umzuwandeln. Allerdings gelten weiterhin die normalen Regeln für Escapesequenzen, Variablenverweise und Ausdrücke, da diese verarbeitet werden, bevor der Befehl ausgeführt wird. Um den Raw-Modus bei SendInput, SendPlay oder SendEvent zu verwenden, muss <a href="#Raw">{Raw}</a> als erstes Element im String angegeben werden; zum Beispiel: <code>SendInput {Raw}abc</code>.</p>
<p><strong>Normal-Modus</strong>: Wenn der Raw-Modus nicht aktiv ist, werden folgende Zeichen als Modifikatoren behandelt (solche Modifikatoren beeinflussen nur die direkt anliegende Taste):</p>
<p><span class="red">!</span>: Sendet eine ALT-Taste. Zum Beispiel würde <code>Send Das ist ein Text!a</code> die Tasten "Das ist ein Text" senden und dann ALT+A drücken. <strong>Hinweis</strong>: !A hat in einigen Programmen einen anderen Effekt als !a. Das liegt daran, dass !A die Tastenkombination ALT+UMSCHALT+A und !a die Tastenkombination ALT+A drücken würde. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p>
<p><span class="red">+</span>: Sendet eine UMSCHALT-Taste. Zum Beispiel würde <code>Send +abC</code> den Text "AbC" senden, und <code>Send !+a</code> würde ALT+UMSCHALT+A drücken.</p>
<p><span class="red">^</span>: Sendet eine STRG-Taste. Zum Beispiel würde <code>Send ^!a</code> die Tastenkombination STRG+ALT+A drücken, und <code>Send ^{Home}</code> würde STRG+POS1 senden. <strong>Hinweis</strong>: ^A hat in einigen Programmen einen anderen Effekt als ^a. Das liegt daran, dass ^A die Tastenkombination STRG+UMSCHALT+A und ^a die Tastenkombination STRG+A drücken würde. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p>
<p><span class="red">#</span>: Sendet eine WIN-Taste, demzufolge würde <code>Send #e</code> die WIN-Taste gedrückt halten und dann den Buchstaben "e" drücken.</p>
<p><br>
<a name="SendInput"></a><a name="SendPlay"></a><strong>SendInput</strong> und <strong>SendPlay</strong> <span class="ver">[v1.0.43+]:</span> SendInput und SendPlay verwenden die gleiche Syntax wie Send, allerdings sind sie in der Regel schneller und zuverlässiger. Desweiteren puffern sie alle physischen Tastatur- oder Mausaktivitäten während des Send-Befehls, um das Vermischen der Benutzereingaben mit den gesendeten Eingaben zu verhindern. Verwende <a href="SendMode.htm">SendMode</a>, um Send zum Synonym für SendInput oder SendPlay zu machen. Um mehr Details über jeden Modus zu erfahren, siehe <a href="#SendInputDetail">SendInput</a> und <a href="#SendPlayDetail">SendPlay</a>.</p>
<p><a name="SendEvent"></a><strong>SendEvent</strong> <span class="ver">[v1.0.43+]:</span> SendEvent sendet Tastatureingaben mit der gleichen Methode wie der <em>Send</em>-Befehl vor Version 1.0.43. Die Sendegeschwindigkeit von Tastatureingaben wird mit <a href="SetKeyDelay.htm">SetKeyDelay</a> bestimmt. Standardmäßig ist <em>Send</em> das Synonym für <em>SendEvent</em>; allerdings kann es via <a href="SendMode.htm">SendMode</a> zum Synonym für <a href="#SendInputDetail">SendInput</a> oder <a href="#SendPlayDetail">SendPlay</a> gemacht werden.</p>
<p><strong>Tastennamen</strong>: Die folgende Tabelle listet alle speziellen Tasten auf, die gesendet werden können (jeder Tastenname muss mit geschweiften Klammern umschlossen werden):</p>
<table class="info">
  <tr>
    <th width="200">Tastenname</th>
    <th>Resultierende Tastatureingabe</th>
  </tr>
  <tr>
    <td align="center">{F1} - {F24}</td>
    <td>Funktionstasten. Zum Beispiel: {F12} ist die F12-Taste.</td>
  </tr>
  <tr>
    <td align="center">{!}</td>
    <td>!</td>
  </tr>
  <tr>
    <td align="center">{#}</td>
    <td>#</td>
  </tr>
  <tr>
    <td align="center">{+}</td>
    <td>+</td>
  </tr>
  <tr>
    <td align="center">{^}</td>
    <td>^</td>
  </tr>
  <tr>
    <td align="center">{{}</td>
    <td>{</td>
  </tr>
  <tr>
    <td align="center">{}}</td>
    <td>}</td>
  </tr>
  <tr>
    <td align="center">{Enter}</td>
    <td>ENTER-Taste</td>
  </tr>
  <tr>
    <td align="center">{Escape} oder {Esc}</td>
    <td>ESC-Taste</td>
  </tr>
  <tr>
    <td align="center">{Space}</td>
    <td>LEERTASTE (nur für Leerzeichen notwendig, die am Anfang oder Ende des Strings vorkommen - Leerzeichen in der Mitte können literal  sein)</td>
  </tr>
  <tr>
    <td align="center">{Tab}</td>
    <td>TAB-Taste</td>
  </tr>
  <tr>
    <td align="center">{Backspace} oder {BS}</td>
    <td>RÜCKTASTE</td>
  </tr>
  <tr>
    <td align="center">{Delete} oder {Del}</td>
    <td>ENTF-Taste</td>
  </tr>
  <tr>
    <td align="center">{Insert} oder {Ins}</td>
    <td>EINFG-Taste</td>
  </tr>
  <tr>
    <td align="center">{Up}</td>
    <td>NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{Down}</td>
    <td>NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{Left}</td>
    <td>NACH-LINKS-Taste</td>
  </tr>
  <tr>
    <td align="center">{Right}</td>
    <td>NACH-RECHTS-Taste</td>
  </tr>
  <tr>
    <td align="center">{Home}</td>
    <td>POS1-Taste</td>
  </tr>
  <tr>
    <td align="center">{End}</td>
    <td>ENDE-Taste</td>
  </tr>
  <tr>
    <td align="center">{PgUp}</td>
    <td>BILD-NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{PgDn}</td>
    <td>BILD-NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{CapsLock}</td>
    <td>FESTSTELL-Taste (in Win 2k/XP ist <a href="SetNumScrollCapsLockState.htm">SetCapsLockState</a> zuverlässiger). Das Senden von {CapsLock} benötigt möglicherweise vorher <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode Off</a>.</td>
  </tr>
  <tr>
    <td align="center">{ScrollLock}</td>
    <td>ROLLEN-Taste (siehe auch: <a href="SetNumScrollCapsLockState.htm">SetScrollLockState</a>)</td>
  </tr>
  <tr>
    <td align="center">{NumLock}</td>
    <td>NUM-Taste (siehe auch: <a href="SetNumScrollCapsLockState.htm">SetNumLockState</a>)</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Control} oder {Ctrl}</td>
    <td>STRG-Taste (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td align="center">{LControl} oder {LCtrl}</td>
    <td>Linke STRG-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td align="center">{RControl} oder {RCtrl}</td>
    <td>Rechte STRG-Taste</td>
  </tr>
  <tr>
    <td align="center">{Control Down} oder {Ctrl Down}</td>
    <td>Hält die STRG-Taste gedrückt, bis {Ctrl Up} gesendet wird. Mit {RCtrl Down} und {RCtrl Up} kann stattdessen die linke oder rechte Taste gedrückt gehalten werden.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Alt}</td>
    <td>ALT (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td align="center">{LAlt}</td>
    <td>Linke ALT-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td align="center">{RAlt}</td>
    <td>ALTGR- oder rechte ALT-Taste, abhängig von der Tastaturbelegung.</td>
  </tr>
  <tr>
    <td align="center">{Alt Down}</td>
    <td>Hält die ALT-Taste gedrückt, bis {Alt Up} gesendet wird. Mit {RAlt Down} und {RAlt Up} kann stattdessen die linke oder rechte Taste gedrückt gehalten werden.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Shift}</td>
    <td>UMSCHALT-Taste (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td align="center">{LShift}</td>
    <td>Linke UMSCHALT-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td align="center">{RShift}</td>
    <td>Rechte UMSCHALT-Taste</td>
  </tr>
  <tr>
    <td align="center">{Shift Down}</td>
    <td>Hält die UMSCHALT-Taste gedrückt, bis {Shift Up} gesendet wird. Mit {RShift Down} und {RShift Up} kann stattdessen die linke oder rechte Taste gedrückt gehalten werden.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{LWin}</td>
    <td>Linke WIN-Taste</td>
  </tr>
  <tr>
    <td align="center">{RWin}</td>
    <td>Rechte WIN-Taste</td>
  </tr>
  <tr>
    <td align="center">{LWin Down}</td>
    <td>Hält die linke WIN-Taste gedrückt, bis {LWin Up} gesendet wird.</td>
  </tr>
  <tr>
    <td align="center">{RWin Down}</td>
    <td>Hält die rechte WIN-Taste gedrückt, bis {RWin Up} gesendet wird.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{AppsKey}</td>
    <td>MENÜ-Taste (öffnet das Rechtsklick- oder Kontextmenü)</td>
  </tr>
  <tr>
    <td align="center">{Sleep}</td>
    <td>SLEEP-Taste (auf den meisten Tastaturen nicht vorhanden).</td>
  </tr>
  <tr>
    <td align="center">{ASC nnnnn}</td>
    <td><p><a name="asc"></a>Sendet eine ALT+nnnnn-Tastenkombination per Ziffernblock, um Sonderzeichen zu erzeugen, die auf der Tastatur normalerweise nicht vorhanden sind. Um ASCII-Zeichen zu erzeugen, muss eine Nummer zwischen 1 und 255 angegeben werden. Um ANSI-Zeichen zu erzeugen (Standard in den meisten Sprachen), muss zuerst eine 0 und danach eine Nummer zwischen 128 und 255 angegeben werden, zum Beispiel {Asc 0133}.</p>
    <p>Um Unicode-Zeichen zu erzeugen, muss eine Nummer zwischen 256 und 65535 angegeben werden (ohne 0 davor). Allerdings wird das nicht von jeder Anwendung unterstützt. Alternativen dazu findest du im nächsten Abschnitt.</p></td>
  </tr>
  <tr id="Unicode">
    <td align="center">{U+nnnn}</td>
    <td><p><a name="sendu"></a><span class="ver">[AHK_L 24+]:</span> Sendet ein Unicode-Zeichen - <em>nnnn</em> ist der hexadezimale Wert des Zeichens ohne 0x-Präfix. Dies ist üblicherweise in den Unicode-Versionen von AutoHotkey nicht notwendig, weil ihr Send und ControlSend von sich aus Unicode-Text unterstützen.</p>
    <p>Wenn das Zeichen keinem virtuellen Tastencode zugeordnet ist, wird <a href="http://msdn.microsoft.com/en-us/library/ms646310.aspx">SendInput()</a> oder <a href="http://msdn.microsoft.com/en-us/library/ms646276.aspx">WM_CHAR</a> verwendet, um das Zeichen zu senden, und der aktuelle Send-Modus ignoriert.</p></td>
  </tr>
  <tr>
    <td align="center"><p>{vkXX}<br>
      
      {scYYY}<br>
    
    {vkXXscYYY}</p></td>
    <td><p><a name="vk"></a>Sendet eine Tastatureingabe, die die virtuelle Taste XX und den Scancode YYY hat. Zum Beispiel: <code>Send {vkFFsc159}</code>. Wenn man den sc- oder vk-Bereich weglässt, wird der am besten geeignete Wert an seiner Stelle gesendet.</p>
      <p>Die Werte für XX und YYY sind hexadezimal und können üblicherweise über den Menüpunkt <a href="KeyHistory.htm">View-&gt; Key history</a> im Hauptfenster abgerufen werden. Siehe auch: <a href="../KeyList.htm#SpecialKeys">Sondertasten</a></p></td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Numpad0} - {Numpad9}</td>
    <td>Ziffernblocktasten (wenn Numlock eingeschaltet ist). Zum Beispiel: {Numpad5} ist die Zahl 5.</td>
  </tr>
  <tr>
    <td align="center">{NumpadDot}</td>
    <td>, (wenn Numlock eingeschaltet ist)</td>
  </tr>
  <tr>
    <td align="center">{NumpadEnter}</td>
    <td>ENTER-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadMult}</td>
    <td>*</td>
  </tr>
  <tr>
    <td align="center">{NumpadDiv}</td>
    <td>/</td>
  </tr>
  <tr>
    <td align="center">{NumpadAdd}</td>
    <td>+</td>
  </tr>
  <tr>
    <td align="center">{NumpadSub}</td>
    <td>-</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{NumpadDel}</td>
    <td>ENTF-Taste (diese und die nachfolgenden Ziffernblocktasten sind nur verwendbar, wenn Numlock ausgeschaltet ist)</td>
  </tr>
  <tr>
    <td align="center">{NumpadIns}</td>
    <td>EINFG-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadClear}</td>
    <td>Funktionslose Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadUp}</td>
    <td>NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadDown}</td>
    <td>NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadLeft}</td>
    <td>NACH-LINKS-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadRight}</td>
    <td>NACH-RECHTS-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadHome}</td>
    <td>POS1-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadEnd}</td>
    <td>ENDE-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadPgUp}</td>
    <td>BILD-NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadPgDn}</td>
    <td>BILD-NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Browser_Back}</td>
    <td>Browser "Zurück"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Forward}</td>
    <td>Browser "Vorwärts"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Refresh}</td>
    <td>Browser "Aktualisieren"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Stop}</td>
    <td>Browser "Stopp"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Search}</td>
    <td>Browser "Suchen"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Favorites}</td>
    <td>Browser "Favoriten"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Home}</td>
    <td>Startet den Browser und öffnet die Startseite</td>
  </tr>
  <tr>
    <td align="center">{Volume_Mute}</td>
    <td>Gesamtlautstärke stummschalten bzw. Stummschaltung aufheben. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a>, +1, , mute</code>.</td>
  </tr>
  <tr>
    <td align="center">{Volume_Down}</td>
    <td>Gesamtlautstärke leiser machen. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a>, -5</code>.</td>
  </tr>
  <tr>
    <td align="center">{Volume_Up}</td>
    <td>Gesamtlautstärke lauter machen. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a>, +5</code>.</td>
  </tr>
  <tr>
    <td align="center">{Media_Next}</td>
    <td>Media Player "Nächster Track"</td>
  </tr>
  <tr>
    <td align="center">{Media_Prev}</td>
    <td>Media Player "Vorheriger Track"</td>
  </tr>
  <tr>
    <td align="center">{Media_Stop}</td>
    <td>Media Player "Stopp"</td>
  </tr>
  <tr>
    <td align="center">{Media_Play_Pause}</td>
    <td>Media Player "Wiedergabe/Anhalten"</td>
  </tr>
  <tr>
    <td align="center">{Launch_Mail}</td>
    <td>E-Mail-Programm öffnen</td>
  </tr>
  <tr>
    <td align="center">{Launch_Media}</td>
    <td>Media Player öffnen</td>
  </tr>
  <tr>
    <td align="center">{Launch_App1}</td>
    <td>Benutzerdefiniertes Programm 1 öffnen</td>
  </tr>
  <tr>
    <td align="center">{Launch_App2}</td>
    <td>Benutzerdefiniertes Programm 2 öffnen</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{PrintScreen}</td>
    <td>DRUCK-Taste</td>
  </tr>
  <tr>
    <td align="center">{CtrlBreak}</td>
    <td>STRG+UNTBR</td>
  </tr>
  <tr>
    <td align="center">{Pause}</td>
    <td>PAUSE-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center"><strong>{Click [Optionen]}</strong><br>
    <span class="ver">[v1.0.43+]</span></td>
    <td><a name="Click"></a>Sendet einen Mausklick, das die gleichen Optionen verwendet wie die vom <a href="Click.htm">Click-Befehl</a>. Zum Beispiel würde <code>{Click}</code> die linke Maustaste einmal bei der aktuellen Mausposition klicken, und <code>{Click 100, 200}</code> würde auf den Koordinaten 100, 200 klicken (basierend auf <a href="CoordMode.htm">CoordMode</a>). Um die Maus ohne Klicken zu verschieben, muss eine 0 nach den Koordinaten angegeben werden; zum Beispiel: <code>{Click 100, 200, 0}</code>. Die Verzögerung zwischen den Mausklicks wird durch <a href="SetMouseDelay.htm">SetMouseDelay</a> bestimmt (nicht <a href="SetKeyDelay.htm">SetKeyDelay</a>).</td>
  </tr>
  <tr>
    <td align="center">{WheelDown}, {WheelUp}, {WheelLeft}, {WheelRight}, {LButton}, {RButton}, {MButton}, {XButton1}, {XButton2}</td>
    <td>Sendet ein Maustastenereignis auf die aktuellen Mausposition (um die Position und weitere Optionen zu kontrollieren, siehe <a href="Click.htm">{Click}</a>). Die Verzögerung zwischen den Mausklicks wird durch <a href="SetMouseDelay.htm">SetMouseDelay</a> bestimmt. WheelLeft/Right benötigen v1.0.48+, allerdings funktionieren sie nicht in Betriebssystemen älter als Windows Vista.</td>
  </tr>
  <tr>
    <td align="center"><strong>{Blind}</strong></td>
    <td><p><a name="blind"></a>Wenn {Blind} das erste Element im String ist, wird das Programm das Loslassen von ALT/STRG/UMSCHALT/WIN verhindern, sofern sie zu Beginn im gedrückten Zustand waren. Zum Beispiel würde der Hotkey <code>+s::Send {Blind}abc</code> ABC statt abc senden, weil der Benutzer die UMSCHALT-Taste gedrückt hält.</p>
      <p>{Blind} bewirkt auch, dass <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode</a> ignoriert wird; das heißt, dass der Status der Festelltaste nicht geändert wird. Zudem lässt {Blind} die zusätzlichen STRG-Tasten weg, die ansonsten gesendet werden würden; solche Tastatureingaben verhindern: 1) die Darstellung des Startmenüs während LWIN/RWIN-Eingaben; 2) die Aktivierung der Menüleiste während ALT-Eingaben.</p>
      <p>Der Blind-Modus wird beim <a href="../misc/Remap.htm">Neubelegen einer Taste</a> automatisch verwendet. Zum Beispiel würde die Neubelegung a::b folgendes erzeugen: 1) "b" beim Eingeben von "a"; 2) großes B beim Eingeben eines großen A; und 3) STRG+B beim Eingeben von STRG+A.</p>
      <p>{Blind} wird nicht in Verbindung mit SendRaw und <a href="ControlSend.htm">ControlSendRaw</a> unterstützt. Desweiteren wird es nicht in Verbindung mit <a href="#SendPlayDetail">SendPlay</a> unterstützt, besonders im Umgang mit Modifikatortasten (STRG, ALT, UMSCHALT und WIN).</p></td>
  </tr>
  <tr>
    <td align="center"><strong>{Raw}</strong><br>
    <span class="ver">[v1.0.43+]</span></td>
    <td><a name="Raw" id="Raw"></a>Sendet die Tastatureingaben genau so, wie sie angegeben sind, anstatt {Enter} in ENTER-Taste, <code>^c</code> in STRG+C und so weiter umzuwandeln. Zwar muss {Raw} nicht am Anfang des Strings vorkommen, allerdings bleibt es, wenn es einmal angegeben wurde, für den Rest des Strings aktiv.</td>
  </tr>
</table>

<h2>Mehrfaches oder haltendes Drücken einer Taste</h2>
<p><strong>Mehrfaches Drücken</strong>: Umschließe den Namen der Taste und die Anzahl an Wiederholungen mit geschweiften Klammern. Zum Beispiel:</p>
<pre>Send {DEL 4}  <em>; Drückt viermal die ENTF-Taste.</em>
Send {S 30}   <em>; Sendet 30 große S-Zeichen.</em>
Send +{TAB 4}  <em>; Drückt viermal UMSCHALT+TAB.</em></pre>
<p><strong>Halten oder Loslassen</strong>: Umschließe den Namen der Taste und das Wort <strong>Down</strong> oder <strong>Up</strong> mit geschweiften Klammern. Zum Beispiel:</p>
<pre>Send {b down}{b up}
Send {TAB down}{TAB up}
Send {Up down}  <em>; Drückt die NACH-OBEN-Taste nach unten.</em>
Sleep 1000  <em>; Hält sie eine Sekunde lang gedrückt.</em>
Send {Up up}  <em>; Lässt die NACH-OBEN-Taste los.</em></pre>
<p>Wenn eine Taste mit der Methode oben gedrückt gehalten wird, erfolgt keine Auto-Wiederholung, wie es beim physischen Gedrückthalten geschehen würde (Auto-Wiederholung ist nämlich ein Treiber/Hardware-Feature). Allerdings kann mit einer <a href="Loop.htm">Schleife</a> das Auto-Wiederholen künstlich erzeugt werden. Das folgende Beispiel sendet 20 Tabulator-Eingaben:</p>
<pre>Loop 20
{
    Send {Tab down}  <em>; Auto-Wiederholen besteht aus fortlaufenden Down-Ereignissen (ohne Up-Ereignisse).</em>
    Sleep 30  <em>; Die Anzahl an Millisekunden zwischen den Tastatureingaben (oder verwende <a href="SetKeyDelay.htm">SetKeyDelay</a>).</em>
}
Send {Tab up}  <em>; Lässt die Taste los.</em></pre>
<p>Das Wort <em>DownTemp</em> kann auch verwendet werden. Sein Effekt das gleiche wie <em>Down</em>, außer bei Modifikatortasten (STRG/UMSCHALT/ALT/WIN). <em>DownTemp</em> benachrichtigt nachfolgende Send-Befehle, dass die Taste nicht permanent im gedrückten Zustand ist, und dass sie jederzeit losgelassen werden könnte. Zum Beispiel würde <code>Send {Control DownTemp}</code>, später gefolgt von <code>Send a</code>, nicht STRG+A, sondern ein normales "a" erzeugen.</p>

<h2 id="Remarks">Allgemeine Bemerkungen</h2>
<p>Es gibt keine bestimmten Einschränkungen bezüglich der Zeichen, die gesendet werden können. Wenn ein Zeichen auf der aktuellen Tastaturbelegung nicht existiert, wird es durch Senden eines Unicode-Zeichenpackets oder einer <a href="#asc">ALT+nnnnn</a>-Kombination künstlich erzeugt, abhängig von der AutoHotkey-Version. In den Unicode-Versionen von AutoHotkey können Unicode-Zeichen direkt angegeben werden, bei allen anderen Versionen nur mithilfe der <a href="#sendu">{U+nnnn}-Schreibweise</a>.</p>
<p><strong>BlockInput im Vergleich zu SendInput/SendPlay</strong>: Zwar kann man mit dem <a href="BlockInput.htm">BlockInput</a>-Befehl verhindern, dass physische Benutzereingaben den simulierten Eingabeverlauf unterbrechen, allerdings sollte man dafür besser <a href="#SendInputDetail">SendInput</a> oder <a href="#SendPlayDetail">SendPlay</a> verwenden. Denn im Gegensatz zu BlockInput wird der SendInput/Play-Befehl nicht verwerfen, was der Benutzer während des Sendens eingibt; stattdessen werden solche Tastatureingaben zwischengespeichert und danach gesendet.</p>
<p>Beim Senden vieler Tastatureingaben kann ein <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a> hilfreich sein, um den Text besser lesbar und verwaltbar zu machen.</p>
<p>Da das Betriebssystem das Simulieren von STRG+ALT+ENTF nicht erlaubt, kann so etwas wie <code>Send ^!{Delete}</code> nicht funktionieren.</p>
<p><b>Send könnte nicht funktionieren</b> in Windows Vista oder höher, wenn das aktive Fenster mit administrativen Rechten läuft, und das Script nicht. Das hängt mit dem Sicherheitsmechanismus "User Interface Privilege Isolation" (UIPI) zusammen.</p>

<h2 id="SendInputDetail">SendInput <span class="ver">[v1.0.43+]</span></h2>
<p>SendInput ist in der Regel die bevorzugte Methode, um Tastatureingaben und Mausklicks zu senden, weil sie bedeutend schneller und zuverlässiger ist. In den meisten Fällen wird SendInput die Tastatureingaben sofort senden, selbst bei langen Strings. Aufgrund dieser Schnelligkeit ist SendInput auch zuverlässiger, weil die Chance geringer ist, dass ein anderes Fenster unerwartet erscheint und die Tastatureingaben abfängt. Die Zuverlässigkeit erhöht sich nochmals durch die Tatsache, dass die Benutzereingaben während eines SendInput-Befehls bis zum Schluss zwischengespeichert werden.</p>
<p>Im Gegensatz zu den anderen Sendmethoden ist SendInput auf ca. 5000 Zeichen begrenzt (dieser Grenzwert variiert je nach Version des Betriebssystems und Performance-Einstellungen). Zeichen und Ereignisse über diesen Limit werden nicht gesendet.</p>
<p><strong>Hinweis</strong>: SendInput ignoriert SetKeyDelay, weil das Betriebssystem keine Verzögerung in diesem Modus unterstützt. Wenn SendInput allerdings aufgrund der unten genannten Bedingungen auf <a href="#SendEvent">SendEvent</a> zurückgreift, wird es <code><a href="SetKeyDelay.htm">SetKeyDelay -1, 0</a></code> verwenden (wenn aber SendEvent's Tastenverzögerung <code>-1, -1</code> ist, wird <code>-1, -1</code> verwendet). Wenn SendInput auf <a href="#SendPlayDetail">SendPlay</a> zurückgreift, wird es SendPlay's Tastenverzögerung verwenden.</p>
<p><a name="SendInputUnavail"></a>Wenn ein Script - <em>außer</em> das Script, das SendInput ausführt - einen <a href="_InstallKeybdHook.htm">systemnahen Tastatur-Hook</a> installiert hat, wird SendInput automatisch auf <a href="#SendEvent">SendEvent</a> zurückgreifen (oder auf <a href="#SendPlayDetail">SendPlay</a>, wenn <a href="SendMode.htm"><code>SendMode InputThenPlay</code></a> wirksam ist). Dies ist notwendig, weil das Vorhandensein eines externen Hooks alle Vorteile von SendInput zunichte machen würde, so dass es sowohl SendPlay als auch SendEvent unterlegen wäre. Da SendInput jedoch einen systemnahen Hook in Programmen außer v1.0.43+ nicht erkennen kann, wird es in solchen Fällen nicht auf einen anderen Modus zurückgreifen, wodurch es unzuverlässiger als SendPlay/Event werden würde.</p>
<p>Wenn SendInput einen Mausklick mithilfe von z. B. <a href="#Click">{Click}</a> sendet, während <a href="SetMouseDelay.htm"><code>CoordMode Mouse, Relative</code></a> aktiv ist (die Standardeinstellung), wird jeder Klick relativ zum Fenster sein, das vor dem Senden aktiv war. Demzufolge, wenn SendInput absichtlich ein anderes Fenster aktiviert (z. B. mit ALT+TAB), werden die Koordinaten der nachfolgenden Klicks innerhalb des gleichen Befehls falsch sein, weil sie weiterhin relativ zum alten statt zum neuen Fenster sind.</p>
<h2 id="SendPlayDetail">SendPlay <span class="ver">[v1.0.43+]</span></h2>
<p>SendPlay's größter Vorteil ist seine Fähigkeit, Tastatureingaben und Mausklicks bei einer breiteren Auswahl an Spielen "wiedergeben" zu können. Zum Beispiel könnten <a href="../Hotstrings.htm#SendMode">Hotstrings</a> in einem Spiel nur funktionieren, wenn sie die <a href="../Hotstrings.htm#SendMode">SendPlay-Option</a> haben. In Windows Vista oder höher könnte SendPlay überhaupt nicht funktionieren, wenn die Benutzerkontensteuerung (UAC) aktiviert ist, selbst wenn das Script als Administrator läuft. Das folgende Script ermöglicht eine Übergangslösung für dieses Problem: <a href="http://www.autohotkey.com/forum/topic75595.html">http://www.autohotkey.com/forum/topic75595.html</a>.</p>
<p>SendPlay ist, im Gegensatz zu den anderen Sendemethoden, am ungewöhnlichsten, weil dieser Modus selbst keine Tastatureingaben und Mausklicks simuliert. Stattdessen erstellt es eine Reihe von Ereignissen (Nachrichten), die direkt in das aktive Fenster einfließen (so ähnlich wie <a href="ControlSend.htm">ControlSend</a>, aber auf einem niedrigeren Niveau). Demzufolge kann SendPlay keine Hotkeys oder Hotstrings auslösen.</p>
<p>Wie bei <a href="#SendInputDetail">SendInput</a> auch, können sich SendPlay's Tastatureingaben nicht mit den Benutzereingaben vermischen. Wenn der Benutzer also während SendPlay etwas eingibt, werden solche Tastatureingaben bis zum Schluss zwischengespeichert.</p>
<p>Zwar ist SendPlay deutlich langsamer als SendInput, aber schneller als der traditionelle <a href="#SendEvent">SendEvent</a>-Modus (selbst wenn <a href="SetKeyDelay.htm">Tastenverzögerung</a> auf -1 ist).</p>
<p>Die WIN-Tasten (LWin und RWin) werden während SendPlay automatisch blockiert, wenn der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist. Dadurch wird verhindert, dass das Startmenü angezeigt wird, wenn der Benutzer versehentlich eine WIN-Taste während des Sendens drückt. Alle anderen Tasten außer LWin und RWin müssen nicht blockiert werden, weil das Betriebssystem sie automatisch zwischenspeichert, bis SendPlay durchgeführt wurde (via Puffer).</p>
<p>SendPlay verwendet nicht die Standardeinstellungen von SetKeyDelay und SetMouseDelay. Stattdessen gilt standardmäßig überhaupt keine Verzögerung, das wie folgt geändert werden kann:</p>
<pre><a href="SetKeyDelay.htm">SetKeyDelay</a>, 0, 10, <strong>Play</strong>  <em>; Beachte, dass sowohl 0 als auch -1 das gleiche sind im SendPlay-Modus.</em>
<a href="SetMouseDelay.htm">SetMouseDelay</a>, 10, <strong>Play</strong></pre>
<p>SendPlay kann die FESTSTELL-, NUM- oder ROLLEN-Taste weder ein- noch ausschalten. SendPlay kann zudem den Status einer Taste, wie von <a href="GetKeyState.htm">GetKeyState</a> gesehen, nicht ändern, es sei denn, die Tastatureingaben werden zu den Fenstern des Scripts gesendet. Selbst dann können Änderungen an den linken/rechten Modifikatortasten (z. B. RControl) nur über ihrem neutralen Gegenstück (z. B. Control) erkannt werden. Außerdem gelten für SendPlay noch weitere Einschränkungen, die auf der <a href="SendMode.htm#Play">SendMode-Seite</a> zu finden sind.</p>
<p>Im Gegensatz zu <a href="#SendInputDetail">SendInput</a> und <a href="#SendEvent">SendEvent</a> kann SendPlay von einem Benutzer unterbrochen werden, indem er STRG+ALT+ENTF oder STRG+ESC drückt. Wenn dies geschieht, werden die restlichen Tastatureingaben nicht gesendet, und danach das Script fortgesetzt, als ob das SendPlay normal abgeschlossen wurde.</p>
<p>Zwar kann SendPlay LWin- und RWin-Ereignisse senden, allerdings werden sie direkt zum aktiven Fenster gesendet, anstatt ihre interne Betriebssystemfunktion durchzuführen. Verwende stattdessen <a href="#SendEvent">SendEvent</a>. Zum Beispiel würde <code>SendEvent #r</code> das Ausführen-Dialogfenster des Startmenüs anzeigen.</p>

<h2>Siehe auch</h2>
<p><a href="SendMode.htm">SendMode</a>, <a href="SetKeyDelay.htm">SetKeyDelay</a>, <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode</a>, <a href="_EscapeChar.htm">Escapezeichen (z. B. `%)</a>, <a href="ControlSend.htm">ControlSend</a>, <a href="BlockInput.htm">BlockInput</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="WinActivate.htm">WinActivate</a></p>
<h2>Beispiele</h2>
<pre class="NoIndent">Send Mit freundlichen Grüßen,{enter}John Smith  <em>; Schreibt eine zweizeilige Signatur.</em>
Send !ds <em>; Öffnet das Dateimenü und wählt Speichern aus (ALT+D, gefolgt von S).</em>
Send {End}+{Left 4} <em>; Springt ans Textende und sendet viermal UMSCHALT+NACH-LINKS.</em>
SendInput <a href="#Raw">{Raw}</a>Eine Reihe unberarbeiteter Zeichen, die mit der schnellsten Methode (<a href="#SendInputDetail">SendInput</a>) gesendet wurden.</pre>

</body>
</html>
