<!DOCTYPE HTML>
<html>
<head>
<title>Send/SendRaw/SendInput/SendPlay/SendEvent: Tasten &amp; Klicks senden</title>
<meta name="description" content="Sende Tastatureingaben und Mausklicks an ein beliebiges Fenster mit diesem freien Makro-Programm. SendInput ist generell die schnellste und zuverlässigste Methode.">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
<style type="text/css">
<!--
.red {color: #FF0000; font-weight: bold;}
-->
</style>
</head>
<body>

<h1>Send / SendRaw / SendInput / SendPlay / SendEvent: Tasten &amp; Klicks senden</h1>

<p>Sendet künstliche Tastatureingaben und Mausklicks an das <a href="WinActivate.htm">aktive</a> Fenster.</p>

<pre class="Syntax">Send Tasten
SendRaw Tasten
SendInput Tasten
SendPlay Tasten
SendEvent Tasten</pre>
<h3>Parameter</h3>
<dl>

  <dt>Tasten</dt>
  <dd><p>Die zu sendende Tastenreihenfolge. Das Komma vor dem ersten Parameter ist wie bei anderen Befehlen optional.</p></dd>

</dl>

<p><strong><a name="SendRaw"></a>Raw-Modus</strong>: Der <em>SendRaw</em>-Befehl interpretiert alle Zeichen literal, anstatt zum Beispiel {Enter} als ENTER-Taste, ^c als STRG+C und so weiter zu interpretieren. Allerdings gelten weiterhin die normalen Regeln für Escapesequenzen, Variablenverweise und Ausdrücke, da diese verarbeitet werden, bevor der Befehl ausgeführt wird. Um den Raw-Modus mit SendInput, SendPlay oder SendEvent zu verwenden, sollte <a href="#Raw">{Raw}</a> als erstes Element im String geschrieben werden, zum Beispiel: <code>SendInput {Raw}abc</code>.</p>
<p><strong>Normal-Modus</strong>: Ist der Raw-Modus nicht aktiv, werden folgende Zeichen als Modifikatoren behandelt (diese Modifikatoren beeinflussen nur die nachfolgende Taste):</p>
<p><span class="red">!</span>: Sendet eine ALT-Taste. Zum Beispiel würde <code>Send Das ist ein Text!a</code> die Tasten "Das ist ein Text" senden und danach ALT+A drücken. <strong>Hinweis</strong>: !A erzeugt in einigen Programmen einen anderen Effekt als !a. Das liegt daran, dass !A die Tastenkombination ALT+UMSCHALT+A und !a die Tastenkombination ALT+A drücken würde. Im Zweifelsfall sollten immer Kleinbuchstaben verwenden werden.</p>
<p><span class="red">+</span>: Sendet eine UMSCHALT-Taste. Zum Beispiel: <code>Send +abC</code> sendet den Text "AbC" und <code>Send !+a</code> drückt die Tastenkombination ALT+UMSCHALT+A.</p>
<p><span class="red">^</span>: Sendet eine STRG-Taste. Zum Beispiel: <code>Send ^!a</code> drückt STRG+ALT+A und <code>Send ^{Home}</code> sendet STRG+POS1. <strong>Hinweis</strong>: ^A erzeugt in einigen Programmen einen anderen Effekt als ^a. Das liegt daran, dass mit ^A die Tastenkombination STRG+UMSCHALT+A und mit ^a die Tastenkombination STRG+A gedrückt wird. Im Zweifelsfall sollten immer Kleinbuchstaben verwenden werden.</p>
<p><span class="red">#</span>: Sendet eine WIN-Taste. Zum Beispiel würde <code>Send #e</code> die WIN-Taste gedrückt halten und den Buchstaben "e" drücken.</p>
<p><br>
<a name="SendInput"></a><a name="SendPlay"></a><strong>SendInput</strong> und <strong>SendPlay</strong> <span class="ver">[v1.0.43+]:</span> SendInput und SendPlay verwenden die gleiche Syntax wie Send, sind aber in der Regel schneller und zuverlässiger. Darüber hinaus wird jede physische Tastatur- oder Mausaktivität beim Senden zwischengespeichert, um zu verhindern, dass die Benutzereingaben sich mit denen vermischen, die gesendet wurden. <a href="SendMode.htm">SendMode</a> kann verwendet werden, um Send gleichbedeutend mit SendInput oder SendPlay zu machen. Weitere Details können in <a href="#SendInputDetail">SendInput</a> und <a href="#SendPlayDetail">SendPlay</a> weiter unten gefunden werden.</p>
<p><a name="SendEvent"></a><strong>SendEvent</strong> <span class="ver">[v1.0.43+]:</span> SendEvent sendet Tastatureingaben mit der gleichen Methode wie der <em>Send</em>-Befehl vor Version 1.0.43. Die Sendegeschwindigkeit von Tastatureingaben wird mit <a href="SetKeyDelay.htm">SetKeyDelay</a> bestimmt. Standardmäßig ist <em>Send</em> gleichbedeutend mit <em>SendEvent</em>. Mithilfe von <a href="SendMode.htm">SendMode</a> kann Send auch zu einem Synonym für <a href="#SendInputDetail">SendInput</a> oder <a href="#SendPlayDetail">SendPlay</a> gemacht werden.</p>
<p><strong>Tastennamen</strong>: Die folgende Tabelle listet alle speziellen Tasten auf, die gesendet werden können (jeder Tastenname muss von geschweiften Klammern umschlossen werden):</p>
<table class="info">
  <tr>
    <th width="200">Tastenname</th>
    <th>Resultierende Tastatureingabe</th>
  </tr>
  <tr>
    <td align="center">{F1} - {F24}</td>
    <td>Funktionstasten. Zum Beispiel: {F12} ist die F12-Taste.</td>
  </tr>
  <tr>
    <td align="center">{!}</td>
    <td>!</td>
  </tr>
  <tr>
    <td align="center">{#}</td>
    <td>#</td>
  </tr>
  <tr>
    <td align="center">{+}</td>
    <td>+</td>
  </tr>
  <tr>
    <td align="center">{^}</td>
    <td>^</td>
  </tr>
  <tr>
    <td align="center">{{}</td>
    <td>{</td>
  </tr>
  <tr>
    <td align="center">{}}</td>
    <td>}</td>
  </tr>
  <tr>
    <td align="center">{Enter}</td>
    <td>ENTER-Taste</td>
  </tr>
  <tr>
    <td align="center">{Escape} oder {Esc}</td>
    <td>ESC-Taste</td>
  </tr>
  <tr>
    <td align="center">{Space}</td>
    <td>LEERTASTE (nur für Leerzeichen notwendig, die sich am Anfang oder am Ende des Strings befinden - die in der Mitte können literale Leerzeichen sein)</td>
  </tr>
  <tr>
    <td align="center">{Tab}</td>
    <td>TAB-Taste</td>
  </tr>
  <tr>
    <td align="center">{Backspace} oder {BS}</td>
    <td>RÜCKTASTE</td>
  </tr>
  <tr>
    <td align="center">{Delete} oder {Del}</td>
    <td>ENTF-Taste</td>
  </tr>
  <tr>
    <td align="center">{Insert} oder {Ins}</td>
    <td>EINFG-Taste</td>
  </tr>
  <tr>
    <td align="center">{Up}</td>
    <td>NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{Down}</td>
    <td>NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{Left}</td>
    <td>NACH-LINKS-Taste</td>
  </tr>
  <tr>
    <td align="center">{Right}</td>
    <td>NACH-RECHTS-Taste</td>
  </tr>
  <tr>
    <td align="center">{Home}</td>
    <td>POS1-Taste</td>
  </tr>
  <tr>
    <td align="center">{End}</td>
    <td>ENDE-Taste</td>
  </tr>
  <tr>
    <td align="center">{PgUp}</td>
    <td>BILD-NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{PgDn}</td>
    <td>BILD-NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{CapsLock}</td>
    <td>FESTSTELL-Taste (in Win 2k/XP ist <a href="SetNumScrollCapsLockState.htm">SetCapsLockState</a> zuverlässiger). Das Senden von {CapsLock} benötigt möglicherweise vorher <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode Off</a>.</td>
  </tr>
  <tr>
    <td align="center">{ScrollLock}</td>
    <td>ROLLEN-Taste (siehe auch: <a href="SetNumScrollCapsLockState.htm">SetScrollLockState</a>)</td>
  </tr>
  <tr>
    <td align="center">{NumLock}</td>
    <td>NUM-Taste (siehe auch: <a href="SetNumScrollCapsLockState.htm">SetNumLockState</a>)</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Control} oder {Ctrl}</td>
    <td>STRG-Taste (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td align="center">{LControl} oder {LCtrl}</td>
    <td>Linke STRG-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td align="center">{RControl} oder {RCtrl}</td>
    <td>Rechte STRG-Taste</td>
  </tr>
  <tr>
    <td align="center">{Control Down} oder {Ctrl Down}</td>
    <td>Hält die STRG-Taste gedrückt, bis {Ctrl Up} gesendet wird. Mit {RCtrl Down} und {RCtrl Up} kann stattdessen die linke oder rechte Taste gedrückt gehalten werden.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Alt}</td>
    <td>ALT (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td align="center">{LAlt}</td>
    <td>Linke ALT-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td align="center">{RAlt}</td>
    <td>ALTGR- oder rechte ALT-Taste, abhängig von der Tastaturbelegung.</td>
  </tr>
  <tr>
    <td align="center">{Alt Down}</td>
    <td>Hält die ALT-Taste gedrückt, bis {Alt Up} gesendet wird. Mit {RAlt Down} und {RAlt Up} kann stattdessen die linke oder rechte Taste gedrückt gehalten werden.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Shift}</td>
    <td>UMSCHALT-Taste (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td align="center">{LShift}</td>
    <td>Linke UMSCHALT-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td align="center">{RShift}</td>
    <td>Rechte UMSCHALT-Taste</td>
  </tr>
  <tr>
    <td align="center">{Shift Down}</td>
    <td>Hält die UMSCHALT-Taste gedrückt, bis {Shift Up} gesendet wird. Mit {RShift Down} und {RShift Up} kann stattdessen die linke oder rechte Taste gedrückt gehalten werden.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{LWin}</td>
    <td>Linke WIN-Taste</td>
  </tr>
  <tr>
    <td align="center">{RWin}</td>
    <td>Rechte WIN-Taste</td>
  </tr>
  <tr>
    <td align="center">{LWin Down}</td>
    <td>Hält die linke WIN-Taste gedrückt, bis {LWin Up} gesendet wird.</td>
  </tr>
  <tr>
    <td align="center">{RWin Down}</td>
    <td>Hält die rechte WIN-Taste gedrückt, bis {RWin Up} gesendet wird.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{AppsKey}</td>
    <td>MENÜ-Taste (öffnet das Rechtsklick- oder Kontextmenü)</td>
  </tr>
  <tr>
    <td align="center">{Sleep}</td>
    <td>SLEEP-Taste (auf den meisten Tastaturen nicht vorhanden).</td>
  </tr>
  <tr>
    <td align="center">{ASC nnnnn}</td>
    <td><p><a name="asc"></a>Sendet eine ALT+nnnnn-Tastenkombination per Ziffernblock, um Sonderzeichen zu erzeugen, die auf der Tastatur normalerweise nicht vorhanden sind. ASCII-Zeichen können erzeugt werden, wenn eine Zahl zwischen 1 und 255 angegeben wird. Um ANSI-Zeichen zu generieren (Standard in den meisten Sprachen), muss zuerst eine 0 und danach eine Zahl zwischen 128 und 255 angegeben werden, zum Beispiel {Asc 0133}.</p>
    <p>Es können auch Unicode-Zeichen generiert werden, wenn eine Zahl zwischen 256 und 65535 angegeben wird (ohne 0 davor). Allerdings wird das nicht von jeder Anwendung unterstützt. Alternativen dazu befinden sich im nächsten Abschnitt.</p></td>
  </tr>
  <tr id="Unicode">
    <td align="center">{U+nnnn}</td>
    <td><p><a name="sendu"></a><span class="ver">[AHK_L 24+]:</span> Sendet ein Unicode-Zeichen, wenn <em>nnnn</em> der hexadezimale Wert des Zeichens ohne 0x-Präfix ist. Das ist in den Unicode-Versionen von AutoHotkey normalerweise nicht notwendig, weil deren Send und ControlSend von sich aus Unicode-Text unterstützen.</p>
    <p>Wenn das Zeichen keinem virtuellen Tastencode zugeordnet werden kann, wird mit <a href="http://msdn.microsoft.com/en-us/library/ms646310.aspx">SendInput()</a> oder <a href="http://msdn.microsoft.com/en-us/library/ms646276.aspx">WM_CHAR</a> das Zeichen gesendet und der aktuelle Send-Modus ignoriert.</p></td>
  </tr>
  <tr>
    <td align="center"><p>{vkXX}<br>
      
      {scYYY}<br>
    
    {vkXXscYYY}</p></td>
    <td><p><a name="vk"></a>Sendet eine Tastatureingabe über die virtuelle Taste XX und den Scancode YYY. Zum Beispiel: <code>Send {vkFFsc159}</code>. Sobald das sc- oder vk-Element fehlt, wird stattdessen ein Wert gesendet, der am besten geeignet ist.</p>
      <p>Die Werte für XX und YYY sind hexadezimal und können üblicherweise über den Menüpunkt <a href="KeyHistory.htm">View-&gt; Key history</a> im Hauptfenster abgerufen werden. Siehe auch: <a href="../KeyList.htm#SpecialKeys">Sondertasten</a></p></td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Numpad0} - {Numpad9}</td>
    <td>Ziffernblocktasten (wenn Numlock eingeschaltet ist). Zum Beispiel: {Numpad5} ist die Zahl 5.</td>
  </tr>
  <tr>
    <td align="center">{NumpadDot}</td>
    <td>, (wenn Numlock eingeschaltet ist)</td>
  </tr>
  <tr>
    <td align="center">{NumpadEnter}</td>
    <td>ENTER-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadMult}</td>
    <td>*</td>
  </tr>
  <tr>
    <td align="center">{NumpadDiv}</td>
    <td>/</td>
  </tr>
  <tr>
    <td align="center">{NumpadAdd}</td>
    <td>+</td>
  </tr>
  <tr>
    <td align="center">{NumpadSub}</td>
    <td>-</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{NumpadDel}</td>
    <td>ENTF-Taste (diese und die nachfolgenden Ziffernblocktasten sind nur verwendbar, wenn Numlock ausgeschaltet ist)</td>
  </tr>
  <tr>
    <td align="center">{NumpadIns}</td>
    <td>EINFG-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadClear}</td>
    <td>Funktionslose Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadUp}</td>
    <td>NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadDown}</td>
    <td>NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadLeft}</td>
    <td>NACH-LINKS-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadRight}</td>
    <td>NACH-RECHTS-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadHome}</td>
    <td>POS1-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadEnd}</td>
    <td>ENDE-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadPgUp}</td>
    <td>BILD-NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td align="center">{NumpadPgDn}</td>
    <td>BILD-NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{Browser_Back}</td>
    <td>Browser "Zurück"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Forward}</td>
    <td>Browser "Vorwärts"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Refresh}</td>
    <td>Browser "Aktualisieren"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Stop}</td>
    <td>Browser "Stopp"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Search}</td>
    <td>Browser "Suchen"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Favorites}</td>
    <td>Browser "Favoriten"</td>
  </tr>
  <tr>
    <td align="center">{Browser_Home}</td>
    <td>Startet den Browser und öffnet die Startseite</td>
  </tr>
  <tr>
    <td align="center">{Volume_Mute}</td>
    <td>Gesamtlautstärke stummschalten bzw. Stummschaltung aufheben. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a>, +1, , mute</code>.</td>
  </tr>
  <tr>
    <td align="center">{Volume_Down}</td>
    <td>Gesamtlautstärke leiser machen. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a>, -5</code>.</td>
  </tr>
  <tr>
    <td align="center">{Volume_Up}</td>
    <td>Gesamtlautstärke lauter machen. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a>, +5</code>.</td>
  </tr>
  <tr>
    <td align="center">{Media_Next}</td>
    <td>Media Player "Nächster Track"</td>
  </tr>
  <tr>
    <td align="center">{Media_Prev}</td>
    <td>Media Player "Vorheriger Track"</td>
  </tr>
  <tr>
    <td align="center">{Media_Stop}</td>
    <td>Media Player "Stopp"</td>
  </tr>
  <tr>
    <td align="center">{Media_Play_Pause}</td>
    <td>Media Player "Wiedergabe/Anhalten"</td>
  </tr>
  <tr>
    <td align="center">{Launch_Mail}</td>
    <td>E-Mail-Programm öffnen</td>
  </tr>
  <tr>
    <td align="center">{Launch_Media}</td>
    <td>Media Player öffnen</td>
  </tr>
  <tr>
    <td align="center">{Launch_App1}</td>
    <td>Benutzerdefiniertes Programm 1 öffnen</td>
  </tr>
  <tr>
    <td align="center">{Launch_App2}</td>
    <td>Benutzerdefiniertes Programm 2 öffnen</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center">{PrintScreen}</td>
    <td>DRUCK-Taste</td>
  </tr>
  <tr>
    <td align="center">{CtrlBreak}</td>
    <td>STRG+UNTBR</td>
  </tr>
  <tr>
    <td align="center">{Pause}</td>
    <td>PAUSE-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td align="center"><strong>{Click [Optionen]}</strong><br>
    <span class="ver">[v1.0.43+]</span></td>
    <td><a name="Click"></a>Sendet einen Mausklick mit den selben Optionen vom <a href="Click.htm">Click-Befehl</a>. Zum Beispiel würde <code>{Click}</code> bewirken, dass die linke Maustaste einmal auf der aktuellen Mausposition geklickt wird, und <code>{Click 100, 200}</code>, dass die Koordinaten 100, 200 angeklickt werden (auf Basis von <a href="CoordMode.htm">CoordMode</a>). Die Maus kann ohne Klicken verschoben werden, wenn eine 0 nach den Koordinaten angegeben wird, zum Beispiel: <code>{Click 100, 200, 0}</code>. Die Verzögerung zwischen den Mausklicks wird durch <a href="SetMouseDelay.htm">SetMouseDelay</a> bestimmt (nicht <a href="SetKeyDelay.htm">SetKeyDelay</a>).</td>
  </tr>
  <tr>
    <td align="center">{WheelDown}, {WheelUp}, {WheelLeft}, {WheelRight}, {LButton}, {RButton}, {MButton}, {XButton1}, {XButton2}</td>
    <td>Sendet eine Mausaktion auf die aktuelle Mausposition (für die Kontrolle über Position und weitere Optionen kann <a href="Click.htm">{Click}</a> verwendet werden). Die Verzögerung zwischen den Mausklicks wird durch <a href="SetMouseDelay.htm">SetMouseDelay</a> bestimmt. WheelLeft/Right benötigt v1.0.48+, aber funktionieren nicht auf Betriebssystemen älter als Windows Vista.</td>
  </tr>
  <tr>
    <td align="center"><strong>{Blind}</strong></td>
    <td><p><a name="blind"></a>Sobald {Blind} als erstes Element im String vorhanden ist, wird das Programm daran gehindert, dass die anfänglich gedrückte ALT/STRG/UMSCHALT/WIN-Taste beim Senden losgelassen wird. Zum Beispiel würde der Hotkey <code>+s::Send {Blind}abc</code> ABC statt abc senden, wenn der Benutzer die UMSCHALT-Taste gedrückt hält.</p>
      <p>{Blind} bewirkt auch, dass <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode</a> ignoriert wird, das heißt, dass der Status der Festelltaste nicht geändert wird. Zudem lässt {Blind} zusätzliche Steuerungstasten weg, die ansonsten gesendet werden. Solche Tastatureingaben verhindern, dass: 1) das Startmenü bei linken/rechten WIN-Tastatureingaben angezeigt wird; 2) die Menüleiste bei ALT-Tastatureingaben aktiviert wird.</p>
      <p>Der Blind-Modus wird beim <a href="../misc/Remap.htm">Neubelegen einer Taste</a> automatisch verwendet. Zum Beispiel erzeugt die Neubelegung a::b: 1) "b", wenn man "a" eingibt; 2) großes B, wenn man ein großes A eingibt; und 3) STRG+B, wenn man STRG+A eingibt.</p>
      <p>{Blind} wird nicht von SendRaw und <a href="ControlSend.htm">ControlSendRaw</a> unterstützt. Desweiteren wird es nicht richtig von <a href="#SendPlayDetail">SendPlay</a> unterstützt, besonders bei Modifikatoren (STRG, ALT, UMSCHALT und WIN).</p></td>
  </tr>
  <tr>
    <td align="center"><strong>{Raw}</strong><br>
    <span class="ver">[v1.0.43+]</span></td>
    <td><a name="Raw" id="Raw"></a>Sendet die Tastatureingaben genau so, wie sie angezeigt werden, anstatt {Enter} als Enter-Taste, <code>^c</code> als STRG+C und so weiter zu übersetzen. Der String {Raw} kann an eine beliebige Stelle im String eingefügt werden. Sobald dieser vorhanden ist, ist der Modus bis zum Stringende aktiv.</td>
  </tr>
</table>

<h2>Mehrfaches oder haltendes Drücken einer Taste</h2>
<p><strong>Mehrfaches Drücken</strong>: Umschließt mit geschweiften Klammern den Namen der Taste, gefolgt von der Anzahl, wie oft diese gedrückt werden soll. Zum Beispiel:</p>
<pre>Send {DEL 4}  <em>; Drückt viermal die ENTF-Taste.</em>
Send {S 30}   <em>; Sendet 30 großgeschriebene S-Zeichen.</em>
Send +{TAB 4}  <em>; Drückt viermal UMSCHALT+TAB.</em></pre>
<p><strong>Halten oder Loslassen</strong>: Umschließt mit geschweiften Klammern den Namen der Taste, gefolgt von dem Wort <strong>Down</strong> oder <strong>Up</strong>. Zum Beispiel:</p>
<pre>Send {b down}{b up}
Send {TAB down}{TAB up}
Send {Up down}  <em>; Drückt die obere Pfeiltaste nach unten.</em>
Sleep 1000  <em>; Hält diese für eine Sekunde gedrückt.</em>
Send {Up up}  <em>; Lässt die obere Pfeiltaste wieder los.</em></pre>
<p>Falls eine Taste mit der oberen Methode gedrückt gehalten wird, beginnt sie nicht, sich automatisch zu wiederholen, wie sie es tun würde, wenn sie physisch gedrückt gehalten wird (Auto-Wiederholung ist nämlich ein Treiber/Hardware-Feature). Allerdings kann eine <a href="Loop.htm">Schleife</a> dazu verwendet werden, eine Auto-Wiederholung zu simulieren. Das folgende Beispiel sendet 20 Tabulator-Eingaben:</p>
<pre>Loop 20
{
    Send {Tab down}  <em>; Auto-Wiederholung besteht aus fortlaufenden Down-Ereignissen (ohne Up-Ereignisse).</em>
    Sleep 30  <em>; Die Anzahl an Millisekunden zwischen den Tastatureingaben (oder verwendet <a href="SetKeyDelay.htm">SetKeyDelay</a>).</em>
}
Send {Tab up}  <em>; Taste loslassen.</em></pre>
<p>Das Wort <em>DownTemp</em> kann auch verwendet werden. Dieses Wort bewirkt das gleiche wie <em>Down</em>, außer bei Modifikatoren (STRG/UMSCHALT/ALT/WIN). In solchen Fällen benachrichtigt <em>DownTemp</em> nachfolgende Send-Befehle, dass die Taste nicht dauerhaft gedrückt ist und losgelassen werden kann, wann immer diese von einer Tastatureingabe aufgerufen wird. Zum Beispiel würde <code>Send {Control DownTemp}</code> und danach <code>Send a</code> ein normales "a" erzeugen, anstatt STRG+A.</p>

<h2 id="Remarks">Allgemeine Bemerkungen</h2>
<p>Es gibt keine bestimmten Einschränkungen, welche Zeichen gesendet werden können. Falls ein Zeichen auf der aktuellen Tastaturbelegung nicht vorhanden ist, kann es durch Senden eines Unicode-Zeichenpackets oder einer <a href="#asc">ALT+nnnnn</a>-Kombination simuliert werden, abhängig davon, welche Version von AutoHotkey verwendet wird. Unicode-Zeichen werden in den Unicode-Versionen von AutoHotkey direkt als Text unterstützt, bei allen anderen Versionen nur mithilfe der <a href="#sendu">{U+nnnn}-Schreibweise</a>.</p>
<p><strong>BlockInput im Vergleich zu SendInput/SendPlay</strong>: Obwohl der <a href="BlockInput.htm">BlockInput</a>-Befehl dazu verwendet werden kann, jede physische Tastatureingabe vom Benutzer daran zu hindern, den künstlichen Eingabeverlauf zu unterbrechen, ist es oft besser, <a href="#SendInputDetail">SendInput</a> oder <a href="#SendPlayDetail">SendPlay</a> zu verwenden, sodass Tastatureingaben und Mausklicks nicht unterbrochen werden können. Das liegt daran, dass SendInput/Play im Gegensatz zu BlockInput die Benutzereingabe nicht beim Senden verwirft. Solche Tastatureingaben werden stattdessen zwischengespeichert und danach gesendet.</p>
<p>Falls eine große Anzahl an Tastatureingaben gesendet wird, kann ein <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a> verwendet werden, um die Les- und Pflegbarkeit zu verbessern.</p>
<p>Da das Betriebssystem die Simulation von STRG+ALT+ENTF nicht erlaubt, hat so etwas wie <code>Send ^!{Delete}</code> keine Wirkung.</p>
<p><b>Send funktioniert möglicherweise nicht</b> in Windows Vista oder höher, wenn das aktive Fenster mit administrativen Rechten läuft, das Script jedoch nicht. Das hängt damit zusammen, dass der Sicherheitsmechanismus "User Interface Privilege Isolation" (UIPI) aktiv ist.</p>

<h2 id="SendInputDetail">SendInput <span class="ver">[v1.0.43+]</span></h2>
<p>SendInput ist in der Regel die bevorzugte Methode, um Tastatureingaben und Mausklicks zu senden, weil sie bedeutend schneller und zuverlässiger ist. In den meisten Fällen wird SendInput nahezu sofort ausgeführt, selbst wenn lange Strings gesendet werden. Aufgrund dieser Schnelligkeit ist SendInput auch zuverlässiger, weil die Chance geringer ist, dass ein anderes Fenster unerwartet erscheint und die Tastatureingaben abfängt. Die Zuverlässigkeit erhöht sich nochmals durch die Tatsache, dass die Benutzereingaben während eines SendInput-Befehls bis zum Schluss zwischengespeichert wird.</p>
<p>Im Gegensatz zu den anderen Sendmethoden ist SendInput auf ca. 5000 Zeichen begrenzt (dieser Grenzwert variiert je nach Version des Betriebssystems und Performance-Einstellungen). Zeichen und Ereignisse über dem Limit werden nicht gesendet.</p>
<p><strong>Hinweis</strong>: SendInput ignoriert SetKeyDelay, weil das Betriebssystem eine Verzögerung in diesem Modus nicht unterstützt. Wenn SendInput allerdings wie unten beschrieben auf <a href="#SendEvent">SendEvent</a> wechselt, gilt <code><a href="SetKeyDelay.htm">SetKeyDelay -1, 0</a></code> (es sei denn, SendEvent's SetKeyDelay ist <code>-1, -1</code>, in diesem Fall wird <code>-1, -1</code> verwendet). Falls SendInput auf SendPlay wechselt, gilt das SetKeyDelay von SendPlay. Falls SendInput auf <a href="#SendPlayDetail">SendPlay</a> wechselt, gilt das SetKeyDelay von SendPlay.</p>
<p><a name="SendInputUnavail"></a>Wenn ein Script, <em>das nicht SendInput ausführt</em>, einen <a href="_InstallKeybdHook.htm">systemnahen Tastatur-Hook</a> installiert hat, wechselt SendInput automatisch auf <a href="#SendEvent">SendEvent</a> (oder auf <a href="#SendPlayDetail">SendPlay</a>, wenn <a href="SendMode.htm"><code>SendMode, InputThenPlay</code></a> aktiv ist). Das liegt daran, dass ein externes Hook, falls vorhanden, alle Vorteile von SendInput deaktiviert, das heißt, es wird schlechter als SendPlay und SendEvent. Da SendInput jedoch nicht in der Lage ist, einen systemnahen Hook vor v1.0.43 zu erkennen, erfolgt dieser Wechsel nicht, das dazu führt, dass SendInput unzuverlässiger als SendPlay/Event wird.</p>
<p>Wenn SendInput Mausklicks mithilfe von z. B. <a href="#Click">{Click}</a> sendet und <a href="SetMouseDelay.htm"><code>CoordMode Mouse, Relative</code></a> aktiv ist (die Standardeinstellung), wird sich jeder Klick auf das Fenster beziehen, welches zu Beginn von Send aktiv war. Wenn SendInput daher absichtlich ein anderes Fenster aktiviert (z. B. mit ALT+TAB), werden die Koordinaten der nachfolgenden Klicks innerhalb des gleichen Befehls falsch sein, weil diese sich weiterhin auf das alte anstatt auf das neue Fenster beziehen.</p>
<h2 id="SendPlayDetail">SendPlay <span class="ver">[v1.0.43+]</span></h2>
<p>Der größte Vorteil von SendPlay ist dessen Fähigkeit, Tastatureingaben und Mausklicks bei einer breiteren Auswahl an Spielen "wiederzugeben". Zum Beispiel könnte ein bestimmtes Spiel nur <a href="../Hotstrings.htm#SendMode">Hotstrings</a> akzeptieren, wenn sie die <a href="../Hotstrings.htm#SendMode">SendPlay-Option</a> haben. Allerdings kann es sein, dass SendPlay überhaupt nicht in Windows Vista oder höher funktioniert, wenn die Benutzerkontensteuerung (UAC) aktiv ist, selbst wenn das Script als Administrator läuft. Das folgende Script ermöglicht eine Übergangslösung für dieses Problem: <a href="http://www.autohotkey.com/forum/topic75595.html">http://www.autohotkey.com/forum/topic75595.html</a>.</p>
<p>Von den drei Sendemethoden ist SendPlay am ungewöhnlichsten, weil dieser Modus an sich keine Tastatureingaben und Mausklicks simuliert. Stattdessen werden mehrere Ereignisse (Nachrichten) erstellt, die direkt in das aktive Fenster einfließen (vergleichbar mit <a href="ControlSend.htm">ControlSend</a>, nur auf einem niedrigeren Niveau). SendPlay kann daher Hotkeys oder Hotstrings nicht auslösen.</p>
<p>Wie bei <a href="#SendInputDetail">SendInput</a> werden Tastatureingaben von SendPlay nicht mit den Benutzereingaben vermischt. Wenn der Benutzer bei einem SendPlay etwas schreibt, werden solche Tastatureingaben bis zum Schluss zwischengespeichert.</p>
<p>Obwohl SendPlay deutlich langsamer ist als SendInput, ist es meist schneller als der traditionelle <a href="#SendEvent">SendEvent</a>-Modus (selbst wenn <a href="SetKeyDelay.htm">KeyDelay</a> auf -1 ist).</p>
<p>Die Windows-Tasten (LWin und RWin) werden automatisch bei einem SendPlay blockiert, wenn der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist. Dadurch wird verhindert, dass das Startmenü angezeigt wird, wenn der Benutzer versehentlich eine Windows-Taste beim Senden drückt. Alle anderen Tasten hingegen werden nicht blockiert, weil sie bei einem SendPlay vom Betriebssystem automatisch bis zum Schluss zwischenspeichert werden.</p>
<p>SendPlay verwendet nicht die Standard-Einstellungen von SetKeyDelay und SetMouseDelay. Stattdessen gilt standardmäßig überhaupt keine Verzögerung, das wie folgt geändert werden kann:</p>
<pre><a href="SetKeyDelay.htm">SetKeyDelay</a>, 0, 10, <strong>Play</strong>  <em>; Beachtet, dass sowohl 0 als auch -1 im SendPlay-Modus gleichwertig sind.</em>
<a href="SetMouseDelay.htm">SetMouseDelay</a>, 10, <strong>Play</strong></pre>
<p>SendPlay ist nicht der Lage, Festell-, Num- oder Scroll-Tasten auszuschalten. Ebenso ist dieser Modus nicht in der Lage, den Status einer Taste zu ändern, wie von <a href="GetKeyState.htm">GetKeyState</a> gesehen, es sei denn, die Tastatureingaben werden an ein Fenster vom Script gesendet. Selbst dann können alle Änderungen an den linken/rechten Modifikatoren (z. B. RControl) nur über ihrem neutralen Gegenstück (z. B. Control) erkannt werden. Außerdem gelten für SendPlay noch weitere Einschränkungen, die auf der <a href="SendMode.htm#Play">SendMode-Seite</a> zu finden sind.</p>
<p>Im Gegensatz zu <a href="#SendInputDetail">SendInput</a> und <a href="#SendEvent">SendEvent</a> kann SendPlay von einem Benutzer unterbrochen werden, sobald er STRG+ALT+ENTF oder STRG+ESC drückt. In diesem Fall werden die restlichen Tastatureingaben nicht gesendet, aber das Script weiter ausgeführt, als ob SendPlay normal beendet wurde.</p>
<p>Obwohl SendPlay LWin- und RWin-Ereignisse senden kann, werden sie direkt an das aktive Fenster gesendet, anstatt deren interne Betriebssystemfunktion durchzuführen. Als Übergangslösung kann <a href="#SendEvent">SendEvent</a> verwendet werden. Zum Beispiel würde <code>SendEvent #r</code> das Ausführen-Dialogfenster des Startmenüs anzeigen.</p>

<h2>Siehe auch</h2>
<p><a href="SendMode.htm">SendMode</a>, <a href="SetKeyDelay.htm">SetKeyDelay</a>, <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode</a>, <a href="_EscapeChar.htm">Escapezeichen (z. B. `%)</a>, <a href="ControlSend.htm">ControlSend</a>, <a href="BlockInput.htm">BlockInput</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="WinActivate.htm">WinActivate</a></p>
<h2>Beispiele</h2>
<pre class="NoIndent">Send Mit freundlichen Grüßen,{enter}John Smith  <em>; Schreibt eine zweizeilige Signatur.</em>
Send !ds <em>; Öffnet das Dateimenü und wählt Speichern aus (ALT+D, gefolgt von S).</em>
Send {End}+{Left 4} <em>; Springt ans Textende und sendet viermal UMSCHALT+NACH-LINKS.</em>
SendInput <a href="#Raw">{Raw}</a>Eine Reihe unberarbeiteter Zeichen mit der schnellsten Methode gesendet (<a href="#SendInputDetail">SendInput</a>).</pre>

</body>
</html>
