<!DOCTYPE HTML>
<html>
<head>
<title>Input</title>
<meta name="keywords" content="Befehl, Tastatur">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>Input</h1>
      <p>Wartet auf die Tastatureingabe des Benutzers (nicht in Windows 9x unterstützt).</p>
      <pre class="Syntax">Input [, AusgabeVar, Optionen, Endtasten, Übereinstimmungsliste]</pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td style="width: 15%;"><p>AusgabeVar</p></td>
          <td style="width: 85%;"><p>Name der Variable, in der die Benutzereingabe gespeichert werden soll (standardmäßig werden künstliche Eingaben auch erfasst).</p>
            <p>Sobald dieser und die nachfolgenden Parameter weggelassen werden, wird jeder aktive Input-Befehl in anderen <a href="../misc/Threads.htm">Threads</a> beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort NewInput gesetzt. Der <a href="../misc/ErrorLevel.htm">ErrorLevel</a> des aktuellen Befehls wird hingegen auf 0 gesetzt, wenn ein vorheriger Input-Befehl beendet wurde, oder auf 1, wenn kein vorheriger Input-Befehl vorhanden war.</p>
            <p><em>AusgabeVar</em> speichert an sich keine Tastenanschläge. Stattdessen werden Zeichen gespeichert, die gemäß der Tastaturbelegung/Sprache des aktiven Fensters durch Tastatureingaben erzeugt wurden. Folglich werden Tastenschläge, die keine Zeichen erzeugen (z. B. PageUp und Escape), nicht gespeichert (obwohl sie mit dem unten genannten Parameter <em>Endtasten</em> erkannt werden können).</p>
            <p>Unsichtbare Zeichen wie TAB (`t) werden direkt gespeichert. ENTER als Zeilenvorschub (`n).</p></td>
        </tr>
        <tr>
          <td>Optionen</td>
          <td><p><u>Ein String mit beliebig vielen Buchstaben (in beliebiger Reihenfolge, optional mit Leerzeichen getrennt):</u></p>
            <p><strong>B</strong>: Rücktaste (Backspace) wird ignoriert. Normalerweise wird durch Drücken der Rücktaste bei einem Input-Befehl das zuletzt gedrückte Zeichen vom String entfernt. Hinweis: Falls bei einem sichtbaren Eingabetext (wie in einem Editor) Pfeiltasten oder ähnliches zur Navigation verwendet werden, wird durch die Rücktaste weiterhin das letzte Zeichen entfernt, anstatt das Zeichen hinter dem Textcursor (Einfügestrich).</p>
            <p><strong>C</strong>: Zeichengenauigkeit. Normalerweise ist die <em>Übereinstimmungsliste</em> nicht von der Groß- und Kleinschreibung abhängig (In den Versionen vor 1.0.43.03 wurden nur die Buchstaben von A bis Z erkannt, jedoch nicht z. B. ü/Ü).</p>
            <p><strong>I</strong>: Ignoriert Eingaben, die vom AutoHotkey-Script erzeugt werden, wie z. B. der <a href="Send.htm#SendEvent">SendEvent</a>-Befehl. <a href="Send.htm#SendInput">SendInput</a> und <a href="Send.htm#SendPlay">SendPlay</a> werden allerdings immer ignoriert, unabhängig dieser Einstellung.</p>
            <p><strong>L</strong>: Länge begrenzen (z. B. <code>L5</code>). Die maximal erlaubte Eingabelänge. Sobald der Text diese Länge erreicht, wird Input beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Max gesetzt. Kommt der Text jedoch in der <em>Übereinstimmungsliste</em> vor, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Match gesetzt. Durch Weglassen der Zahl wird die Länge automatisch auf 16383 Zeichen begrenzt (der höchste zulässige Wert).</p>
            <p><strong>M</strong>: Tastenkombinationen wie STRG+A bis STRG+Z werden erkannt und in reale ASCII-Zeichen umgewandelt, falls vorhanden. Zum Beispiel:</p>
            <pre>Transform, StrgC, Chr, 3 <em>; Speichert das Zeichen für STRG+C in die Variable StrgC.</em>
Input, AusgabeVar, L1 M
If AusgabeVar = %StrgC%
    MsgBox, Sie haben STRG+C gedrückt.
ExitApp</pre>
            <p>Hinweis: STRG+A bis STRG+Z sind die Zeichen von <a href="../Functions.htm#Chr">Chr(1)</a> bis <a href="../Functions.htm#Chr">Chr(26)</a>. Zudem kann die <strong>M</strong>-Option dazu führen, dass sich einige Tastenkürzel wie STRG+NACH-LINKS bei einem Input-Befehl falsch verhalten.</p>
            <p><strong>T</strong>: Zeitüberschreitung (z. B. <code>T3</code>). Die Wartezeit in Sekunden, bevor der Input-Befehl beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Timeout gesetzt wird. Sobald die Zeit abgelaufen ist, enthält <em>AusgabeVar</em> den bis dahin eingegebenen Text des Benutzers. Dieser Wert kann eine Fließkommazahl wie 2.5 sein.</p>
            <p id="vis"><strong>V</strong>: Sichtbar. Normalerweise wird die Benutzereingabe blockiert (kann nicht vom Betriebssystem erkannt werden). Mit dieser Option werden die Benutzereingaben direkt an das aktive Fenster gesendet.</p>
            <p id="asterisk"><strong>*</strong>: Platzhalter. Normalerweise muss die Benutzereingabe exakt mit einem Element aus der <em>Übereinstimmungsliste</em> übereinstimmen. Mit dieser Option kann eine Übereinstimmung öfters gefunden werden, da die gesamte Länge des Eingabetextes durchsucht wird.</p></td>
        </tr>
        <tr>
          <td>Endtasten</td>
          <td><p>Eine Liste mit beliebig vielen Tasten, die den Input-Befehl beenden, sobald eine von denen gedrückt wird (die <em>Endtaste</em> selbst wird nicht in <em>AusgabeVar</em> geschrieben). Falls ein Input-Befehl auf diese Weise beendet wird, enthält <a href="../misc/ErrorLevel.htm">ErrorLevel</a> das Wort EndKey, gefolgt von einem Doppelpunkt und den Namen der <em>Endtaste</em>. Beispiele: "EndKey:.", "EndKey:Escape".</p>
            <p>Die Liste im Parameter <em>Endtaste</em> verwendet ein ähnliches Format wie das vom <a href="Send.htm">Send</a>-Befehl. Zum Beispiel würde <code>{Enter}.{Esc}</code> bewirken, dass der Input-Befehl durch Drücken der ENTER-, PUNKT- oder ESC-Taste beendet werden kann. Damit die geschweiften Klammern selbst als Endtasten verwendet werden können, muss <code>{{}</code> und/oder <code>{}}</code> angegeben werden.</p>
            <p>Um die STRG-, ALT- oder UMSCHALT-Taste als Endtaste zu verwenden, muss anstelle der neutralen die linke und/oder rechte Version der Taste angegeben werden. Zum Beispiel muss <code>{LControl}{RControl}</code> anstelle von <code>{Control}</code> angegeben werden.</p>
            <p>Obwohl Tastenkombinationen wie STRG+C (^c) nicht unterstützt werden, können bestimmte Tasten, bei den die UMSCHALT-Taste gedrückt gehalten werden muss (nämlich die Satzzeichen !"&sect;$%&amp;/=?), seit Version 1.0.14 verwendet werden.</p>
            <p>Alternativ kann ein eindeutiger virtueller Tastencode wie <code>{vkFF}</code> angegeben werden. Das ist vorallem dann nützlich, wenn die Taste weder einen Namen hat, noch beim Drücken ein sichtbares Zeichen erzeugt. Der virtuelle Tastencode kann ermittelt werden, wenn die Schritte im unteren Abschnitt der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> befolgt werden.</p></td>
        </tr>
        <tr>
          <td>Übereinstimmungsliste</td>
          <td><p>Eine kommagetrennte Liste mit Schlüsselwörtern, die den Input-Befehl beenden werden (dabei wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Match gesetzt). Die Benutzereingabe muss exakt mit einem Element aus der Liste übereinstimmen (sofern die <a href="#asterisk">*-Option</a> nicht vorhanden ist). <strong>Alle Leer- und Tabulatorzeichen an den Trennkommas sind von Bedeutung</strong> -  das heißt, sie gehören zum übereinstimmenden String. Wenn die <em>Übereinstimmungsliste</em> beispielsweise <em>ABC , XYZ</em> enthält, dann muss <em>Var</em> entweder ABC mit einem Leerzeichen danach oder XYZ mit einem Leerzeichen davor enthalten, damit eine Übereinstimmung erfolgen kann.</p>
            <p>Zwei aufeinanderfolgende Kommas stellen ein direkt vorhandenes Komma dar. Im folgenden Beispiel wird ein direkt vorhandenes Komma nach dem Wort string1 erzeugt: "string1,,,string2". Ebenso enthält die folgende Liste nur ein einzelnes Element, in dem sich ein direkt vorhandenes Komma befindet: "einzelnes,,Element".</p>
            <p>Da die Elemente in <em>Übereinstimmungsliste</em> nicht als einzelne Parameter behandelt werden, kann sich die komplette Liste in einer Variable befinden. Tatsächlich muss sich alles oder ein Teil davon in der Variable befinden, wenn eine Länge von 16383 Zeichen überschritten wird (die maximale Länge einer Script-Zeile). Zum Beispiel könnte <em>Übereinstimmungsliste</em> aus <code>%Liste1%,%Liste2%,%Liste3%</code> bestehen, von der jede Unterliste eine lange Liste mit Elementen enthält.</p></td>
        </tr>
      </table>
      <h3>ErrorLevel</h3>
      <p><span class="ver">[v1.1.04+]</span> Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszulösen. Für mehr Informationen, siehe <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
      <table class="info">
        <tr>
          <td style="width: 15%;"><p>1 oder 0</p></td>
          <td style="width: 85%;"><p>Sobald der Befehl ohne Parameter verwendet wird, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 0 gesetzt, wenn er erfolgreich ein vorheriges Input beendet, oder auf 1, falls kein Input aktiv ist.</p></td>
        </tr>
        <tr>
          <td>NewInput</td>
          <td>Die Benutzereingabe wurde von einem anderen <a href="../misc/Threads.htm">Thread</a> unterbrochen, der den Input-Befehl benutzte.</td>
        </tr>
        <tr>
          <td>Max</td>
          <td>Die Benutzereingabe hat die maximal erlaubte Länge erreicht und stimmt nicht mit den Elementen in der <em>Übereinstimmungsliste</em> überein.</td>
        </tr>
        <tr>
          <td>Timeout</td>
          <td>Die Benutzereingabe hat die Zeit überschritten.</td>
        </tr>
        <tr>
          <td>Match</td>
          <td>Die Benutzereingabe stimmt mit einem Element aus der <em>Übereinstimmungsliste</em> überein.</td>
        </tr>
        <tr>
          <td>EndKey:name</td>
          <td>Eine <em>Endtaste</em> wurde gedrückt, um den Input-Befehl zu beenden. In diesem Fall beinhaltet <a href="../misc/ErrorLevel.htm">ErrorLevel</a> das Wort EndKey, gefolgt von einem Doppelpunkt und den Namen der Taste ohne Klammern, z. B. "EndKey:Enter", "EndKey:Escape", etc.</td>
        </tr>
      </table>
      <h3>Bemerkungen</h3>
      <p>Wenn dieser Befehl verwendet wird, während ein Input-Befehl in einem anderen <a href="../misc/Threads.htm">Thread</a> bereits aktiv ist, wird dieser beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort NewInput gesetzt. Danach wird der neue Input-Befehl eingeleitet.</p>
      <p>Wenn ein Input-Befehl aktiv ist, können weiterhin neue <a href="../misc/Threads.htm">Threads</a> wie <a href="Menu.htm">benutzerdefinierte Menüelemente</a> oder <a href="SetTimer.htm">zeitlich festgelegte Subroutinen</a> erstellt werden. Ebenso sind Tastatur-<a href="../Hotkeys.htm">Hotkeys</a> auch dann aktiv, wenn Input <a href="#vis">sichtbar</a> ist. Falls Input nicht sichtbar ist, können nur <a href="_UseHook.htm">Hook-Hotkeys</a> ausgelöst werden.</p>
      <p>Sobald ein Script diesen Befehl erstmalig verwendet, wird der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> installiert (wenn es nicht bereits geschehen ist). Darüber hinaus wird das Script <a href="_Persistent.htm">persistent</a> - das heißt, dass <a href="ExitApp.htm">ExitApp</a> zum Beenden des Scripts verwendet werden sollte. Der Tastatur-Hook bleibt bis zum nächsten <a href="Suspend.htm">Suspend</a>- oder <a href="Hotkey.htm">Hotkey</a>-Befehl bestehen - wird der Hook bei diesem Befehl nicht mehr benötigt, wird er wieder entfernt.</p>
      <p>Falls mehrere Sprachen oder Tastaturbelegungen vorhanden sind, greift der Input-Befehl auf die Tastaturbelegung des aktiven Fensters zurück, anstatt auf die des Scripts (unabhängig davon, ob Input <a href="#vis">sichtbar</a> ist). In den Versionen vor 1.0.44.03 wurde die Belegung des Scripts verwendet.</p>
      <p>Obwohl <a href="../Hotstrings.htm">Hotstrings</a> im Gegensatz zu einem Input-Befehl nicht so flexibel sind, sind sie dennoch einfacher zu handhaben.</p>
      <p><em>Input</em> hat in Windows 9x keine Wirkung (selbst ErrorLevel und <em>AusgabeVar</em> bleiben unverändert). Mit <a href="../Variables.htm#OSType">A_OSType</a> kann Windows 9x erkannt werden.</p>
      <h3>Verwandte Befehle</h3>
      <p><a href="KeyWait.htm">KeyWait</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="InputBox.htm">InputBox</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="IfIn.htm">If Var in/contains Übereinstimmungsliste</a></p>
      <h3>Beispiele</h3>
      <pre class="NoIndent"><em>; Wartet darauf, dass der Benutzer eine Taste drückt. Tasten, die keine sichtbaren Zeichen
; wie Modifikatoren, Funktionstasten und Pfeiltasten erzeugen, sind als Endtasten aufgelistet,
; damit auch diese erkannt werden.</em>
Input, Einzeltaste, L1, {LControl}{RControl}{LAlt}{RAlt}{LShift}{RShift}{LWin}{RWin}{AppsKey}{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}{F10}{F11}{F12}{Left}{Right}{Up}{Down}{Home}{End}{PgUp}{PgDn}{Del}{Ins}{BS}{Capslock}{Numlock}{PrintScreen}{Pause}</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Ein Hotkey-Beispiel. Da der Hotkey das Tilde-Zeichen (~) als
; Präfix hat, werden die eigenen Tastatureingaben an das aktive Fenster übergeben
; (außer in Win9x).  Wenn der Benutzer beispielsweise [btw
; in einem Editor schreibt, führt das Script automatisch eine Aktion
; ihrer Wahl aus (z. B. den Eingabetext ersetzen):</em>

~[::
Input, Benutzereingabe, V T5 L4 C, {enter}.{esc}{tab}, btw,otoh,fl,ahk,ca
If ErrorLevel = Max
{
    MsgBox, Sie haben "%Benutzereingabe%" eingegeben, das die maximale Textlänge ist.
    Return
}
If ErrorLevel = Timeout
{
    MsgBox, Sie haben "%Benutzereingabe%" eingegeben, dabei wurde die Zeit überschritten.
    Return
}
If ErrorLevel = NewInput
    Return
IfInString, ErrorLevel, EndKey:
{
    MsgBox, Sie haben "%Benutzereingabe%" eingegeben und die Eingabe mit %ErrorLevel% beendet.
    Return
}
<em>; Ansonsten wurde eine Übereinstimmung gefunden.</em>
SetKeyDelay, -1  <em>; Die meisten Editoren können damit umgehen.</em>
If Benutzereingabe = btw
    Send, {backspace 4}by the way
Else If Benutzereingabe = otoh
    Send, {backspace 5}on the other hand
Else If Benutzereingabe = fl
    Send, {backspace 3}Florida
Else If Benutzereingabe = ca
    Send, {backspace 3}California
Else If Benutzereingabe = ahk
    Run, www.ahkscript.org
Return</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>