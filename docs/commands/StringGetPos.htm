<!DOCTYPE HTML>
<html>
<head>
<title>StringGetPos</title>
<meta name="keywords" content="Befehl, String">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>StringGetPos</h1>
      <p>Ermittelt die Position des angegebenen Teilstrings innerhalb eines Strings.</p>
      <pre class="Syntax">StringGetPos, Ausgabevariable, Eingabevariable, Suchtext [, L#|R#, Offset]
Position := <a href="../Functions.htm#InStr">InStr</a>(Heuhaufen, Nadel [, Zeichengenauigkeit, Startposition]) <em>; Siehe <a href="../Functions.htm#InStr">InStr()</a> f&uuml;r Details.</em></pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td style="width: 15%;">Ausgabevariable</td>
          <td style="width: 85%;">Name der Variable, in der die ermittelte Position relativ zum ersten Zeichen von <em>Eingabevariable</em> gespeichert werden soll. Das erste Zeichen ist bei StringGetPos die Position 0 und bei <a href="../Functions.htm#InStr">InStr()</a> die Position 1.</td>
        </tr>
        <tr>
          <td>Eingabevariable</td>
          <td>Name der Variable, deren Inhalt durchsucht werden soll. Der Name sollte nicht mit Prozentzeichen umschlossen werden, sofern nicht die Absicht besteht, den <em>Inhalt</em> der Variable als Namen zu verwenden.</td>
        </tr>
        <tr>
          <td>Suchtext</td>
          <td>Der zu suchende String. Die &Uuml;bereinstimmung unterscheidet nicht zwischen Gro&szlig;- und Kleinschreibung, sofern <a href="StringCaseSense.htm">StringCaseSense</a> inaktiv ist.</td>
        </tr>
        <tr>
          <td>L#|R#</td>
          <td><p>Das hat Einfluss darauf, welches Vorkommen gefunden wird, falls <em>Suchtext</em> mehrmals in <em>Eingabevariable</em> vorkommt. Ist dieser Parameter nicht vorhanden, erfolgt die Suche in <em>Eingabevariable</em> von links nach rechts, bis die erste &Uuml;bereinstimmung gefunden wird. Falls dieser Parameter eine 1 oder ein R ist, erfolgt die Suche in <em>Eingabevariable</em> von rechts nach links, bis die erste &Uuml;bereinstimmung gefunden wird.</p>
            <p>Um neben der ersten auch eine andere &Uuml;bereinstimmung zu finden, kann der Buchstaben L oder R, gefolgt von der Nummer des Vorkommens, angegeben werden. Zum Beispiel wird mit r4 das vierte Vorkommen von rechts gefunden. Hinweis: Falls die Nummer kleiner gleich 0 ist, kann keine &Uuml;bereinstimmung gefunden werden.</p></td>
        </tr>
        <tr>
          <td>Offset</td>
          <td>Die Anzahl der Zeichen auf der linken oder rechten Seite (abh&auml;ngig vom obigen Parameter), die &uuml;bersprungen werden. Ist dieser Parameter nicht vorhanden, gilt standardm&auml;&szlig;ig eine 0. Das folgende Beispiel beginnt die Suche beim 10. Zeichen von links: <code>StringGetPos, Ausgabevariable, Eingabevariable, abc, , 9</code>. Dieser Parameter kann ein <a href="../Variables.htm#Expressions">Ausdruck</a> sein.</td>
        </tr>
      </table>
      <h3>ErrorLevel</h3>
      <p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird auf 1 gesetzt, wenn das angegebene Vorkommen von <em>Suchtext</em> nicht in <em>Eingabevariable</em> gefunden werden konnte, ansonsten auf 0.</p>
      <h3>Bemerkungen</h3>
      <p>Im Gegensatz zu <a href="StringMid.htm">StringMid</a> und <a href="../Functions.htm#InStr">InStr()</a> gilt bei StringGetPos die 0 als Position des ersten Zeichens.</p>
      <p>Die abgerufene Position bezieht sich immer auf das erste Zeichen von <em>Eingabevariable</em>, unabh&auml;ngig davon, ob <em>L#|R#</em> und/oder <em>Offset</em> angegeben sind. Wenn zum Beispiel der String "abc" in 123abc789 gefunden wird, ist die gemeldete Position immer 3, unabh&auml;ngig von der verwendeten Suchmethode.</p>
      <p>Wenn das angegebene Vorkommen von <em>Suchtext</em> innerhalb von <em>Eingabevariable</em> nicht existiert, wird <em>Ausgabevariable</em> auf -1 und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt.</p>
      <p>Mit <a href="SplitPath.htm">SplitPath</a> kann ein Dateipfad auf einfache Weise in Verzeichnis, Dateiname und Erweiterung aufgeteilt werden.</p>
      <p>Die internen Variablen <a href="../Variables.htm">A_Space</a> und <a href="../Variables.htm">A_Tab</a> enthalten jeweils ein einzelnes Leerzeichen und ein einzelnes Tabulatorzeichen. Sie sind n&uuml;tzlich, um nach Leer- und Tabulatorzeichen zu suchen, die entweder einzeln oder am Anfang oder Ende von <em>Suchtext</em> vorkommen.</p>
      <h3>Verwandte Befehle</h3>
      <p><a href="../Functions.htm#InStr">InStr()</a>, <a href="RegExMatch.htm">RegExMatch()</a>, <a href="IfInString.htm">IfInString</a>, <a href="IfIn.htm">If Var in/contains &Uuml;bereinstimmungsliste</a>, <a href="StringCaseSense.htm">StringCaseSense</a>, <a href="StringReplace.htm">StringReplace</a>, <a href="SplitPath.htm">SplitPath</a>, <a href="StringLeft.htm">StringLeft</a>, <a href="StringLeft.htm">StringRight</a>, <a href="StringMid.htm">StringMid</a>, <a href="StringTrimLeft.htm">StringTrimLeft</a>, <a href="StringTrimLeft.htm">StringTrimRight</a>, <a href="StringLen.htm">StringLen</a>, <a href="StringLower.htm">StringLower</a>, <a href="StringLower.htm">StringUpper</a>, <a href="IfIs.htm">If Var is Typ</a></p>
      <h3>Beispiele</h3>
      <pre class="NoIndent">Heuhaufen = abcdefghijklmnopqrs
Nadel = def
StringGetPos, Pos, Heuhaufen, %Nadel%
If Pos &gt;= 0
    MsgBox, Der String wurde auf Position %Pos% gefunden.</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel #2:
; Teilt den vollst&auml;ndigen Pfadnamen einer Datei in einzelne Komponenten auf.
; Beachte, dass das mit <a href="StringSplit.htm">StringSplit</a> oder mit einer <a href="LoopParse.htm">Parsing-Schleife</a> viel einfacher ist - das folgende Script dient nur zur Veranschaulichung.</em>
FileSelectFile, Datei, , , W&auml;hle einen Dateinamen in einem tief verschachtelten Ordner aus:
If Datei &lt;&gt;
{
    StringLen, Pos_vorher, Datei
    Pos_vorher += 1 <em>; Setzt die Position auf das Zeichen, dass nach dem letzten Zeichen erfolgt.</em>
    Loop
    {
        <em>; Sucht nach dem Nten Vorkommen, beginnend von rechts:</em>
        <strong>StringGetPos</strong>, Pos, Datei, \, R%A_Index%
        If ErrorLevel
            break
        L&auml;nge := Pos_vorher - Pos - 1
        Pos_vorher := Pos
        Pos += 2  <em>; F&uuml;r die Verwendung mit StringMid anpassen.</em>
        StringMid, Pfad_Komponente, Datei, %Pos%, %L&auml;nge%
        MsgBox Pfadkomponente #%a_index% (von rechts) ist:`n%Pfad_Komponente%
    }
}</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>