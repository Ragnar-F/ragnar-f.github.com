<!DOCTYPE HTML>
<html>
<head>
<title>GetKeyState</title>
<meta name="description" content="Verwende GetKeyState in diesem freien Makro-Programm, um auf einfache Weise zu überprüfen, ob eine Taste oben oder unten ist.">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GetKeyState</h1>

<p>Überprüft, ob eine Taste oben oder unten ist. Kann auch den Joystickstatus abrufen.</p>

<pre class="Syntax">GetKeyState, AusgabeVar, Tastenname [, Modus]
TasteIstUnten := <a href="../Functions.htm#GetKeyState">GetKeyState</a>("Tastenname" [, "Modus"])</pre>
<h3>Parameter</h3>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name der Variable, in der der Status der Taste gespeichert werden soll. D für Unten (Down) und U für Oben (Up) (aber die Funktion <a href="../Functions.htm#GetKeyState">GetKeyState()</a> übergibt True (1) für Oben und False (0) für Unten). Die Variable wird leer sein, wenn der Status der Taste nicht ermittelt werden konnte.</p>
      <p>Die nächsten 2 Methoden gelten nur für Joysticks:</p>
    <p>1) Bei einer Joystick-Achse wie JoyX wird <em>AusgabeVar</em> auf eine Fließkommazahl zwischen 0 und 100 gesetzt, um die Position des Joysticks als Prozentwert vom Bewegungsbereich der Achse darzustellen. Das Format der Zahl kann via <a href="SetFormat.htm">SetFormat</a> geändert werden. Mit dem <a href="../scripts/JoystickTest.htm">Test-Script</a> kannst du dein(e) Joystick(s) analysieren.</p>
    <p>2) Wenn <em>Tastenname</em> JoyPOV ist, wird der abgerufene Wert zwischen 0 und 35900 sein. Die folgenden ungefähren POV-Werte werden von den meisten Joysticks verwendet:<br>
    -1: keinen Winkel erkannt<br>
    0: nach vorne gerichtet<br>
9000 (90 Grad): nach rechts gerichtet <br>
27000 (270 Grad): nach links gerichtet<br>
18000 (180 Grad): nach hinten gerichtet</p></dd>

  <dt>Tastenname</dt>
  <dd><p>Dieser Parameter kann so ziemlich jedes Zeichen von der Tastatur oder ein Tastenname aus der <a href="../KeyList.htm">Tastenliste</a> sein, darunter auch Maus- und Joystick-Tasten. Beispiele: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>Alternativ kann ein eindeutiger virtueller Tastencode wie vkFF angegeben werden. Dies ist in Ausnahmefällen nützlich, wo eine Taste keinen Namen hat. Der virtuelle Tastencode einer solchen Taste kann durch Befolgen der Schritte am unteren Ende der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> ermittelt werden.</p> 
      <p><b>Bekannte Einschränkung</b>: Diese Funktion kann nicht zwischen zwei Tasten unterscheiden, die den gleichen virtuellen Tastencode haben, wie z. B. Left und NumpadLeft.</p></dd>

  <dt>Modus</dt>
  <dd><p>Dieser Parameter wird beim Abrufen eines Joystick-Status ignoriert.</p>
      <p>Fehlt dieser Parameter, wird standardmäßig der logische Tastenstatus ermittelt. Dieser Status macht dem Betriebssystem und aktivem Fenster glauben, dass die Taste gedrückt wurde, welches aber nicht unbedingt dem physischen Status entspricht.</p>
	  <p>Alternativ kann einer der folgenden Buchstaben angegeben werden:</p>
      <p><strong>P</strong>: Ermittelt den physischen Status (z. B. ob der Benutzer eine Taste physisch gedrückt hält). Der physische Zustand einer Taste oder Maustaste ist üblicherweise das gleiche wie der logische Zustand, sofern keine Tastatur- und/oder Maus-Hooks installiert sind. Ist dies aber der Fall, kann der Befehl genau wiedergeben, ob der Benutzer eine Taste physisch gedrückt hält oder nicht (solange sie nach unten gedrückt wurde, während das Script lief). Mit dem <a href="KeyHistory.htm">KeyHistory</a>-Befehl oder -Menüpunkt kannst du überprüfen, ob dein Script die Hooks benutzt. Durch Hinzufügen von <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> und/oder <a href="_InstallMouseHook.htm">#InstallMouseHook</a> können die Hooks im Script erzwungen werden.</p>
      <p><strong>T</strong>: Ermittelt den Umschaltstatus (nur für umschaltbare Tasten wie FESTSTELL, NUM, ROLLEN und EINFG gültig). D bedeutet, dass die Taste "An" ist, und U bedeutet, dass sie "Aus" ist (aber die <a href="../Functions.htm#GetKeyState">GetKeyState()</a>-Funktion übergibt True (1) für "An" und False (0) für "Aus").</p>
    </dd>

</dl>

<h3>Bemerkungen</h3>
<p>Wenn du auf einen neuen Zustand einer Taste warten willst, ist <a href="KeyWait.htm">KeyWait</a> besser geeignet als eine GetKeyState-Schleife.</p>
<p>Es kann sein, dass Betriebssysteme mit ungewöhnlichen Tastaturtreibern den Zustand ihrer Tasten nur langsam aktualisieren, besonders der Umschaltstatus von Tasten wie FESTSTELL. Ein Script, das den Zustand einer solchen Taste überprüft, könnte <a href="Sleep.htm">Sleep</a> davor verwenden, um dem Betriebssystem genug Zeit zum Aktualisieren des Tastenzustands zu verschaffen.</p>
<p>Beispiele zur Verwendung von GetKeyState mit einem Joystick findest du in <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a> und <a href="../scripts/JoystickMouse.htm">Joystick-Zu-Maus-Script</a>.</p>
<h3>Siehe auch</h3>
<p><a href="../Functions.htm#GetKeyState">GetKeyState()</a>, <a href="KeyWait.htm">KeyWait</a>, <a href="../KeyList.htm">Tastenliste</a>, <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="_InstallMouseHook.htm">#InstallMouseHook</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Einfache Beispiele:</em>
GetKeyState, Status, RButton  <em>; Rechte Maustaste.</em>
GetKeyState, Status, Joy2  <em>; Die zweite Taste des ersten Joysticks.</em>

GetKeyState, Status, Shift
if Status = D
    MsgBox Mindestens eine UMSCHALT-Taste ist unten.
else
    MsgBox Keine UMSCHALT-Taste unten.

GetKeyState, Status, CapsLock, T <em>;  D, wenn FESTSTELL-Taste AN ist, ansonsten U für AUS.</em>
Status := GetKeyState("Capslock", "T")  <em>; True, wenn FESTSTELL-Taste AN ist, ansonsten Falsch für AUS.</em>

<em>; Neubelegungsbeispiel (dient nur zur Veranschaulichung,
; weil das <a href="../misc/Remap.htm">integrierte Neubelegungs-Feature</a> leichter zu handhaben wäre):
; Im folgenden Hotkey wird die Maustaste gedrückt gehalten, während NumpadAdd
; unten ist, das NumpadAdd effektiv in eine Maustaste transformiert). Diese Methode
; kann zum Wiederholen einer Aktion benutzt werden, während der Benutzer eine Taste gedrückt hält:</em>
*NumpadAdd::
MouseClick, left,,, 1, 0, D  <em>; Hält die linke Maustaste gedrückt.</em>
Loop
{
    Sleep, 10
    GetKeyState, Status, NumpadAdd, P
    if Status = U  <em>; Die Taste wurde losgelassen, also Schleife verlassen.</em>
        break
    <em>; ... füge hier beliebig andere Aktionen ein, die wiederholt werden sollen.</em>
}
MouseClick, left,,, 1, 0, U  <em>; Lässt die Maustaste los.</em>
return

<em>; Beispiel: Macht das Verhalten einer Joystick-Taste abhängig von der Achsenposition des Joysticks.</em>
joy2:: 

GetKeyState, joyx, JoyX
if joyx &gt; 75
    MsgBox Aktion #1 (Taste gedrückt, während Joystick nach rechts bewegt wurde).
else if joyx &lt; 25
    MsgBox Aktion #2 (Taste gedrückt, während Joystick nach links bewegt wurde).
else
    MsgBox Aktion #3 (Taste gedrückt, während Joystick horizontal zentriert wurde).
return

<em>; Siehe <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a> und <a href="../scripts/JoystickMouse.htm">Joystick-Zu-Maus-Script</a> für weitere Beispiele.</em></pre>

</body>
</html>
