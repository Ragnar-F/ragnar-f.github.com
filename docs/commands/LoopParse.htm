<!DOCTYPE HTML>
<html>
<head>
<title>Loop (String parsen)</title>
<meta name="keywords" content="Befehl, Ablaufsteuerung, Schleife, String">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>Loop (String parsen)</h1>
      <p>Ermittelt nacheinander Teilstrings (Felder) aus einem String.</p>
      <pre class="Syntax">Loop, Parse, Eingabevariable [, Trennzeichen, ZeichenAuslassen] </pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td style="width: 15%;">Parse</td>
          <td style="width: 85%;">Dieser Parameter muss das Wort PARSE sein. Im Gegensatz zu anderen Schleifenvarianten darf dieser Parameter keinen Variablenverweis enthalten, der auf das Wort PARSE verweist.</td>
        </tr>
        <tr>
          <td>Eingabevariable</td>
          <td><p>Name der Variable, deren Inhalt analysiert wird. Der Name sollte nicht mit Prozentzeichen umschlossen werden, solange nicht der Bedarf besteht, den <em>Inhalt</em> der Variable als Name zu verwenden.</p></td>
        </tr>
        <tr>
          <td>Trennzeichen</td>
          <td><p>Ist dieser Parameter leer oder nicht vorhanden, wird jedes Zeichen in der <em>Eingabevariable</em> als Teilstring angesehen.</p>
            <p>Wenn dieser Parameter <strong>CSV</strong> enth&auml;lt, wird <em>Eingabevariable</em> als String mit komma-getrennten Werten angesehen (Comma-Separated Values). Hier ist ein Beispiel f&uuml;r eine CSV-Zeile, die von MS-Excel erzeugt wurde:</p>            <pre>"Erstes Feld",ZweitesFeld,"Das Wort ""Spezial"" mit direktes Anf&uuml;hrungszeichen",,"Letztes Feld, mit direktem Komma"</pre>
            <p>Andernfalls enth&auml;lt <em>Trennzeichen</em> ein oder mehrere Zeichen (abh&auml;ngig von Gro&szlig;- und Kleinschreibung), die festlegen, wo die Abgrenzungen zwischen den Teilstrings in der <em>Eingabevariable</em> vorkommen.</p>
            <p>Trennzeichen selbst werden nicht als Teil des Teilstrings angesehen. Befindet sich dar&uuml;ber hinaus nichts zwischen einem Paar von Trennzeichen innerhalb der <em>Eingabevariable</em>, ist der entsprechende Teilstring leer.</p>
            <p>Zum Beispiel: Mit <code>`,</code> (ein gesch&uuml;tztes Komma) wird der String jeweils bei einem Komma geteilt. Mit %A_Tab%%A_Space% wird jeweils ein neuer Teilstring erstellt, wenn ein Leer- oder Tabulatorzeichen in <em>Eingabevariable</em> vorkommt.</p>
            <p>Um anstelle eines Zeichens ein String als Trennung zu verwenden, sollte zuerst <a href="StringReplace.htm">StringReplace</a> verwendet werden, um alle Vorkommen des Strings mit einem einzelnen Zeichen zu ersetzen, das nie direkt im Text ben&ouml;tigt wird, zum Beispiel: &cent;&curren;&yen;&brvbar;&sect;&copy;&ordf;&laquo;&reg;&micro;&para;. Im folgenden Beispiel wird &lt;br&gt;
              als Trennung verwendet:</p>
            <pre>StringReplace, NeueHTML, HTMLString, &lt;br&gt;, &cent;, All
Loop, parse, NeueHTML, &cent; <em>; Den String mit dem Cent-Symbol parsen.</em>
{
...
}</pre></td>
        </tr>
        <tr>
          <td>ZeichenAuslassen</td>
          <td><p>Eine optionale Liste von Zeichen (abh&auml;ngig von Gro&szlig;- und Kleinschreibung), die am Anfang und Ende jeden Teilstrings ausgeschlossen werden. Wenn <em>ZeichenAuslassen</em> zum Beispiel %A_Space%%A_Tab% enth&auml;lt, werden Leer- oder Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) jeden Teilstrings entfernt.</p>
            <p>Wenn <em>Trennzeichen</em> leer ist, wird mit <em>ZeichenAuslassen</em> gekennzeichnet, welche Zeichen ausgelassen werden (die Schleife sieht sie nicht).</p>
            <p>Im Gegensatz zum letzten Parameter der meisten anderen Befehle m&uuml;ssen Kommas in <em>ZeichenAuslassen</em> gesch&uuml;tzt werden (`,).</p></td>
        </tr>
      </table>
      <h3>Bemerkungen</h3>
      <p>Eine string-parsende Schleife ist n&uuml;tzlich, um jedes Feld in einem String nacheinander abzuarbeiten. Parsing-Schleifen verwenden weniger Speicher als <a href="StringSplit.htm">StringSplit</a> (da StringSplit permanente Felder erzeugt) und sind in den meisten F&auml;llen einfacher zu benutzen.</p>
      <p id="LoopField">Die interne Variable <strong>A_LoopField</strong> existiert in jeder Parsing-Schleife. Sie enth&auml;lt den Inhalt des aktuellen Teilstrings (Feld) aus der <em>Eingabevariable</em>. Wenn eine innere Parsing-Schleife von einer &auml;u&szlig;eren Parsing-Schleife umschlossen ist, wird das Feld von der innersten Schleife Vorrang haben.</p>
      <p>Obwohl eine interne Variable wie "A_LoopDelimiter" nicht existiert, wird im untersten Beispiel demonstriert, wie man erkennt, welche Trennung bei jedem Feld verwendet wurde.</p>
      <p>Die Gr&ouml;&szlig;e der <em>Eingabevariable</em> oder deren Felder ist unbegrenzt. &Auml;ndert sich zudem der Inhalt der <em>Eingabevariable</em> beim Ausf&uuml;hren der Schleife, wird diese &Auml;nderung nicht von der Schleife "gesehen", weil sie eine tempor&auml;re Kopie des originalen Inhalts bearbeitet.</p>
      <p>Vor dem Parsen k&ouml;nnen die Felder mit dem <a href="Sort.htm">Sort</a>-Befehl neu angeordnet werden.</p>
      <p>Auf der <a href="Loop.htm">Loop</a>-Seite k&ouml;nnen Informationen zu <a href="Block.htm">Blocks</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index gefunden werden (weil diese in jeder Schleifenvariante vorkommen).</p>
      <h3>Verwandte Befehle</h3>
      <p><a href="StringSplit.htm">StringSplit</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a>, <a href="Sort.htm">Sort</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>
      <h3>Beispiele</h3>
      <pre class="NoIndent"><em>; Beispiel #1:</em>
Farben = rot,gr&uuml;n,blau
Loop, parse, Farben, `,
{
    MsgBox, Farbnummer %A_Index% ist %A_LoopField%.
}</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel #2: Liest nacheinander die Zeilen innerhalb einer Variable (vergleichbar mit einer <a href="LoopReadFile.htm">dateilesenden</a> Schleife).
; Eine Datei kann mit <a href="FileRead.htm">FileRead</a> in eine Variable geladen werden:</em>
Loop, parse, Dateiinhalt, `n, `r  <em>; Durch die Angabe von `n vor `r k&ouml;nnen sowohl Dateien von Windows als auch von Unix geparst werden.</em>
{
    MsgBox, 4, , Zeilennummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel #3: Das gleiche Beispiel wie oben, jedoch f&uuml;r die Zwischenablage.
; Ist n&uuml;tzlich, sobald die Zwischenablage Dateien enth&auml;lt, die z. B. von einem offenen Explorer-Fenster
; kopiert wurden (das Programm wandelt solche Dateien automatisch in ihre Dateinamen um):</em>
Loop, parse, clipboard, `n, `r
{
    MsgBox, 4, , Dateinummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel #4: Parst eine Datei mit kommagetrennten Werten (CSV):</em>
Loop, read, C:\Datenbank-Export.csv
{
    Zeilennummer = %A_Index%
    Loop, parse, A_LoopReadLine, CSV
    {
        MsgBox, 4, , Feld %Zeilennummer%-%A_Index% ist:`n%A_LoopField%`n`nWeiter?
        IfMsgBox, No
            Return
    }
}</pre>
      <p>&nbsp;</p>
      <pre class="NoIndent"><em>; Beispiel #5: Erkennt, welche Trennung verwendet wurde.</em>

<em>; String initialisieren, der durchsucht wird.</em>
Farben = Rot,Gr&uuml;n|Blau;Gelb|Cyan,Magenta
<em>; Z&auml;hler initialisieren, um die aktuelle Position im String festzuhalten.</em>
Position := 0

Loop, Parse, Farben, `,|;
{
    <em>; Berechnet die Position der Trennung am Ende dieses Feldes.</em>
    Position += StrLen(A_LoopField) + 1
    <em>; Ermittelt die Trennung, die von der Parsing-Schleife gefunden wurde.</em>
    Trennung := SubStr(Farben, Position, 1)

    MsgBox Feld: %A_LoopField%`Trennung: %Trennung%
}</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>