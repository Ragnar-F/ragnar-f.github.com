<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Loop (String parsen)</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<script src="../../NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Loop (String parsen)</h1>

<p>Ermittelt nacheinander Teilstrings (Felder) aus einem String.</p>

<pre class="Syntax">Loop, Parse, String [, Trennzeichen, ZeichenAuslassen] </pre>
<h3>Parameter</h3>
<dl>
  
    <dt>Parse</dt>
    <dd><p>Dieser Parameter muss das Wort PARSE sein, das weder ein Ausdruck noch ein Variablenverweis sein kann.</p></dd>
 
    <dt>String</dt>
    <dd><p>Der zu untersuchende String.</p></dd>
 
    <dt>Trennzeichen</dt>
    <dd><p>Wenn leer oder nicht vorhanden, dann wird jedes Zeichen im Eingabestring<em></em> als Teilstring angesehen.</p>
      <p>Wenn dieser Parameter <strong>CSV</strong> enth&auml;lt, dann wird der String durch Komma-Zeichen getrennt. Hier ist ein Beispiel f&uuml;r eine CSV-Zeile, von MS-Excel erzeugt: "Erstes Feld",ZweitesFeld,"Das Wort ""Spezial"" mit direkt vorhandenen Anf&uuml;hrungszeichen",,"Letztes Feld, mit einem direkt vorhandenen Komma"</p>
      <p>Andernfalls enth&auml;lt das <em>Trennzeichen</em> beliebig viele Zeichen (abh&auml;ngig von Gro&szlig;- und Kleinschreibung), die als Abgrenzungen zwischen den Teilstrings dienen.</p>
      <p>Trennzeichen selbst sind nicht ein Teil des Teilstrings. Wenn dar&uuml;ber hinaus nichts zwischen einem Paar von Trennzeichen innerhalb des Eingabestring liegt, dann ist der entsprechende Teilstring leer.</p>
      <p>Zum Beispiel: Mit `, (ein gesch&uuml;tztes Komma) wird der String jeweils bei einem Komma geteilt. Mit %A_Tab%%A_Space% wird jeweils ein neuer Teilstring erstellt, wenn sich Leer- oder Tabulatorzeichen im Eingabestring befinden.</p>
      <p>Um ein String als Trennung zu verwenden, benutzt zuerst <a href="StrReplace.htm">StrReplace</a>, um alle Vorkommnisse des Strings mit einem Zeichen zu ersetzen, welches nie direkt im Text gebraucht wird, zum Beispiel: &cent;&curren;&yen;&brvbar;&sect;&copy;&ordf;&laquo;&reg;&micro;&para;. Ein Beispiel, das den String <br> als Trennung verwendet:</p>
      <pre>StrReplace, NeueHTML, HTMLString, <br>, &cent;, All
Loop, parse, NeueHTML, &cent; <em>; Den String mit dem Cent-Symbol parsen.</em>
{
...
}</pre></dd>
 
    <dt>ZeichenAuslassen</dt>
    <dd><p>Eine optionale Liste von Zeichen (abh&auml;ngig von Gro&szlig;- und Kleinschreibung), die am Anfang und Ende jeden Teilstrings ausgeschlossen werden. Wenn <em>ZeichenAuslassen</em> zum Beispiel %A_Space%%A_Tab% enth&auml;lt, dann werden Leer- oder Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) jeden Teilstrings entfernt.</p>
    <p>Wenn das <em>Trennzeichen</em> leer ist, dann wird mit <em>ZeichenAuslassen</em> gekennzeichnet, welche Zeichen ausgelassen werden (die Schleife sieht sie nicht).</p>
    <p>Im Gegensatz zum letzten Parameter der meisten anderen Befehle m&uuml;ssen Kommas in <em>ZeichenAuslassen</em> gesch&uuml;tzt werden (`,).</p></dd>
  
</dl>

<h3>Bemerkungen</h3>
<p>Eine Parsing-Schleife ist n&uuml;tzlich, wenn der Benutzer nacheinander jedes Feld in einem String bearbeiten will. Parsing-Schleifen verwenden weniger Speicher als <a href="StrSplit.htm">StrSplit</a> (da StrSplit permanente Felder erzeugt) und sind in den meisten F&auml;llen einfacher zu benutzen.</p>
<p><a name="LoopField"></a>Die interne Variable <strong>A_LoopField</strong> existiert in jeder Parsing-Schleife. Sie enth&auml;lt den Inhalt des aktuellen Teilstrings (Feld). Wenn eine innere Parsing-Schleife durch eine &auml;u&szlig;ere Parsing-Schleife eingeschlossen ist, dann hat das Feld innerhalb der Schleife Vorrang.</p>
<p>Obwohl die interne Variable "A_LoopDelimiter" nicht existiert, demonstriert das Beispiel am unterem Ende der Seite, wie man erkennt, welches Trennzeichen f&uuml;r jedes Feld verwendet wurde.</p>
<p>Die Gr&ouml;&szlig;e des Eingabestrings oder dessen Felder ist unbegrenzt.</p>
<p>Um die Felder vor dem Parsen neu anzuordnen, verwendet den Befehl <a href="Sort.htm">Sort</a>.</p>
<p>Siehe <a href="Loop.htm">Loop</a> f&uuml;r Informationen &uuml;ber <a href="Block.htm">Blocks</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (die gibt es in jeder Schleifenvariante).</p>
<h3>Verwandte Befehle</h3>
<p><a href="StrSplit.htm">StrSplit</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a>, <a href="Sort.htm">Sort</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Beispiel #1:</em>
Farben = rot,gr&uuml;n,blau
Loop, parse, Farben, `,
{
    MsgBox, Farbnummer %A_Index% ist %A_LoopField%.
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #2: Liest nacheinander die Zeilen innerhalb einer Variable (vergleichbar mit einer <a href="LoopReadFile.htm">dateilesenden</a> Schleife).
; Eine Datei kann mit <a href="FileRead.htm">FileRead</a> in eine Variable geladen werden:</em>
Loop, parse, Dateiinhalt, `n, `r  <em>; Mit der Angabe von `n vor `r k&ouml;nnen sowohl Dateien von Windows als auch von Unix geparst werden.</em>
{
    MsgBox, 4, , Zeilennummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    If A_MsgBoxResult = "No", break
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #3: Entspricht dem oben genannten Beispiel, jedoch nur f&uuml;r die Zwischenablage.
; Ist n&uuml;tzlich, sobald die Zwischenablage Dateien enth&auml;lt, die z. B. in einem offenen Explorer-Fenster
; kopiert wurden (das Programm wandelt solche Dateien und ihre Dateinamen automatisch um):</em>
Loop, parse, clipboard, `n, `r
{
    MsgBox, 4, , Dateinummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    If A_MsgBoxResult = "No", break
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #4: Parst eine Datei mit kommagetrennten Werten (CSV):</em>
Loop, read, C:\Datenbank-Export.csv
{
    Zeilennummer = %A_Index%
    Loop, parse, A_LoopReadLine, CSV
    {
        MsgBox, 4, , Feld %Zeilennummer%-%A_Index% ist:`n%A_LoopField%`n`nWeiter?
        If A_MsgBoxResult = "No"
            Return
    }
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #5: Erkennung des Trennzeichens, das verwendet wurde.</em>

<em>; String initialisieren, der durchsucht wird.</em>
Farben = Rot,Gr&uuml;n|Blau;Gelb|Cyan,Magenta
<em>; Z&auml;hler initialisieren, um unsere Position im Auge zu behalten.</em>
Position := 0

Loop, Parse, Farben, `,|;
{
    <em>; Berechnet die Position des Trennzeichens am Ende dieses Feldes.</em>
    Position += StrLen(A_LoopField) + 1
    <em>; Ermittelt das gefundene Trennzeichen von der Parsing-Schleife.</em>
    Trennzeichen := SubStr(Farben, Position, 1)

    MsgBox Feld: %A_LoopField%`nTrennzeichen: %Trennzeichen%
}</pre>


</body></html>