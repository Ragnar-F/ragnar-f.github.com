<!DOCTYPE HTML>
<html>
<head>
<title>Loop (String parsen)</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (String parsen)</h1>

<p>Ermittelt nacheinander Teilstrings (Felder) aus einem String.</p>

<pre class="Syntax">Loop, Parse, EingabeVar [, Trennzeichen, ZeichenAuslassen]</pre>
<h3>Parameter</h3>
<dl>

  <dt>Parse</dt>
  <dd><p>Dieser Parameter muss das Wort PARSE sein. Im Gegensatz zu anderen Schleifenvarianten darf dieser Parameter keinen Variablenverweis enthalten, der auf das Wort PARSE verweist.</p></dd>

  <dt>EingabeVar</dt>
  <dd><p>Name der Variable, deren Inhalt geparst werden soll. Der Name sollte nicht mit Prozentzeichen umschlossen werden, sofern nicht die Absicht besteht, den <em>Inhalt</em> der Variable als Namen zu verwenden.</p></dd>

  <dt>Trennzeichen</dt>
  <dd><p>Ist dieser Parameter leer oder nicht vorhanden, wird jedes Zeichen von <em>EingabeVar</em> als einzelner Teilstring behandelt.</p>
      <p>Wenn dieser Parameter <strong>CSV</strong> enthält, wird <em>EingabeVar</em> als String mit komma-getrennten Werten angesehen (Comma-Separated Values). Hier ist ein Beispiel für eine CSV-Zeile, die von MS-Excel erzeugt wurde:</p>
<pre>"Erstes Feld",ZweitesFeld,"Das Wort ""Spezial"" mit direktes Anführungszeichen",,"Letztes Feld, mit direktem Komma"</pre>
      <p>Ansonsten kann <em>Trennzeichen</em> ein oder mehr Zeichen enthalten (Unterscheidung zwischen Groß- und Kleinschreibung), die als Abgrenzungen zwischen den Teilstrings innerhalb von <em>EingabeVar</em> dienen sollen.</p>
      <p>Trennzeichen selbst werden nicht als Teil des Teilstrings angesehen. Befindet sich darüber hinaus nichts zwischen einem Paar von Trennzeichen innerhalb von <em>EingabeVar</em>, ist der entsprechende Teilstring leer.</p>
      <p>Zum Beispiel: <code>`,</code> (ein literales Komma) würde den String jeweils bei einem Komma teilen. Mit %A_Tab%%A_Space% wird jeweils ein neuer Teilstring erstellt, wenn ein Leer- oder Tabulatorzeichen in <em>EingabeVar</em> vorkommt.</p>
      <p>Um anstelle eines Zeichens ein String als Trennung zu verwenden, sollte zuerst <a href="StringReplace.htm">StringReplace</a> verwendet werden, um alle Vorkommen des Strings mit einem einzelnen Zeichen zu ersetzen, das nie direkt im Text benötigt wird, zum Beispiel: ¢¤¥¦§©ª«®µ¶. Im folgenden Beispiel wird der String &lt;br&gt; als Trennung verwendet:</p>
      <pre>StringReplace, NeueHTML, HTMLString, &lt;br&gt;, ¢, All
Loop, parse, NeueHTML, ¢ <em>; Den String mit dem Cent-Symbol parsen.</em>
{
...
}</pre></dd>

  <dt>ZeichenAuslassen</dt>
  <dd><p>Eine optionale Liste von Zeichen (abhängig von Groß- und Kleinschreibung), die am Anfang und Ende jeden Teilstrings ausgeschlossen werden. Wenn <em>ZeichenAuslassen</em> zum Beispiel %A_Space%%A_Tab% enthält, werden Leer- oder Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) jeden Teilstrings entfernt.</p>
    <p>Wenn <em>Trennzeichen</em> leer ist, wird mit <em>ZeichenAuslassen</em> gekennzeichnet, welche Zeichen ausgelassen werden (die Schleife sieht sie nicht).</p>
    <p>Im Gegensatz zum letzten Parameter der meisten anderen Befehle müssen Kommas in <em>ZeichenAuslassen</em> mit einem Escapezeichen versehen werden (`,).</p></dd>

</dl>

<h3>Bemerkungen</h3>
<p>Eine string-parsende Schleife ist nützlich, um jedes Feld in einem String nacheinander abzuarbeiten. Parsing-Schleifen verwenden weniger Speicher als <a href="StringSplit.htm">StringSplit</a> (da StringSplit ein permanentes <a href="../misc/Arrays.htm#pseudo">Pseudo-Array</a> erzeugt) und in den meisten Fällen einfacher zu handhaben.</p>
<p><a name="LoopField"></a>Die interne Variable <strong>A_LoopField</strong> existiert in jeder Parsing-Schleife. ie enthält den Inhalt des aktuellen Teilstrings (Feld) aus <em>EingabeVar</em>. Wenn eine innere Parsing-Schleife von einer äußeren Parsing-Schleife umschlossen ist, wird das Feld von der innersten Schleife Vorrang haben.</p>
<p>Obwohl eine interne Variable wie "A_LoopDelimiter" nicht existiert, wird im untersten Beispiel demonstriert, wie man erkennt, welche Trennung bei jedem Feld verwendet wurde.</p>
<p>Die Größe von <em>EingabeVar</em> oder deren Felder ist unbegrenzt. Ändert sich zudem der Inhalt von <em>EingabeVar</em> beim Ausführen der Schleife, wird diese Änderung nicht von der Schleife "gesehen", weil sie eine temporäre Kopie des originalen Inhalts bearbeitet.</p>
<p>Vor dem Parsen können die Felder mit dem <a href="Sort.htm">Sort</a>-Befehl neu angeordnet werden.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite können Informationen zu <a href="Block.htm">Blöcke</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index gefunden werden (weil diese in jeder Schleifenvariante vorkommen).</p>
<h3>Siehe auch</h3>
<p><a href="StringSplit.htm">StringSplit</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="Sort.htm">Sort</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Beispiel #1:</em>
Farben = rot,grün,blau
Loop, parse, Farben, `,
{
    MsgBox, Farbnummer %A_Index% ist %A_LoopField%.
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #2: Liest nacheinander die Zeilen innerhalb einer Variable (vergleichbar mit einer <a href="LoopReadFile.htm">dateilesenden Schleife</a>).
; Eine Datei kann mit <a href="FileRead.htm">FileRead</a> in eine Variable geladen werden:</em>
Loop, parse, Dateiinhalt, `n, `r  <em>; Durch die Angabe von `n vor `r können sowohl Dateien von Windows als auch von Unix geparst werden.</em>
{
    MsgBox, 4, , Zeilennummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #3: Das gleiche Beispiel wie oben, jedoch für die Zwischenablage.
; Ist nützlich, sobald die Zwischenablage Dateien enthält, die z. B. von einem offenen Explorer-Fenster
; kopiert wurden (das Programm wandelt solche Dateien automatisch in ihre Dateinamen um):</em>
Loop, parse, clipboard, `n, `r
{
    MsgBox, 4, , Dateinummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #4: Parst eine Datei mit kommagetrennten Werten (CSV):</em>
Loop, read, C:\Datenbank-Export.csv
{
    Zeilennummer = %A_Index%
    Loop, parse, A_LoopReadLine, CSV
    {
        MsgBox, 4, , Feld %Zeilennummer%-%A_Index% ist:`n%A_LoopField%`n`nWeiter?
        IfMsgBox, No
            Return
    }
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #5: Erkennt, welche Trennung verwendet wurde.</em>

<em>; String initialisieren, der durchsucht wird.</em>
Farben = Rot,Grün|Blau;Gelb|Cyan,Magenta
<em>; Zähler initialisieren, um die aktuelle Position im String festzuhalten.</em>
Position := 0

Loop, Parse, Farben, `,|;
{
    <em>; Berechnet die Position der Trennung am Ende dieses Feldes.</em>
    Position += StrLen(A_LoopField) + 1
    <em>; Ermittelt die Trennung, die von der Parsing-Schleife gefunden wurde.</em>
    Trennung := SubStr(Farben, Position, 1)

    MsgBox Feld: %A_LoopField%`Trennung: %Trennung%
}</pre>

</body>
</html>
