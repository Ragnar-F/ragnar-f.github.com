<!DOCTYPE HTML>
<html>
<head>
<title>#If</title>
<meta name="keywords" content="Befehl, Direktive, Hotkey, Hotstring">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>#If <span class="ver">[AHK_L]</span></h1>
      <p>Erstellt kontextabh&auml;ngige <a href="../Hotkeys.htm">Hotkeys</a> und <a href="../Hotstrings.htm">Hotstrings</a>. Solche Hotkeys f&uuml;hren eine andere Aktion aus (oder gar keine), abh&auml;ngig vom Ergebnis des Ausdrucks.</p>
      <pre class="Syntax">#If [, Ausdruck]</pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td>Ausdruck</td>
          <td>Beliebiger g&uuml;ltiger <a href="../Variables.htm#Expressions">Ausdruck</a>.</td>
        </tr>
      </table>
      <h3>Grundlagen zur Bedienung</h3>
      <p>Es kann ein beliebiger g&uuml;ltiger Ausdruck verwendet werden, um den Kontext zu definieren, bei dem ein Hotkey aktiv sein soll. Zum Beispiel:</p>
      <pre>#If WinActive("ahk_class Notepad") or WinActive(Fenstertitel)
#Space::MsgBox Du hast WIN+LEERTASTE im Editor oder %Fenstertitel% gedr&uuml;ckt.</pre>
      <p>Die #If-Direktive ist wie die #IfWin-Direktive von der Position abh&auml;ngig: sie hat auf Hotkeys und Hotstrings Einfluss, die sich im Script physisch darunter befinden. Zudem schlie&szlig;en sich #If und #IfWin gegenseitig aus; das hei&szlig;t, dass nur das aktuellste #If oder #IfWin wirksam sein wird.</p>
      <p>Um die Kontextabh&auml;ngigkeit zu deaktivieren, muss #If oder #IfWin ohne Parameter angegeben werden. Zum Beispiel:</p>
      <pre>#If</pre>
      <h3>Allgemeine Bemerkungen</h3>
      <p>Beim Dr&uuml;cken einer Hotkey-Tastenkombination wird der #If-Ausdruck ausgewertet, um zu bestimmen, ob der Hotkey aktiviert werden soll. Es ist m&ouml;glich, dass das System erst auf die Tastatur- oder Mauseingabe reagiert, wenn die Auswertung des Ausdrucks fertig ist oder die <a href="_IfTimeout.htm">Zeit &uuml;berschritten</a> hat. Das Senden von Tastatureingaben oder Mausklicks beim Auswerten des Ausdrucks (z. B. von einer Funktion, die die Direktive aufgerufen hat) kann zu Komplikationen f&uuml;hren und sollte verhindert werden.</p>
      <p>Aufgrund eines Designfehlers in AutoHotkey ist es m&ouml;glich, dass der Ausdruck bei einem einzelnen Tastatur- oder Mausereignis bis zu zweimal ausgewertet wird.</p>
      <p>Durch die oben genannten Gr&uuml;nde sollte der Ausdruck so konstruiert werden, dass dieser schnell und ohne Nebeneffekte durchgef&uuml;hrt werden kann.</p>
      <p><span class="ver">[AHK_L 53+]:</span> Das Setzen von <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> und <a href="../Variables.htm#TimeSinceThisHotkey">A_TimeSinceThisHotkey</a> basiert auf den Hotkey, der vom aktuellen #If-Ausdruck ausgewertet wird.</p>
      <p><span class="ver">[v1.0.95.00+]:</span> <a href="../Variables.htm#PriorHotkey">A_PriorHotkey</a> und <a href="../Variables.htm#TimeSincePriorHotkey">A_TimeSincePriorHotkey</a> enthalten vor&uuml;bergehend die vorherigen Werte der entsprechenden "This"-Variablen.</p>
      <h3>Verwandte Befehle</h3>
      <p>Die meisten Verhaltenseigenschaften von <a href="_IfWinActive.htm">#IfWin</a>-Direktiven gelten auch f&uuml;r #If.</p>
      <p>Es kann <a href="_IfTimeout.htm">#IfTimeout</a> verwendet werden, um den Standardwert der Zeit&uuml;berschreitung zu &uuml;berschreiben.</p>
      <h3 id="Examples">Beispiele</h3>
      <pre class="NoIndent">
<em>; Beispiel #1: Passt die Lautst&auml;rke mit dem Mausrad an, wenn sich der Mauszeiger &uuml;ber der Taskleiste befindet.</em>
#If MouseIsOver("ahk_class Shell_TrayWnd")
WheelUp::Send {Volume_Up}
WheelDown::Send {Volume_Down}

MouseIsOver(Fenstertitel) {
    MouseGetPos,,, Fenster
    Return WinExist(Fenstertitel . " ahk_id " . Fenster)
}

<em>; Beispiel #2: Einfache w&ouml;rter-l&ouml;schende Tastenk&uuml;rzel f&uuml;r alle Eingabefelder.</em>
#If ActiveControlIsOfClass("Edit")
^BS::Send ^+{Left}{Del}
^Del::Send ^+{Right}{Del}

ActiveControlIsOfClass(Klasse) {
    ControlGetFocus, FokussiertesSteuerelement, A
    ControlGet, FokussiertesSteuerelementHwnd, Hwnd,, %FokussiertesSteuerelement%, A
    WinGetClass, FokussiertesSteuerelementKlasse, ahk_id %FokussiertesSteuerelementHwnd%
    Return (FokussiertesSteuerelementKlasse=Klasse)
}

<em>; Beispiel #3: Kontextunabh&auml;ngiger Hotkey.</em>
#If
Esc::ExitApp

<em id="ex4">; Beispiel #4: Dynamische Hotkeys. <b>Ben&ouml;tigt Beispiel #1.</b></em>
NumpadAdd::
Hotkey, If, MouseIsOver("ahk_class Shell_TrayWnd")
If (doubleup := !doubleup)
    Hotkey, WheelUp, DoubleUp
Else
    Hotkey, WheelUp, WheelUp
Return

DoubleUp:
Send {Volume_Up 2}
Return

</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>