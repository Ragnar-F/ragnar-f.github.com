<!DOCTYPE HTML>
<html>
<head>
<title>For-Schleife</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>For-Schleife <span class="ver">[AHK_L 59+]</span></h1>

<p>Wiederholt mehrere Befehle für jedes Schlüssel-Wert-Paar in einem Objekt.</p>

<pre class="Syntax">For Schlüssel [, Wert] in Ausdruck</pre>
<h3>Parameter</h3>
<dl>

  <dt>Schlüssel</dt>
  <dd><p>Name der Variable, in der der Schlüssel zu Beginn jeder Iteration (Wiederholung) gespeichert werden soll.</p></dd>

  <dt>Wert</dt>
  <dd><p>Name der Variable, in der der Wert des aktuellen Schlüssels gespeichert werden soll.</p></dd>

  <dt>Ausdruck</dt>
  <dd><p>Ein <a href="../Variables.htm#Expressions">Ausdruck</a>, dessen Ergebnis ein Objekt ist, oder eine Variable, die ein Objekt enthält.</p></dd>

</dl>

<h3>Bemerkungen</h3>
<p><i>Ausdruck</i> wird, bevor die Schleife beginnt, nur einmal ausgewertet. Ist dessen Ergebnis kein Objekt, springt die Ausführung sofort auf die Zeile, welche nach dem Schleifenblock erfolgt; ansonsten wird die <code>NewEnum()</code>-Methode des Objekts aufgerufen, um ein <a href="../objects/Enumerator.htm"><i>Enumerator</i></a>-Objekt zu erzeugen. Zu Beginn jeder Iteration wird die <a href="../objects/Enumerator.htm#Next">Next()</a>-Methode des Enumerators verwendet, um das nächste Schlüssel-Wert-Paar zu ermitteln. Wenn Next() eine 0 oder einen leeren String zurückgibt, wird die Schleife beendet.</p>
<p>Das folgende Beispiel zeigt diesen Prozess, auch wenn es nicht das gleiche ist wie eine For-Schleife:</p>
<pre>_enum := (<i>Ausdruck</i>)._NewEnum()
if IsObject(_enum)
    while _enum.Next(Schlüssel, Wert)
    {
        ...
    }
</pre>
<p>Vorhandene Schlüssel-Wert-Paare können geändert werden, während die Schleife läuft. Allerdings führt das Einfügen oder Entfernen von Schlüsseln dazu, dass einige Elemente übersprungen oder mehrfach enumeriert werden. Man kann das umgehen, wenn man zuerst eine Liste mit Schlüsseln erstellt, die entfernt werden sollen, und danach eine zweite Schleife verwendet, um die Schlüssel nach dem ersten Schleifendurchlauf zu entfernen. Beachte, dass man <code><a href="../objects/Object.htm#Remove">Object.Remove</a>(<i>ErsterSchlüssel</i>, <i>LetzterSchlüssel</i>)</code> verwenden kann, um eine bestimmte Auswahl von Schlüsseln ohne Schleife zu entfernen.</p>
<p>Nach einer For-Schleife erfolgt üblicherweise ein <a href="Block.htm">Block</a> mit mehreren Anweisungen, die den <em>Schleifenkörper</em> bilden. Hat die Schleife nur eine Anweisung, ist ein Block nicht notwendig (in diesem Fall zählt ein "If" und das dazugehörige "Else" als eine Anweisung). Bei Bedarf kann man den "One True Brace Style" (OTB) verwenden. Das heißt, dass die öffnende Klammer neben dem Befehl vorkommen darf. Zum Beispiel: <code>for x, y in z {</code>.</p>
<p>Wie bei allen Schleifen können <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und <a href="../Variables.htm#Index">A_Index</a> verwendet werden.</p>

<h3>COM-Objekte</h3>
<p>Da <i>Schlüssel</i> und <i>Wert</i> direkt an die Next()-Methode des Enumerators übergeben werden, sind die zugewiesenen Werte abhängig davon, welcher Objekttyp gerade enumeriert wird. Bei COM-Objekten enthält <i>Schlüssel</i> den Wert, der von <a href="http://msdn.microsoft.com/en-us/library/ms221369.aspx">IEnumVARIANT::Next()</a> zurückgegeben wurde, und <i>Wert</i> eine Zahl, die den <a href="http://msdn.microsoft.com/en-us/library/cc237865.aspx">Variant-Typen</a> repräsentiert. Bei einem <a href="http://msdn.microsoft.com/en-us/library/x4k5wbx4.aspx">Scripting.Dictionary</a>-Objekt beispielsweise wird jeder <i>Schlüssel</i> einen Schlüssel aus dem Dictionary enthalten und jeder <i>Wert</i> bei Strings eine 8 und bei Integer eine 3 sein. Siehe <a href="ComObjType.htm">ComObjTyp</a> für eine Liste von Typen.</p>
<p><span class="ver">[v1.0.96.00+]:</span> Beim Enumerieren eines <a href="ComObjArray.htm">SafeArrays</a> wird <i>Schlüssel</i> das aktuelle Element sein und <i>Wert</i> seinen Variantentyp enthalten.</p>

<h3>Siehe auch</h3>
<p><a href="../objects/Enumerator.htm">Enumerator-Objekt</a>, <a href="../objects/Object.htm#NewEnum">Object.NewEnum()</a>, <a href="While.htm">While-Loop</a>, <a href="Loop.htm">Loop</a>, <a href="Until.htm">Until</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Block</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Listet die Schlüssel-Wert-Paare eines Objekts auf:</em>
Farben := <a href="../Objects.htm#Arrays">Object</a>("Rot", 0xFF0000, "Blau", 0x0000FF, "Grün", 0x00FF00)
<em>; "Farben" könnte direkt mit dem obigen Ausdruck ersetzt werden:</em>
For k, v in Farben
    s .= k "=" v "`n"
MsgBox % s
</pre>
<pre class="NoIndent"><em>; Listet alle offenen Explorer- und IE-Fenster auf:</em>
for window in <a href="ComObjCreate.htm">ComObjCreate</a>("<a href="http://msdn.microsoft.com/en-us/library/bb774094.aspx">Shell.Application</a>").Windows
    Fenster .= window.<a href="http://msdn.microsoft.com/en-us/library/aa752057.aspx">LocationName</a> " :: " window.<a href="http://msdn.microsoft.com/en-us/library/aa752058.aspx">LocationURL</a> "`n"
MsgBox % Fenster</pre>
<pre class="NoIndent"><em>/*
Class: CEnumerator

Generisches Enumerator-Objekt, das verwendet werden kann, um über numerische Schlüssel zu iterieren.
Das Array darf beim Iterieren nicht verändert werden, weil der iterierte Bereich ansonsten ungültig werden würde.
Es ist möglich, benutzerdefinierte MaxIndex()-Funktionen für die Array-Grenzen zu definieren.
Befinden sich fehlende Array-Elemente zwischen 1 und Max-Index, werden diese iteriert, aber einen Wert von "" haben.
Das bedeutet, dass dieser Enumerator keine realen Sparse-Arrays unterstützt.
Damit ein Objekt diesen Iterator verwenden kann, sollte diese Funktion in die Klassendefinition eingefügt werden:

    _NewEnum()
    {
    	return new CEnumerator(this)
    }

Quelle: http://www.autohotkey.com/board/topic/2667-suggestions-on-documentation-improvements/?p=531509
*/</em>

<em>; Iteriert über den Enumerator</em>
For k, v in Test
	MsgBox %k%=%v%

<em>; Test-Klasse, um die Verwendung zu demonstrieren</em>
class Test
{
	static Data := ["abc", "def", "ghi"]

	_NewEnum()
	{
		return new CEnumerator(this.Data)
	}
}

class CEnumerator
{
	__New(Object)
	{
		this.Object := Object
		this.first := true
		<em>; Für die Geschwindigkeit zwischenspeichern. Nützlich, falls benutzerdefinierte MaxIndex()-Funktionen schlechte Performance haben.</em>
		<em>; Das bedeutet aber auch, dass keine Schlüssel-Wert-Paare beim Iterieren eingefügt werden können, weil der Bereich ansonsten ungültig werden würde.</em>
		this.ObjMaxIndex := Object.MaxIndex()
	}

	Next(ByRef key, ByRef value)
	{
		if (this.first)
		{
			this.Remove("first")
			key := 1
		}
		else
			key ++
		if (key &lt;= this.ObjMaxIndex)
			value := this.Object[key]
		else
			key := ""
		return key != ""
	}
}</pre>
</body>
</html>