<!DOCTYPE HTML>
<html>
<head>
<title>FileOpen</title>
<meta name="keywords" content="Befehl, Funktion, Datei">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>FileOpen <span class="ver">[AHK_L 42+]</span></h1>
      <p>Öffnet eine Datei.</p>
      <pre class="Syntax">File := FileOpen(Dateiname, Flags [, Kodierung])</pre>
      <h3>Parameter</h3>
      <table class="info">
        <tr>
          <td style="width: 15%;">Dateiname</td>
          <td style="width: 85%;">Name der zu öffnenden Datei, die sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist.</td>
        </tr>
        <tr>
          <td>Flags</td>
          <td>Seit <span class="ver">[AHK_L 54]</span> entweder ein String mit Zeichen für den gewünschten Zugriffsmodus, gefolgt von anderen Optionen (optional getrennt durch Leerzeichen und Tabulatoren); oder seit <span class="ver">[AHK_L 42]</span> eine Kombination (Summe) von numerischen Flags. Unterstützte Werte werden in der folgenden Tabelle beschrieben.</td>
        </tr>
        <tr>
          <td>Kodierung</td>
          <td>Der Zeichensatz, der zur Textverarbeitung verwendet werden soll, falls die Datei keine UTF-8- oder UTF-16-<a href="http://en.wikipedia.org/wiki/Byte_order_mark">Bytereihenfolge-Markierung</a> enthält.<br>
            Ist dieser Parameter nicht vorhanden, wird der aktuelle Wert von <a href="../Variables.htm#FileEncoding">A_FileEncoding</a> verwendet.</td>
        </tr>
      </table>
      <h3>Flags</h3>
      <table class="info">
        <tr>
          <th style="width: 4em;"><br></th>
          <th style="width: 4em;"><br></th>
          <th style="text-align: left;">Zugriffsmodi (schließen sich gegenseitig aus)</th>
        </tr>
        <tr>
          <td class="fopt">r</td>
          <td class="fnum">0</td>
          <td><i>Lesen:</i> Schlägt fehl, falls die Datei noch nicht vorhanden ist.</td>
        </tr>
        <tr>
          <td class="fopt">w</td>
          <td class="fnum">1</td>
          <td><i>Schreiben:</i> Erstellt eine neue Datei oder <b style="color: red;">überschreibt die vorhandene Datei.</b></td>
        </tr>
        <tr>
          <td class="fopt">a</td>
          <td class="fnum">2</td>
          <td><i>Anfügen:</i> Erstellt eine neue Datei, falls diese noch nicht vorhanden ist, ansonsten wird der Datei-Pointer ans Ende der Datei gesetzt.</td>
        </tr>
        <tr>
          <td class="fopt">rw</td>
          <td class="fnum">3</td>
          <td><i>Lesen/Schreiben:</i> Erstellt eine neue Datei, falls diese noch nicht vorhanden ist.</td>
        </tr>
        <tr>
          <td class="fopt">h</td>
          <td><br></td>
          <td>Kennzeichnet, dass <i>Dateiname</i> ein Datei-Handle ist, der in ein Objekt eingebunden werden kann. Freigabemodus-Flags werden ignoriert. Das Datei-Handle wird <b>nicht</b> automatisch geschlossen, wenn das File-Objekt gelöscht wird oder das Aufrufen von <a href="../objects/File.htm#Close">Close</a> keine Wirkung hat. Beachte, dass <a href="../objects/File.htm#Seek">Seek</a>, <a href="../objects/File.htm#Tell">Tell</a> und <a href="../objects/File.htm#Length">Length</a> nicht verwendet werden sollten, wenn <i>Dateiname</i> ein Handle für ein nicht-suchendes Device wie Pipe- oder Kommunikation-Device ist.</td>
        </tr>
        <tr>
          <th><br></th>
          <th><br></th>
          <th style="text-align: left;">Freigabemodus-Flags</th>
        </tr>
        <tr>
          <td class="fopt" style="white-space: nowrap;">-rwd</td>
          <td><br></td>
          <td>Sperrt die Datei für Lese-, Schreib- und/oder Löschzugriff. Es sind beliebige Kombinationen mit <code>r</code>, <code>w</code> und <code>d</code> möglich. Die Angabe von <code>-</code> ist das gleiche wie, als würde man <code>-rwd</code> angeben. Falls weggelassen, wird jeder Zugriff freigegeben.</td>
        </tr>
        <tr>
          <td><br></td>
          <td class="fnum">0</td>
          <td>Ist <i>Flags</i> numerisch, bewirkt das Fehlen von  Freigabemodus-Flags, dass die Datei gesperrt wird.</td>
        </tr>
        <tr>
          <td><br></td>
          <td class="fnum">0x100</td>
          <td><i>Lesezugriff</i> freigeben.</td>
        </tr>
        <tr>
          <td><br></td>
          <td class="fnum">0x200</td>
          <td><i>Schreibzugriff</i> freigeben.</td>
        </tr>
        <tr>
          <td><br></td>
          <td class="fnum">0x400</td>
          <td><i>Löschzugriff</i> freigeben.</td>
        </tr>
        <tr>
          <th><br></th>
          <th><br></th>
          <th style="text-align: left;">Zeilenumbruchsoptionen (EOL)</th>
        </tr>
        <tr>
          <td class="fopt"><code>`n</code></td>
          <td class="fnum">4</td>
          <td>Ersetzt beim Schreiben <code>`r`n</code> mit <code>`n</code>&nbsp; und beim Lesen <code>`n</code> mit <code>`r`n</code>.</td>
        </tr>
        <tr>
          <td class="fopt"><code>`r</code></td>
          <td class="fnum">8</td>
          <td>Ersetzt beim Schreiben das alleinstehende <code>`r</code> mit <code>`n</code>.</td>
        </tr>
      </table>
      <h3>Rückgabewert</h3>
      <p>Wurde die Datei erfolgreich geöffnet, wird der Rückgabewert ein <a href="../objects/File.htm">File-Objekt</a> sein.</p>
      <p>Schlägt die Funktion fehl, wird der Rückgabewert eine 0 sein und <a href="../Variables.htm#LastError">A_LastError</a> seit <span class="ver">[AHK_L 54]</span> einen Fehlercode enthalten.</p>
      <p>Mit <code>If File</code> oder <code>IsObject(File)</code> kann man überprüfen, ob die Funktion erfolgreich war.</p>
      <h3>Bemerkungen</h3>
      <p>Beim Erstellen einer UTF-8- oder UTF-16-Datei wird eine Bytereihenfolge-Markierung (BOM) in die Datei geschrieben, <b>es sei denn</b>, <i>Kodierung</i> (oder <a href="FileEncoding.htm">A_FileEncoding</a>, falls <i>Kodierung</i> weggelassen wird) enthält "UTF-8-RAW" oder "UTF-16-RAW".</p>
      <p>Sobald eine Datei, die eine UTF-8- oder UTF-16-Bytereihenfolge-Markierung (BOM) hat, mit Schreibzugriff geöffnet wird, wird die BOM von der Ausgabe ausgeschlossen, indem der Datei-Pointer daneben gesetzt wird. Folglich würde <code>File.Position</code> unmittelbar nach Öffnen der Datei 3 oder 2 melden.</p>
      <h3>Verwandte Befehle</h3>
      <p><a href="FileEncoding.htm">FileEncoding</a>, <a href="../objects/File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a></p>
      <h3>Beispiele</h3>
      <pre class="NoIndent" id="writeread"><em>; Beispiel: Dieses Script schreibt etwas Text in eine Datei und liest diesen zurück in den Speicher.
; Es stellt die gleiche Funktionalität wie dieses <a href="DllCall.htm#file">DllCall-Beispiel</a> bereit.</em>

FileSelectFile, Dateiname, S16,, Neue Datei erstellen:
if (Dateiname = "")
	return
File := <a href="FileOpen.htm">FileOpen</a>(Dateiname, "w")
if !IsObject(File)
{
	MsgBox Kann "%Dateiname%" nicht zum Schreiben öffnen.
	return
}
TestString := "Das ist ein Teststring.`r`n"  <em>; Wenn eine Datei auf diese Weise geschrieben wird, sollte `r`n anstelle von `n verwendet werden, um eine neue Zeile zu beginnen.</em>
File.Write(TestString)
File.Close()

<em>; Nachdem die Datei geschrieben wurde, soll deren Inhalt zurück in den Speicher gelesen werden.</em>
File := FileOpen(Dateiname, "r-d") <em>; Datei lesen ("r"), Alle Zugriffe außer Löschen freigeben ("-d")</em>
if !IsObject(File)
{
	MsgBox Kann "%Dateiname%" nicht zum Lesen öffnen.
	return
}
ZuLesendeZeichen := StrLen(TestString)
TestString := File.Read(ZuLesendeZeichen)
File.Close()
MsgBox Der folgende String wurde aus der Datei gelesen: %TestString%
</pre>
      <pre class="NoIndent"><em>; Öffnet das Script im Schreibschutzmodus und ließt die erste Zeile:</em>
File := FileOpen(A_ScriptFullPath, "r")
MsgBox % File.ReadLine()

<em>; Öffnet ein Konsolenfenster für diese Demonstration:</em>
DllCall("AllocConsole")
<em>; Öffnet die stdin/stdout-Handles der Anwendung mit der Option "`n".</em>
stdin  := FileOpen(DllCall("GetStdHandle", "int", -10, "ptr"), "h `n")
stdout := FileOpen(DllCall("GetStdHandle", "int", -11, "ptr"), "h `n")
stdout.Write("Bitte Anfrage eingeben.`n\&gt; ")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
Abfrage := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Die Anfrage war '" Abfrage "'. Einen schönen Tag noch.")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
Sleep 5000
</pre>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>