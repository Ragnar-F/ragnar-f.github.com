<!DOCTYPE HTML>
<html>
<head>
<title>Bildschirmtastatur (benötigt XP/2k/NT) -- von Jon</title>
<meta name="keywords" content="Script">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>Bildschirmtastatur (benötigt XP/2k/NT) -- von Jon</h1>
<p>Dieses Script erstellt eine nachgebildete Tastatur am unteren Rand des Bildschirms, das die gedrückten Tasten in Echtzeit anzeigt. Das hat mir geholfen, Eingaben zu machen, ohne dabei auf die Tastatur zu schauen. Die Größe der Bildschirmtastatur kann im oberen Bereich des Scripts angepasst werden. Außerdem kann die Tastatur angezeigt oder versteckt werden, wenn das Tray-Icon doppelt angeklickt wird. </p>
<p><a href="KeyboardOnScreen.ahk">Dieses Script herunterladen</a> &nbsp;| &nbsp;<a href="index.htm">Andere Beispiel-Scripts</a> &nbsp;| &nbsp;<a href="../index.htm">Home</a></p>
<pre class="NoIndent"><em>;---- Konfigurationsbereich: Die Größe der Bildschirmtastatur und
; andere Optionen anpassen.</em>

<em>; Beim Verändern der Schriftgröße wird die gesamte Bildschirmtastatur
; größer oder kleiner:</em>
k_FontSize = 10
k_FontName = Verdana  <em>; Kann leer sein, um die Standardschriftart des Systems zu verwenden.</em>
k_FontStyle = Bold    <em>; Alternatives Beispiel: Italic Underline</em>

<em>; Namen der Tray-Menüpunkte:</em>
k_MenuItemHide = &amp;Bildschirmtastatur verstecken

k_MenuItemShow = &amp;Bildschirmtastatur anzeigen


<em>; Damit die Tastatur nicht nur auf den primären Monitor angezeigt wird, verwendet
; eine Zahl wie 2 für die folgende Variable.  Lasst sie leer, um den
; primären Monitor zu verwenden:</em>
k_Monitor =

<em>;---- Ende des Konfigurationsbereichs.  Hier danach keine Änderungen durchführen,
; es sei denn, die allgemeine Funktionalität des Scripts soll geändert werden.</em>


<em>;---- Tray-Icon-Menü ändern:</em>
Menu, Tray, Add, %k_MenuItemHide%, k_ShowHide
Menu, Tray, Add, &amp;Exit, k_MenuExit
Menu, Tray, Default, %k_MenuItemHide%
Menu, Tray, NoStandard

<em>;---- Abmessungen der Objekte berechnen, basierend auf der ausgewählten Schriftgröße:</em>
k_KeyWidth = %k_FontSize%
k_KeyWidth *= 3
k_KeyHeight = %k_FontSize%
k_KeyHeight *= 3
k_KeyMargin = %k_FontSize%
k_KeyMargin /= 6
k_SpacebarWidth = %k_FontSize%
k_SpacebarWidth *= 25
k_KeyWidthHalf = %k_KeyWidth%
k_KeyWidthHalf /= 2

k_KeySize = w%k_KeyWidth% h%k_KeyHeight%
k_Position = x+%k_KeyMargin% %k_KeySize%

<em>;---- Ein GUI-Fenster für die Bildschirmtastatur erstellen:</em>
Gui, Font, s%k_FontSize% %k_FontStyle%, %k_FontName%
Gui, -Caption +E0x200 +ToolWindow
TransColor = F1ECED
Gui, Color, %TransColor%  <em>; Diese Farbe wird später transparent gemacht.</em>

<em>;---- Für jede Taste eine Schaltfläche hinzufügen. Die erste Schaltfläche wird mit absoluten
; Koordinaten positioniert, sodass alle anderen Schaltflächen sich darauf beziehen:</em>
Gui, Add, Button, section %k_KeySize% xm+%k_KeyWidth%, 1
Gui, Add, Button, %k_Position%, 2
Gui, Add, Button, %k_Position%, 3
Gui, Add, Button, %k_Position%, 4
Gui, Add, Button, %k_Position%, 5
Gui, Add, Button, %k_Position%, 6
Gui, Add, Button, %k_Position%, 7
Gui, Add, Button, %k_Position%, 8
Gui, Add, Button, %k_Position%, 9
Gui, Add, Button, %k_Position%, 0
Gui, Add, Button, %k_Position%, -
Gui, Add, Button, %k_Position%, =
Gui, Add, Button, %k_Position%, Bk

Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Tab  <em>; Automatische Breite.</em>
Gui, Add, Button, %k_Position%, Q
Gui, Add, Button, %k_Position%, W
Gui, Add, Button, %k_Position%, E
Gui, Add, Button, %k_Position%, R
Gui, Add, Button, %k_Position%, T
Gui, Add, Button, %k_Position%, Y
Gui, Add, Button, %k_Position%, U
Gui, Add, Button, %k_Position%, I
Gui, Add, Button, %k_Position%, O
Gui, Add, Button, %k_Position%, P
Gui, Add, Button, %k_Position%, [
Gui, Add, Button, %k_Position%, ]
Gui, Add, Button, %k_Position%, \

Gui, Add, Button, xs+%k_KeyWidthHalf% y+%k_KeyMargin% %k_KeySize%, A
Gui, Add, Button, %k_Position%, S
Gui, Add, Button, %k_Position%, D
Gui, Add, Button, %k_Position%, F
Gui, Add, Button, %k_Position%, G
Gui, Add, Button, %k_Position%, H
Gui, Add, Button, %k_Position%, J
Gui, Add, Button, %k_Position%, K
Gui, Add, Button, %k_Position%, L
Gui, Add, Button, %k_Position%, `;
Gui, Add, Button, %k_Position%, '
Gui, Add, Button, x+%k_KeyMargin% h%k_KeyHeight%, Enter  <em>; Automatische Breite.</em>

<em>; Die erste untere Schaltfläche enthält am Ende %A_Space%, um sie etwas breiter zu machen,
; damit das Layout der Tasten daneben mehr einer echten Tastatur entspricht:</em>
Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Shift%A_Space%%A_Space%
Gui, Add, Button, %k_Position%, Z
Gui, Add, Button, %k_Position%, X
Gui, Add, Button, %k_Position%, C
Gui, Add, Button, %k_Position%, V
Gui, Add, Button, %k_Position%, B
Gui, Add, Button, %k_Position%, N
Gui, Add, Button, %k_Position%, M
Gui, Add, Button, %k_Position%, `,
Gui, Add, Button, %k_Position%, .
Gui, Add, Button, %k_Position%, /

Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Ctrl  <em>; Automatische Breite.</em>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin%, Win      <em>; Automatische Breite.</em>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin%, Alt      <em>; Automatische Breite.</em>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin% w%k_SpacebarWidth%, Space


<em>;---- Fenster anzeigen:</em>
Gui, Show
k_IsVisible = y

WinGet, k_ID, ID, A   <em>; Fenster-ID abrufen.</em>
WinGetPos,,, k_WindowWidth, k_WindowHeight, A

<em>;---- Tastatur am unteren Rand des Bildschirms positionieren (unter Berücksichtigung
; der Position der Taskleiste):</em>
SysGet, k_WorkArea, MonitorWorkArea, %k_Monitor%

<em>; X-Position des Fensters berechnen:</em>
k_WindowX = %k_WorkAreaRight%
k_WindowX -= %k_WorkAreaLeft%  <em>; Nun enthält k_WindowX die Breite des Monitors.</em>
k_WindowX -= %k_WindowWidth%
k_WindowX /= 2  <em>; Position berechnen, um sie horizontal zu zentrieren.
; Das Folgende wird durchgeführt, falls sich das Fenster nicht auf den primären Monitor befindet
; oder wenn die Taskleiste auf der linken Seite des Bildschirms verankert ist:</em>
k_WindowX += %k_WorkAreaLeft%

<em>; Y-Position des Fensters berechnen:</em>
k_WindowY = %k_WorkAreaBottom%
k_WindowY -= %k_WindowHeight%

WinMove, A,, %k_WindowX%, %k_WindowY%
WinSet, AlwaysOnTop, On, ahk_id %k_ID%
WinSet, TransColor, %TransColor% 220, ahk_id %k_ID%


<em>;---- Alle Tasten als Hotkeys bestimmen. Siehe www.asciitable.com</em>
k_n = 1
k_ASCII = 45

Loop
{
    Transform, k_char, Chr, %k_ASCII%
    StringUpper, k_char, k_char
    if k_char not in &lt;,&gt;,^,~,&#65533;,`,
        Hotkey, ~*%k_char%, k_KeyPress
        <em>; Mit dem oberen Sternchenpräfix wird die Taste erkannt, unabhängig davon,</em>
        <em>; ob der Benutzer die Modifikatortasten wie STRG und UMSCHALT gedrückt hält.</em>
    if k_ASCII = 93
        break
    k_ASCII++
}

return <em>; Ende des automatischen Ausführungsbereichs.</em>


<em>;---- Beim Tastendruck die entsprechende Schaltfläche auf dem Bildschirm drücken:</em>

~*Backspace::
ControlClick, Bk, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, Backspace
ControlClick, Bk, ahk_id %k_ID%, , LEFT, 1, U
return


<em>; LShift und RShift werden anstelle von "Shift" verwendet, denn als Hotkey
; würde "Shift" beim Loslassen der Taste standardmäßig ausgeführt (in älteren AHK-Versionen):</em>
~*LShift::
~*RShift::
~*LCtrl::  <em>; Ctrl muss anstelle von Control verwendet werden, damit es mit dem Schaltflächennamen übereinstimmt.</em>
~*RCtrl::
~*LAlt::
~*RAlt::
~*LWin::
~*RWin::
StringTrimLeft, k_ThisHotkey, A_ThisHotkey, 3
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, %k_ThisHotkey%
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, U
return


~*,::
~*'::
~*Space::
~*Enter::
~*Tab::
k_KeyPress:
StringReplace, k_ThisHotkey, A_ThisHotkey, ~
StringReplace, k_ThisHotkey, k_ThisHotkey, *
SetTitleMatchMode, 3  <em>; Verhindert, dass die Tasten T und B nicht mit Tabulator und Rücktaste (Backspace) verwechselt werden.</em>
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, %k_ThisHotkey%
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, U
Return


k_ShowHide:
if k_IsVisible = y
{
    Gui, Cancel
    Menu, Tray, Rename, %k_MenuItemHide%, %k_MenuItemShow%
    k_IsVisible = n
}
else
{
    Gui, Show
    Menu, Tray, Rename, %k_MenuItemShow%, %k_MenuItemHide%
    k_IsVisible = y
}
return


GuiClose:
k_MenuExit:
ExitApp

</pre>
</body>
</html>
