<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Bildschirmtastatur (ben&ouml;tigt XP/2k/NT) -- von Jon</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="/forum/rss.php">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>Bildschirmtastatur (ben&ouml;tigt XP/2k/NT) -- von Jon</h1>

<p>Dieses Script erstellt eine nachgebildete Tastatur am unteren Rand des Bildschirms, das die gedr&uuml;ckten Tasten in Echtzeit anzeigt. Das hat mir geholfen, Eingaben zu machen, ohne dabei auf die Tastatur zu schauen.  Die Gr&ouml;&szlig;e der Bildschirmtastatur kann im oberen Bereich des Scripts angepasst werden. Au&szlig;erdem kann die Tastatur angezeigt oder versteckt werden, wenn das Tray-Icon doppelt angeklickt wird.
</p>
<p><a href="KeyboardOnScreen.ahk">Dieses Script herunterladen</a> &nbsp;| &nbsp;<a href="index.htm">Andere Beispiel-Scripts</a> &nbsp;| &nbsp;<a href="../index.htm">Home</a></p>

<pre class="NoIndent"><em>;---- Konfigurationsbereich: Die Gr&ouml;&szlig;e der Bildschirmtastatur und
; andere Optionen anpassen.</em>

<em>; Beim Ver&auml;ndern der Schriftgr&ouml;&szlig;e wird die gesamte Bildschirmtastatur
; gr&ouml;&szlig;er oder kleiner:</em>
k_FontSize = 10
k_FontName = Verdana  <em>; Kann leer sein, um die Standardschriftart des Systems zu verwenden.</em>
k_FontStyle = Bold    <em>; Alternatives Beispiel: Italic Underline</em>

<em>; Namen der Tray-Men&uuml;punkte:</em>
k_MenuItemHide = &Bildschirmtastatur verstecken

k_MenuItemShow = &Bildschirmtastatur anzeigen


<em>; Damit die Tastatur nicht nur auf den prim&auml;ren Monitor angezeigt wird, verwendet
; eine Zahl wie 2 f&uuml;r die folgende Variable.  Lasst sie leer, um den
; prim&auml;ren Monitor zu verwenden:</em>
k_Monitor =

<em>;---- Ende des Konfigurationsbereichs.  Hier danach keine &Auml;nderungen durchf&uuml;hren,
; es sei denn, die allgemeine Funktionalit&auml;t des Scripts soll ge&auml;ndert werden.</em>


<em>;---- Tray-Icon-Men&uuml; &auml;ndern:</em>
Menu, Tray, Add, %k_MenuItemHide%, k_ShowHide
Menu, Tray, Add, &Exit, k_MenuExit
Menu, Tray, Default, %k_MenuItemHide%
Menu, Tray, NoStandard

<em>;---- Abmessungen der Objekte berechnen, basierend auf der ausgew&auml;hlten Schriftgr&ouml;&szlig;e:</em>
k_KeyWidth = %k_FontSize%
k_KeyWidth *= 3
k_KeyHeight = %k_FontSize%
k_KeyHeight *= 3
k_KeyMargin = %k_FontSize%
k_KeyMargin /= 6
k_SpacebarWidth = %k_FontSize%
k_SpacebarWidth *= 25
k_KeyWidthHalf = %k_KeyWidth%
k_KeyWidthHalf /= 2

k_KeySize = w%k_KeyWidth% h%k_KeyHeight%
k_Position = x+%k_KeyMargin% %k_KeySize%

<em>;---- Ein GUI-Fenster f&uuml;r die Bildschirmtastatur erstellen:</em>
Gui, Font, s%k_FontSize% %k_FontStyle%, %k_FontName%
Gui, -Caption +E0x200 +ToolWindow
TransColor = F1ECED
Gui, Color, %TransColor%  <em>; Diese Farbe wird sp&auml;ter transparent gemacht.</em>

<em>;---- F&uuml;r jede Taste eine Schaltfl&auml;che hinzuf&uuml;gen. Die erste Schaltfl&auml;che wird mit absoluten
; Koordinaten positioniert, sodass alle anderen Schaltfl&auml;chen sich darauf beziehen:</em>
Gui, Add, Button, section %k_KeySize% xm+%k_KeyWidth%, 1
Gui, Add, Button, %k_Position%, 2
Gui, Add, Button, %k_Position%, 3
Gui, Add, Button, %k_Position%, 4
Gui, Add, Button, %k_Position%, 5
Gui, Add, Button, %k_Position%, 6
Gui, Add, Button, %k_Position%, 7
Gui, Add, Button, %k_Position%, 8
Gui, Add, Button, %k_Position%, 9
Gui, Add, Button, %k_Position%, 0
Gui, Add, Button, %k_Position%, -
Gui, Add, Button, %k_Position%, =
Gui, Add, Button, %k_Position%, Bk

Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Tab  <em>; Automatische Breite.</em>
Gui, Add, Button, %k_Position%, Q
Gui, Add, Button, %k_Position%, W
Gui, Add, Button, %k_Position%, E
Gui, Add, Button, %k_Position%, R
Gui, Add, Button, %k_Position%, T
Gui, Add, Button, %k_Position%, Y
Gui, Add, Button, %k_Position%, U
Gui, Add, Button, %k_Position%, I
Gui, Add, Button, %k_Position%, O
Gui, Add, Button, %k_Position%, P
Gui, Add, Button, %k_Position%, [
Gui, Add, Button, %k_Position%, ]
Gui, Add, Button, %k_Position%, \

Gui, Add, Button, xs+%k_KeyWidthHalf% y+%k_KeyMargin% %k_KeySize%, A
Gui, Add, Button, %k_Position%, S
Gui, Add, Button, %k_Position%, D
Gui, Add, Button, %k_Position%, F
Gui, Add, Button, %k_Position%, G
Gui, Add, Button, %k_Position%, H
Gui, Add, Button, %k_Position%, J
Gui, Add, Button, %k_Position%, K
Gui, Add, Button, %k_Position%, L
Gui, Add, Button, %k_Position%, `;
Gui, Add, Button, %k_Position%, '
Gui, Add, Button, x+%k_KeyMargin% h%k_KeyHeight%, Enter  <em>; Automatische Breite.</em>

<em>; Die erste untere Schaltfl&auml;che enth&auml;lt am Ende %A_Space%, um sie etwas breiter zu machen,
; damit das Layout der Tasten daneben mehr einer echten Tastatur entspricht:</em>
Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Shift%A_Space%%A_Space%
Gui, Add, Button, %k_Position%, Z
Gui, Add, Button, %k_Position%, X
Gui, Add, Button, %k_Position%, C
Gui, Add, Button, %k_Position%, V
Gui, Add, Button, %k_Position%, B
Gui, Add, Button, %k_Position%, N
Gui, Add, Button, %k_Position%, M
Gui, Add, Button, %k_Position%, `,
Gui, Add, Button, %k_Position%, .
Gui, Add, Button, %k_Position%, /

Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Ctrl  <em>; Automatische Breite.</em>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin%, Win      <em>; Automatische Breite.</em>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin%, Alt      <em>; Automatische Breite.</em>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin% w%k_SpacebarWidth%, Space


<em>;---- Fenster anzeigen:</em>
Gui, Show
k_IsVisible = y

WinGet, k_ID, ID, A   <em>; Fenster-ID abrufen.</em>
WinGetPos,,, k_WindowWidth, k_WindowHeight, A

<em>;---- Tastatur am unteren Rand des Bildschirms positionieren (unter Ber&uuml;cksichtigung
; der Position der Taskleiste):</em>
SysGet, k_WorkArea, MonitorWorkArea, %k_Monitor%

<em>; X-Position des Fensters berechnen:</em>
k_WindowX = %k_WorkAreaRight%
k_WindowX -= %k_WorkAreaLeft%  <em>; Nun enth&auml;lt k_WindowX die Breite des Monitors.</em>
k_WindowX -= %k_WindowWidth%
k_WindowX /= 2  <em>; Position berechnen, um sie horizontal zu zentrieren.
; Das Folgende wird durchgef&uuml;hrt, falls sich das Fenster nicht auf den prim&auml;ren Monitor befindet
; oder wenn die Taskleiste auf der linken Seite des Bildschirms verankert ist:</em>
k_WindowX += %k_WorkAreaLeft%

<em>; Y-Position des Fensters berechnen:</em>
k_WindowY = %k_WorkAreaBottom%
k_WindowY -= %k_WindowHeight%

WinMove, A,, %k_WindowX%, %k_WindowY%
WinSet, AlwaysOnTop, On, ahk_id %k_ID%
WinSet, TransColor, %TransColor% 220, ahk_id %k_ID%


<em>;---- Alle Tasten als Hotkeys bestimmen. Siehe www.asciitable.com</em>
k_n = 1
k_ASCII = 45

Loop
{
    Transform, k_char, Chr, %k_ASCII%
    StringUpper, k_char, k_char
    if k_char not in &lt;,&gt;,^,~,Å,`,
        Hotkey, ~*%k_char%, k_KeyPress
        <em>; Mit dem oberen Sternchenpr&auml;fix wird die Taste erkannt, unabh&auml;ngig davon,</em>
        <em>; ob der Benutzer die Modifikatortasten wie Steuerung und Umschalt gedr&uuml;ckt h&auml;lt.</em>
    if k_ASCII = 93
        break
    k_ASCII++
}

return <em>; Ende des automatischen Ausf&uuml;hrungsbereichs.</em>


<em>;---- Beim Tastendruck die entsprechende Schaltfl&auml;che auf dem Bildschirm dr&uuml;cken:</em>

~*Backspace::
ControlClick, Bk, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, Backspace
ControlClick, Bk, ahk_id %k_ID%, , LEFT, 1, U
return


<em>; LShift und RShift werden anstelle von "Shift" verwendet, denn als Hotkey
; w&uuml;rde "Shift" beim Loslassen der Taste standardm&auml;&szlig;ig ausgef&uuml;hrt (in &auml;lteren AHK-Versionen):</em>
~*LShift::
~*RShift::
~*LCtrl::  <em>; Ctrl muss anstelle von Control verwendet werden, damit es mit dem Schaltfl&auml;chennamen &uuml;bereinstimmt.</em>
~*RCtrl::
~*LAlt::
~*RAlt::
~*LWin::
~*RWin::
StringTrimLeft, k_ThisHotkey, A_ThisHotkey, 3
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, %k_ThisHotkey%
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, U
return


~*,::
~*'::
~*Space::
~*Enter::
~*Tab::
k_KeyPress:
StringReplace, k_ThisHotkey, A_ThisHotkey, ~
StringReplace, k_ThisHotkey, k_ThisHotkey, *
SetTitleMatchMode, 3  <em>; Verhindert, dass die Tasten T und B nicht mit Tabulator und R&uuml;cktaste (Backspace) verwechselt werden.</em>
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, %k_ThisHotkey%
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, U
Return


k_ShowHide:
if k_IsVisible = y
{
    Gui, Cancel
    Menu, Tray, Rename, %k_MenuItemHide%, %k_MenuItemShow%
    k_IsVisible = n
}
else
{
    Gui, Show
    Menu, Tray, Rename, %k_MenuItemShow%, %k_MenuItemHide%
    k_IsVisible = y
}
return


GuiClose:
k_MenuExit:
ExitApp

</pre>
</body>
</html>