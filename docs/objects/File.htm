<!DOCTYPE HTML>
<html>
<head>
<title>File-Objekt</title>
<meta name="keywords" content="Objekt">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery-1.11.0.min.js"type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../navbar/NavScript.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <article>
      <h1>File-Objekt <span class="ver">[AHK_L 42+]</span></h1>
      <p>Ermöglicht eine Schnittstelle für die Dateibearbeitung. <a href="../commands/FileOpen.htm">FileOpen</a> gibt ein Objekt dieses Typs zurück.</p>
      <div id="Read" class="methodShort">
        <h2>Read</h2>
        <p>Liest eine Zeichenfolge aus der Datei und rückt dabei den Dateizeiger vor.</p>
        <pre class="Syntax">String := File.Read([Zeichen])</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;">Zeichen</td>
            <td style="width: 85%;">Die maximale Anzahl der zu lesenden Zeichen. Wenn weggelassen, dann wird der Rest der Datei gelesen und als ein String zurückgegeben. Falls das File-Objekt von einem Handle, das auf ein nicht-suchendes Device (z. B. ein Konsolenpuffer oder Pipe) verweist, erzeugt wurde, bewirkt das Weglassen des Parameters, dass die Methode fehlschlägt oder nur die aktuell verfügbaren Daten zurückgibt.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Ein String.</td>
          </tr>
        </table>
      </div>
      <div id="Write" class="methodShort">
        <h2>Write</h2>
        <p>Schreibt eine Zeichenfolge in die Datei und rückt dabei den Dateizeiger vor.</p>
        <pre class="Syntax">File.Write(String)</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;">String</td>
            <td style="width: 85%;">Ein String.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Die Anzahl der Bytes (nicht Zeichen), die geschrieben wurden. </td>
          </tr>
        </table>
      </div>
      <div id="ReadLine" class="methodShort">
        <h2>ReadLine</h2>
        <p>Liest eine Textzeile aus der Datei und rückt dabei den Dateizeiger vor.</p>
        <pre class="Syntax">Zeile := File.ReadLine()</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;"><b>Rückgabe</b></td>
            <td style="width: 85%;">Eine Textzeile. Sie enthält <code>`n</code>, <code>`r`n</code> oder <code>`r</code>, abhängig von der Datei und den EOL-Flags, die zum Öffnen der Datei verwendet wurden.</td>
          </tr>
        </table>
      </div>
      <div id="WriteLine" class="methodShort">
        <h2>WriteLine</h2>
        <p>Schreibt eine Zeichenfolge gefolgt von <code>`n</code> oder <code>`r`n</code>, abhängig von den EOL-Flags, die zum Öffnen der Datei verwendet wurden. Der Dateizeiger wird dabei vorgerückt.</p>
        <pre class="Syntax">File.WriteLine([String])</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;">String</td>
            <td style="width: 85%;">Ein optionaler String.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Die Anzahl der Bytes (nicht Zeichen), die geschrieben wurden. </td>
          </tr>
        </table>
      </div>
      <div id="ReadNum" class="methodShort">
        <h2>Read<i>Num</i></h2>
        <p>Liest eine Zahl aus der Datei und rückt dabei den Dateizeiger vor.</p>
        <pre class="Syntax">Zahl := File.Read<i>Zahlentyp</i>()</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;"><i>Zahlentyp</i></td>
            <td style="width: 85%;">Einen der folgenden Typen direkt als Teil der Funktion angegeben:<br>UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Eine Zahl bei Erfolg, ansonsten ein leerer String.</td>
          </tr>
        </table>
      </div>
      <div id="WriteNum" class="methodShort">
        <h2>Write<i>Num</i></h2>
        <p>Schreibt eine Zahl in die Datei und rückt dabei den Dateizeiger vor.</p>
        <pre class="Syntax">File.Write<i>Zahlentyp</i>(Zahl)</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;"><i>Zahlentyp</i></td>
            <td style="width: 85%;">Einen der folgenden Typen direkt als Teil der Funktion angegeben:<br>UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float.</td>
          </tr>
          <tr>
            <td>Zahl</td>
            <td>Eine Zahl.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Die Anzahl der Bytes, die geschrieben wurden. Zum Beispiel wird WriteUInt eine 4 bei Erfolg zurückgeben.</td>
          </tr>
        </table>
      </div>
      <div id="RawRead" class="methodShort">
        <h2>RawRead</h2>
        <p>Liest unbearbeitete Binärdaten aus der Datei in den Speicher. Falls eine Variable angegeben ist, dann wird sie je nach Bedarf automatisch erweitert.</p>
        <pre class="Syntax">File.RawRead(VarOderAdresse, Bytes)</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;">VarOderAdresse</td>
            <td style="width: 85%;">Eine Variable oder Speicheradresse, in der die Daten kopiert werden. Die Verwendung hat Ähnlichkeit mit <a href="../Functions.htm#NumGet">NumGet</a>.</td>
          </tr>
          <tr>
            <td>Bytes</td>
            <td>Die maximale Anzahl der zu lesenden Bytes.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Die Anzahl der Bytes, die gelesen wurden.</td>
          </tr>
        </table>
      </div>
      <div id="RawWrite" class="methodShort">
        <h2>RawWrite</h2>
        <p>Schreibt unbearbeitete Binärdaten in die Datei.</p>
        <pre class="Syntax">File.RawWrite(VarOderAdresse, Bytes)</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;">VarOderAdresse</td>
            <td style="width: 85%;">Eine Variable, die die Daten oder die Adresse der Daten im Speicher enthält. Die Verwendung hat Ähnlichkeit mit <a href="../Functions.htm#NumPut">NumPut</a>.</td>
          </tr>
          <tr>
            <td>Bytes</td>
            <td>Die maximale Anzahl der zu schreibenden Bytes.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Die Anzahl der Bytes, die geschrieben wurden.</td>
          </tr>
        </table>
      </div>
      <div id="Seek" class="methodShort">
        <h2>Seek</h2>
        <p>Verschiebt den Dateizeiger.</p>
        <pre class="Syntax">File.Seek(Distanz [, Ausgangspunkt = 0])
File.Position := Distanz
File.Pos := Distanz</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;">Distanz</td>
            <td style="width: 85%;">Die Anzahl der Bytes, die zurückgelegt werden sollen. Niedrigere Werte sind näher an den Anfang der Datei.</td>
          </tr>
          <tr>
            <td>Ausgangspunkt</td>
            <td>Startpunkt zum Verschieben des Dateizeigers. Kann nur eine der folgenden Angaben sein:
            <ul>
              <li>0 (SEEK_SET): Anfang der Datei. <i>Distanz</i> muss 0 oder größer sein.</li>
              <li>1 (SEEK_CUR): Aktuelle Position des Dateizeigers.</li>
              <li>2 (SEEK_END): Ende der Datei. <i>Distanz</i> sollte normalerweise negativ sein.</li>
            </ul>
            Wenn weggelassen, dann ist der <i>Ausgangspunkt</i> standardmäßig SEEK_END, solange die Distanz negativ ist, ansonsten SEEK_SET.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Ein Wert ungleich 0 bei Erfolg, ansonsten 0. </td>
          </tr>
        </table>
      </div>
      <div id="Tell" class="methodShort">
        <h2>Tell</h2>
        <pre class="Syntax">Pos := File.Tell()
Pos := File.Position
Pos := File.Pos</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;"><b>Rückgabe</b></td>
            <td style="width: 85%;">Die aktuelle Position des Dateizeigers, wobei 0 der Anfang der Datei ist.</td>
          </tr>
        </table>
      </div>
      <div id="Length" class="methodShort">
        <h2>Length</h2>
        <p>Ermittelt oder bestimmt die Größe der Datei.</p>
        <pre class="Syntax">Dateigröße := File.Length
File.Length := NeueGröße</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;">NeueGröße</td>
            <td style="width: 85%;">Die neue Größe der Datei in Bytes.</td>
          </tr>
          <tr>
            <td><b>Rückgabe</b></td>
            <td>Die Größe der Datei in Bytes.</td>
          </tr>
        </table>
        <p>Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Falls das File-Objekt von einem Handle, das auf ein Pipe verweist, erzeugt wurde, wird es möglicherweise die derzeitig verfügbare Datenmenge im internen Pipe-Puffer zurückgeben. Allerdings ist dieses Verhalten nicht sichergestellt.</p>
      </div>
      <div id="AtEOF" class="methodShort">
        <h2>AtEOF</h2>
        <pre class="Syntax">IsAtEOF := File.AtEOF</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;"><b>Rückgabe</b></td>
            <td style="width: 85%;">Ein Wert ungleich 0, wenn der Dateizeiger das Ende der Datei erreicht hat, ansonsten 0.</td>
          </tr>
        </table>
        <p>Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Falls das File-Objekt von einem Handle, das auf ein nicht-suchendes Device (z. B. ein Konsolenpuffer oder Pipe) verweist, erstellt wurde, könnte der Rückgabewert ohne Bedeutung sein, da solche Devices logischerweise kein "End of File" haben.</p>
      </div>
      <div id="Close" class="methodShort">
        <h2>Close</h2>
        <p>Schließt die Datei, löscht alle Daten im Zwischenspeicher auf der Festplatte und hebt die Sperrungen auf. Obwohl die Datei beim Freigeben des Objekts automatisch geschlossen wird, ist es empfehlenswert, die Datei so schnell wie möglich zu schließen.</p>
        <pre class="Syntax">File.Close()</pre>
        <p><i>Keine Parameter oder Rückgabewerte.</i></p>
      </div>
      <div id="Encoding" class="methodShort">
        <h2>Encoding</h2>
        <p>Ermittelt oder setzt die Textkodierung für das File-Objekt.</p>
        <pre class="Syntax">Kodierung := File.Encoding
File.Encoding := Kodierung</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;">Kodierung</td>
            <td style="width: 85%;">Ein Stringformat, das von <a href="../commands/FileEncoding.htm">FileEncoding</a> akzeptiert wird.</td>
          </tr>
        </table>
      </div>
      <div id="__Handle" class="methodShort">
        <h2>__Handle</h2>
        <pre class="Syntax">File.__Handle</pre>
        <table class="info">
          <tr>
            <td style="width: 15%;"><b>Rückgabe</b></td>
            <td style="width: 85%;">Ein System-Datei-Handle, das für DllCall verwendet werden kann. Siehe <a href="http://msdn.microsoft.com/en-us/library/aa363858.aspx">CreateFile</a>.</td>
          </tr>
        </table>
      </div>
    </article>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>
