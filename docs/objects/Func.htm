<!DOCTYPE HTML>
<html>
<head>
<title>Func-Objekt</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Func-Objekt <span class="ver">[v1.1.00+]</span></h1>

<p>Repräsentiert eine benutzerdefinierte oder integrierte Funktion, die vom Script aufgerufen werden kann.</p>

<p>Ein Verweis auf ein Func-Objekt wird auch als <em>Funktionsverweis</em> bezeichnet. Um ein Funktionsverweis zu erhalten, verwendet die Func-Funktion zum Beispiel wie folgt:</p>
<pre>fn := Func("Funktion")
MsgBox % fn.Name "() ist " (fn.IsBuiltIn ? "integriert." : "benutzerdefiniert.")</pre>
<br>

<div class="methodShort" id="Call"><h2>Call</h2>
<p>Ruft die Funktion auf.</p>
<pre class="Syntax">Func.(<i>Parameter</i>)</pre>
<p>Parameter und Rückgabewerte werden durch die Funktion definiert.</p>
<p>Diese Syntax ist auch gültig, wenn <i>Func</i> ein Funktionsname oder ein benutzerdefiniertes Objekt ist, das __Call implementiert.</p></div>

<div class="methodShort" id="Name"><h2>Name</h2>
<p>Gibt den Funktionsnamen zurück.</p>
<pre class="Syntax">Func.Name</pre>
</div>

<div class="methodShort" id="IsBuiltIn"><h2>IsBuiltIn</h2>
<p>Gibt <i>wahr</i> zurück, falls die Funktion eine integrierte Funktion ist, ansonsten <i>falsch</i>.</p>
<pre class="Syntax">Func.IsBuiltIn</pre>
</div>

<div class="methodShort" id="IsVariadic"><h2>IsVariadic</h2>
<p>Gibt <i>wahr</i> zurück, falls die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, ansonsten <i>falsch</i>.</p>
<pre class="Syntax">Func.IsVariadic</pre>
</div>

<div class="methodShort" id="MinParams"><h2>MinParams</h2>
<p>Gibt die Anzahl der benötigten Parameter zurück.</p>
<pre class="Syntax">Func.MinParams</pre>
</div>

<div class="methodShort" id="MaxParams"><h2>MaxParams</h2>
<p>Gibt die Anzahl der offiziell deklarierten Parameter einer benutzerdefinierten Funktion oder die maximale Anzahl der Parameter einer integrierten Funktion zurück.</p>
<pre class="Syntax">Func.MaxParams</pre>
<p>Wenn die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, dann kennzeichnet der Rückgabewert die maximale Anzahl an Parametern, die von der Funktion akzeptiert werden kann, ohne einen Überlauf zu riskieren.</p></div>

<div class="methodShort" id="IsByRef"><h2>IsByRef()</h2>
<p>Damit kann festgestellt werden, ob der Parameter ein ByRef ist.</p>
<pre class="Syntax">Func.IsByRef(ParamIndex)</pre>
<table class="info">
  <tr><td width="15%">ParamIndex</td><td width="85%">Optional: Der 1-basierte Index eines Parameters. Wenn weggelassen, dann kennzeichnet der Rückgabewert, ob die Funktion überhaupt ByRef-Parameter hat.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Ein leerer String, wenn die Funktion integriert oder <i>ParamIndex</i> ungültig ist, ansonsten kennzeichnet ein logischer Wert, ob der Parameter ein ByRef ist.</td></tr>
</table>
</div>

<div class="methodShort" id="IsOptional"><h2>IsOptional()</h2>
<p>Damit kann festgestellt werden, ob der Parameter optional ist.</p>
<pre class="Syntax">Func.IsOptional(ParamIndex)</pre>
<table class="info">
  <tr><td width="15%">ParamIndex</td><td width="85%">Optional: Der 1-basierte Index eines Parameters. Wenn weggelassen, dann kennzeichnet der Rückgabewert, ob die Funktion überhaupt optionale Parameter hat.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Ein leerer String, wenn <i>ParamIndex</i> ungültig ist, ansonsten kennzeichnet ein logischer Wert, ob der Parameter optional ist.</td></tr>
</table>
<p>Parameter müssen nicht offiziell deklariert werden, wenn die Funktion variadisch ist. Integrierte Funktionen werden unterstützt.</p></div>

</body>
</html>
