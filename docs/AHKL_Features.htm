<!DOCTYPE HTML>
<html>
<head>
<title>Neue Features von AutoHotkey_L</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/jquery.js" type="text/javascript"></script>
<script src="static/tree.jquery.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
<script src="static/content.js" type="text/javascript"></script>
</head>
<body><h1>Neue Features von AutoHotkey_L</h1>

<p>Dieses Dokument beschreibt Features, die in den AutoHotkey_L-Entwicklungszweig von AutoHotkey hinzugefügt wurden, nun einfach bekannt als "AutoHotkey 1.1".</p>

<br><table class="info">

<tr><th id="flow">Ablaufsteuerung</th><th>&nbsp;</th></tr>
<tr><td><a href="commands/Break.htm">Break <i>LoopLabel</i></a></td><td>Unterbricht eine Schleife oder eine bestimmte Nummer von verschachtelten Schleifen.</td></tr>
<tr><td><a href="commands/Continue.htm">Continue <i>LoopLabel</i></a></td><td>Überspringt den Rest des Durchlaufs einer Schleife oder verschachtelten Schleife.</td></tr>
<tr><td><a href="commands/For.htm">For <i>x</i>,<i>y</i> in <i>z</i></a></td><td>Durchläuft den Inhalt eines Objekts.</td></tr>
<tr><td><a href="commands/Until.htm">Loop Until</a></td><td>Schleife durchlaufen, bis eine Bedingung wahr ist. Auf jeden Schleifentyp anwendbar.</td></tr>
<tr><td><a href="commands/Try.htm">Try</a>...<a href="commands/Catch.htm">Catch</a>...<a href="commands/Finally.htm">Finally</a></td><td>Ermöglicht strukturierte Ausnahmebehandlung.</td></tr>
<tr><td><a href="commands/Throw.htm">Throw</a></td><td>Eine Ausnahme auslösen.</td></tr>

<tr><th id="commands">Befehle</th><th>&nbsp;</th></tr>
<tr><td><a href="commands/FileEncoding.htm">FileEncoding</a></td><td>Bestimmt die Standardkodierung für <a href="commands/FileRead.htm">FileRead</a>, <a href="commands/FileReadLine.htm">FileReadLine</a>, <a href="commands/LoopReadFile.htm">Loop Read</a>, <a href="commands/FileAppend.htm">FileAppend</a> und <a href="commands/FileOpen.htm">FileOpen</a>.<br><i>Siehe auch:</i> <a href="#enc">Textkodierungen</a></td></tr>
<tr><td><a href="commands/Gui.htm">Gui</a></td><td>Siehe unten genannte <a href="#GUI_Enhancements">GUI-Erweiterungen</a>.</td></tr>
<tr><td><a href="commands/IniRead.htm">IniRead</a>/<a href="commands/IniWrite.htm">Write</a>/<a href="commands/IniDelete.htm">Delete</a></td><td>Liest, schreibt oder entfernt ganze Sektionen, oder ruft eine Liste aller Sektionsnamen ab.</td></tr>
<tr><td><a href="commands/Menu.htm#MenuIcon">Menu, Icon</a></td><td>Setzt oder entfernt das Icon eines Menüpunkts.</td></tr>
<tr><td><a href="commands/Run.htm">Run</a></td><td><a href="Compat.htm#Run">Verbesserungen</a> in der Hinsicht, wie Parameter geparst werden.</td></tr>
<tr><td><a href="commands/Send.htm#Unicode">SendInput {U+nnnn}</a></td><td>Sendet ein Unicode-Zeichen. Unicode-Zeichen können direkt in Unicode-Builds verwendet werden.</td></tr>
<tr><td><a href="commands/SendLevel.htm">SendLevel</a></td><td>Bestimmt, welche künstlichen Tastatur- oder Mausereignisse von Hotkeys und Hotstrings ignoriert werden sollen.</td></tr>
<tr><td><a href="commands/SetFormat.htm">SetFormat, IntegerFast, h|H</a></td><td>Setzt das Hexadezimalformat in Klein- oder Großbuchstaben.</td></tr>
<tr><td><a href="commands/SetRegView.htm">SetRegView, RegAnsicht</a></td><td>Bewirkt, dass Registry-Befehle in einem 32-Bit-Script auf die 64-Bit-Registry-Ansicht zugreifen können und umgekehrt.</td></tr>
<tr><td><a href="commands/Transform.htm#HTML">Transform, HTML</a></td><td>Zeichensatz- oder HTML-Umwandlungen durchführen.</td></tr>
<tr><td><a href="commands/WinGet.htm#ProcessPath">WinGet, ..., ProcessPath</a></td><td>Ermittelt den vollständigen Pfad und Namen des Prozesses, der ein bestimmtes Fenster besitzt.</td></tr>

<tr><th id="directives">Direktiven</th><th>&nbsp;</th></tr>
<tr><td><a href="commands/_If.htm">#If <i>Ausdruck</i></a></td><td>Vergleichbar mit <a href="commands/_IfWinActive.htm">#IfWinActive</a>, aber für beliebige Ausdrücke.</td></tr>
<tr><td><a href="commands/_IfTimeout.htm">#IfTimeout</a></td><td>Bestimmt die maximale Zeit, die zur Auswertung eines einzelnen #If-Ausdrucks aufgebracht werden soll.</td></tr>
<tr><td><a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a></td><td>Ändert die Taste, mit der WIN- oder ALT-KeyUp-Ereignisse maskiert werden sollen.</td></tr>
<tr><td><a href="commands/_Include.htm">#Include &lt;Bibliothek&gt;</a></td><td>Eine Script-Datei vom Funktionsbibliotheksordner einfügen.</td></tr>
<tr><td><a href="commands/_InputLevel.htm">#InputLevel</a></td><td>Bestimmt, welche künstlichen Tastatur- oder Mausereignisse von Hotkeys und Hotstrings ignoriert werden sollen.</td></tr>
<tr><td><a href="commands/_Warn.htm">#Warn</a></td><td>Aktiviert oder deaktiviert Warnungen bei bestimmten Zuständen, die ein Fehler sein könnten, wie Schreibfehler oder fehlende "globale" Deklarationen.</td></tr>

<tr><th id="functions">Funktionen</th><th>&nbsp;</th></tr>
<tr><td><a href="commands/ComObjActive.htm">ComObj...</a> --<br>ComObjActive<br>ComObjEnwrap/Unwrap<br>ComObjParameter<br>ComObjType</td><td><br>Ermittelt ein registriertes COM-Objekt.<br>Wrappt / Entwrappt ein COM-Objekt.<br>Wrappt einen Wert und Typ, um es als Parameter zu übergeben.<br>Ermittelt die Typinformation eines COM-Objekts.</td></tr>
<tr><td><a href="commands/ComObjArray.htm">ComObjArray</a></td><td>Erstellt einen SafeArray für die Verwendung mit COM.</td></tr>
<tr><td><a href="commands/ComObjConnect.htm">ComObjConnect</a></td><td>Verbindet die Event Sources eines COM-Objekts mit Funktionen, die einen vorgegeben Präfix enthalten.</td></tr>
<tr><td><a href="commands/ComObjCreate.htm">ComObjCreate</a></td><td>Erstellt ein COM-Objekt.</td></tr>
<tr><td><a href="commands/ComObjError.htm">ComObjError</a></td><td>Aktiviert oder deaktiviert COM-Fehlermeldungen.</td></tr>
<tr><td><a href="commands/ComObjFlags.htm">ComObjFlags</a></td><td>Ermittelt oder ändert Flags, die das Verhalten eines COM-Wrapper-Objekts kontrollieren.</td></tr>
<tr><td><a href="commands/ComObjGet.htm">ComObjGet</a></td><td>Gibt den Verweis auf ein Objekt zurück, das von einer COM-Komponente bereitgestellt wird.</td></tr>
<tr><td><a href="commands/ComObjQuery.htm">ComObjQuery</a></td><td>Fordert ein Interface oder Service eines COM-Objekts an.</td></tr>
<tr><td><a href="commands/ComObjType.htm">ComObjType</a></td><td>Ermittelt Informationen über den Typ eines COM-Objekts.</td></tr>
<tr><td><a href="commands/ComObjValue.htm">ComObjValue</a></td><td>Ermittelt den Wert oder Pointer, der in einem COM-Wrapper-Objekt enthalten ist.</td></tr>
<tr><td><a href="commands/Throw.htm#Exception">Exception</a></td><td>Erstellt ein Ausnahme-Objekt für <a href="commands/Throw.htm">Throw</a> (außerdem eingeschränkter Zugang zur Aufrufliste).</td></tr>
<tr><td><a href="commands/FileOpen.htm">FileOpen</a></td><td>Ermöglicht eine objektorientierte Dateibearbeitung.</td></tr>
<tr><td><a href="Functions.htm#Func">Func</a></td><td>Ermittelt einen <a href="Objects.htm#Function_References">Verweis</a> auf eine Funktion.</td></tr>
<tr><td><a href="Functions.htm#GetKeyName">GetKeyName/VK/SC</a></td><td>Ermittelt den Namen oder Text, virtuellen Tastencode oder Scancode einer Taste.</td></tr>
<tr><td><a href="Functions.htm#InStr">InStr</a></td><td>Sucht einen bestimmten <em>String</em>, beginnend von links oder rechts.</td></tr>
<tr><td><a href="Functions.htm#IsByRef">IsByRef</a></td><td>Bestimmt, ob ein ByRef-Parameter mit einer Variable übergeben wurde.</td></tr>
<tr><td><a href="Objects.htm">IsObject</a></td><td>Erkennt, ob ein Wert ein Objekt ist.</td></tr>
<tr><td><a href="commands/StrPutGet.htm">StrPut / StrGet</a></td><td>Kopiert einen String in oder aus einer Speicheradresse unter Beachtung des angegebenen Zeichensatzes.</td></tr>
<tr><td><a href="commands/Trim.htm">Trim</a></td><td>Entfernt bestimmte Zeichen vom Anfang und/oder Ende eines Strings.</td></tr>
<tr><td><a href="misc/RegExCallout.htm">RegEx (?C<i>Num</i>:<i>Func</i>)</a></td><td>Eine Funktion während der Auswertung eines RegEx-Musters aufrufen.</td></tr>
<tr><td><a href="#Function_Libraries">Funktionsbibliotheken</a></td><td>Neue "lokale Bibliothek" und <code>#Include &lt;Bibliotheksname&gt;</code>.</td></tr>
<tr><td><a href="Functions.htm#Variadic">Variadische Funktionen</a></td><td>Funktionen können eine beliebige Anzahl an Parametern mittels eines Arrays akzeptieren.</td></tr>
<tr><td><a href="#Static">Statische Initialisierer</a></td><td>Statische Variablen können nun mit einem beliebigen Ausdruck initialisiert werden.</td></tr>

<tr><th id="objects">Objekte</th><th>&nbsp;</th></tr>
<tr><td><a href="Objects.htm">Allgemein</a></td><td>Verhalten und Benutzung von Objekten generell.</td></tr>
<tr><td><a href="Objects.htm#Arrays">Objekt</a></td><td>Assoziative Arrays, die mit anderen Funktionen erweitert werden können.</td></tr>
<tr><td><a href="objects/Enumerator.htm">Enumerator</a></td><td>Damit können Elemente in einer Auflistung enumeriert werden.</td></tr>
<tr><td><a href="objects/File.htm">File</a></td><td>Ermöglicht eine Schnittstelle, um auf einer Datei zugreifen zu können. <a href="commands/FileOpen.htm">FileOpen</a> gibt ein Objekt dieses Typs zurück.</td></tr>
<tr><td><a href="objects/Func.htm">Func</a></td><td>Repräsentiert eine benutzerdefinierte oder integrierte Funktion, die vom Script aufgerufen werden kann.</td></tr>
<tr><td>ComObject</td><td>Siehe oben genannte ComObj-Funktionen.</td></tr>

<tr><th id="vars">Variablen</th><th>&nbsp;</th></tr>
<tr><td>A_Is64bitOS</td><td>Enthält 1 (wahr), wenn das System im 64-Bit-Format ist, ansonsten 0 (falsch).</td></tr>
<tr><td>A_IsUnicode</td><td>In Unicode-Builds enthält diese Variable eine 1 (<i>wahr</i>). In ANSI-Builds wird sie nicht gesetzt, folglich ist sie <i>falsch</i>.</td></tr>
<tr><td>A_FileEncoding</td><td>Enthält die Standardkodierung für verschiedene Befehle; siehe <a href="commands/FileEncoding.htm">FileEncoding</a>.</td></tr>
<tr><td>A_OSVersion</td><td>Unterstützt Windows 7 und Windows 8; siehe <a href="Variables.htm#OSVersion">A_OSVersion</a>.</td></tr>
<tr><td>A_PriorKey</td><td>Der Name der letzten Taste, die vor dem Drücken oder Loslassen der aktuellsten Taste gedrückt wurde ... <a href="Variables.htm#PriorKey">(Mehr)</a></td></tr>
<tr><td>A_PtrSize</td><td>Enthält die Größe eines Pointers in Bytes. Entweder 4 (32-Bit) oder 8 (64-Bit).</td></tr>
<tr><td>A_RegView</td><td>Die aktuell gesetzte Registry-Ansicht von <a href="commands/SetRegView.htm">SetRegView</a>.</td></tr>
<tr><td>A_ScriptHwnd</td><td>Die eindeutige ID (HWND/Handle) des versteckten Script-Hauptfensters.</td></tr>

<tr><th id="types">Datentypen</th><th>&nbsp;</th></tr>
<tr><td><a href="commands/DllCall.htm#ptr">Ptr</a></td><td>Gleichwertig mit <i>Int</i> in 32-Bit-Builds und <i>Int64</i> in 64-Bit-Builds. Unterstützt von <a href="commands/DllCall.htm">DllCall</a>, <a href="commands/NumPut.htm">NumPut</a> und <a href="commands/NumGet.htm">NumGet</a>.</td></tr>
<tr><td><a href="commands/DllCall.htm#astr">AStr</a>, <a href="commands/DllCall.htm#wstr">WStr</a></td><td>Nur von <a href="commands/DllCall.htm">DllCall</a> unterstützt; siehe <a href="Compat.htm">Script-Kompatibilität</a>.</td></tr>

<tr><th id="unicode">Unicode</th><th>&nbsp;</th></tr>
<tr><td><a href="Compat.htm">Kompatibilität</a></td><td>Wie man mit Unicode in DllCall usw. umgeht.</td></tr>
<tr><td><a href="Scripts.htm#cp">Script-Dateien</a></td><td>Die Verwendung von Unicode in Script-Dateien.</td></tr>
<tr><td><a href="commands/Send.htm#Unicode">SendInput</a></td><td>Verwenden von Unicode mit SendInput.</td></tr>

<tr><th id="other">Sonstiges</th><th>&nbsp;</th></tr>
<tr><td><a href="misc/WinTitle.htm#ahk_exe">ahk_exe</a></td><td>Fenster können durch den Namen oder Pfad des übergeordneten Prozesses (EXE-Datei) identifiziert werden.</td></tr>
<tr><td><a href="Scripts.htm#idebug">Debuggen</a></td><td>Interaktive Debugging-Funktionen (zeilenweise Ausführung usw.).</td></tr>
<tr><td><a href="#Error_Handling">Fehlerbehandlung</a></td><td>Try/Catch/Throw und erhöhte Verwendbarkeit von A_LastError.</td></tr>
<tr><td><a href="#GUI_Enhancements">GUI-Erweiterungen</a></td><td>Eine Vielzahl an Erweiterungen für den Gui-Befehl sowie für verwandte Befehle.</td></tr>
<tr><td><a href="#icons">Icon-Unterstützung</a></td><td>Ressourcen-Kennungen und verbesserte Unterstützung für verschiedene Icon-Größen.</td></tr>
<tr><td><a href="Compat.htm">Sonstige Änderungen:</a></td><td>Änderungen, die die Script-Kompatibilität beeinflussen.</td></tr>
<tr><td><a href="AHKL_ChangeLog.htm">Versionsverlauf</a></td><td>Verlauf der AutoHotkey_L-Revisionen.</td></tr>

</table>


<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Viele Befehle unterstützen für die Fehlerbehandlung <a href="commands/Try.htm">Try</a>/<a href="commands/Catch.htm">Catch</a> anstelle von ErrorLevel. Zum Beispiel:</p>
<pre class="NoIndent">try
{
    FileCopy, Datei1.txt, C:\Ordner
    FileDelete, C:\Ordner\Alt.txt
}
catch
    MsgBox Es ist ein Fehler aufgetreten!</pre>
<p>Darüber hinaus setzen die folgenden Befehle nun <a href="Variables.htm#LastError">A_LastError</a>, um das Debuggen zu unterstützen: FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version, FileSetAttrib/Time, FileCreateDir, RegRead, RegWrite, RegDelete.</p>

<h2 id="Function_Libraries">Funktionsbibliotheken</h2>
<p>Zusätzlich zur Benutzerbibliothek in <code>%A_MyDocuments%\AutoHotkey\Lib</code> und Standardbibliothek im AutoHotkey-Verzeichnis können Funktionen auch automatisch von der "lokalen Bibliothek" eingefügt werden, welche sich in <code>%A_ScriptDir%\Lib</code> befindet. Für mehr Details, siehe <a href="Functions.htm#lib">Funktionsbibliotheken</a>.</p>
<p><a href="commands/_Include.htm">#Include &lt;Bibliotheksname&gt;</a> fügt ausdrücklich eine Bibliotheksdatei ein, die sich in einer beliebigen Funktionsbibliothek befinden kann.</p>

<h2 id="GUI_Enhancements">GUI-Erweiterungen</h2>
<p>Eine Vielzahl an Erweiterungen wurden für den <a href="commands/Gui.htm">Gui</a>-Befehl sowie für verwandte Befehle implementiert:</p>
<ul>
  <li>Für ein GUI kann ein <a href="commands/Gui.htm#MultiWin">Name oder HWND</a> anstelle einer Nummer zwischen 1 und 99 verwendet werden.</li>
  <li><a href="commands/Gui.htm#New">Gui, New</a> erstellt ein neues anonymes GUI.</li>
  <li>Es kann eine beliebige Anzahl an anonymen GUIs erstellt werden.</li>
  <li>Neue GUI-Optionen: <a href="commands/Gui.htm#GuiHwndOutputVar">+Hwnd<em>AusgabeVar</em></a>, <a href="commands/Gui.htm#Parent">+Parent<em>GUI</em></a></li>
  <li>Dem GUI kann ein beliebiges Fenster übergeordnet werden: <a href="commands/Gui.htm#Owner">+Owner<em>%HWND%</em></a>.</li>
  <li><a href="commands/Gui.htm#fontq">Gui, Font</a> kann die Textglättung kontrollieren.</li>
  <li><a href="commands/GuiControls.htm#ActiveX">ActiveX-Steuerelemente</a> wie "Internet Explorer WebBrowser" werden unterstützt.</li>
  <li><a href="commands/GuiControlGet.htm#Name">GuiControlGet, <em>AusgabeVar</em>, Name</a> ermittelt den Namen der Variable, die dem GUI-Steuerelement zugeordnet wurde.</li>
  <li>Tastaturkürzel wie CTRL+O werden automatisch unterstützt, wenn sie in <a href="commands/Gui.htm#Menu">Gui-Menüs</a> verwendet werden.</li>
  <li><a href="commands/Gui.htm#fontq">Textqualität</a> kann mithilfe des Font-Unterbefehls beeinflusst werden.</li>
</ul>

<h2 id="Static">Statische Variablen</h2>
<p>Statische Variablen können nun mit einem beliebigen Ausdruck initialisiert werden. Zum Beispiel:</p>
<pre>Sleep 500
MsgBox % Time() "ms, seit das Script gestartet wurde."
Time() {
    static Tick := A_TickCount
    return A_TickCount - Tick
}</pre>

<h2 id="enc">Textkodierungen</h2>
<p><a href="commands/FileRead.htm">FileRead</a>, <a href="commands/FileReadLine.htm">FileReadLine</a>, <a href="commands/LoopReadFile.htm">Loop Read</a> und <a href="commands/FileAppend.htm">FileAppend</a> unterstützen eine Vielzahl an Textkodierungen, die von Windows unterstützt werden, nicht nur den System-Standard-ANSI-Zeichensatz. Mit <a href="commands/FileEncoding.htm">FileEncoding</a> kann die Standardkodierung bestimmt werden, die für FileRead und FileAppend wie folgt überschrieben werden kann:</p>
<pre class="Syntax">FileRead, AusgabeVar, *P<i>nnn</i> Dateiname
FileAppend [, Text, Dateiname, Kodierung]</pre>
<p>Während <i>nnn</i> eine numerische <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">Zeichensatz-Kennung</a> sein muss, ist die <i>Kodierung</i> im selben Format wie <a href="commands/FileEncoding.htm">FileEncoding</a>.</p>
<p><b>Siehe auch:</b> <a href="Compat.htm#FileRead">Script-Kompatibilität</a></p>

<h2 id="Variadic">Variadische Funktionen und Funktionsaufrufe</h2>
<p><a href="Functions.htm#Variadic">Variadische Funktionen</a> können mithilfe eines Arrays eine veränderbare Anzahl von Parametern empfangen, während <a href="Functions.htm#VariadicCall">variadische Funktionsaufrufe</a> verwendet werden können, um eine veränderbare Anzahl von Parametern an einer Funktion zu übergeben.</p>


<h2 id="icons">Verbesserungen der Icon-Unterstützung</h2>

<h3>Ungewöhnliche Größen</h3>
<p>Icon-Ressourcen in beliebiger unterstützten Größe vom Betriebssystem können aus einer ausführbaren Datei extrahiert werden. Wenn Icon-Ressourcen in mehrere Größen innerhalb einer Icon-Gruppe vorhanden sind, dann wird die geeignetste Größe verwendet. Vor Revision 17 wurde willkürlich eine beliebige Icon-Ressource vom System ausgewählt, dass zuerst auf die Standardgröße des Systems und danach wieder auf die gewünschte Größe skaliert wurde.</p>

<h3>Ressourcen-Kennungen</h3>
<p>Negative Iconnummern können verwendet werden, um eine Icon-Ressource einer Gruppe innerhalb einer ausführbaren Datei zu kennzeichnen. Im folgenden Beispiel wird das Tray-Icon auf das Standard-Icon von AHK gesetzt:</p>
<pre>Menu, Tray, Icon, %A_AhkPath%, -160</pre>

</body></html>
