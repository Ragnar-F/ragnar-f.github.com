<!DOCTYPE HTML>
<html>
<head>
<title>AutoHotkey Scripts und Makros</title>
<meta name="keywords" content="Grundlage">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<link href="static/font.css" rel="stylesheet" type="text/css" />
<script src="static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="static/html5.js"></script>
<![endif]-->
<script src="navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(0);</script>
<div id="content">
  <section>
    <div id="article">
      <h1>Scripts</h1>
      <h2>Inhaltsverzeichnis</h2>
      <ul>
        <li><a href="#intro">Einf&uuml;hrung</a></li>
        <li><a href="#auto">Der obere Bereich des Scripts (automatischer Ausf&uuml;hrungsbereich)</a>: Dieser Bereich wird beim Starten des Scripts automatisch ausgef&uuml;hrt.</li>
        <li><a href="#esc">Schutzsequenzen</a>: Wann <code>`%</code> und <code>`,</code> verwendet werden sollen, um ein Prozentzeichen oder Komma direkt angeben zu k&ouml;nnen.</li>
        <li><a href="#Comments">Kommentare in einem Script</a>: Wie das Semikolon und die Symbole /*...*/ verwendet werden, um Bemerkungen zu einem Script hinzuzuf&uuml;gen. </li>
        <li><a href="#continuation">Eine lange Zeile in mehreren kurzen Zeilen aufteilen</a>: Verbessert die Lesbarkeit und Wartbarkeit eines Scripts.</li>
        <li><a href="#ahk2exe">Ein Script in eine EXE-Datei umwandeln (ahk2exe)</a>: Ein .ahk-Script in eine .exe-Datei umwandeln, die auf jedem PC ausgef&uuml;hrt werden kann.</li>
        <li><a href="#cmd">Befehlszeilenparameter an einem Script &uuml;bergeben</a>: Die Variablen %1%, %2% usw. enthalten die eingehenden Parameter.</li>
        <li><a href="#cp">Zeichensatz einer Script-Datei</a>: Nicht-ASCII-Zeichen sicher in Scripts verwenden.</li>
        <li><a href="#debug">Ein Script debuggen</a>: Wie die Fehler eines Scripts gefunden werden k&ouml;nnen, das sich falsch verh&auml;lt.</li>
        <li><a href="#port">Portabilit&auml;t von AutoHotkey.exe</a>: Eine Kopie von AutoHotkey.exe reicht aus, um jede .ahk-Datei ausf&uuml;hren zu k&ouml;nnen.</li>
        <li><a href="#install">Installer-Optionen</a>: Wie unbeaufsichtigte/automatische Installationen oder Deinstallationen durchgef&uuml;hrt werden k&ouml;nnen.</li>
      </ul>
      <h2 id="intro">Einf&uuml;hrung</h2>
      <p>Ein Script ist eine reine Textdatei mit mehreren Zeilen, die vom Programm (AutoHotkey.exe) ausgef&uuml;hrt werden. Ein Script kann auch <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten, oder sogar nur aus diesen bestehen. Allerdings wird ein Script ohne Hotkeys und Hotstrings seine Befehle von oben nach unten nacheinander ausf&uuml;hren, sobald es gestartet wird.</p>
      <p>Das Programm l&auml;dt das Script zeilenweise in den Speicher. Jede Zeile kann bis zu 16.383 Zeichen lang sein. W&auml;hrend des Ladevorgangs wird das Script <a href="misc/Performance.htm">optimiert</a> und &uuml;berpr&uuml;ft, ob es g&uuml;ltig ist. Syntaxfehler werden angezeigt, und m&uuml;ssen behoben werden, bevor das Script ausgef&uuml;hrt werden kann.</p>
      <h2 id="auto">Der obere Bereich des Scripts (automatischer Ausf&uuml;hrungsbereich)</h2>
      <p>Nachdem das Script geladen wurde, beginnt dessen Ausf&uuml;hrung bei der ersten Zeile und wird fortgesetzt, bis ein <a href="commands/Return.htm">Return</a>, <a href="commands/Exit.htm">Exit</a>, <a href="Hotkeys.htm">Hotkey-/Hotstring-Label</a> oder das physische Ende erreicht wird (je nachdem was zuerst kommt). Dieser obere Bereich des Scripts wird auch als <em>automatischer Ausf&uuml;hrungsbereich</em> bezeichnet.</p>
      <p>Ein Script, das weder <a href="commands/_Persistent.htm">persistent</a> noch <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/OnMessage.htm">OnMessage</a> und <a href="commands/Gui.htm">GUI</a> enth&auml;lt, wird beendet, sobald der automatische Ausf&uuml;hrungsbereich durchgef&uuml;hrt wurde. Ansonsten l&auml;uft es im Leerlauf und reagiert auf Ereignisse wie Hotkeys, Hotstrings, <a href="commands/Gui.htm#label">GUI-Ereignisse</a>, <a href="commands/Menu.htm">benutzerdefinierte Men&uuml;punkte</a> und <a href="commands/SetTimer.htm">Timer</a>.</p>
      <p>Jeder <a href="misc/Threads.htm">Thread</a>, der durch <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/Menu.htm"> Men&uuml;punkte</a>, <a href="commands/Gui.htm#label">GUI-Ereignisse</a> oder <a href="commands/SetTimer.htm">Timer</a> gestartet wird, beginnt mit Standardwerten von den folgenden Attributen, die im automatischen Ausf&uuml;hrungsbereich bestimmt wurden. Bei unbestimmten Attributen gelten die Standardeinstellungen (wie jeweils in den folgenden Seiten dokumentiert): <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>, <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="commands/SetBatchLines.htm">SetBatchLines</a>, <a href="commands/SendMode.htm">SendMode</a>, <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>, <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>, <a href="commands/SetWinDelay.htm">SetWinDelay</a>, <a href="commands/SetControlDelay.htm">SetControlDelay</a>, <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="commands/CoordMode.htm">CoordMode</a>, <a href="commands/SetStoreCapslockMode.htm">SetStoreCapslockMode</a>, <a href="commands/AutoTrim.htm">AutoTrim</a>, <a href="commands/SetFormat.htm">SetFormat</a>, <a href="commands/StringCaseSense.htm">StringCaseSense</a>, <a href="commands/Thread.htm">Thread</a> und <a href="commands/Critical.htm">Critical</a>.</p>
      <p>Falls das Ausf&uuml;hren des automatischen Ausf&uuml;hrungsbereichs zu lange dauert (oder nie beendet wird), werden die Standardwerte der oben genannten Einstellungen nach 100 Millisekunden automatisch wirksam. Wenn der automatische Ausf&uuml;hrungsbereich doch noch vollst&auml;ndig ausgef&uuml;hrt wird (wenn &uuml;berhaupt), werden die Standardwerte nochmals auf die aktuellen Werte aktualisiert. Daher ist es besser, die Standardeinstellungen im oberen Bereich des Scripts zu &auml;ndern, das <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/SetTimer.htm">Timer</a> oder <a href="commands/Menu.htm">benutzerdefinierte Men&uuml;punkte</a> enth&auml;lt. Beachte au&szlig;erdem, dass jeder <a href="misc/Threads.htm">Thread</a> seine eigene Sammlung von den oben genannten Einstellungen aufbewahrt. &Auml;nderungen an diesen Einstellungen beeinflussen keine anderen <a href="misc/Threads.htm">Threads</a>.</p>
      <h2 id="esc">Schutzsequenzen</h2>
      <p>Das Standard-<a href="commands/_EscapeChar.htm">Schutzzeichen</a> von AutoHotkey ist ein Akzent (`), das sich auf der deutschen Tastatur direkt links neben der R&uuml;cktaste befindet. Das Benutzen dieses Zeichens statt eines Backslash-Zeichens verhindert, dass doppelte Backslash-Zeichen in Dateipfaden verwendet werden m&uuml;ssen.</p>
      <p>Da Kommas und Prozentzeichen eine besondere Bedeutung in der AutoHotkey-Sprache haben, solltest du <code>`,</code> oder <code>`%</code> angeben, um diese direkt verwenden zu k&ouml;nnen. Ausnahmen sind der <a href="commands/MsgBox.htm">MsgBox</a>-Befehl und der jeweils letzte Parameter eines Befehls, bei denen Kommas nicht gesch&uuml;tzt werden m&uuml;ssen. Auf der <a href="commands/_EscapeChar.htm">#EscapeChar</a>-Seite findest du eine komplette Liste von Schutzsequenzen.</p>
      <p>Einige Sonderzeichen k&ouml;nnen nur in Form einer  Schutzsequenz erzeugt werden. H&auml;ufig verwendet werden `t (Tabulator), `n (LF-Zeilenumbruchszeichen) und `r (CR-Zeilenumbruchszeichen).</p>
      <p>Tipp: Bei jedem Befehl kannst du das erste Komma weglassen (au&szlig;er wenn der erste Parameter leer ist oder mit := oder = beginnt, oder wenn der Befehl am Anfang eines <a href="#continuation">Fortsetzungsbereichs</a> einzeln vorkommt). Zum Beispiel:</p>
      <pre>MsgBox Das ist ok.
MsgBox<strong>,</strong> Das ist auch ok (es hat ein direktes Komma).</pre>
      <h2 id="Comments">Kommentare in einem Script</h2>
      <p>Scripts k&ouml;nnen kommentiert werden, indem du  am Anfang einer Zeile ein Semikolon verwendest. Zum Beispiel:</p>
      <pre><em>; Diese ganze Zeile ist ein Kommentar.</em></pre>
      <p>Kommentare k&ouml;nnen auch ans Ende eines Befehls gesetzt werden. Dabei ist zu beachten, dass auf der linken Seite des Semikolons mindestens ein Leer- oder Tabulatorzeichen vorkommen muss. Zum Beispiel:</p>
      <pre>Run Notepad  <em>; Dieser Kommentar befindet sich neben dem Befehl.</em></pre>
      <p>Dar&uuml;ber hinaus k&ouml;nnen die Symbole /* und */ verwendet werden, um einen ganzen Bereich auszukommentieren, <em>aber nur, wenn sich die Symbole am Zeilenanfang befinden</em>. Zum Beispiel:</p>
      <pre><em>/*
MsgBox, Diese Zeile wurde auskommentiert (deaktiviert).
MsgBox, Diese auch.
*/</em></pre>
      <p>Da Kommentare beim Starten eines Scripts ignoriert werden, haben sie keinen Einfluss auf die Performance oder Speicherauslastung.</p>
      <p>Das voreingestellte Kommentarzeichen (Semikolon) kann per <a href="commands/_CommentFlag.htm">#CommentFlag</a> in ein anderes Zeichen oder anderen String ge&auml;ndert werden.</p>
      <h2 id="continuation">Eine lange Zeile in mehreren kurzen Zeilen aufteilen</h2>
      <p>Lange Zeilen k&ouml;nnen in mehreren kurzen Zeilen aufgeteilt werden, um sie besser lesbar und verwaltbar zu machen. Die Ausf&uuml;hrungsgeschwindigkeit des Scripts wird dabei nicht reduziert, weil solche Zeilen im Speicher zusammengef&uuml;hrt werden, bevor das Script startet.</p>
      <p><strong>Methode #1</strong>: Eine Zeile, die mit "and", "or", ||, &amp;&amp;, einem Komma oder einem <a href="Variables.htm#concat">Punkt</a> beginnt, wird automatisch mit der oberen Zeile zusammengef&uuml;hrt (seit v1.0.46 gilt das auch f&uuml;r <a href="Variables.htm#Operators">Ausdrucksoperatoren</a>, au&szlig;er ++ und --). Im folgenden Beispiel wird die zweite Zeile an der ersten angef&uuml;gt, weil sie mit einem Komma beginnt:</p>
      <pre>FileAppend, Das ist der Text, der angef&uuml;gt wird.`n   <em>; Kommentar hier m&ouml;glich.</em>
    <strong>,</strong> %A_ProgramFiles%\BeliebigeAnwendung\Log-Datei.txt  <em>; Kommentar.</em></pre>
      <p>Die folgenden Zeilen w&uuml;rden auch zu einer einzelnen Zeile zusammengef&uuml;hrt werden, weil die letzten beiden mit "and" oder "or" beginnen:</p>
      <pre>If (Farbe = "Rot" or Farbe = "Gr&uuml;n" or Farbe = "Blau"   <em>; Kommentar.</em>
    <strong>or</strong> Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Wei&szlig;")   <em>; Kommentar.</em>
    <strong>and</strong> ProduktIstInFarbeVerf&uuml;gbar(Produkt, Farbe)   <em>; Kommentar.</em></pre>
      <p>Der <a href="Variables.htm#ternary">tern&auml;re Operator</a> ist daf&uuml;r auch gut geeignet:</p>
      <pre>ProduktIstVerf&uuml;gbar := (Farbe = "Rot")
    <strong>?</strong> false  <em>; Rote Produkte nicht verf&uuml;gbar, daher ist der Funktionsaufruf irrelevant.</em>
    <strong>:</strong> ProduktIstInFarbeVerf&uuml;gbar(Produkt, Farbe)</pre>
      <p>Die Einr&uuml;ckungen in den oberen Beispielen sind optional. Sie k&ouml;nnen Klarheit dar&uuml;ber verschaffen, welche Zeilen zusammengeh&ouml;ren. Au&szlig;erdem ist es unn&ouml;tig, zus&auml;tzliche Leerzeichen bei Zeilen einzuf&uuml;gen, die mit den W&ouml;rtern "AND" und "OR" beginnen; das Programm macht das automatisch. In den oberen Beispielen k&ouml;nntest du zwischen oder nach den Zeilen auch leere Zeilen oder <a href="#Comments">Kommentare</a>  einf&uuml;gen.</p>
      <p><strong>Methode #2</strong>: Diese Methode sollte verwendet werden, um eine gro&szlig;e Anzahl an Zeilen zusammenzuf&uuml;hren oder wenn die Zeilen nicht f&uuml;r Methode #1 geeignet sind. Obwohl diese Methode besonders f&uuml;r <a href="Hotstrings.htm">einzeilige Hotstrings</a> n&uuml;tzlich ist, kann sie auch bei jedem Befehl oder <a href="Variables.htm#Expressions">Ausdruck</a> verwendet werden. Zum Beispiel:</p>
      <pre><em>; BEISPIEL #1:</em>
Var =
(
Zeile 1 vom Text.
Zeile 2 vom Text. Standardm&auml;&szlig;ig befindet sich ein Zeilenumbruchszeichen (`n) zwischen den Zeilen.
)

<em>; BEISPIEL #2:</em>
FileAppend,  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
Eine Textzeile.
<i>Standardm&auml;&szlig;ig</i> wird das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile als LF-Zeichen (`n) in die Datei geschrieben.
    <i>Standardm&auml;&szlig;ig</i> wird der Tabulator auf der linken Seite dieser Zeile auch in die Datei geschrieben (das gleiche gilt auch f&uuml;r Leerzeichen).
<i>Standardm&auml;&szlig;ig</i> werden Variablenverweise wie %Var% in den Variableninhalt aufgel&ouml;st.
), C:\Eigene Datei.txt</pre>
      <p>In den oberen Beispielen sind mehrere Zeilen mit Klammern am Anfang und Ende eingegrenzt. Das nennt man <em>Fortsetzungsbereich</em>. Beachte, dass die Zeile nach der schlie&szlig;enden Klammer den letzten Parameter von <a href="commands/FileAppend.htm">FileAppend</a> enth&auml;lt. Diese Anwendungsart ist optional; das wird so gemacht, damit das Komma als Parametertrennung anstatt als direktes Komma gesehen wird.</p>
      <p>Das Standardverhalten eines Fortsetzungsbereichs kann &uuml;berschrieben werden, indem man eine oder mehrere der folgenden Optionen auf der rechten Seite der &ouml;ffnenden Klammer einf&uuml;gt. Wenn du mehrere Optionen angeben willst, trenne sie jeweils mit einem Leerzeichen. Zum Beispiel: <code>( LTrim Join| %</code>.</p>
      <p id="Join"><strong>Join</strong>: Gibt an, wie die Zeilen verbunden werden sollen. Ist diese Option nicht vorhanden, erfolgt nach jeder Zeile, au&szlig;er der letzten, ein Zeilenumbruchszeichen (`n). Ist das Wort <em>Join</em> alleine angegeben, werden die Zeilen direkt verbunden, ohne das Zeichen dazwischen vorkommen. Ansonsten k&ouml;nnen unmittelbar nach dem Wort <em>Join</em> bis zu 15 Zeichen erfolgen. Zum Beispiel w&uuml;rde <code>Join`s</code> nach jeder Zeile, au&szlig;er der letzten, ein Leerzeichen einf&uuml;gen (&quot;`s&quot; kennzeichnet ein literales Leerzeichen - eine spezielle Schutzsequenz, die nur von <em>Join</em> erkannt werden kann). Ein weiteres Beispiel ist <code>Join`r`n</code>, das das Zeilenumbruchspaar CR+LF zwischen den Zeilen einf&uuml;gt. Ebenso w&uuml;rde <code>Join|</code> einen senkrechten Strich zwischen den Zeilen eingef&uuml;gen. Falls die letzte Zeile auch mit einem Join-String enden soll, muss du unmittelbar &uuml;ber der schlie&szlig;enden Klammer des Bereichs eine leere Zeile einf&uuml;gen.</p>
      <p id="LTrim"><strong>LTrim</strong>: Entfernt Leer- und Tabulatorzeichen am Anfang jeder Zeile. Diese Option wird haupts&auml;chlich verwendet, damit der Fortsetzungsbereich einger&uuml;ckt werden kann. Au&szlig;erdem kann diese Option f&uuml;r mehrere Fortsetzungsbereiche aktiviert werden, wenn <code>#LTrim</code> allein auf einer Zeile angegeben wird. <code>#LTrim</code> ist von der Position abh&auml;ngig: es beeinflusst nur Fortsetzungsbereiche, die sich darunter befinden. Die Einstellung kann per <code>#LTrim Off</code> wieder deaktiviert werden.</p>
      <p><strong>RTrim0</strong> (RTrim und eine 0): Deaktiviert das Entfernen von Leer- und Tabulatorzeichen am Ende jeder Zeile.</p>
      <p id="CommentOption"><strong>Comments</strong> (oder <strong>Comment</strong> oder <strong>Com</strong> oder <strong>C</strong>) <span class="ver">[v1.0.45.03+]</span>: Erm&ouml;glicht <a href="#Comments">Semikolon-Kommentare</a> innerhalb des Fortsetzungsbereichs (aber nicht <code>/*..*/</code>). Solche Kommentare (sowie alle links vorkommenden Leer- und Tabulatorzeichen) werden im Endergebnis entfernt, anstatt als direkter Text behandelt zu werden. Jeder Kommentar kann auf der rechten Seite einer Zeile oder auf einer neuen Zeile vorkommen.</p>
      <p><strong>%</strong> (Prozentzeichen): Prozentzeichen werden als direkt vorhanden angesehen, anstatt als Variablenverweise. Dadurch wird verhindert, dass jedes einzelne Prozentzeichen <a href="commands/_EscapeChar.htm">gesch&uuml;tzt</a> werden muss. Diese Option ist dort unn&ouml;tig, wo Prozentzeichen bereits direkt vorkommen k&ouml;nnen, wie bei <a href="Hotstrings.htm">einzeiligen Hotstrings</a>.</p>
      <p><strong>,</strong> (Komma): Behandelt Kommas als Trennzeichen, anstatt als direkt vorhandene Kommas. Diese selten verwendete Option ist nur f&uuml;r Kommas notwendig, die zwischen den Befehlsparametern vorkommen, weil bei <a href="Functions.htm">Funktionsaufrufen</a> der Typ des Kommas egal ist. Zudem transformiert diese Option nur solche Kommas, die Parameter tats&auml;chlich trennen. Das hei&szlig;t, sobald der letzte Parameter des Befehls erreicht wird (oder keine Parameter vorhanden sind), werden nachfolgende Kommas als direkt vorhandene Kommas behandelt, unabh&auml;ngig von dieser Option.</p>
      <p id="accent"><strong>`</strong> (Akzent): Akzentzeichen werden als direkt vorhanden angesehen, anstatt als <a href="commands/_EscapeChar.htm">Schutzzeichen</a>. Dadurch wird auch verhindert, dass Kommas und Prozentzeichen direkt und einzeln gesch&uuml;tzt werden k&ouml;nnen. Dar&uuml;ber hinaus unterdr&uuml;ckt diese Option die Umwandlung von direkt angegebenen Schutzsequenzen wie `r und `t.</p>
      <p id="non-continuation"><strong>)</strong> <span class="ver">[v1.1.01+]</span>: Erscheint eine schlie&szlig;ende Klammer in den Optionen des Fortsetzungsbereichs (au&szlig;er als Parameter der <a href="#Join">Join</a>-Option), wird die Zeile als Ausdruck neu interpretiert, anstatt als Beginn eines Fortsetzungsbereichs. Das erm&ouml;glicht Ausdr&uuml;cke wie <code>(x.y)[z]()</code>, ohne dabei die &ouml;ffnende Klammer sch&uuml;tzen zu m&uuml;ssen.</p>
      <p><u>Bemerkungen</u></p>
      <p><a href="commands/_EscapeChar.htm">Schutzsequenzen</a> wie `n (Zeilenumbruch) und `t (Tabulator) werden innerhalb des Fortsetzungsbereichs unterst&uuml;tzt, solange die <a href="#accent">Akzent-Option (`)</a> nicht vorhanden ist.</p>
      <p>Fehlt die <a href="#CommentOption">Comment-Option</a>, werden Kommentare per Semikolon und /*..*/ innerhalb eines Fortsetzungsbereichs nicht unterst&uuml;tzt, weil sie als direkt vorhanden angesehen werden. Allerdings k&ouml;nnen Kommentare in den unteren und oberen Zeilen des Bereichs eingef&uuml;gt werden. Zum Beispiel:</p>
      <pre>FileAppend<strong>,</strong>   <em>; Kommentar.
; Kommentar.</em>
( LTrim Join    <em>; Kommentar.</em>
    &nbsp;; Das ist <strong>kein</strong> Kommentar; es ist direkt vorhanden. F&uuml;gt das Wort <i>Comments</i> in der Zeile dar&uuml;ber ein, damit es ein Kommentar wird.
), C:\Datei.txt   <em>; Kommentar.</em></pre>
      <p>Daraus folgt, dass Semikolons innerhalb eines Fortsetzungsbereichs nie <a href="commands/_EscapeChar.htm">gesch&uuml;tzt</a> werden m&uuml;ssen.</p>
      <p>Ein Fortsetzungsbereich kann keine Zeile erzeugen, deren L&auml;nge 16.383 Zeichen &uuml;berschreitet (Bei dem Versuch warnt dich das Programm, bevor es startet). Du kannst das umgehen, wenn du mehrere Verkettungen bei einer Variable durchf&uuml;hrst. Zum Beispiel:</p>
      <pre>Var =
(
...
)
Var = %Var%`n  <em>; F&uuml;gt mithilfe eines weiteren Fortsetzungsbereichs mehr Text hinzu.</em>
(
...
)
FileAppend, %Var%, C:\Eigene Datei.txt</pre>
      <p>Soll eine Zeile mit einer direkt vorhandenen schlie&szlig;enden Klammer beginnen, obwohl sie normalerweise das Ende eines Fortsetzungsbereichs kennzeichnet, muss du ein Akzent/Backtick davor setzen: <code>`)</code>.</p>
      <p>Nach einem Fortsetzungsbereich kann eine Zeile erfolgen, die die &ouml;ffnenden Klammer eines weiteren Fortsetzungsbereichs enth&auml;lt. Dadurch k&ouml;nnen die oben genannten Optionen beim Erstellen einer einzelnen Zeile variieren.</p>
      <p>Die st&uuml;ckweise Konstruktion eines Fortsetzungsbereichs per <a href="commands/_Include.htm">#Include</a> wird nicht unterst&uuml;tzt.</p>
      <h2 id="ahk2exe">Ein Script in eine EXE-Datei umwandeln (ahk2exe)</h2>
      <p>Ein Script-Compiler wurde  dem Programm beigef&uuml;gt (zur Verf&uuml;gung gestellt von fincs).</p>
      <p>Ein Script, das kompiliert wurde, wird zu einer eigenst&auml;ndigen ausf&uuml;hrbaren Datei; das hei&szlig;t, dass das Script von Benutzern verwendet werden kann, die kein AutoHotkey installiert haben (solche EXE-Dateien k&ouml;nnen ohne Einschr&auml;nkungen weitergegeben oder verkauft werden). Der Kompilierungsvorgang erstellt eine ausf&uuml;hrbare Datei, die folgendes enth&auml;lt: den AutoHotkey-Interpreter, das Script, Dateien per <a href="commands/_Include.htm">#Include</a> und Dateien per <a href="commands/FileInstall.htm">FileInstall</a>.</p>
      <p>Ahk2Exe kann wie folgt verwendet werden:</p>
      <ol>
        <li><strong>GUI-Schnittstelle</strong>: F&uuml;hre die Verkn&uuml;pfung "Convert .ahk to .exe" im Startmen&uuml; aus.</li>
        <li><strong>Rechtsklick</strong>: Klicke mit der rechten Maustaste auf eine .ahk-Datei und w&auml;hle "Compile Script" aus (nur verf&uuml;gbar, wenn die Option "Script Compiler" bei der Installation von AutoHotkey ausgew&auml;hlt worden ist). Das erstellt eine EXE-Datei mit dem gleichen Basisnamen wie das Script, die nach kurzer Zeit im selben Verzeichnis erscheint. Hinweis: Die erstellte EXE-Datei verwendet das gleiche Icon, die gleiche .bin-Datei und die MPRESS-Einstellung, die zuletzt von Methode #1 verwendet worden sind.</li>
        <li id="ahk2exeCmd"><strong>Befehlszeile</strong>: Der Compiler kann mit folgenden Parametern von der Befehlszeile ausgef&uuml;hrt werden:
          <pre>Ahk2Exe.exe /in Script.ahk [/out Script.exe] [/icon Icon.ico] [/bin AutoHotkeySC.bin] [/mpress 0oder1]</pre>
          Zum Beispiel:
          <pre>Ahk2exe.exe /in "Script.ahk" /icon "Icon.ico"</pre>
          Verwendung:
          <ul>
            <li>Parameter, die Leerzeichen enthalten, sollten in Anf&uuml;hrungszeichen gesetzt werden.</li>
            <li>Ist der out-Parameter nicht vorhanden, wird die EXE-Datei den gleichen Basisnamen wie das Script haben.</li>
          </ul>
        </li>
      </ol>
      <p>Hinweise:</p>
      <ul>
        <li>Die Kompilierung verbessert &uuml;blicherweise nicht die Performance des Scripts.</li>
        <li>Seit v1.1.01 wird Passwortschutz und /NoDecompile nicht mehr unterst&uuml;tzt.</li>
        <li>Falls <a href="http://www.matcode.com/mpress.htm">mpress.exe</a> im Unterordner "Compiler" vorhanden ist, wird das kompilierte Script komprimiert, sofern es nicht per <code>/mpress 0</code> oder GUI-Einstellung deaktiviert worden ist. Dabei wird auch der Quellcode des Scripts komprimiert (ohne Kommentare), der ansonsten mithilfe eines PE-Ressource-Editors aus der EXE-Datei extrahiert werden kann.</li>
        <li>Die Befehle <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> und "<a href="commands/Menu.htm">Menu, Tray, ShowMainWindow</a>" beeinflussen das Verhalten von kompilierten Scripts.</li>
        <li>Die Versionsinformation eines kompilierten Scripts (die im Eigenschaftsfenster des Explorers angezeigt wird) kann je nach Bedarf angepasst werden, wenn die Datei "AutoHotkeySC.bin" mithilfe des Freeware-Programms "Resource Hacker" bearbeitet wird. Diese Datei befindet sich im Unterordner "Compiler". <a href="http://www.autohotkey.com/forum/topic22975.html">Compile_AHK II</a> kann verwendet werden, um diesen Vorgang zu erleichtern. Seit v1.1.01 ist es m&ouml;glich, das kompilierte Script anstelle von AutoHotkeySC.bin zu bearbeiten.</li>
        <li>Die oben genannte Methode kann auch dazu verwendet werden, bei einem kompilierten Script vorhandene Icons zu &auml;ndern oder neue Icons hinzuzuf&uuml;gen.</li>
        <li>Die interne Variable A_IsCompiled enth&auml;lt eine 1, falls das Script in kompilierter Form ausgef&uuml;hrt wird. Ansonsten ist sie leer.</li>
        <li>Bei der &Uuml;bergabe von Parametern an Ahk2Exe wird eine Meldung in der Standardausgabe (stdout) geschrieben, die den Erfolg oder Misserfolg des Kompilierungsvorgangs n&auml;her bringt. Diese Meldung wird nicht in der Eingabeaufforderung angezeigt. Allerdings kann sie "abgefangen" werden, wenn die Ausgabe beispielsweise an eine Datei weitergeleitet wird. <span class="ver">[v1.0.43+]</span></li>
      </ul>
      <p>Der Quellcode sowie neuere Versionen des Compilers findest du auf <a href="https://github.com/fincs/Ahk2Exe">GitHub</a>.</p>
      <h2 id="cmd">Befehlszeilenparameter an einem Script &uuml;bergeben</h2>
      <p>Scripts unterst&uuml;tzen Befehlszeilenparameter. Das Format ist:</p>
      <pre>AutoHotkey.exe [<i>Optionen</i>] [<i>Script-Dateiname</i>] [<i>Script-Parameter</i>]</pre>
      <p>Bei kompilierten Scripts ist das Format:</p>
      <pre>KompiliertesScript.exe [<i>Optionen</i>] [<i>Script-Parameter</i>]</pre>
      <p><strong>Optionen:</strong></p>
      <table class="info">
        <tr>
          <td>/f<br>
            /force</td>
          <td>Script bedingungslos starten und Warnmeldungen &uuml;berspringen.</td>
        </tr>
        <tr>
          <td>/r<br>
            /restart</td>
          <td>Gibt an, dass das Script neu gestartet werden soll (das auch intern vom <a href="commands/Reload.htm">Reload</a>-Befehl verwendet wird).</td>
        </tr>
        <tr>
          <td>/ErrorStdOut</td>
          <td>Sendet Syntaxfehler, die das Starten eines Scripts verhindert haben, zur Standardausgabe (stdout), anstatt ein Dialogfenster anzuzeigen. Siehe <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a> f&uuml;r weitere Details.</td>
        </tr>
        <tr>
          <td>/Debug</td>
          <td><span class="ver">[AHK_L 11+]:</span> Verbindet sich mit einem Debugger-Client. F&uuml;r weitere Details, siehe <a href="#idebug">Interaktives Debuggen</a>.</td>
        </tr>
        <tr>
          <td id="CPn">/CP<i>n</i></td>
          <td><span class="ver">[AHK_L 51+]:</span> &Uuml;berschreibt den Standard-Zeichensatz, der zum Lesen der Script-Dateien verwendet wird. Weitere Details findest du in "<a href="#cp">Zeichensatz einer Script-Datei</a>".</td>
        </tr>
      </table>
      <p id="defaultfile"><strong>Script-Dateiname:</strong> Dieser Parameter kann weggelassen werden, falls keine <em>Script-Parameter</em> vorhanden sind. Ist dieser Parameter nicht vorhanden, wird das Programm eine Datei auf einer der folgenden Standorte ausf&uuml;hren (oder bei Nachfrage erstellen):</p>
      <p><span class="ver">[AHK_L 51+]:</span> <code>%AhkExeDir%\%AhkExeName%.ahk</code> oder <code><a href="Variables.htm#MyDocuments">%A_MyDocuments%</a>\%AhkExeName%.ahk</code>, bei denen <em>%AhkExeDir%</em> und <em>%AhkExeName%</em> mit dem Verzeichnis und Dateinamen der ausf&uuml;hrbaren Datei ohne ".exe" ersetzt wird, die zum Ausf&uuml;hren des Scripts ben&ouml;tigt werden.</p>
      <p><span class="ver">[Fr&uuml;here Versionen]:</span> <code>AutoHotkey.ini</code> (im aktuellen Arbeitsverzeichnis) oder <code><a href="Variables.htm#MyDocuments">%A_MyDocuments%</a>\AutoHotkey.ahk</code>.</p>
      <p><strong>Script-Parameter:</strong> Ein oder mehrere Strings, getrennt durch Leerzeichen, die an das Script &uuml;bergeben werden sollen. Jeder Parameter, der Leerzeichen enth&auml;lt, sollte in Anf&uuml;hrungszeichen gesetzt werden. Soll ein Anf&uuml;hrungszeichen &uuml;bergeben werden, muss ein Backslash davor gesetzt werden (\"). Daraus folgt, dass jeder nachfolgende Schr&auml;gstrich in einem zitierten Parameter (wie <code>"C:\Eigene Dokumente<span class="red">\"</span></code>) als direktes Anf&uuml;hrungszeichen behandelt wird (das hei&szlig;t, dass das Script den String <code>C:\Eigene Dokumente<span class="red">"</span></code> erhalten wird). Um solche Anf&uuml;hrungszeichen zu entfernen, verwende <code><a href="commands/StringReplace.htm">StringReplace</a>, 1, 1, <span class="red">"</span>,, All</code>.</p>
      <p>Das Script sieht eingehende Parameter als <a href="Variables.htm">Variablen</a> %1%, %2% und so weiter. Dar&uuml;ber hinaus enth&auml;lt %0% die Anzahl an  Parametern, die &uuml;bergeben worden sind (0, wenn keine). Allerdings k&ouml;nnen diese Variablen nicht direkt in einem Ausdruck verwiesen werden, weil sie sonst als Zahlen anstatt als Variablen interpretiert werden. Das folgende Beispiel beendet das Script, falls zu wenig Parameter &uuml;bergeben wurden:</p>
      <pre>If 0 &lt; 3  <em>; Die linke Seite einer <a href="commands/IfEqual.htm">If-Anweisung ohne Ausdruck</a> ist immer der Name einer Variable.</em>
{
    MsgBox Das Script ben&ouml;tigt mindestens 3 eingehende Parameter, jedoch kamen nur %0% an.
    ExitApp
}</pre>
      <p>Variiert die Anzahl an &uuml;bergebenen Parametern (wenn der Benutzer zum Beispiel mit der Maus mehrere Dateien auf ein Script zieht und ablegt), kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
      <pre>Loop, %0%  <em>; F&uuml;r jeden Parameter:</em>
{
    param := %A_Index%  <em>; Ruft den Inhalt der Variable ab, deren Name in A_Index enthalten ist.</em>
    MsgBox, 4,, Parameternummer %A_Index% ist %param%. Weiter?
    IfMsgBox, No
        break
}</pre>
      <p>Sind die Parameter Dateinamen, kann das folgende Beispiel verwendet werden, um sie in ihre zeichengenaue lange Namen umzuwandeln (wie im Dateisystem gespeichert), einschlie&szlig;lich des vollst&auml;ndigen/absoluten Pfads:</p>
      <pre>Loop %0%  <em>; F&uuml;r jeden Parameter (oder abgelegte Datei auf ein Script):</em>
{
    Pfadangabe := %A_Index%  <em>; Ruft den Inhalt der Variable ab, deren Name in A_Index enthalten ist.</em>
    Loop %Pfadangabe%, 1
        LangerPfad = %A_LoopFileLongPath%
    MsgBox Der zeichengenaue lange Pfadname der Datei `n%Pfadangabe%`n ist:`n%LangerPfad%
}</pre>
      <p>Bekannte Einschr&auml;nkung: das Ziehen und Ablegen von Dateien auf eine .ahk-Datei kann fehlschlagen, wenn 8.3-Namen (Kurznamen) in einem NTFS-Dateisystem deaktiviert worden sind. Eine M&ouml;glichkeit zur Umgehung des Problems ist es, das Script zu <a href="#ahk2exe">kompilieren</a> und die Dateien dann auf die resultierende EXE-Datei abzulegen.</p>
      <h2 id="cp">Zeichensatz einer Script-Datei <span class="ver">[AHK_L 51+]</span></h2>
      <p>Die Zeichen, die eine Script-Datei enthalten kann, werden vom Zeichensatz (Codepage) eingeschr&auml;nkt, der zum Laden der Datei verwendet wird.</p>
      <ul>
        <li>Beginnt die Datei mit einer UTF-8- oder UTF-16-Bytereihenfolge-Markierung (BOM), wird der entsprechende Zeichensatz verwendet und die <a href="#CPn">/CP<i>n</i></a>-Option ignoriert.</li>
        <li>Wurde die <a href="#CPn">/CP<i>n</i></a>-Option per Befehlszeile &uuml;bergeben, wird der Zeichensatz <i>n</i> verwendet. Eine Liste von g&uuml;ltigen numerischen Zeichensatz-Kennungen findest du bei <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">MSDN</a>.</li>
        <li>Bei allen anderen F&auml;llen wird der voreingestellte ANSI-Zeichensatz vom Betriebssystem verwendet.</li>
      </ul>
      <p>Beachte, dass sich das nur auf Script-Dateien bezieht, die von AutoHotkey geladen werden, nicht auf  die Dateibearbeitung im Script selbst. <a href="commands/FileEncoding.htm">FileEncoding</a> kontrolliert die Standardkodierung von Dateien, die vom Script gelesen oder geschrieben werden. <a href="commands/IniRead.htm">IniRead</a> und <a href="commands/IniWrite.htm">IniWrite</a> verwenden immer UTF-16 oder ANSI.</p>
      <p>Bei  der Umwandlung des gesamten Textes in das <a href="Compat.htm#Format">urspr&uuml;ngliche String-Format</a> (falls erforderlich) werden Zeichen, die ung&uuml;ltig sind oder im urspr&uuml;nglichen Zeichensatz nicht vorkommen, mit einem Fragezeichen ersetzt. In Unicode-Versionen passiert das nur, wenn Kodierungsfehler in der Script-Datei auftreten oder der Zeichensatz, der zum Speichern oder Laden der Datei verwendet wird, nicht passt.</p>
      <p><a href="commands/RegWrite.htm">RegWrite</a> kann verwendet werden, um die Standardeinstellung f&uuml;r Scripts festzulegen, die vom Explorer aus gestartet werden (z. B. per Doppelklick einer Datei):</p>
      <pre><em>; Hebe die Kommentierung der entsprechenden Zeile auf oder lasse sie alle kommentiert,
;   um den Standard der aktuellen Version wiederherzustellen. Je nach Bedarf anpassen:
; Zeichensatz = 0        ; Standard-ANSI-Zeichensatz des Systems
; Zeichensatz = 65001    ; UTF-8
; Zeichensatz = 1200     ; UTF-16
; Zeichensatz = 1252     ; ANSI-Latin-1; Westeurop&auml;isch (Windows)</em>
If (Zeichensatz != "")
    Zeichensatz := " /CP" . Zeichensatz
Befehl="%A_AhkPath%"%Zeichensatz% "`%1" `%*
Schl&uuml;ssel=AutoHotkeyScript\Shell\Open\Command
If A_IsAdmin    <em>; F&uuml;r alle Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCR, %Schl&uuml;ssel%,, %Befehl%
else            <em>; Nur f&uuml;r den aktuellen Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCU, Software\Classes\%Schl&uuml;ssel%,, %Befehl%</pre>
      <p>Das setzt nat&uuml;rlich voraus, dass AutoHotkey bereits installiert worden ist. Ansonsten w&auml;re das Ergebnis alles andere als zufriedenstellend.</p>
      <h2 id="debug">Ein Script debuggen</h2>
      <p>Befehle wie <a href="commands/ListVars.htm">ListVars</a> und <a href="commands/Pause.htm">Pause</a> k&ouml;nnen dir dabei helfen, das Script zu debuggen (von Fehlern zu bereinigen). Zum Beispiel erstellen die folgenden zwei Zeilen "Haltepunkte" bei sorgf&auml;ltig ausgew&auml;hlten Positionen im Script:</p>
      <pre>ListVars<br>Pause</pre>
      <p>Erreicht das Script diese zwei Zeilen, wird es die aktuellen Inhalte von allen Variablen anzeigen, die du dann &uuml;berpr&uuml;fen kannst. Wenn du fertig bist, kannst du das Script fortsetzen, indem du die Pause per Datei- oder Tray-Men&uuml; aufhebst. Das Script wird fortgesetzt, bis es den n&auml;chsten "Haltepunkt" erreicht (sofern vorhanden).</p>
      <p>Am besten sollten diese "Haltepunkte" bei Positionen eingef&uuml;gt werden, bei denen das aktive Fenster egal f&uuml;r das Script ist, wie z. B. unmittelbar vor einem WinActivate-Befehl. Das stellt sicher, dass das Script wieder ordnungsgem&auml;&szlig; fortgesetzt werden kann, sobald du die Pause aufhebst.</p>
      <p>Die folgenden Befehle sind auch f&uuml;rs Debuggen geeignet: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> und <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
      <p>H&auml;ufig auftretende Fehler wie Tippfehler und fehlende Deklarationen von globalen Variablen k&ouml;nnen erkannt werden, indem <a href="commands/_Warn.htm">Warnungen</a> aktiviert werden.</p>
      <h3 id="idebug">Interaktives Debuggen <span class="ver">[AHK_L 11+]</span></h3>
      <p>Interaktives Debuggen ist mit einem unterst&uuml;tzten <a href="AHKL_DBGPClients.htm">DBGp-Client</a> m&ouml;glich. &Uuml;blicherweise sind die folgenden Aktionen m&ouml;glich:</p>
      <ul>
        <li>Haltepunkte auf Zeilen setzen oder entfernen - die Ausf&uuml;hrung beim Erreichen eines <a href="http://en.wikipedia.org/wiki/Breakpoint">Haltepunktes</a> pausieren.</li>
        <li>Den Code zeilenweise durchgehen - Funktionen und Subroutinen betreten, &uuml;berspringen oder verlassen.</li>
        <li>Alle oder eine bestimmte Variable &uuml;berwachen.</li>
        <li>Den Stapel von laufenden Subroutinen und Funktionen anzeigen.</li>
      </ul>
      <p>Beachte, dass diese Funktionalit&auml;t bei kompilierten Scripts deaktiviert ist.</p>
      <p>Um interaktives Debuggen zu aktivieren, starte zuerst einen unterst&uuml;tzten Debugger-Client und f&uuml;hre danach das Script mit der <b>/Debug</b>-Befehlszeilenoption aus.</p>
      <pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
      <p><i>SERVER</i> und <i>PORT</i> k&ouml;nnen weggelassen werden.  Zum Beispiel sind beide Angaben gleichwertig:</p>
      <pre>AutoHotkey /Debug "EigenesScript.ahk"
AutoHotkey /Debug=localhost:9000 "EigenesScript.ahk"</pre>
      <p id="debug_attach"><span class="ver">[AHK_L 59+]:</span> Um den Debugger nachtr&auml;glich mit einem Script zu verbinden, sende ihm eine Nachricht wie folgt:</p>
      <pre>Scriptpfad = <em>; SETZE HIER DEN VOLLST&Auml;NDIGEN PFAD DES SCRIPTS EIN</em>
DetectHiddenWindows On
IfWinExist %Scriptpfad% ahk_class AutoHotkey
    <em>; Optionale Parameter:
    ;   wParam  = IPv4-Adresse des Debugger-Clients als 32-Bit-Integer.
    ;   lParam  = Port, der vom Debugger-Client abgeh&ouml;rt werden soll.</em>
    PostMessage DllCall("RegisterWindowMessage", "Str", "AHK_ATTACH_DEBUGGER")

</pre>
      <p>Ein verbundener Debugger-Client kann wieder getrennt werden, ohne das Script selbst beenden zu m&uuml;ssen, indem der "detach"-Befehl von DBGp gesendet wird.</p>
      <h2 id="port">Portabilit&auml;t von AutoHotkey.exe</h2>
      <p>Es wird nur die Datei AutoHotkey.exe ben&ouml;tigt, um ein beliebiges .ahk-Script zu starten. Die einzige Ausnahme ist Windows NT4, weil es eine Kopie von psapi.dll ben&ouml;tigt, um ein Script starten zu k&ouml;nnen, das  den <a href="commands/Process.htm">Process-Befehl</a> verwendet.</p>
      <p><span class="ver">[AHK_L 51+]:</span> Das Umbenennen von AutoHotkey.exe &auml;ndert auch die Tatsache, welches Script <a href="#defaultfile">standardm&auml;&szlig;ig</a> ausgef&uuml;hrt wird. Diese Methode kann als Alternative zur Script-Kompilierung verwendet werden, um das Script bei einem Computer ausf&uuml;hren zu k&ouml;nnen, auf dem AutoHotkey nicht installiert ist. Zum Beispiel w&uuml;rde <i>EigenesScript</i>.exe automatisch <i>EigenesScript</i>.ahk ausf&uuml;hren, wenn ein Dateiname nicht angegeben ist. Trotzdem kann es weiterhin andere Scripts ausf&uuml;hren.</p>
      <h2 id="install">Installer-Optionen</h2>
      <p>Um AutoHotkey automatisch in das Standardverzeichnis zu installieren (das gleiche Verzeichnis, welches beim normalen Installationsmodus angezeigt wird), &uuml;bergebe den Parameter /S an den Installer. Zum Beispiel:</p>
      <pre>AutoHotkey110800_Install.exe /S</pre>
      <p>Um anstelle des Standardverzeichnisses ein anderes Verzeichnis anzugeben, verwende den /D-Parameter  (l&auml;sst du /S weg, w&uuml;rde /D das Standardverzeichnis &auml;ndern, welches vom Installer angezeigt wird). Zum Beispiel:</p>
      <pre>AutoHotkey110800_Install.exe /S /D=C:\Programme\AutoHotkey</pre>
      <p>Falls AutoHotkey zuvor installiert wurde, erkennt der Installer automatisch, welche Version von AutoHotkey.exe als Standardeinstellung gesetzt werden soll. Ansonsten gilt als Standardeinstellung Unicode 32-Bit oder Unicode 64-Bit, abh&auml;ngig davon, ob das Betriebssystem im 64-Bit-Format ist. M&ouml;chtest du die Standardversion &uuml;berschreiben, &uuml;bergebe einen der folgenden Parameter:</p>
      <ul>
        <li><code>/A32</code> oder <code>/ANSI</code>: ANSI 32-Bit.</li>
        <li><code>/U64</code> oder <code>/x64</code>: Unicode 64-Bit (nur bei 64-Bit-Systemen m&ouml;glich).</li>
        <li><code>/U32</code>: Unicode 32-Bit.</li>
      </ul>
      <p>Das folgende Beispiel installiert AutoHotkey automatisch und setzt ANSI 32-Bit als Standardversion:</p>
      <pre>AutoHotkey110800_Install.exe /S /A32</pre>
      <p>Um AutoHotkey automatisch zu deinstallieren, &uuml;bergebe den Parameter <code>/Uninstall</code> an Installer.ahk. Zum Beispiel:</p>
      <pre>"C:\Programme\AutoHotkey\AutoHotkey.exe" "C:\Programme\AutoHotkey\Installer.ahk" /Uninstall</pre>
      <p>In Versionen &auml;lter als 1.1.08.00 muss du <code>uninst.exe /S</code> verwenden. Zum Beispiel:</p>
      <pre>"C:\Programme\AutoHotkey\uninst.exe" /S</pre>
      <p><strong>Hinweis:</strong> Installer.ahk muss mit Administratorrechten ausgef&uuml;hrt werden, um richtig funktionieren zu k&ouml;nnen.</p>
      <p>In den neueren Versionen des Installers befindet sich an der unteren rechten Ecke ein Link, mit dem man die Setup-Dateien ohne Installation extrahieren kann. Ist diese Funktion vorhanden, kann man den Parameter <code>/E</code> angeben, um sie &uuml;ber die Kommandozeile aufrufen zu k&ouml;nnen. Zum Beispiel:</p>
      <pre>AutoHotkey110903_Install.exe /D=F:\AutoHotkey /E</pre>
      <h2>Script-Beispiele</h2>
      <p>Auf <a href="scripts/">dieser Seite</a> kannst du einige n&uuml;tzliche Scripts finden.</p>
    </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(0);</script>
</body>
</html>