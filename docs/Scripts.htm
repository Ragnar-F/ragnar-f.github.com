<!DOCTYPE HTML>
<html>
<head>
<title>AutoHotkey Scripts und Makros</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/jquery.js" type="text/javascript"></script>
<script src="static/tree.jquery.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Scripts</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung</a></li>
  <li><a href="#auto">Der obere Bereich des Scripts (automatischer Ausführungsbereich)</a>: Dieser Bereich wird beim Starten des Scripts automatisch ausgeführt.</li>
  <li><a href="#esc">Escapesequenzen</a>: Wann `% und `, verwendet werden sollen, um ein literales Prozentzeichen oder Komma darstellen zu können.</li>
  <li><a href="#Comments">Kommentare in einem Script</a>: Wie das Semikolon und die Symbole /*...*/ verwendet werden, um Bemerkungen zu einem Script hinzuzufügen.</li>
  <li><a href="#continuation">Eine lange Zeile in mehreren kurzen Zeilen aufteilen</a>: Verbessert die Lesbarkeit und Wartbarkeit eines Scripts.</li>
  <li><a href="#ahk2exe">Ein Script in eine EXE-Datei umwandeln (ahk2exe)</a>: Ein .ahk-Script in eine .exe-Datei umwandeln, die auf jedem PC ausgeführt werden kann.</li>
  <li><a href="#cmd">Befehlszeilenparameter an einem Script übergeben</a>: Die Variablen %1%, %2% usw. enthalten die eingehenden Parameter.</li>
  <li><a href="#cp">Zeichensatz einer Script-Datei</a>: Nicht-ASCII-Zeichen sicher in Scripts verwenden.</li>
  <li><a href="#debug">Ein Script debuggen</a>: Wie die Fehler eines Scripts gefunden werden können, das sich falsch verhält.</li>
  <li><a href="#port">Portabilität von AutoHotkey.exe</a>: Eine Kopie von AutoHotkey.exe reicht aus, um jede .ahk-Datei ausführen zu können.</li>
  <li><a href="#install">Installer-Optionen</a>: Wie unbeaufsichtigte/automatische Installationen oder Deinstallationen durchgeführt werden können.</li>
</ul>
<h2 id="intro">Einführung</h2>
<p>Ein Script ist eine reine Textdatei mit mehreren Zeilen, die vom Programm (AutoHotkey.exe) ausgeführt werden. Ein Script kann auch <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten, oder sogar nur aus diesen bestehen. Allerdings wird ein Script ohne Hotkeys und Hotstrings seine Befehle von oben nach unten nacheinander ausführen, sobald es gestartet wird.</p>
<p>Das Programm lädt das Script zeilenweise in den Speicher. Jede Zeile kann bis zu 16.383 Zeichen lang sein. Während des Ladevorgangs wird das Script <a href="misc/Performance.htm">optimiert</a> und überprüft, ob es gültig ist. Syntaxfehler werden angezeigt, und müssen behoben werden, bevor das Script ausgeführt werden kann.</p>
<h2><a name="auto" id="auto"></a>Der obere Bereich des Scripts (automatischer Ausführungsbereich)</h2>
<p>Nachdem das Script geladen wurde, beginnt dessen Ausführung bei der ersten Zeile und wird fortgesetzt, bis ein <a href="commands/Return.htm">Return</a>, <a href="commands/Exit.htm">Exit</a>, <a href="Hotkeys.htm">Hotkey-/Hotstring-Label</a> oder das physische Ende erreicht wird (je nachdem was zuerst kommt). Dieser obere Bereich des Scripts wird auch als <em>automatischer Ausführungsbereich</em> bezeichnet.</p>
<p>Ein Script, das weder <a href="commands/_Persistent.htm">persistent</a> noch <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/OnMessage.htm">OnMessage</a> und <a href="commands/Gui.htm">GUI</a> enthält, wird beendet, sobald der automatische Ausführungsbereich durchgeführt wurde. Ansonsten läuft es im Leerlauf und reagiert auf Ereignisse wie Hotkeys, Hotstrings, <a href="commands/Gui.htm#label">GUI-Ereignisse</a>, <a href="commands/Menu.htm">benutzerdefinierte Menüpunkte</a> und <a href="commands/SetTimer.htm">Timer</a>.</p>
<p>Jeder <a href="misc/Threads.htm">Thread</a>, der durch <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/Menu.htm">Menüpunkte</a>, <a href="commands/Gui.htm#label">GUI-Ereignisse</a> oder <a href="commands/SetTimer.htm">Timer</a> gestartet wird, beginnt mit Standardwerten von den folgenden Attributen, die im automatischen Ausführungsbereich bestimmt wurden. Bei unbestimmten Attributen gelten die Standardeinstellungen (wie jeweils in den folgenden Seiten dokumentiert): <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>, <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="commands/SetBatchLines.htm">SetBatchLines</a>, <a href="commands/SendMode.htm">SendMode</a>, <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>, <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>, <a href="commands/SetWinDelay.htm">SetWinDelay</a>, <a href="commands/SetControlDelay.htm">SetControlDelay</a>, <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="commands/CoordMode.htm">CoordMode</a>, <a href="commands/SetStoreCapslockMode.htm">SetStoreCapslockMode</a>, <a href="commands/AutoTrim.htm">AutoTrim</a>, <a href="commands/SetFormat.htm">SetFormat</a>, <a href="commands/StringCaseSense.htm">StringCaseSense</a>, <a href="commands/Thread.htm">Thread</a>, und <a href="commands/Critical.htm">Critical</a>.</p>
<p>Falls das Ausführen des automatischen Ausführungsbereichs zu lange dauert (oder nie das Ende erreicht), werden die Standardwerte der oben genannten Einstellungen nach 100 Millisekunden automatisch wirksam. Wenn das Ende des automatischen Ausführungsbereichs schließlich erreicht ist (wenn überhaupt), werden die Standardwerte nochmals auf die aktuellen Werte aktualisiert. Daher ist es besser, die Standardeinstellungen im oberen Bereich des Scripts zu ändern, das <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/SetTimer.htm">Timer</a> oder <a href="commands/Menu.htm">benutzerdefinierte Menüpunkte</a> enthält. Beachte außerdem, dass jeder <a href="misc/Threads.htm">Thread</a> seine eigene Sammlung von den oben genannten Einstellungen aufbewahrt. Änderungen an diesen Einstellungen beeinflussen keine anderen <a href="misc/Threads.htm">Threads</a>.</p>
<h2 id="esc">Escapesequenzen</h2>
<p>Das Standard-<a href="commands/_EscapeChar.htm">Escapezeichen</a> von AutoHotkey ist ein Akzent / umgekehrtes Häkchen (`), das sich auf der deutschen Tastatur direkt links neben der Rücktaste befindet. Das Benutzen dieses Zeichens statt eines umgekehrten Schrägstrichs verhindert, dass zwei umgekehrte Schrägstriche in Dateipfaden angegeben werden müssen.</p>
<p>Da Kommas und Prozentzeichen eine besondere Bedeutung in der AutoHotkey-Sprache haben, sollte man <code>`,</code> oder <code>`%</code> angeben, um diese literal verwenden zu können. Bei einem <a href="commands/MsgBox.htm">MsgBox</a>-Befehl müssen Kommas nicht mit einem Escapezeichen versehen werden. Eine weitere Ausnahme sind Kommas innerhalb des letzten Parameters eines Befehls: diese müssen nicht mit einem Escapezeichen versehen werden. Auf der <a href="commands/_EscapeChar.htm">#EscapeChar</a>-Seite findet man eine komplette Liste von Escapesequenzen.</p>
<p>Einige Sonderzeichen können nur in Form einer Escapesequenz erzeugt werden. Häufig verwendet werden <code>`t</code> (Tabulator), <code>`n</code> (LF-Zeilenumbruchszeichen) und <code>`r</code> (CR-Zeilenumbruchszeichen).</p>
<p>Tipp: Bei jedem Befehl kann man das erste Komma weglassen (außer wenn der erste Parameter leer ist oder mit := oder = beginnt, oder wenn der Befehl am Anfang eines <a href="#continuation">Fortsetzungsbereichs</a> einzeln vorkommt). Zum Beispiel:</p>
<pre>MsgBox Das ist ok.
MsgBox<strong>,</strong> Das ist auch ok (es hat ein direktes Komma).</pre>
<h2 id="Comments">Kommentare in einem Script</h2>
<p>Scripts können kommentiert werden, indem man am Anfang einer Zeile ein Semikolon verwendet. Zum Beispiel:</p>
<pre><em>; Diese ganze Zeile ist ein Kommentar.</em></pre>
<p>Kommentare können auch ans Ende eines Befehls gesetzt werden. Dabei ist zu beachten, dass auf der linken Seite des Semikolons mindestens ein Leer- oder Tabulatorzeichen vorkommen muss. Zum Beispiel:</p>
<pre>Run Notepad  <em>; Dieser Kommentar befindet sich neben dem Befehl.</em></pre>
<p>Darüber hinaus können die Symbole /* und */ verwendet werden, um einen ganzen Bereich auszukommentieren, <em>aber nur, wenn sich die Symbole am Zeilenanfang befinden</em>. Zum Beispiel:</p>
<pre><em>/*
MsgBox, Diese Zeile wurde auskommentiert (deaktiviert).
MsgBox, Diese auch. 
*/</em></pre>
<p>Da Kommentare beim Starten eines Scripts ignoriert werden, haben sie keinen Einfluss auf die Performance oder Speicherauslastung.</p>
<p>Das voreingestellte Kommentarzeichen (Semikolon) kann per <a href="commands/_CommentFlag.htm">#CommentFlag</a> in ein anderes Zeichen oder anderen String geändert werden.</p>
<h2 id="continuation">Eine lange Zeile in mehreren kurzen Zeilen aufteilen</h2>
<p>Lange Zeilen können in mehreren kurzen Zeilen aufgeteilt werden, um sie besser lesbar und verwaltbar zu machen. Die Ausführungsgeschwindigkeit des Scripts wird dabei nicht reduziert, weil solche Zeilen im Speicher zusammengeführt werden, bevor das Script startet.</p>
<p><strong>Methode #1</strong>: Eine Zeile, die mit "and", "or", ||, &amp;&amp;, einem Komma oder einem <a href="Variables.htm#concat">Punkt</a> beginnt, wird automatisch mit der oberen Zeile zusammengeführt (seit v1.0.46 gilt das auch für <a href="Variables.htm#Operators">Ausdrucksoperatoren</a>, außer ++ und --). Im folgenden Beispiel wird die zweite Zeile an der ersten angefügt, weil sie mit einem Komma beginnt:</p>
<pre>FileAppend, Das ist der Text, der angefügt wird.`n   <em>; Kommentar hier möglich.</em>
    <strong>,</strong> %A_ProgramFiles%\BeliebigeAnwendung\Log-Datei.txt  <em>; Kommentar.</em></pre>
<p>Die folgenden Zeilen würden auch zu einer einzelnen Zeile zusammengeführt werden, weil die letzten beiden mit "and" oder "or" beginnen:</p>
<pre>if (Farbe = "Rot" or Farbe = "Grün" or Farbe = "Blau"   <em>; Kommentar.</em>
    <strong>or</strong> Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Weiß")   <em>; Kommentar.</em>
    <strong>and</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)   <em>; Kommentar.</em></pre>
<p>Der <a href="Variables.htm#ternary">ternäre Operator</a> ist dafür auch gut geeignet:</p>
<pre>ProduktIstVerfügbar := (Farbe = "Rot")
    <strong>?</strong> false  <em>; Rote Produkte nicht verfügbar, daher ist der Funktionsaufruf irrelevant.</em>
    <strong>:</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)</pre>
<p>Die Einrückungen in den oberen Beispielen sind optional. Sie machen deutlich, welche Zeilen zusammengehören. Außerdem ist es unnötig, zusätzliche Leerzeichen bei Zeilen einzufügen, die mit den Wörtern "AND" und "OR" beginnen; das Programm macht das automatisch. In den oberen Beispielen könnte man zwischen oder nach den Zeilen auch leere Zeilen oder <a href="#Comments">Kommentare</a> einfügen.</p>
<p><strong>Methode #2</strong>: Diese Methode sollte verwendet werden, um eine große Anzahl an Zeilen zusammenzuführen oder wenn die Zeilen nicht für Methode #1 geeignet sind. Obwohl diese Methode besonders für <a href="Hotstrings.htm">einzeilige Hotstrings</a> nützlich ist, kann sie auch bei jedem Befehl oder <a href="Variables.htm#Expressions">Ausdruck</a> verwendet werden. Zum Beispiel:</p>
<pre><em>; BEISPIEL #1:</em>
Var =
(
Zeile 1 vom Text.
Zeile 2 vom Text. Standardmäßig befindet sich ein Zeilenumbruchszeichen (`n) zwischen den Zeilen.
)

<em>; BEISPIEL #2:</em>
FileAppend<strong>,</strong>  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
Eine Textzeile.
<i>Standardmäßig</i> wird das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile als LF-Zeichen (`n) in die Datei geschrieben.
    <i>Standardmäßig</i> wird der Tabulator auf der linken Seite dieser Zeile auch in die Datei geschrieben (das gleiche gilt auch für Leerzeichen).
<i>Standardmäßig</i> werden Variablenverweise wie %Var% in den Variableninhalt aufgelöst.
), C:\Meine Datei.txt</pre>
<p>In den oberen Beispielen sind mehrere Zeilen mit Klammern am Anfang und Ende eingegrenzt. Das nennt man <em>Fortsetzungsbereich</em>. Beachte, dass die Zeile nach der schließenden Klammer den letzten Parameter von <a href="commands/FileAppend.htm">FileAppend</a> enthält. Diese Anwendungsart ist optional; das wird in solchen Fällen getan, um das Komma nicht als literales Komma, sondern als Parametertrennung zu behandeln.</p>
<p>Das Standardverhalten eines Fortsetzungsbereichs kann überschrieben werden, indem man eine oder mehrere der folgenden Optionen auf der rechten Seite der öffnenden Klammer einfügt. Sind mehrere Optionen notwendig, trenne sie jeweils mit einem Leerzeichen. Zum Beispiel: <code>( LTrim Join| %</code>.</p>
<p><strong><a name="Join"></a>Join</strong>: Gibt an, wie die Zeilen verbunden werden sollen. Ist diese Option nicht vorhanden, erfolgt nach jeder Zeile, außer der letzten, ein Zeilenumbruchszeichen (`n). Ist das Wort <em>Join</em> alleine angegeben, werden die Zeilen direkt verbunden, ohne das Zeichen dazwischen vorkommen. Ansonsten können unmittelbar nach dem Wort <em>Join</em> bis zu 15 Zeichen erfolgen. Zum Beispiel würde <code>Join`s</code> nach jeder Zeile, außer der letzten, ein Leerzeichen einfügen ("`s" kennzeichnet ein literales Leerzeichen - eine spezielle Escapesequenz, die nur von <em>Join</em> erkannt werden kann). Ein weiteres Beispiel ist <code>Join`r`n</code>, das das Zeilenumbruchspaar CR+LF zwischen den Zeilen einfügt. Ebenso würde <code>Join|</code> einen senkrechten Strich zwischen den Zeilen eingefügen. Falls die letzte Zeile auch mit einem Join-String enden soll, muss man unmittelbar über der schließenden Klammer des Bereichs eine leere Zeile einfügen.</p>
<p><strong><a name="LTrim"></a>LTrim</strong>: Entfernt Leer- und Tabulatorzeichen am Anfang jeder Zeile. Diese Option wird hauptsächlich verwendet, damit der Fortsetzungsbereich eingerückt werden kann. Außerdem kann diese Option für mehrere Fortsetzungsbereiche aktiviert werden, wenn <code>#LTrim</code> allein auf einer Zeile angegeben wird. <code>#LTrim</code> ist von der Position abhängig: es beeinflusst nur Fortsetzungsbereiche, die sich darunter befinden. Die Einstellung kann per <code>#LTrim Off</code> wieder deaktiviert werden.</p>
<p><strong>RTrim0</strong> (RTrim und eine 0): Deaktiviert das Entfernen von Leer- und Tabulatorzeichen am Ende jeder Zeile.</p>
<p><strong><a name="CommentOption"></a>Comments</strong> (oder <strong>Comment</strong> oder <strong>Com</strong> oder <strong>C</strong>) <span class="ver">[v1.0.45.03+]</span>: Ermöglicht <a href="#Comments">Semikolon-Kommentare</a> innerhalb des Fortsetzungsbereichs (aber nicht <code>/*..*/</code>). Solche Kommentare (sowie alle links vorkommenden Leer- und Tabulatorzeichen) werden im Endergebnis entfernt, anstatt als literaler Text behandelt zu werden. Jeder Kommentar kann auf der rechten Seite einer Zeile oder auf einer neuen Zeile vorkommen.</p>
<p><strong>%</strong> (Prozentzeichen): Behandelt Prozentzeichen nicht als Variablenverweise, sondern als literale Zeichen. Dadurch wird verhindert, dass jedes einzelne Prozentzeichen mit einem <a href="commands/_EscapeChar.htm">Escapezeichen</a> versehen werden muss. Diese Option ist dort unnötig, wo Prozentzeichen bereits literal vorkommen können, wie bei <a href="Hotstrings.htm">einzeiligen Hotstrings</a>.</p>
<p><strong>,</strong> (Komma): Behandelt Kommas nicht als literale Kommas, sondern als Trennzeichen. Diese selten verwendete Option ist nur für Kommas notwendig, die zwischen den Befehlsparametern vorkommen, weil bei <a href="Functions.htm">Funktionsaufrufen</a> der Typ des Kommas egal ist. Zudem transformiert diese Option nur solche Kommas, die Parameter tatsächlich trennen. Das heißt, sobald der letzte Parameter des Befehls erreicht wird (oder keine Parameter vorhanden sind), werden nachfolgende Kommas als literale Kommas behandelt, unabhängig von dieser Option.</p>
<p><a name="accent"></a><strong>`</strong> (umgekehrtes Häkchen): Behandelt jedes umgekehrte Häkchen nicht als <a href="commands/_EscapeChar.htm">Escapezeichen</a>, sondern als literales Zeichen. Dadurch wird auch verhindert, dass Kommas und Prozentzeichen explizit und einzeln mit einem Escapezeichen versehen werden können. Darüber hinaus unterdrückt diese Option die Umwandlung von explizit angegebenen Escapesequenzen wie `r und `t.</p>
<p><a name="non-continuation"></a><strong>)</strong> <span class="ver">[v1.1.01+]</span>: Erscheint eine schließende Klammer in den Optionen des Fortsetzungsbereichs (außer als Parameter der <a href="#Join">Join</a>-Option), wird die Zeile als Ausdruck neu interpretiert, anstatt als Beginn eines Fortsetzungsbereichs. Das ermöglicht Ausdrücke wie <code>(x.y)[z]()</code>, ohne dabei die öffnende Klammer mit einem Escapezeichen versehen zu müssen.</p>
<p><u>Bemerkungen</u></p>
<p><a href="commands/_EscapeChar.htm">Escapesequenzen</a> wie `n (Zeilenumbruch) und `t (Tabulator) werden innerhalb des Fortsetzungsbereichs unterstützt, solange die <a href="#accent">Akzent-Option (`)</a> nicht vorhanden ist.</p>
<p>Fehlt die <a href="#CommentOption">Comment-Option</a>, werden Semikolon- und /*..*/-Kommentare innerhalb eines Fortsetzungsbereichs nicht unterstützt, weil sie als literaler Text angesehen werden. Allerdings können Kommentare in den unteren und oberen Zeilen des Bereichs eingefügt werden. Zum Beispiel:</p>
<pre>FileAppend<strong>,</strong>   <em>; Kommentar.
; Kommentar.</em>
( LTrim Join    <em>; Kommentar.</em>
     ; Das ist <strong>kein</strong> Kommentar; es ist literal. Fügt das Wort <i>Comments</i> in der Zeile darüber ein, damit es ein Kommentar wird.
), C:\Datei.txt   <em>; Kommentar.</em></pre>
<p>Daraus folgt, dass Semikolons innerhalb eines Fortsetzungsbereichs nie mit einem <a href="commands/_EscapeChar.htm">Escapezeichen</a> versehen werden müssen.</p>
<p>Ein Fortsetzungsbereich kann keine Zeile erzeugen, deren Länge 16.383 Zeichen überschreitet (Bei dem Versuch warnt dich das Programm, bevor es startet). Man kann das umgehen, wenn mehrere Verkettungen bei einer Variable durchgeführt werden. Zum Beispiel:</p>
<pre>Var =
(
...
)
Var = %Var%`n  <em>; Fügt mithilfe eines weiteren Fortsetzungsbereichs mehr Text hinzu.</em>
(
...
)
FileAppend, %Var%, C:\Meine Datei.txt</pre>
<p>Soll eine Zeile mit einer literalen schließenden Klammer beginnen, obwohl sie normalerweise das Ende eines Fortsetzungsbereichs kennzeichnet, muss man ein Akzent / umgekehrtes Häkchen davor setzen: <code>`)</code>.</p>
<p>Nach einem Fortsetzungsbereich kann eine Zeile erfolgen, die die öffnenden Klammer eines weiteren Fortsetzungsbereichs enthält. Dadurch können die oben genannten Optionen beim Erstellen einer einzelnen Zeile variieren.</p>
<p>Die stückweise Konstruktion eines Fortsetzungsbereichs per <a href="commands/_Include.htm">#Include</a> wird nicht unterstützt.</p>
<h2 id="ahk2exe">Ein Script in eine EXE-Datei umwandeln (ahk2exe)</h2>
<p>Ein Script-Compiler wurde dem Programm beigefügt (zur Verfügung gestellt von fincs).</p>
<p>Ein Script, das kompiliert wurde, wird zu einer eigenständigen ausführbaren Datei; das heißt, dass das Script von Benutzern verwendet werden kann, die kein AutoHotkey installiert haben (solche EXE-Dateien können ohne Einschränkungen weitergegeben oder verkauft werden). Der Kompilierungsvorgang erstellt eine ausführbare Datei, die folgendes enthält: den AutoHotkey-Interpreter, das Script, Dateien per <a href="commands/_Include.htm">#Include</a> und Dateien per <a href="commands/FileInstall.htm">FileInstall</a>.</p>
<p>Ahk2Exe kann wie folgt verwendet werden:</p>
<ol>
  <li><strong>GUI-Schnittstelle</strong>: Führe die Verknüpfung "Convert .ahk to .exe" im Startmenü aus.</li>
  <li><strong>Rechtsklick</strong>: Klicke mit der rechten Maustaste auf eine .ahk-Datei und wähle "Compile Script" aus (nur verfügbar, wenn die Option "Script Compiler" bei der Installation von AutoHotkey ausgewählt worden ist). Das erstellt eine EXE-Datei mit dem gleichen Basisnamen wie das Script, die nach kurzer Zeit im selben Verzeichnis erscheint. Hinweis: Die erstellte EXE-Datei verwendet das gleiche Icon, die gleiche .bin-Datei und die MPRESS-Einstellung, die zuletzt von Methode #1 verwendet worden sind.</li>
  <li><a name="ahk2exeCmd"></a><strong>Befehlszeile</strong>: Der Compiler kann mit folgenden Parametern von der Befehlszeile ausgeführt werden:
  <pre>Ahk2Exe.exe /in Script.ahk [/out Script.exe] [/icon Icon.ico] [/bin AutoHotkeySC.bin] [/mpress 0oder1]</pre>
  Zum Beispiel:
<pre>Ahk2exe.exe /in "Script.ahk" /icon "Icon.ico"</pre>
Verwendung:
<ul>
<li>Parameter, die Leerzeichen enthalten, sollten in Anführungszeichen gesetzt werden.</li>
<li>Ist der out-Parameter nicht vorhanden, wird die EXE-Datei den gleichen Basisnamen wie das Script haben.</li>
</ul></li>
</ol>
<p>Hinweise:</p>
<ul>
  <li>Die Kompilierung verbessert üblicherweise nicht die Performance des Scripts.</li>
  <li>Seit v1.1.01 wird Passwortschutz und /NoDecompile nicht mehr unterstützt.</li>
  <li>Wenn <a href="http://www.matcode.com/mpress.htm">mpress.exe</a> im Unterordner "Compiler" vorhanden ist, wo AutoHotkey installiert wurde, wird die EXE-Datei komprimiert, sofern das nicht per <code>/mpress 0</code> oder GUI-Einstellung deaktiviert wurde. Dabei wird auch der Quellcode des Scripts komprimiert (ohne Kommentare), der ansonsten mithilfe eines PE-Ressource-Editors aus der EXE-Datei extrahiert werden kann.</li>
  <li>Die Befehle <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> und "<a href="commands/Menu.htm">Menu, Tray, ShowMainWindow</a>" beeinflussen das Verhalten von kompilierten Scripts.</li>
  <li>Die Versionsinformation eines kompilierten Scripts (die im Eigenschaftsfenster des Explorers angezeigt wird) kann je nach Bedarf angepasst werden, wenn die Datei "AutoHotkeySC.bin" mithilfe des Freeware-Programms "Resource Hacker" bearbeitet wird. Diese Datei befindet sich im Unterordner "Compiler". <a href="http://www.autohotkey.com/forum/topic22975.html">Compile_AHK II</a> kann verwendet werden, um diesen Vorgang zu erleichtern. Seit v1.1.01 ist es möglich, das kompilierte Script anstelle von AutoHotkeySC.bin zu bearbeiten.</li>
  <li>Die oben genannte Methode kann auch dazu verwendet werden, bei einem kompilierten Script vorhandene Icons zu ändern oder neue Icons hinzuzufügen.</li>
  <li>Die integrierte Variable A_IsCompiled enthält eine 1, falls das Script in kompilierter Form ausgeführt wird. Ansonsten ist sie leer.</li>
  <li>Bei der Übergabe von Parametern an Ahk2Exe wird eine Meldung in der Standardausgabe (stdout) geschrieben, die den Erfolg oder Misserfolg des Kompilierungsvorgangs näher bringt. Diese Meldung wird nicht in der Eingabeaufforderung angezeigt. Allerdings kann sie "abgefangen" werden, wenn die Ausgabe beispielsweise an eine Datei weitergeleitet wird. <span class="ver">[v1.0.43+]</span></li>
</ul>
<p>Der Quellcode sowie neuere Versionen des Compilers findet man auf <a href="https://github.com/fincs/Ahk2Exe">GitHub</a>.</p>

<h2 id="cmd">Befehlszeilenparameter an einem Script übergeben</h2>
<p>Scripts unterstützen Befehlszeilenparameter. Das Format ist:</p>
<pre>AutoHotkey.exe [<i>Optionen</i>] [<i>Script-Dateiname</i>] [<i>Script-Parameter</i>]</pre>
<p>Bei kompilierten Scripts ist das Format:</p>
<pre>KompiliertesScript.exe [<i>Optionen</i>] [<i>Script-Parameter</i>]</pre>
<p><strong>Optionen</strong> kann die folgenden Begriffe enthalten (oder leer bleiben): <br>
/f oder /force -- Script bedingungslos starten und Warnmeldungen überspringen. <br>
/r oder /restart -- Gibt an, dass das Script neu gestartet werden soll (das auch intern vom <a href="commands/Reload.htm">Reload</a>-Befehl verwendet wird).<br>
/ErrorStdOut -- Sendet Syntaxfehler, die das Starten eines Scripts verhindert haben, zur Standardausgabe (stdout), anstatt ein Dialogfenster anzuzeigen. Siehe <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a> für weitere Details.<br>
/Debug -- <span class="ver">[AHK_L 11+]:</span> Verbindet sich mit einem Debugger-Client. Für weitere Details, siehe <a href="#idebug">Interaktives Debuggen</a>.<br>
<a name="CPn"></a>/CP<i>n</i> -- <span class="ver">[AHK_L 51+]:</span> Überschreibt den Standard-Zeichensatz, der zum Lesen der Script-Dateien verwendet wird. Weitere Details findet man in "<a href="#cp">Zeichensatz einer Script-Datei</a>".</p>
<p><a name="defaultfile"></a><strong>Script-Dateiname</strong>: Dieser Parameter kann weggelassen werden, falls keine <em>Script-Parameter</em> vorhanden sind. Ist dieser Parameter nicht vorhanden, wird das Programm eine Datei auf einer der folgenden Standorte ausführen (oder bei Nachfrage erstellen):</p>
<p><span class="ver">[AHK_L 51+]:</span> <code>%AhkExeDir%\%AhkExeName%.ahk</code> oder <code><a href="Variables.htm#MyDocuments">%A_MyDocuments%</a>\%AhkExeName%.ahk</code>, bei denen <em>%AhkExeDir%</em> und <em>%AhkExeName%</em> mit dem Verzeichnis und Dateinamen der ausführbaren Datei ohne ".exe" ersetzt wird, die zum Ausführen des Scripts benötigt werden.</p>
<p><span class="ver">[Frühere Versionen]:</span> <code>AutoHotkey.ini</code> (im aktuellen Arbeitsverzeichnis) oder <code><a href="Variables.htm#MyDocuments">%A_MyDocuments%</a>\AutoHotkey.ahk</code>.</p>
<p><strong>Script-Parameter</strong>: Ein oder mehrere Strings, getrennt durch Leerzeichen, die an das Script übergeben werden sollen. Jeder Parameter, der Leerzeichen enthält, sollte in Anführungszeichen gesetzt werden. Soll ein Anführungszeichen übergeben werden, muss ein literaler umgekehrter Schrägstrich davor gesetzt werden (\"). Daraus folgt, dass jeder nachfolgende Schrägstrich in einem zitierten Parameter (wie "C:\Meine Dokumente<span class="red">\"</span>) als literales Anführungszeichen behandelt wird (das heißt, dass das Script den String C:\Meine Dokumente<span class="red">"</span> erhalten wird). Um solche Anführungszeichen zu entfernen, verwende <code><a href="commands/StringReplace.htm">StringReplace, 1, 1, <span class="red">"</span>,, All</a></code>.</p>
<p>Das Script sieht eingehende Parameter als <a href="Variables.htm">Variablen</a> %1%, %2% und so weiter. Darüber hinaus enthält %0% die Anzahl an Parametern, die übergeben worden sind (0, wenn keine). Allerdings können diese Variablen nicht direkt in einem Ausdruck verwiesen werden, weil sie sonst als Zahlen anstatt als Variablen interpretiert werden. Das folgende Beispiel beendet das Script, falls zu wenig Parameter übergeben wurden:</p>
<pre>if 0 &lt; 3  <em>; Die linke Seite einer <a href="commands/IfEqual.htm">if-Anweisung ohne Ausdruck</a> ist immer der Name einer Variable.</em>
{
    MsgBox Das Script benötigt mindestens 3 eingehende Parameter, jedoch kamen nur %0% an.
    ExitApp
}</pre>
<p>Variiert die Anzahl an übergebenen Parametern (wenn der Benutzer zum Beispiel mit der Maus mehrere Dateien auf ein Script zieht und ablegt), kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
<pre>Loop, %0%  <em>; Für jeden Parameter:</em>
{
    param := %A_Index%  <em>; Ruft den Inhalt der Variable ab, deren Name in A_Index enthalten ist.</em>
    MsgBox, 4,, Parameternummer %A_Index% ist %param%.  Weiter?
    IfMsgBox, No
        break
}</pre>
<p>Sind die Parameter Dateinamen, kann das folgende Beispiel verwendet werden, um sie in ihre zeichengenaue lange Namen umzuwandeln (wie im Dateisystem gespeichert), einschließlich des vollständigen/absoluten Pfads:</p>
<pre>Loop %0%  <em>; Für jeden Parameter (oder abgelegte Datei auf ein Script):</em>
{
    Pfadangabe := %A_Index%  <em>; Ruft den Inhalt der Variable ab, deren Name in A_Index enthalten ist.</em>
    Loop %Pfadangabe%, 1
        LangerPfad = %A_LoopFileLongPath%
    MsgBox Der zeichengenaue lange Pfadname der Datei `n%Pfadangabe%`n ist:`n%LangerPfad%
}</pre>
<p>Bekannte Einschränkung: das Ziehen und Ablegen von Dateien auf eine .ahk-Datei kann fehlschlagen, wenn 8.3-Namen (Kurznamen) in einem NTFS-Dateisystem deaktiviert worden sind. Eine Möglichkeit zur Umgehung des Problems ist es, das Script zu <a href="#ahk2exe">kompilieren</a> und die Dateien dann auf die resultierende EXE-Datei abzulegen.</p>

<h2 id="cp">Zeichensatz einer Script-Datei <span class="ver">[AHK_L 51+]</span></h2>
<p>Die Zeichen, die eine Script-Datei enthalten kann, werden vom Zeichensatz (Codepage) eingeschränkt, der zum Laden der Datei verwendet wird.</p>
<ul>
  <li>Beginnt die Datei mit einer UTF-8- oder UTF-16-Bytereihenfolge-Markierung (BOM), wird der entsprechende Zeichensatz verwendet und die <a href="#CPn">/CP<i>n</i></a>-Option ignoriert.</li>
  <li>Wurde die <a href="#CPn">/CP<i>n</i></a>-Option per Befehlszeile übergeben, wird der Zeichensatz <i>n</i> verwendet. Eine Liste von gültigen numerischen Zeichensatz-Kennungen findet man bei <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">MSDN</a>.</li>
  <li>Bei allen anderen Fällen wird der voreingestellte ANSI-Zeichensatz vom Betriebssystem verwendet.</li>
</ul>
<p>Beachte, dass sich das nur auf Script-Dateien bezieht, die von AutoHotkey geladen werden, nicht auf die Dateibearbeitung im Script selbst. <a href="commands/FileEncoding.htm">FileEncoding</a> kontrolliert die Standardcodierung von Dateien, die vom Script gelesen oder geschrieben werden. <a href="commands/IniRead.htm">IniRead</a> und <a href="commands/IniWrite.htm">IniWrite</a> verwenden immer UTF-16 oder ANSI.</p>
<p>Bei der Umwandlung des gesamten Textes in das <a href="Compat.htm#Format">ursprüngliche String-Format</a> (falls erforderlich) werden Zeichen, die ungültig sind oder im ursprünglichen Zeichensatz nicht vorkommen, mit einem Fragezeichen ersetzt. In Unicode-Builds passiert das nur, wenn Codierungsfehler in der Script-Datei auftreten oder der Zeichensatz, der zum Speichern oder Laden der Datei verwendet wird, nicht passt.</p>
<p><a href="commands/RegWrite.htm">RegWrite</a> kann verwendet werden, um die Standardeinstellung für Scripts festzulegen, die vom Explorer aus gestartet werden (z. B. per Doppelklick einer Datei):</p>
<pre><em>; Hebe die Kommentierung der entsprechenden Zeile auf oder lasse sie alle kommentiert,
;   um den Standard des aktuellen Builds wiederherzustellen.  Je nach Bedarf anpassen:
; Zeichensatz = 0        ; Standard-ANSI-Zeichensatz des Systems
; Zeichensatz = 65001    ; UTF-8
; Zeichensatz = 1200     ; UTF-16
; Zeichensatz = 1252     ; ANSI-Latin-1; Westeuropäisch (Windows)</em>
if (Zeichensatz != "")
    Zeichensatz := " /CP" . Zeichensatz
Befehl="%A_AhkPath%"%Zeichensatz% "`%1" `%*
Schlüssel=AutoHotkeyScript\Shell\Open\Command
if A_IsAdmin    <em>; Für alle Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCR, %Schlüssel%,, %Befehl%
else            <em>; Nur für den aktuellen Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCU, Software\Classes\%Schlüssel%,, %Befehl%</pre>
<p>Das setzt natürlich voraus, dass AutoHotkey bereits installiert worden ist. Ansonsten wäre das Ergebnis alles andere als zufriedenstellend.</p>

<h2 id="debug">Ein Script debuggen</h2>
<p>Befehle wie <a href="commands/ListVars.htm">ListVars</a> und <a href="commands/Pause.htm">Pause</a> können dir dabei helfen, das Script zu debuggen (von Fehlern zu bereinigen). Zum Beispiel erstellen die folgenden zwei Zeilen "Haltepunkte" bei sorgfältig ausgewählten Positionen im Script:</p>
<pre>ListVars<br>Pause</pre>
<p>Erreicht das Script diese zwei Zeilen, wird es die aktuellen Inhalte von allen Variablen anzeigen, die dann überprüft werden können. Ist man damit fertig, kann das Script fortgesetzt werden, indem die Pause per Datei- oder Tray-Menü aufgehoben wird. Das Script wird fortgesetzt, bis es den nächsten "Haltepunkt" erreicht (sofern vorhanden).</p>
<p>Am besten sollten diese "Haltepunkte" bei Positionen eingefügt werden, bei denen das aktive Fenster egal für das Script ist, wie z. B. unmittelbar vor einem WinActivate-Befehl. Das stellt sicher, dass das Script wieder ordnungsgemäß fortgesetzt werden kann, sobald die Pause aufgehoben wird.</p>
<p>Die folgenden Befehle sind auch fürs Debuggen geeignet: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> und <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>Häufig auftretende Fehler wie Tippfehler und fehlende Deklarationen von globalen Variablen können erkannt werden, indem <a href="commands/_Warn.htm">Warnungen aktiviert werden</a>.</p>
<h3 id="idebug">Interaktives Debuggen <span class="ver">[AHK_L 11+]</span></h3>
<p>Interaktives Debuggen ist mit einem unterstützten <a href="AHKL_DBGPClients.htm">DBGp-Client</a> möglich. Üblicherweise sind die folgenden Aktionen möglich:</p>
<ul>
  <li>Haltepunkte auf Zeilen setzen oder entfernen - die Ausführung beim Erreichen eines <a href="http://en.wikipedia.org/wiki/Breakpoint">Haltepunktes</a> pausieren.</li>
  <li>Den Code zeilenweise durchgehen - Funktionen und Subroutinen betreten, überspringen oder verlassen.</li>
  <li>Alle oder eine bestimmte Variable überwachen.</li>
  <li>Den Stapel von laufenden Subroutinen und Funktionen anzeigen.</li>
</ul>
<p>Beachte, dass diese Funktionalität bei kompilierten Scripts deaktiviert ist.</p>
<p>Um interaktives Debuggen zu aktivieren, starte zuerst einen unterstützten Debugger-Client und führe danach das Script mit der <b>/Debug</b>-Befehlszeilenoption aus.</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i> und <i>PORT</i> können weggelassen werden. Zum Beispiel sind beide Angaben gleichwertig:</p>
<pre>AutoHotkey /Debug "MeinScript.ahk"
AutoHotkey /Debug=localhost:9000 "MeinScript.ahk"</pre>
<p id="debug_attach"><span class="ver">[AHK_L 59+]:</span> Um den Debugger nachträglich mit einem Script zu verbinden, sende ihm eine Nachricht wie folgt:</p>
<pre>Scriptpfad = <em>; SETZE HIER DEN VOLLSTÄNDIGEN PFAD DES SCRIPTS EIN</em>
DetectHiddenWindows On
IfWinExist %Scriptpfad% ahk_class AutoHotkey
    <em>; Optionale Parameter:
    ;   wParam  = IPv4-Adresse des Debugger-Clients als 32-Bit-Integer.
    ;   lParam  = Port, der vom Debugger-Client abgehört werden soll.</em>
    PostMessage DllCall("RegisterWindowMessage", "Str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>Ein verbundener Debugger-Client kann wieder getrennt werden, ohne das Script selbst beenden zu müssen, indem der "detach"-Befehl von DBGp gesendet wird.</p>

<h2 id="port">Portabilität von AutoHotkey.exe</h2>
<p>Es wird nur die Datei AutoHotkey.exe benötigt, um ein beliebiges .ahk-Script zu starten.</p>
<p><span class="ver">[AHK_L 51+]:</span> Das Umbenennen von AutoHotkey.exe ändert auch die Tatsache, welches Script <a href="#defaultfile">standardmäßig</a> ausgeführt wird. Diese Methode kann als Alternative zur Script-Kompilierung verwendet werden, um das Script bei einem Computer ausführen zu können, auf dem AutoHotkey nicht installiert ist. Zum Beispiel würde <i>MeinScript</i>.exe automatisch <i>MeinScript</i>.ahk ausführen, wenn ein Dateiname nicht angegeben ist. Trotzdem kann es weiterhin andere Scripts ausführen.</p>
<h2 id="install">Installer-Optionen</h2>
<p>Um AutoHotkey automatisch in das Standardverzeichnis zu installieren (das gleiche Verzeichnis, welches beim normalen Installationsmodus angezeigt wird), übergebe den Parameter /S an den Installer. Zum Beispiel:</p>
<pre>AutoHotkey110800_Install.exe /S</pre>
<p>Um anstelle des Standardverzeichnisses ein anderes Verzeichnis anzugeben, verwende den /D-Parameter (lässt man /S weg, würde /D das Standardverzeichnis ändern, welches vom Installer angezeigt wird). Zum Beispiel:</p>
<pre>AutoHotkey110800_Install.exe /S /D=C:\Programme\AutoHotkey</pre>
<p>Falls AutoHotkey zuvor installiert wurde, erkennt der Installer automatisch, welche Version von AutoHotkey.exe als Standardeinstellung gesetzt werden soll. Ansonsten gilt als Standardeinstellung Unicode 32-Bit oder Unicode 64-Bit, abhängig davon, ob das Betriebssystem im 64-Bit-Format ist. Soll die Standardversion überschrieben werden, übergebe einen der folgenden Parameter:</p>
<ul>
  <li><code>/A32</code> oder <code>/ANSI</code>: ANSI 32-Bit.</li>
  <li><code>/U64</code> oder <code>/x64</code>: Unicode 64-Bit (nur bei 64-Bit-Systemen möglich).</li>
  <li><code>/U32</code>: Unicode 32-Bit.</li>
</ul>
<p>Das folgende Beispiel installiert AutoHotkey automatisch und setzt ANSI 32-Bit als Standardversion:</p>
<pre>AutoHotkey110800_Install.exe /S /A32</pre>
<p>Um AutoHotkey automatisch zu deinstallieren, übergebe den Parameter <code>/Uninstall</code> an Installer.ahk. Zum Beispiel:</p>
<pre>"C:\Programme\AutoHotkey\AutoHotkey.exe" "C:\Programme\AutoHotkey\Installer.ahk" /Uninstall</pre>
<p>In Versionen älter als 1.1.08.00 muss <code>uninst.exe /S</code> verwendet werden. Zum Beispiel:</p>
<pre>"C:\Programme\AutoHotkey\uninst.exe" /S</pre>
<p><strong>Hinweis</strong>: Installer.ahk muss mit Administratorrechten ausgeführt werden, um richtig funktionieren zu können.</p>
<p>In den neueren Versionen des Installers befindet sich an der unteren rechten Ecke ein Link, mit dem man die Setup-Dateien ohne Installation extrahieren kann. Ist diese Funktion vorhanden, kann man den Parameter <code>/E</code> angeben, um sie über die Kommandozeile aufrufen zu können. Zum Beispiel:</p>
<pre>AutoHotkey110903_Install.exe /D=F:\AutoHotkey /E</pre>

<h2>Script-Beispiele</h2>
<p>Auf <a href="scripts/">dieser Seite</a> kann man einige nützliche Scripts finden.</p>
</body>
</html>
