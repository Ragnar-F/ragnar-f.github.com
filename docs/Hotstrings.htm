<!DOCTYPE HTML>
<html>
<head>
<title>Hotstrings und Auto-Ersetzen (ähnlich wie AutoText und AutoCorrect)</title>
<meta name="description" content='Freies Dienstprogramm, um Abkürzungen bei Benutzereingabe automatisch zu ersetzen (ähnlich wie AutoText und AutoCorrect); z. B. wird "bzw" zu "beziehungsweise", egal wo die Eingabe erfolgt.'>
<meta name="keywords" content="auto-ersetzen,autotext,autocorrect,auto text,auto correct,abkürzungserweiterung,abkürzung,abkürzungen,autoreplace,auto replace,text,expander,frei,eingeben,eingabe,wort,wörter">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/jquery.js" type="text/javascript"></script>
<script src="static/tree.jquery.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Hotstrings und Auto-Ersetzen</h1>

<h2>Einführung und einfache Beispiele</h2>
<p>Obwohl Hotstrings hauptsächlich dazu genutzt werden, Abkürzungen bei der Eingabe zu erweitern (Automatisches Ersetzen), können sie auch dazu verwendet werden, vordefinierte Aktionen zu starten. Daher sind sie mit <a href="Hotkeys.htm">Hotkeys</a> vergleichbar, nur dass sie normalerweise aus mehreren Zeichen bestehen (also ein String).</p>
<p>Um einen Hotstring zu definieren, umschließt die gewünschte Abkürzung wie in diesem Beispiel mit Doppelpunkt-Paaren:</p>
<pre>::bzw::beziehungsweise</pre>
<p>Im oberen Beispiel wird die Abkürzung bzw automatisch mit "beziehungsweise" ersetzt, wann immer die Eingabe erfolgt (allerdings muss danach standardmäßig ein <a href="#EndChars">Endzeichen</a> erfolgen, wie z. B. ein Leerzeichen, Punkt oder Enter).</p>
<p><a name="auto"></a>Das obere Beispiel wird auch als Automatisches Ersetzen bezeichnet, weil der eingegebene Text automatisch gelöscht und mit dem angegebenen String nach dem zweiten Doppelpunkt-Paar ersetzt wird. Ein Hotstring kann hingegen auch definiert werden, um eine benutzerdefinierte Aktion wie in den folgenden Beispielen auszuführen. Beachtet, dass die Befehle sich <u>unter</u> dem Hotstring befinden müssen:</p>
<pre>::bzw::
MsgBox Es wurde "bzw" eingegeben.
Return

:*:]d::  <em>; Dieser Hotstring ersetzt "]d" mit dem aktuellen Datum und der aktuellen Zeit mithilfe der folgenden Befehle.</em>
<a href="commands/FormatTime.htm">FormatTime</a>, AktuellerZeitstempel,, d.M.yyyy HH:mm  <em>; z. B. 21.6.2011 15:10</em>
SendInput %AktuellerZeitstempel%
Return</pre>
<p>Auch wenn die beiden oben genannten Beispiele nichts mit dem Automatischen Ersetzen zu tun haben, wird die eingegebene Abkürzung dennoch standardmäßig gelöscht. Das erfolgt durch das automatische Verwenden der Rücktaste, die mithilfe der <a href="#b0">b0-Option</a> deaktiviert werden kann.</p>
<h2 id="EndChars">Endzeichen</h2>
<p>Solange die <a href="#Asterisk">Sternchen-Option</a> nicht aktiv ist, müssen <em>Endzeichen</em> nach einer Abkürzung eingegeben werden, damit der Hotstring ausgelöst wird. Endzeichen bestehen vorrangig aus den folgenden Zeichen: <strong>-()[]{}':;"/\,.?!`n `t</strong> (beachtet, dass `n ein Enter ist, `t ein Tabulator ist und sich ein Leerzeichen zwischen `n und `t befindet). Verwendet und bearbeitet je nach Bedarf das folgende Beispiel, um neue Endzeichen für <u>alle</u> Hotstrings zu bestimmen, nicht nur für den Hotstring danach:</p>
<pre>#Hotstring EndChars -()[]{}:;'"/\,.?!`n `t</pre>
<h2 id="Options">Optionen</h2>
<p>Es gibt zwei Möglichkeiten, das Standardverhalten eines Hotstrings zu ändern:</p>
<ol>
  <li>Die <a href="commands/_Hotstring.htm">#Hotstring</a>-Direktive, die alle Hotstrings danach beeinflusst. Das folgende Beispiel aktiviert die Optionen C und R: <code>#Hotstring <strong>c r</strong></code>.</li>
  <li>Optionen im ersten Doppelpunkt-Paar eines Hotstrings einfügen. Das folgende Beispiel aktiviert die Optionen C und * für einen Hotstring:<br>
  <code>:<strong>c*</strong>:j@::john@somedomain.com <em>; Abhängig von Groß- und Kleinschreibung, und "Endzeichen sind nicht notwendig".</em></code>.</li>
</ol>
<p>Die folgende Liste beschreibt die einzelnen Optionen. Bei mehreren Optionen können Leerzeichen dazwischen eingefügt werden.<br>
  <br>
<strong><a name="Asterisk"></a>*</strong> (Sternchen): Diese Option bewirkt, dass ein Endzeichen (z. B. Leerzeichen, Punkt oder Enter) nicht länger notwendig ist, um den Hotstring auszulösen. Zum Beispiel:</p>
<pre>:*:j@::jsmith@somedomain.com</pre>
<p>Das obere Beispiel sendet den Ersatztext, sobald das @-Zeichen eingegeben wird. Falls die <a href="commands/_Hotstring.htm">#Hotstring-Direktive</a> verwendet wird, benutzt <strong>*0</strong>, um diese Option wieder zu deaktivieren.</p>
<p><strong><a name="Question"></a>?</strong> (Fragezeichen): Der Hotstring wird auch dann ausgelöst, wenn er sich in einem anderen Wort befindet; das heißt, wenn das Zeichen unmittelbar davor alphanumerisch ist. Ist zum Beispiel <code>:?:de::Deutschland</code> ein Hotstring, bewirkt "Fahrstunde ", dass "FahrstunDeutschland " gesendet wird. Verwendet <strong>?0</strong>, um diese Option wieder zu deaktivieren.</p>
<p><strong><a name="b0"></a>B0</strong> (B gefolgt von einer 0): Das automatische Rücksetzen wird <u>nicht</u> durchgeführt, um die eingegebene Abkürzung zu entfernen. Verwendet ein einfaches <strong>B</strong>, um das Rücksetzen wieder zu aktivieren, falls es zuvor deaktiviert war. Ein Script kann das Rücksetzen auch selbst durchführen, z. B. mit {bs 5}, das 5 Rücktasten sendet. Zudem kann es auch linke Pfeil-Tasten mittels {left 5} senden. Zum Beispiel bewirkt der folgende Hotstring, dass "&lt;em&gt;&lt;/em&gt;" erzeugt und der Cursor um 5 Stellen nach links verschoben wird (damit der Cursor sich zwischen den Tags befindet):</p>
<pre>:*b0:&lt;em&gt;::&lt;/em&gt;{left 5}</pre>
<p><strong>C</strong>: Zeichengenauigkeit: Die Eingabe einer Abkürzung ist von der aktuellen Groß- und Kleinschreibung abhängig. Verwendet <strong>C0</strong>, um diese Option wieder zu deaktivieren.</p>
<p><strong>C1</strong>: Passt sich nicht der eingegebenen Groß- und Kleinschreibung an. Verwende diese Option, um <a href="#auto">einzeilige Hotstrings</a> unabhängig von Groß- und Kleinschreibung zu machen, und sie daran zu hindern, sich nach der Groß- und Kleinschreibung der eingegebenen Zeichen zu richten. Hotstrings, die Groß- und Kleinschreibung berücksichtigen (die Standardeinstellung), erzeugen ihren Text in Großbuchstaben, wenn die Abkürzung auch in Großbuchstaben eingegeben wird. Falls nur der erste Buchstabe bei der Eingabe großgeschrieben ist, wird der erste Buchstabe beim Ersatztext auch großgeschrieben (wenn es ein Buchstabe ist). Ansonsten erfolgt die Ausgabe genauso, wie sie angegeben wurde. Falls die <a href="commands/_Hotstring.htm">#Hotstring-Direktive</a> verwendet wird, benutzt <strong>C0</strong>, damit die Groß- und Kleinschreibung wieder berücksichtigt wird.</p>
<p><strong>Kn</strong>: Tastenverzögerung: Diese selten verwendete Option bestimmt die Verzögerung zwischen Tastatureingaben, die durch das Automatische Rücksetzen oder <a href="#auto">Automatische Ersetzen</a> erzeugt werden. Gebt für <strong>n</strong> die neue Verzögerung an; zum Beispiel ermöglicht k10 eine Verzögerung von 10 ms und k-1 keine Verzögerung. Das genaue Verhalten dieser Option hängt davon ab, welcher <a href="#SendMode">Sendemodus</a> aktiv ist:</p>
<ul>
  <li>SI (SendInput): Die Tastenverzögerung wird ignoriert, da eine Verzögerung in diesem Modus nicht möglich ist. Ausnahme: Falls SendInput <a href="commands/Send.htm#SendInputUnavail">nicht verfügbar</a> ist, werden die Hotstrings auf den unten genannten SendPlay-Modus zurückgreifen (der die Tastenverzögerung berücksichtigt).</li>
  <li>SP (SendPlay): Standardmäßig wird eine Verzögerungsdauer von 0 verwendet, dass bei SendPlay das Gleiche wie -1 ist (keine Verzögerung). In diesem Modus ist die Verzögerung eher die <a href="commands/SetKeyDelay.htm#dur">Druckdauer</a>, als die Verzögerung zwischen den Tastatureingaben.</li>
  <li>SE (SendEvent): Standardmäßig wird eine Verzögerungsdauer von 0 verwendet. Eine 0 wird für die meisten Zwecke empfohlen, da sie schnell ist, aber weiterhin gut mit anderen Prozessen kooperiert (aufgrund der internen Durchführung von <a href="commands/Sleep.htm">Sleep 0</a>). Verwendet k-1, um die Verzögerung zu entfernen. Dadurch ist es möglich, das Automatische Ersetzen zu beschleunigen, falls die CPU häufig stark belastet wird. Sobald die Verzögerung auf -1 gesetzt wird, bestimmt die Prozess-Priorität des Scripts, wie schnell Tastatureingaben gesendet werden können. Um die Script-Priorität zu erhöhen, verwendet <code><a href="commands/Process.htm">Process</a>, Priority,, High</code>.</li>
</ul>
<p><strong>O</strong>: Entfernt das Endzeichen bei <a href="#auto">einzeiligen Hotstrings</a>. Das ist nützlich, falls das Endzeichen weiterhin dazu benötigt wird, einen Hotstring eindeutig zu setzen, aber das Endzeichen nicht auf dem Bildschirm angezeigt werden soll. Wenn zum Beispiel <code>:o:ar::Aristokrat</code> ein Hotstring ist, dann führt die Eingabe von "ar" und Leerzeichen dazu, dass "Aristokrat" ohne nachfolgendem Leerzeichen erzeugt wird. Dadurch ist es möglich, das Wort in die Mehrzahl zu setzen, ohne dabei die Rücktaste verwenden zu müssen. Verwendet <strong>O0</strong> (der Buchstabe O gefolgt von einer 0), um diese Option wieder zu deaktivieren.</p>
<p><strong>Pn</strong>: Die <a href="misc/Threads.htm">Priorität</a> des Hotstrings (z. B. P1). Diese selten verwendete Option hat keine Auswirkung auf <a href="#auto">einzeilige Hotstrings</a>.</p>
<p><strong><a name="raw"></a>R</strong>: Sendet den Ersatztext unbearbeitet; das heißt, wie er angezeigt wird, anstatt zum Beispiel {Enter} als ENTER-Taste, ^c als STRG+C und so weiter zu interpretieren. Diese Option wird automatisch für Hotstrings aktiviert, die einen <a href="#continuation">Fortsetzungsbereich</a> haben. Verwendet <strong>R0</strong>, um diese Option wieder zu deaktivieren.</p>
<p><strong><a name="SendMode"></a>SI</strong> oder <strong>SP</strong> oder <strong>SE</strong> <span class="ver">[v1.0.43+]:</span> Bestimmt die Methode, wie die Tastatureingaben bei <a href="#auto">einzeiligen Hotstrings</a> gesendet werden. Diese Optionen schließen sich gegenseitig aus: Es kann nur eine Option zur selben Zeit aktiv sein. Nachfolgend wird jede Option beschrieben:</p>
<ul>
  <li>SI steht für <a href="commands/Send.htm#SendInputDetail">SendInput</a>. Dieser Modus ist den anderen in Sachen Geschwindigkeit und Zuverlässigkeit normalerweise überlegen. Ein weiterer Vorteil davon ist, dass SendInput wie bei SendPlay jede Eingabe beim <a href="#auto">Automatischen Ersetzen</a> zwischenspeichert. Dadurch wird verhindert, dass zwischen eigenen Tastatureingaben die Buchstaben des Ersatztextes vorkommen. Falls SendInput <a href="commands/Send.htm#SendInputUnavail">nicht verfügbar</a> ist, verwenden Hotstrings stattdessen automatisch SendPlay.</li>
  <li>SP steht für <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>. Durch diesen Modus funktionieren Hotstrings in den meisten Spielen.</li>
  <li>SE steht für <a href="commands/Send.htm#SendEvent">SendEvent</a>. Dieser Modus wurde in den Versionen älter als 1.0.43 standardmäßig verwendet.</li>
</ul>
<p>Falls keine der oben genannten Optionen verwendet wird, gilt seit v1.0.43 standardmäßig SendInput. Im Gegensatz zur SI-Option wird allerdings SendEvent anstelle von SendPlay verwendet, sobald SendInput nicht verfügbar ist.</p>
<p><strong><a name="z"></a>Z</strong>: Diese selten verwendete Option setzt die Hotstring-Erkennung wieder zurück, sobald der Hotstring ausgelöst wurde. Das heißt, dass das Script auf einen völlig neuen Hotstring wartet und dabei alle vorherigen Benutzereingaben beseitigt. Dadurch wird verhindert, dass Hotstrings unbeabsichtigt ausgelöst werden. Siehe dazu folgenden Hotstring:</p>
<pre>:b0*?:11::
SendInput xx
Return</pre>
<p>Sobald drei aufeinanderfolgende Einsen (111) eingegeben werden, würde der Hotstring ohne Z-Option zweimal ausgelöst werden, da die mittlere Eins das <em>letzte</em> Zeichen vom ersten Auslösen ist, aber auch das <em>erste</em> Zeichen vom zweiten Auslösen. Durch Hinzufügen des Buchstabens Z vor b0 müssen vier anstelle von drei Einsen eingegeben werden, um den Hotstring zweimal auszulösen. Verwendet <strong>Z0</strong>, um diese Option wieder zu deaktivieren.</p>
<h2 id="continuation">Lange Ersatztexte</h2>
<p>Hotstrings, die lange Ersatztexte erzeugen, können durch <a href="Scripts.htm#continuation">Fortsetzungsbereiche</a> besser gelesen und verwaltet werden. Zum Beispiel:</p>
<pre>::text1::
(
Jeder Text zwischen der oberen und unteren Klammer wird literal behandelt, einschließlich Kommas und Prozentzeichen.
Standardmäßig bleibt das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile erhalten.
    Standardmäßig bleibt die Einrückung (Tabulator) auf der linken Seite dieser Zeile erhalten.

Siehe <a href="Scripts.htm#continuation">Fortsetzungsbereich</a>, wie diese Standardverhalten geändert werden können.
)</pre>
<p>Ein Fortsetzungsbereich bewirkt außerdem, dass der Hotstring standardmäßig den <a href="#raw">Raw-Modus</a> verwendet. Dieses Sonderverhalten kann nur überschrieben werden, wenn in jedem Hotstring, der ein Fortsetzungsbereich hat, die <a href="#raw">r0-Option</a> angegeben wird (z. B. <code>:r0:text1::</code>).</p>
<h2><a name="variant" id="variant"></a>Kontextabhängige Hotstrings</h2>
<p>Die Direktiven <a href="commands/_IfWinActive.htm">#IfWinActive/Exist</a> können verwendet werden, um ausgewählte Hotstrings kontextabhängig zu machen. Solche Hotstrings senden unterschiedliche Ersatztexte, führen unterschiedliche Aktionen aus oder machen überhaupt nichts, abhängig vom Typ des Fensters, das aktiv oder vorhanden ist. Zum Beispiel:</p>
<pre>#IfWinActive ahk_class Notepad
::btw::Dieser Ersatztext wird nur im Editor erscheinen.
#IfWinActive
::btw::Dieser Ersatztext erscheint nur in einem Fenster, das nicht der Editor ist.</pre>
<h2 id="AutoCorrect">AutoCorrect</h2>
<p>Das folgende Script verwendet Hotstrings, um ca. 4700 häufig vorkommende englische Rechtschreibfehler nebenbei zu korrigieren. Es enthält auch den Hotkey WIN+H, um weitere Rechtschreibfehler einfach hinzufügen zu können:</p>
<p>Download: <a href="http://www.autohotkey.com/download/AutoCorrect.ahk">AutoCorrect.ahk</a> (127 KB)</p>
<p>Autor: <a href="http://www.biancolo.com/articles/universal-autocorrect-with-autohotkey-and-wikipedia">Jim Biancolo</a> und <a href="http://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings">Wikipedia's Lists of Common Misspellings</a></p>
<h2>Bemerkungen</h2>
<p>Innerhalb des Ersatztextes werden Variablenverweise wie <code>%MeineVar%</code> zurzeit nicht unterstützt. Um dieses Problem zu umgehen, vermeidet das <a href="#auto">Automatische Ersetzen</a> bei Hotstrings. Verwendet bei der Hotstring-Definition stattdessen den <a href="commands/Send.htm#SendInput">SendInput</a>-Befehl mit einem Return danach.</p>
<p>Um ein zusätzliches Leer- oder Tabulatorzeichen nach dem Ersatztext zu senden, füge es am Ende des Ersatztextes ein und mache das letzte Zeichen zu einem umgekehrten Häkchen (`). Zum Beispiel:</p>
<pre>:*:bzw::beziehungsweise `</pre>
<p><a name="NoMouse"></a>Bei einem Links- oder Rechtsklick wird die Hotstring-Erkennung wieder zurückgesetzt. Das heißt, dass das Script auf einen völlig neuen Hotstring wartet und dabei alle vorherigen Benutzereingaben beseitigt (falls das unerwünscht ist, verwendet die Zeile <code><a href="commands/_Hotstring.htm">#Hotstring NoMouse</a></code> irgendwo im Script). Dieses Verhalten gehört zum Standard, da bei einem Klick normalerweise der Text-Cursor verschoben oder der Tastaturfokus auf ein neues Steuerelement/Feld gesetzt wird. In solchen Fällen ist es meist wünschenswert, ein Hotstring auch dann auszuführen, wenn die <a href="#Question">Fragezeichen-Option</a> fehlt, oder die Ausführung zu verhindern, wenn die Benutzereingabe nach einem versehentlichen Mausklick eine gültige Abkürzung mit der vorherigen Benutzereingabe erzeugt.</p>
<p>Die integrierte Variable <strong>A_EndChar</strong> enthält das Endzeichen, das verwendet wurde, um den aktuellsten Hotstring ohne Automatisches Ersetzen auszulösen. Falls kein Endzeichen benötigt wurde (wegen der <a href="#Asterisk">*-Option</a>), wird sie leer sein. A_EndChar ist für das Erstellen von Hotstrings nützlich, die den Send-Befehl verwenden oder deren Verhalten sich je nach eingegebenem Endzeichen unterscheiden soll. Um das Endzeichen selbst zu senden, verwendet <code>SendRaw %A_EndChar%</code> (hierbei wird <a href="commands/Send.htm">SendRaw</a> verwendet, weil Zeichen wie !{} nicht richtig mit einem normalen Send-Befehl gesendet werden).</p>
<p>Kommas, Prozentzeichen und einzelne Doppelpunkte müssen innerhalb von Hotstring-Definitionen nicht mit einem <a href="commands/_EscapeChar.htm">Escapezeichen</a> versehen werden. Umgekehrte Häkchen und Semikolons benötigen dagegen ein Leerzeichen oder einen Tabulator auf der linken Seite. Siehe <a href="commands/_EscapeChar.htm">Escapesequenzen</a> für eine vollständige Liste.</p>
<p>Obwohl die Sonderzeichen des <a href="commands/Send.htm">Send-Befehls</a> wie {Enter} beim <a href="#auto">Automatischen Ersetzen</a> unterstützt werden (solange die <a href="#raw">Raw-Option</a> nicht verwendet wird), verwenden Hotstring-Abkürzungen selbst nicht diese Sonderzeichen. Verwendet stattdessen `n für die ENTER-Taste und `t (oder ein literales Tabulatorzeichen) für die TAB-Taste (siehe <a href="commands/_EscapeChar.htm">Escapesequenzen</a> für eine vollständige Liste). Zum Beispiel wird der Hotstring <code>:*:ab`t::</code> ausgelöst, sobald "ab" mit einem Tabulator danach eingegeben wird.</p>
<p>Innerhalb von Hotstring-Definitionen werden Leerzeichen und Tabulatoren literal behandelt. Zum Beispiel erzeugen die folgenden Beispiele zwei unterschiedliche Ergebnisse: <code>::bzw::beziehungsweise</code> und <code>::bzw:: :beziehungsweise</code>.</p>
<p>Jede Hotstring-Abkürzung sollte nicht länger als 40 Zeichen sein. Das Programm warnt den Benutzer, sobald diese Länge überschritten wird. Die Länge des Ersatztextes hingegen ist auf ca. 5000 Zeichen begrenzt, wenn der <a href="#SendMode">Sendemodus</a> standardmäßig SendInput ist. Diese Grenze kann auf 16383 Zeichen erhöht werden, sobald eine der anderen <a href="#SendMode">Sendemethoden</a> verwendet wird. Weiterhin ist es möglich, eine unbegrenzte Anzahl an Zeichen zu senden, wenn <code><a href="commands/Send.htm#SendPlayDetail">SendPlay %MeineVar%</a></code> in der Hotstring-Definition verwendet wird.</p>
<p>Die Reihenfolge, in der die Hotstrings definiert werden, bestimmt ihre relative Priorität zueinander. Das heißt, sobald mehr als ein Hotstring mit der eigenen Eingabe übereinstimmt, nur der Hotstring wirksam wird, der als erster im Script aufgelistet ist. Verwandtes Thema: <a href="#variant">Kontextabhängige Hotstrings</a>.</p>
<p>Das Rücksetzen mit der Rücktaste wird zum Zweck der Hotstring-Erkennung berücksichtigt. Allerdings bewirkt das Verwenden von Pfeiltasten, BILD-NACH-OBEN, BILD-NACH-UNTEN, POS1 und ENDE innerhalb eines Editors, dass der Hotstring-Erkennungsprozess zurückgesetzt wird. Das heißt, dass das Script auf einen völlig neuen Hotstring wartet.</p>
<p>Ein Hotstring kann auch dann eingegeben werden, wenn das aktive Fenster die Benutzereingaben ignoriert. Das heißt, dass der Hotstring selbst dann ausgeführt wird, wenn die Abkürzung unsichtbar ausgelöst wird. Darüber hinaus darf die Rücktaste weiterhin gedrückt werden, um die aktuellste Benutzereingabe rückgängig zu machen (selbst wenn die Eingabe nicht sichtbar ist).</p>
<p><a name="label"></a>Es ist möglich, ein Hotstring-Label mit <a href="commands/Gosub.htm">Gosub</a> oder <a href="commands/Goto.htm">Goto</a> aufzurufen, indem sein erstes Doppelpunkt-Paar (einschließlich der Optionssymbole) mit angegeben wird. Zum Beispiel: <code>Gosub ::xyz</code>. Beim Ausführen eines <a href="#auto">einzeiligen Hotstrings (Automatisches Ersetzen)</a> wird jedoch nur ein <a href="commands/Return.htm">Return</a> ausgeführt.</p>
<p>Obwohl Hotstrings weder überwacht noch bei einem unsichtbaren <a href="commands/Input.htm">Input</a>-Befehl ausgelöst werden, sind sichtbare Eingaben in der Lage, sie auszulösen.</p>
<p id="InputLevel">Standardmäßig können Hotstrings nie durch Tastatureingaben ausgelöst werden, die von AutoHotkey-Scripts erzeugt wurden. Dadurch wird eine Endlosschleife verhindert, bei der sich Hotstrings gegenseitig auslösen würden. Seit v1.1.06 kann diese Verhalten mit <a href="commands/_InputLevel.htm">#InputLevel</a> und <a href="commands/SendLevel.htm">SendLevel</a> kontrolliert werden. Einzeilige Hotstrings (Automatisches Ersetzen) verwenden jedoch immer Level 0 und können deshalb nie <a href="commands/_UseHook.htm">Hook-Hotkeys</a> oder Hotstrings auslösen.</p>
<p>Der <a href="commands/Input.htm">Input</a>-Befehl ist in bestimmten Fällen flexibler als Hotstrings. Zum Beispiel können dadurch die Benutzereingaben im aktiven Fenster unsichtbar sein (z. B. im Spiel). Zudem unterstützt er auch zeichenlose Endtasten wie Escape.</p>
<p>Der <a href="commands/_InstallKeybdHook.htm">Tastatur-Hook</a> wird bei jedem Script automatisch verwendet, das Hotstrings enthält.</p>
<p>Hotstrings verhalten sich auf folgenden Weisen genauso wie Hotkeys:</p>
<ul>
  <li>Sie werden vom <a href="commands/Suspend.htm">Suspend</a>-Befehl beeinflusst.</li>
  <li>Sie berücksichtigen <a href="commands/_MaxThreads.htm">#MaxThreads</a> und <a href="commands/_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> (aber nicht <a href="commands/_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>).</li>
  <li>Scripts, die Hotstrings enthalten, sind automatisch <a href="commands/_Persistent.htm">persistent</a>.</li>
  <li>Hotstrings ohne Automatisches Ersetzen werden einen neuen <a href="misc/Threads.htm">Thread</a> erstellen, sobald sie ausgeführt werden. Darüber hinaus werden sie die integrierten Hotkey-Variablen wie <a href="Variables.htm#ThisHotkey">A_ThisHotkey</a> aktualisiert.</li>
</ul>
<p>Bekannte Einschränkung: In bestimmten Java-Anwendungen stören Hotstrings möglicherweise die Fähigkeit des Benutzers, diakritische Buchstaben einzugeben (mithilfe toter Tasten). Als Übergangslösung kann <a href="commands/Suspend.htm">Suspend</a> vorübergehend aktiviert werden (das alle Hotstrings deaktiviert).</p>
<h2 id="Helper">Hotstring Helper</h2>
<p>Andreas Borutta empfiehlt das folgende Script, falls viele Hotstrings verwendet werden. Durch Drücken von WIN+H (oder einen beliebig anderen Hotkey) wird der aktuell markierte Text in ein Hotstring umgewandelt. Wenn zum Beispiel "beziehungsweise" in einem Textverarbeitungsprogramm markiert wird, kann mit WIN+H die Abkürzung festgelegt (z. B. bzw) und der neue Hotstring im Script hinzugefügt werden. Danach wird das Script neu geladen, um den Hotstring zu aktivieren.</p>
<pre class="NoIndent">#h::  <em>; Hotkey: WIN+H
; Ermittelt den aktuell markierten Text. Die Zwischenablage wird anstelle von
; "ControlGet Selected" verwendet, da sie mit den meisten Editoren funktioniert
; (nämlich Textverarbeitungsprogramme).  Speichert den aktuellen Inhalt der Zwischenablage,
; damit sie später wiederhergestellt werden kann. Obwohl nur Klartext davon betroffen ist,
; ist das immer noch besser als gar nichts:</em>
AutoTrim Off  <em>; Damit die Zwischenablage jedes führende und nachfolgende Leerraumzeichen behält.</em>
ClipboardOld = %ClipboardAll%
Clipboard =  <em>; Muss anfangs leer sein, damit die Erkennung funktioniert.</em>
Send ^c
ClipWait 1
If ErrorLevel  <em>; ClipWait hat die Zeit überschritten.</em>
    Return
<em>; Ersetzt CRLF und/oder LF mit `n für die Verwendung in einem Hotstring im Raw-Modus:
; Das gleiche erfolgt auch für jedes andere Zeichen,
; dass ansonsten möglicherweise ein Problem im Raw-Modus ist:</em>
StringReplace, Hotstring, Clipboard, ``, ````, All  <em>; Damit wird jede Störung mit den Angaben darunter unterdrückt.</em>
StringReplace, Hotstring, Hotstring, `r`n, ``r, All  <em>; Die Verwendung von `r funktioniert in MS Word usw. besser als `n.</em>
StringReplace, Hotstring, Hotstring, `n, ``r, All
StringReplace, Hotstring, Hotstring, %A_Tab%, ``t, All
StringReplace, Hotstring, Hotstring, `;, ```;, All
Clipboard = %ClipboardOld%  <em>; Stellt den vorherigen Inhalt der Zwischenablage wieder her.
; Damit wird der Text-Cursor der InputBox an einer geeigneteren Position verschoben:</em>
SetTimer, MoveCaret, 10
<em>; Zeigt die InputBox für den Standard-Hotstring an:</em>
InputBox, Hotstring, Neuer Hotstring, Schreibt eine entsprechende Abkürzung am angegebenen Text-Cursor. Der Ersatztext kann je nach Bedarf auch angepasst werden.`n`nBeispieleintrag: :R:bzw`::beziehungsweise,,,,,,,, :R:`::%Hotstring%
If ErrorLevel  <em>; Der Benutzer hat Abbrechen gedrückt.</em>
    Return
IfInString, Hotstring, :R`:::
{
    MsgBox Es wurde keine Abkürzung angegeben. Der Hotstring wurde nicht hinzugefügt.
    Return
}
<em>; Ansonsten wird der Hotstring hinzugefügt und das Script neu geladen:</em>
FileAppend, `n%Hotstring%, %A_ScriptFullPath%  <em>; Ein `n am Anfang einfügen, wenn der Datei eine leere Zeile am Ende fehlt.</em>
Reload
Sleep 200 <em>; Wenn erfolgreich, dann schließt Reload diese Instanz während Sleep, die Zeile darunter wird also nie erreicht.</em>
MsgBox, 4,, Der aktuell eingefügte Hotstring wurde scheinbar nicht richtig formatiert.  Soll das Script geöffnet werden, damit es bearbeitet werden kann? Beachtet, dass der betroffene Hotstring ganz unten ist.
IfMsgBox, Yes, Edit
Return

MoveCaret:
IfWinNotActive, Neuer Hotstring
    Return
<em>; Verschiebt ansonsten den Text-Cursor der InputBox auf eine Position, wo der Benutzer die Abkürzung eintragen kann.</em>
Send {Home}{Right 3}
SetTimer, MoveCaret, Off
Return</pre>
</body>
</html>
