<!DOCTYPE HTML>
<html>
<head>
<title>Hotstrings und Automatisches Ersetzen (vergleichbar mit AutoText und AutoCorrect)</title>
<meta name="keywords" content="Grundlage">
<meta name="description" content="Dient dazu, Abk&uuml;rzungen bei Benutzereingabe automatisch zu ersetzen (vergleichbar mit AutoText und AutoCorrect); Zum Beispiel wird 'bzw' zu 'beziehungsweise', egal wo die Eingabe erfolgt.">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<link href="static/font.css" rel="stylesheet" type="text/css" />
<script src="static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="static/html5.js"></script>
<![endif]-->
<script src="navbar/NavScript.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">WriteHeader(0);</script>
<div id="content">
  <section>
    <div id="article">
    <h1>Hotstrings und Automatisches Ersetzen</h1>
    <p>Hinweis: Hotstrings ben&ouml;tigen Windows NT/2000/XP oder h&ouml;her.</p>
    <h2>Einf&uuml;hrung und einfache Beispiele</h2>
    <p>Obwohl Hotstrings haupts&auml;chlich dazu genutzt werden, Abk&uuml;rzungen bei der Eingabe zu erweitern (Automatisches Ersetzen), k&ouml;nnen sie auch dazu verwendet werden, vordefinierte Aktionen zu starten. Daher sind sie mit <a href="Hotkeys.htm">Hotkeys</a> vergleichbar, nur dass sie normalerweise aus mehreren Zeichen bestehen (also ein String).</p>
    <p>Um einen Hotstring zu definieren, umschlie&szlig;t die gew&uuml;nschte Abk&uuml;rzung wie in diesem Beispiel mit Doppelpunkt-Paaren:</p>
    <pre>::bzw::beziehungsweise</pre>
    <p>Im oberen Beispiel wird die Abk&uuml;rzung bzw automatisch mit "beziehungsweise" ersetzt, sobald es eingegeben wird (allerdings muss danach standardm&auml;&szlig;ig ein <a href="#EndChars">Endzeichen</a> erfolgen, wie z. B. ein Leerzeichen, Punkt oder Enter).</p>
    <p id="auto">Das obere Beispiel wird auch als Automatisches Ersetzen bezeichnet, weil der eingegebene Text automatisch gel&ouml;scht und mit dem angegebenen String nach dem zweiten Doppelpunkt-Paar ersetzt wird. Ein Hotstring kann hingegen auch definiert werden, um eine benutzerdefinierte Aktion wie in den folgenden Beispielen auszuf&uuml;hren. Beachtet, dass die Befehle sich <u>unter</u> dem Hotstring befinden m&uuml;ssen:</p>
    <pre>::bzw::
MsgBox Es wurde "bzw" eingegeben.
Return

:*:]d::  <em>; Dieser Hotstring ersetzt "]d" mit dem aktuellen Datum und der aktuellen Zeit mithilfe der folgenden Befehle.</em>
<a href="commands/FormatTime.htm">FormatTime</a>, AktuellerZeitstempel,, d.M.yyyy HH:mm  <em>; z. B. 21.6.2011 15:10</em>
SendInput %AktuellerZeitstempel%
Return</pre>
    <p>Auch wenn die beiden oben genannten Beispiele nichts mit dem Automatischen Ersetzen zu tun haben, wird die eingegebene Abk&uuml;rzung dennoch standardm&auml;&szlig;ig gel&ouml;scht. Das erfolgt durch das automatische Verwenden der R&uuml;cktaste, die mithilfe der <a href="#b0">b0-Option</a> deaktiviert werden kann.</p>
    <h2 id="EndChars">Endzeichen</h2>
    <p>Solange die <a href="#Asterisk">Sternchen-Option</a> nicht aktiv ist, m&uuml;ssen <em>Endzeichen</em> nach einer Abk&uuml;rzung eingegeben werden, damit der Hotstring ausgel&ouml;st wird. Endzeichen bestehen vorrangig aus den folgenden Zeichen: <strong>-()[]{}':;"/\,.?!`n `t </strong>(beachtet, dass `n ein Enter ist, `t ein Tabulator ist und sich ein Leerzeichen zwischen `n und `t befindet). Verwendet und bearbeitet je nach Bedarf das folgende Beispiel, um neue Endzeichen f&uuml;r <u>alle</u> Hotstrings zu bestimmen, nicht nur f&uuml;r den Hotstring danach:</p>
    <pre>#Hotstring EndChars -()[]{}:;'"/\,.?!`n `t</pre>
    <h2 id="Options">Optionen</h2>
    <p>Es gibt zwei M&ouml;glichkeiten, das Standardverhalten eines Hotstrings zu &auml;ndern:</p>
    <ol>
      <li>Die <a href="commands/_Hotstring.htm">#Hotstring</a>-Direktive, die alle Hotstrings danach beeinflusst. Das folgende Beispiel aktiviert die Optionen C und R:
        <pre>#Hotstring <strong>c r</strong></pre>
      </li>
      <li>Optionen im ersten Doppelpunkt-Paar eines Hotstrings einf&uuml;gen. Das folgende Beispiel aktiviert die Optionen C und * f&uuml;r einen Hotstring:
        <pre>:<strong>c*</strong>:j@::john@somedomain.com <em>; Abh&auml;ngig von Gro&szlig;- und Kleinschreibung, und "Endzeichen sind nicht notwendig".</em></pre>
      </li>
    </ol>
    <p>Die folgende Liste beschreibt die einzelnen Optionen. Bei mehreren Optionen k&ouml;nnen Leerzeichen dazwischen eingef&uuml;gt werden.</p>
    <p id="Asterisk"><strong>*</strong> (Sternchen): Diese Option bewirkt, dass ein Endzeichen (z. B. Leerzeichen, Punkt oder Enter) nicht l&auml;nger notwendig ist, um den Hotstring auszul&ouml;sen. Zum Beispiel:</p>
    <pre>:*:j@::jsmith@somedomain.com</pre>
    <p>Das obere Beispiel sendet den Ersatztext, sobald das @-Zeichen eingegeben wird. Falls die <a href="commands/_Hotstring.htm">#Hotstring-Direktive</a> verwendet wird, benutzt <strong>*0</strong>, um diese Option wieder zu deaktivieren.</p>
    <p id="Question"><strong>?</strong> (Fragezeichen): Der Hotstring wird auch dann ausgel&ouml;st, wenn er sich in einem anderen Wort befindet; das hei&szlig;t, wenn das Zeichen unmittelbar davor alphanumerisch ist. Ist zum Beispiel <code>:?:de::Deutschland</code> ein Hotstring, bewirkt "Fahrstunde ", dass "FahrstunDeutschland " gesendet wird. Verwendet <strong>?0</strong>, um diese Option wieder zu deaktivieren.</p>
    <p id="b0"><strong>B0</strong> (B gefolgt von einer 0): Das automatische R&uuml;cksetzen wird <u>nicht</u> durchgef&uuml;hrt, um die eingegebene Abk&uuml;rzung zu entfernen. Verwendet ein einfaches <strong>B</strong>, um das R&uuml;cksetzen wieder zu aktivieren, falls es zuvor deaktiviert war. Ein Script kann das R&uuml;cksetzen auch selbst durchf&uuml;hren, z. B. mit {bs 5}, das 5 R&uuml;cktasten sendet. Zudem kann es auch linke Pfeil-Tasten mittels {left 5} senden. Zum Beispiel bewirkt der folgende Hotstring, dass <code>&lt;em&gt;&lt;/em&gt;</code> erzeugt und der Cursor um 5 Stellen nach links verschoben wird (damit der Cursor sich zwischen den Tags befindet):</p>
    <pre>:*b0:&lt;em&gt;::&lt;/em&gt;{left 5}</pre>
    <p><strong>C</strong>: Zeichengenauigkeit: Die Eingabe einer Abk&uuml;rzung ist von der aktuellen Gro&szlig;- und Kleinschreibung abh&auml;ngig. Verwendet <strong>C0</strong>, um diese Option wieder zu deaktivieren.</p>
    <p><strong>C1</strong>: Ignoriert die aktuelle Gro&szlig;- und Kleinschreibung beim <a href="#auto">Automatischen Ersetzen</a>. Hotstrings, die Gro&szlig;- und Kleinschreibung ber&uuml;cksichtigen (die Standardeinstellung), erzeugen ihren Text in Gro&szlig;buchstaben, wenn die Abk&uuml;rzung auch in Gro&szlig;buchstaben eingegeben wird. Falls nur der erste Buchstabe bei der Eingabe gro&szlig;geschrieben ist, wird der erste Buchstabe beim Ersatztext auch gro&szlig;geschrieben (wenn es ein Buchstabe ist). Ansonsten erfolgt die Ausgabe genauso, wie sie angegeben wurde. Falls die <a href="commands/_Hotstring.htm">#Hotstring-Direktive</a> verwendet wird, benutzt <strong>C0</strong>, damit die Gro&szlig;- und Kleinschreibung wieder ber&uuml;cksichtigt wird.</p>
    <p><strong>Kn</strong>: Tastenverz&ouml;gerung: Diese selten verwendete Option bestimmt die Verz&ouml;gerung zwischen Tastatureingaben, die durch das
      Automatische R&uuml;cksetzen oder <a href="#auto">Automatische Ersetzen</a> erzeugt werden. Gebt f&uuml;r <strong>n</strong> die neue Verz&ouml;gerung an; zum Beispiel erm&ouml;glicht k10 eine Verz&ouml;gerung von 10 ms und k-1 keine Verz&ouml;gerung. Das genaue Verhalten dieser Option h&auml;ngt davon ab, welcher <a href="#SendMode">Sendemodus</a> aktiv ist:</p>
    <ul>
      <li>SI (SendInput): Die Tastenverz&ouml;gerung wird ignoriert, da eine Verz&ouml;gerung in diesem Modus nicht m&ouml;glich ist. Ausnahme: Falls SendInput <a href="commands/Send.htm#SendInputUnavail">nicht verf&uuml;gbar</a> ist, werden die Hotstrings auf den unten genannten SendPlay-Modus zur&uuml;ckgreifen (der die Tastenverz&ouml;gerung ber&uuml;cksichtigt).</li>
      <li>SP (SendPlay): Standardm&auml;&szlig;ig wird eine Verz&ouml;gerungsdauer von 0 verwendet, dass bei SendPlay das Gleiche wie -1 ist (keine Verz&ouml;gerung). In diesem Modus ist die Verz&ouml;gerung eher die <a href="commands/SetKeyDelay.htm#dur">Druckdauer</a>, als die Verz&ouml;gerung zwischen den Tastatureingaben.</li>
      <li>SE (SendEvent): Standardm&auml;&szlig;ig wird eine Verz&ouml;gerungsdauer von 0 verwendet. Eine 0 wird f&uuml;r die meisten Zwecke empfohlen, da sie schnell ist, aber weiterhin gut mit anderen Prozessen kooperiert (aufgrund der internen Durchf&uuml;hrung von <a href="commands/Sleep.htm">Sleep 0</a>). Verwendet k-1, um die Verz&ouml;gerung zu entfernen. Dadurch ist es m&ouml;glich, das Automatische Ersetzen zu beschleunigen, falls die CPU h&auml;ufig stark belastet wird. Sobald die Verz&ouml;gerung auf -1 gesetzt wird, bestimmt die Prozess-Priorit&auml;t des Scripts, wie schnell Tastatureingaben gesendet werden k&ouml;nnen. Um die Script-Priorit&auml;t zu erh&ouml;hen, verwendet <code><a href="commands/Process.htm">Process</a>, Priority,, High</code>.</li>
    </ul>
    <p><strong>O</strong>: Entfernt das Endzeichen bei <a href="#auto">einzeiligen Hotstrings</a>. Das ist n&uuml;tzlich, falls das Endzeichen weiterhin dazu ben&ouml;tigt wird, einen Hotstring eindeutig zu setzen, aber das Endzeichen nicht auf dem Bildschirm angezeigt werden soll. Wenn zum Beispiel <code>:o:ar::Aristokrat</code> ein Hotstring ist, dann f&uuml;hrt die Eingabe von "ar" und Leerzeichen dazu, dass "Aristokrat" ohne nachfolgendem Leerzeichen erzeugt wird. Dadurch ist es m&ouml;glich, das Wort in die Mehrzahl zu setzen, ohne dabei die R&uuml;cktaste verwenden zu m&uuml;ssen. Verwendet <strong>O0</strong> (der Buchstabe O gefolgt von einer 0), um diese Option wieder zu deaktivieren.</p>
    <p><strong>Pn</strong>: Die <a href="misc/Threads.htm">Priorit&auml;t</a> des Hotstrings (z. B. P1). Diese selten verwendete Option hat keine Auswirkung auf <a href="#auto">einzeilige Hotstrings</a>.</p>
    <p id="raw"><strong>R</strong>: Sendet den Ersatztext unbearbeitet; das hei&szlig;t, wie er angezeigt wird, anstatt zum Beispiel {Enter} in <kbd>Enter</kbd>, ^c in <kbd>Strg</kbd>+<kbd>C</kbd> und so weiter zu &uuml;bersetzen. Diese Option wird automatisch f&uuml;r Hotstrings aktiviert, die einen <a href="#continuation">Fortsetzungsbereich</a> haben. Verwendet <strong>R0</strong>, um diese Option wieder zu deaktivieren.</p>
    <p id="SendMode"><strong>SI</strong> oder <strong>SP</strong> oder <strong>SE</strong> <span class="ver">[v1.0.43+]:</span> Bestimmt die Methode, wie die Tastatureingaben bei <a href="#auto">einzeiligen Hotstrings</a> gesendet werden. Diese Optionen schlie&szlig;en sich gegenseitig aus: Es kann nur eine Option zur selben Zeit aktiv sein. Nachfolgend wird jede Option beschrieben:</p>
    <ul>
      <li>SI steht f&uuml;r <a href="commands/Send.htm#SendInputDetail">SendInput</a>. Dieser Modus ist den anderen in Sachen Geschwindigkeit und Zuverl&auml;ssigkeit normalerweise &uuml;berlegen. Ein weiterer Vorteil davon ist, dass SendInput wie bei SendPlay jede Eingabe beim <a href="#auto">Automatischen Ersetzen</a> zwischenspeichert. Dadurch wird verhindert, dass zwischen eigenen Tastatureingaben die Buchstaben des Ersatztextes vorkommen. Falls SendInput <a href="commands/Send.htm#SendInputUnavail">nicht verf&uuml;gbar</a> ist, verwenden Hotstrings stattdessen automatisch SendPlay.</li>
      <li>SP steht f&uuml;r <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>. Durch diesen Modus funktionieren Hotstrings in den meisten Spielen.</li>
      <li>SE steht f&uuml;r <a href="commands/Send.htm#SendEvent">SendEvent</a>. Dieser Modus wurde in den Versionen &auml;lter als 1.0.43 standardm&auml;&szlig;ig verwendet.</li>
    </ul>
    <p>Falls keine der oben genannten Optionen verwendet wird, gilt seit v1.0.43 standardm&auml;&szlig;ig SendInput. Im Gegensatz zur SI-Option wird allerdings SendEvent anstelle von SendPlay verwendet, sobald SendInput nicht verf&uuml;gbar ist.</p>
    <p id="z"><strong>Z</strong>: Diese selten verwendete Option setzt die Hotstring-Erkennung wieder zur&uuml;ck, sobald der Hotstring ausgel&ouml;st wurde. Das hei&szlig;t, dass das Script auf einen v&ouml;llig neuen Hotstring wartet und dabei alle vorherigen Benutzereingaben beseitigt. Dadurch wird verhindert, dass Hotstrings unbeabsichtigt ausgel&ouml;st werden. Siehe dazu folgenden Hotstring:</p>
    <pre>:b0*?:11::
SendInput xx
Return</pre>
    <p>Sobald drei aufeinanderfolgende Einsen (111) eingegeben werden, w&uuml;rde der Hotstring ohne Z-Option zweimal ausgel&ouml;st werden, da die mittlere Eins das <em>letzte</em> Zeichen vom ersten Ausl&ouml;sen ist, aber auch das <em>erste</em> Zeichen vom zweiten Ausl&ouml;sen. Durch Hinzuf&uuml;gen des Buchstabens Z vor b0 m&uuml;ssen vier anstelle von drei Einsen eingegeben werden, um den Hotstring zweimal auszul&ouml;sen. Verwendet <strong>Z0</strong>, um diese Option wieder zu deaktivieren.</p>
    <h2 id="continuation">Lange Ersatztexte</h2>
    <p>Hotstrings, die lange Ersatztexte erzeugen, k&ouml;nnen durch <a href="Scripts.htm#continuation">Fortsetzungsbereiche</a> besser gelesen und verwaltet werden. Zum Beispiel:</p>
    <pre>::text1::
(
Jeder Text zwischen der oberen und unteren Klammer wird direkt behandelt, einschlie&szlig;lich Kommas und Prozentzeichen.
Standardm&auml;&szlig;ig bleibt das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile erhalten.
    Standardm&auml;&szlig;ig bleibt die Einr&uuml;ckung (Tabulator) auf der linken Seite dieser Zeile erhalten.

Siehe <a href="Scripts.htm#continuation">Fortsetzungsbereich</a>, wie diese Standardverhalten ge&auml;ndert werden k&ouml;nnen.
)</pre>
    <p>Ein Fortsetzungsbereich bewirkt au&szlig;erdem, dass der Hotstring standardm&auml;&szlig;ig den <a href="#raw">Raw-Modus</a> verwendet. Dieses Sonderverhalten kann nur &uuml;berschrieben werden, wenn in jedem Hotstring, der ein Fortsetzungsbereich hat, die <a href="#raw">r0-Option</a> angegeben wird (z. B. <code>:r0:text1::</code>).</p>
    <h2 id="variant">Kontextabh&auml;ngige Hotstrings</h2>
    <p>Die Direktiven <a href="commands/_IfWinActive.htm">#IfWinActive/Exist</a> k&ouml;nnen verwendet werden, um ausgew&auml;hlte Hotstrings kontextabh&auml;ngig zu machen. Solche Hotstrings senden unterschiedliche Ersatztexte, f&uuml;hren unterschiedliche Aktionen aus oder machen &uuml;berhaupt nichts, abh&auml;ngig vom Typ des Fensters, das aktiv oder vorhanden ist. Zum Beispiel:</p>
    <pre>#IfWinActive ahk_class Notepad
::btw::Dieser Ersatztext wird nur im Editor erscheinen.
#IfWinActive
::btw::Dieser Ersatztext erscheint nur in einem Fenster, das nicht der Editor ist.</pre>
    <h2 id="AutoCorrect">AutoCorrect</h2>
    <p>Das folgende Script verwendet Hotstrings, um ca. 4700 h&auml;ufig vorkommende englische Rechtschreibfehler nebenbei zu korrigieren. Es enth&auml;lt auch den Hotkey <kbd>Win</kbd>+<kbd>H</kbd>, um weitere Rechtschreibfehler einfach hinzuf&uuml;gen zu k&ouml;nnen:</p>
    <p>Download: <a href="http://www.autohotkey.com/download/AutoCorrect.ahk">AutoCorrect.ahk</a> (127 KB)</p>
    <p>Autor: <a href="http://www.biancolo.com/articles/universal-autocorrect-with-autohotkey-and-wikipedia">Jim Biancolo</a> und <a href="http://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings">Wikipedia's Lists of Common Misspellings</a></p>
    <h2>Bemerkungen</h2>
    <p>Innerhalb des Ersatztextes werden Variablenverweise wie <code>%EigeneVar%</code> zurzeit nicht unterst&uuml;tzt. Um dieses Problem zu umgehen, vermeidet das <a href="#auto">Automatische Ersetzen</a> bei Hotstrings. Verwendet bei der Hotstring-Definition stattdessen den <a href="commands/Send.htm#SendInput">SendInput</a>-Befehl mit einem Return danach.</p>
    <p>Um zus&auml;tzlich ein Leer- oder Tabulatorzeichen nach dem Ersatztext zu senden, muss ein Akzent (`) angef&uuml;gt werden. Zum Beispiel:</p>
    <pre>:*:bzw::beziehungsweise `</pre>
    <p id="NoMouse">Bei einem Links- oder Rechtsklick wird die Hotstring-Erkennung wieder zur&uuml;ckgesetzt. Das hei&szlig;t, dass das Script auf einen v&ouml;llig neuen Hotstring wartet und dabei alle vorherigen Benutzereingaben beseitigt (falls das unerw&uuml;nscht ist, verwendet die Zeile <a href="commands/_Hotstring.htm"><code>#Hotstring NoMouse</code></a> irgendwo im Script). Dieses Verhalten geh&ouml;rt zum Standard, da bei einem Klick normalerweise der Text-Cursor verschoben oder der Tastaturfokus auf ein neues Steuerelement/Feld gesetzt wird. In solchen F&auml;llen ist es meist w&uuml;nschenswert, ein Hotstring auch dann auszuf&uuml;hren, wenn die <a href="#Question">Fragezeichen-Option</a> fehlt, oder die Ausf&uuml;hrung zu verhindern, wenn die Benutzereingabe nach einem versehentlichen Mausklick eine g&uuml;ltige Abk&uuml;rzung mit der vorherigen Benutzereingabe erzeugt.</p>
    <p>Die interne Variable <strong>A_EndChar</strong> enth&auml;lt das Endzeichen, das verwendet wurde, um den aktuellsten Hotstring ohne Automatisches Ersetzen auszul&ouml;sen. Falls kein Endzeichen ben&ouml;tigt wurde (wegen der <a href="#asterisk">*-Option</a>), wird sie leer sein. A_EndChar ist f&uuml;r das Erstellen von Hotstrings n&uuml;tzlich, die den Send-Befehl verwenden oder deren Verhalten sich je nach eingegebenem Endzeichen unterscheiden soll. Um das Endzeichen selbst zu senden, verwendet <code>SendRaw %A_EndChar%</code> (hierbei wird <a href="commands/Send.htm">SendRaw</a> verwendet, weil Zeichen wie !{} nicht richtig mit einem normalen Send-Befehl gesendet werden).</p>
    <p>Obwohl Kommas, Prozentzeichen und einzelne Doppelpunkte innerhalb von Hotstring-Definitionen nicht <a href="commands/_EscapeChar.htm">gesch&uuml;tzt</a> werden m&uuml;ssen, ben&ouml;tigen Akzente und Semikolons ein Leerzeichen oder einen Tabulator auf der linken Seite. Siehe <a href="commands/_EscapeChar.htm">Schutzsequenzen</a> f&uuml;r eine vollst&auml;ndige Liste.</p>
    <p>Obwohl die Sonderzeichen des <a href="commands/Send.htm">Send-Befehls</a> wie {Enter} beim <a href="#auto">Automatischen Ersetzen</a> unterst&uuml;tzt werden (solange die <a href="#raw">Raw-Option</a> nicht verwendet wird), verwenden Hotstring-Abk&uuml;rzungen selbst nicht diese Sonderzeichen. Verwendet stattdessen `n f&uuml;r die ENTER-Taste und `t (oder ein direktes Tabulatorzeichen) f&uuml;r die TAB-Taste (siehe <a href="commands/_EscapeChar.htm">Schutzsequenzen</a> f&uuml;r eine vollst&auml;ndige Liste). Zum Beispiel wird der Hotstring <code>:*:ab`t::</code> ausgel&ouml;st, sobald "ab" mit einem Tabulator danach eingegeben wird.</p>
    <p>Innerhalb von Hotstring-Definitionen werden Leerzeichen und Tabulatoren direkt behandelt. Zum Beispiel erzeugen die folgenden Beispiele zwei unterschiedliche Ergebnisse: </p>
    <pre>::bzw::beziehungsweise
::bzw:: beziehungsweise</pre>
    <p>Jede Hotstring-Abk&uuml;rzung sollte nicht l&auml;nger als 40 Zeichen sein. Das Programm warnt den Benutzer, sobald diese L&auml;nge &uuml;berschritten wird. Die L&auml;nge des Ersatztextes hingegen ist auf ca. 5000 Zeichen begrenzt, wenn der <a href="#SendMode">Sendemodus</a> standardm&auml;&szlig;ig SendInput ist. Diese Grenze kann auf 16383 Zeichen erh&ouml;ht werden, sobald eine der anderen <a href="#SendMode">Sendemethoden</a> verwendet wird. Weiterhin ist es m&ouml;glich, eine unbegrenzte Anzahl an Zeichen zu senden, wenn <a href="commands/Send.htm#SendPlayDetail"><code>SendPlay %EigeneVariable%</code></a> in der Hotstring-Definition verwendet wird.</p>
    <p>Die Reihenfolge, in der die Hotstrings definiert werden, bestimmt ihre relative Priorit&auml;t zueinander. Das hei&szlig;t, sobald mehr als ein Hotstring mit der eigenen Eingabe &uuml;bereinstimmt, nur der Hotstring wirksam wird, der als erster im Script aufgelistet ist. Verwandtes Thema: <a href="#variant">Kontextabh&auml;ngige Hotstrings.</a></p>
    <p>Das R&uuml;cksetzen mit der R&uuml;cktaste wird zum Zweck der Hotstring-Erkennung ber&uuml;cksichtigt. Allerdings bewirkt das Verwenden von Pfeiltasten, Bild-Auf, Bild-Ab, Pos1 und Ende innerhalb eines Editors, dass der Hotstring-Erkennungsprozess zur&uuml;ckgesetzt wird. Das hei&szlig;t, dass das Script auf einen v&ouml;llig neuen Hotstring wartet.</p>
    <p>Ein Hotstring kann auch dann eingegeben werden, wenn das aktive Fenster die Benutzereingaben ignoriert. Das hei&szlig;t, dass der Hotstring selbst dann ausgef&uuml;hrt wird, wenn die Abk&uuml;rzung unsichtbar ausgel&ouml;st wird. Dar&uuml;ber hinaus darf die R&uuml;cktaste weiterhin gedr&uuml;ckt werden, um die aktuellste Benutzereingabe r&uuml;ckg&auml;ngig zu machen (selbst wenn die Eingabe nicht sichtbar ist).</p>
    <p id="label">Es ist m&ouml;glich, ein Hotstring-Label mit <a href="commands/Gosub.htm">Gosub</a> oder <a href="commands/Goto.htm">Goto</a> aufzurufen, indem sein erstes Doppelpunkt-Paar (einschlie&szlig;lich der Optionssymbole) mit angegeben wird. Zum Beispiel: <code>Gosub ::xyz</code>. Beim Ausf&uuml;hren eines <a href="#auto">einzeiligen Hotstrings (Automatisches Ersetzen)</a> wird jedoch nur ein <a href="commands/Return.htm">Return</a> ausgef&uuml;hrt.</p>
    <p>Obwohl Hotstrings weder &uuml;berwacht noch bei einem unsichtbaren <a href="commands/Input.htm">Input</a>-Befehl ausgel&ouml;st werden, sind sichtbare Eingaben in der Lage, sie auszul&ouml;sen.</p>
    <p id="InputLevel">Standardm&auml;&szlig;ig k&ouml;nnen Hotstrings nie durch Tastatureingaben ausgel&ouml;st werden, die von AutoHotkey-Scripts erzeugt wurden. Dadurch wird eine Endlosschleife verhindert, bei der sich Hotstrings gegenseitig ausl&ouml;sen w&uuml;rden. Seit v1.1.06 kann diese Verhalten mit <a href="commands/_InputLevel.htm">#InputLevel</a> und <a href="commands/SendLevel.htm">SendLevel</a> kontrolliert werden. Einzeilige Hotstrings (Automatisches Ersetzen) verwenden jedoch immer Level 0 und k&ouml;nnen deshalb nie <a href="commands/_UseHook.htm">Hook-Hotkeys</a> oder Hotstrings ausl&ouml;sen. </p>
    <p>Der <a href="commands/Input.htm">Input</a>-Befehl ist in bestimmten F&auml;llen flexibler als Hotstrings. Zum Beispiel k&ouml;nnen dadurch die Benutzereingaben im aktiven Fenster unsichtbar sein (z. B. im Spiel). Zudem unterst&uuml;tzt er auch zeichenlose Endtasten wie Escape.</p>
    <p>Der <a href="commands/_InstallKeybdHook.htm">Tastatur-Hook</a> wird bei jedem Script automatisch verwendet, das Hotstrings enth&auml;lt.</p>
    <p>Hotstrings verhalten sich auf folgenden Weisen genauso wie Hotkeys:</p>
    <ul>
      <li>Sie werden vom <a href="commands/Suspend.htm">Suspend</a>-Befehl beeinflusst.</li>
      <li>Sie ber&uuml;cksichtigen <a href="commands/_MaxThreads.htm">#MaxThreads</a> und <a href="commands/_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> (aber nicht <a href="commands/_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>).</li>
      <li>Scripts, die Hotstrings enthalten, sind automatisch <a href="commands/_Persistent.htm">persistent</a>.</li>
      <li>Hotstrings ohne Automatisches Ersetzen werden einen neuen <a href="misc/Threads.htm">Thread</a> erstellen, sobald sie ausgef&uuml;hrt werden. Dar&uuml;ber hinaus werden sie die internen Hotkey-Variablen wie <a href="Variables.htm#ThisHotkey">A_ThisHotkey</a> aktualisiert.</li>
    </ul>
    <p>Bekannte Einschr&auml;nkung: In bestimmten Java-Anwendungen st&ouml;ren Hotstrings m&ouml;glicherweise die F&auml;higkeit des Benutzers, diakritische Buchstaben einzugeben (mithilfe toter Tasten).  Als &Uuml;bergangsl&ouml;sung kann <a href="commands/Suspend.htm">Suspend</a> vor&uuml;bergehend aktiviert werden (das alle Hotstrings deaktiviert).</p>
    <h2 id="Helper">Hotstring Helper</h2>
    <p>Andreas Borutta empfiehlt das folgende Script, falls viele Hotstrings verwendet werden. Durch Dr&uuml;cken von <kbd>Win</kbd>+<kbd>H</kbd> (oder einen beliebig anderen Hotkey) wird der aktuell markierte Text in ein Hotstring umgewandelt. Wenn zum Beispiel "beziehungsweise" in einem Textverarbeitungsprogramm markiert wird, kann mit <kbd>Win</kbd>+<kbd>H</kbd> die Abk&uuml;rzung festgelegt (z. B. bzw) und der neue Hotstring im Script hinzugef&uuml;gt werden. Danach wird das Script neu geladen, um den Hotstring zu aktivieren.</p>
    <pre class="NoIndent">#h::  <em>; Hotkey: Win+H
; Ermittelt den aktuell markierten Text. Die Zwischenablage wird anstelle von
; "ControlGet Selected" verwendet, da sie mit den meisten Editoren funktioniert
; (n&auml;mlich Textverarbeitungsprogramme).  Speichert den aktuellen Inhalt der Zwischenablage,
; damit sie sp&auml;ter wiederhergestellt werden kann. Obwohl nur Klartext davon betroffen ist,
; ist das immer noch besser als gar nichts:</em>
AutoTrim Off  <em>; Damit die Zwischenablage jedes f&uuml;hrende und nachfolgende unsichtbare Zeichen beh&auml;lt.</em>
ClipboardOld = %ClipboardAll%
Clipboard =  <em>; Muss anfangs leer sein, damit die Erkennung funktioniert.</em>
Send ^c
ClipWait 1
If ErrorLevel  <em>; ClipWait hat die Zeit &uuml;berschritten.</em>
    Return
<em>; Ersetzt CRLF und/oder LF mit `n f&uuml;r die Verwendung in einem Hotstring im Raw-Modus:
; Das gleiche erfolgt auch f&uuml;r jedes andere Zeichen,
; dass ansonsten m&ouml;glicherweise ein Problem im Raw-Modus ist:</em>
StringReplace, Hotstring, Clipboard, ``, ````, All  <em>; Damit wird jede St&ouml;rung mit den Angaben darunter unterdr&uuml;ckt.</em>
StringReplace, Hotstring, Hotstring, `r`n, ``r, All  <em>; Die Verwendung von `r funktioniert in MS Word usw. besser als `n.</em>
StringReplace, Hotstring, Hotstring, `n, ``r, All
StringReplace, Hotstring, Hotstring, %A_Tab%, ``t, All
StringReplace, Hotstring, Hotstring, `;, ```;, All
Clipboard = %ClipboardOld%  <em>; Stellt den vorherigen Inhalt der Zwischenablage wieder her.
; Damit wird der Text-Cursor der InputBox an einer geeigneteren Position verschoben:</em>
SetTimer, MoveCaret, 10
<em>; Zeigt die InputBox f&uuml;r den Standard-Hotstring an:</em>
InputBox, Hotstring, Neuer Hotstring, Schreibt eine entsprechende Abk&uuml;rzung am angegebenen Text-Cursor. Der Ersatztext kann je nach Bedarf auch angepasst werden.`n`nBeispieleintrag: :R:bzw`::beziehungsweise,,,,,,,, :R:`::%Hotstring%
If ErrorLevel  <em>; Der Benutzer hat Abbrechen gedr&uuml;ckt.</em>
    Return
IfInString, Hotstring, :R`:::
{
    MsgBox Es wurde keine Abk&uuml;rzung angegeben. Der Hotstring wurde nicht hinzugef&uuml;gt.
    Return
}
<em>; Ansonsten wird der Hotstring hinzugef&uuml;gt und das Script neu geladen:</em>
FileAppend, `n%Hotstring%, %A_ScriptFullPath%  <em>; Ein `n am Anfang einf&uuml;gen, wenn der Datei eine leere Zeile am Ende fehlt.</em>
Reload
Sleep 200 <em>; Wenn erfolgreich, dann schlie&szlig;t Reload diese Instanz w&auml;hrend Sleep, die Zeile darunter wird also nie erreicht.</em>
MsgBox, 4,, Der aktuell eingef&uuml;gte Hotstring wurde scheinbar nicht richtig formatiert.  Soll das Script ge&ouml;ffnet werden, damit es bearbeitet werden kann? Beachtet, dass der betroffene Hotstring ganz unten ist.
IfMsgBox, Yes, Edit
Return

MoveCaret:
IfWinNotActive, Neuer Hotstring
    Return
<em>; Verschiebt ansonsten den Text-Cursor der InputBox auf eine Position, wo der Benutzer die Abk&uuml;rzung eintragen kann.</em>
Send {Home}{Right 3}
SetTimer, MoveCaret, Off
Return</pre>
  </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(0);</script>
</body>
</html>