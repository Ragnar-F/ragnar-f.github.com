<!DOCTYPE HTML>
<html>
<head>
<title>Arrays</title>
<meta name="keywords" content="Grundlage">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<link href="../static/font.css" rel="stylesheet" type="text/css" />
<script src="../static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="../static/html5.js"></script>
<![endif]-->
<script src="../navbar/NavScript.js" type="text/javascript"></script>
</head>

<body>
<script type="text/javascript">WriteHeader(1);</script>
<div id="content">
  <section>
    <div id="article">
    <h1>Arrays</h1>
    <h2>Assoziative Arrays <span class="ver">[AHK_L 31+]</span></h2>
    <p>Eigenständige assoziative Arrays können durch den Aufruf von <a href="../Objects.htm#Usage_Associative_Arrays">Object()</a> erstellt werden. Zum Beispiel:</p>
    <pre><em>; Erstellt das Array, das zunächst leer ist:</em>
Array := Object()

<em>; Schreibt in das Array:</em>
Loop, Read, C:\Gästeliste.txt <em>; Diese Schleife ruft nacheinander jede Zeile der Datei ab.</em>
{
    Array.Insert(A_LoopReadLine) <em>; Fügt diese Zeile ans Array an.</em>
}

<em>; Liest vom Array:
; Loop % Array.MaxIndex()   ; Traditionellerer Ansatz.</em>
for index, element in Array <em>; Empfohlener Ansatz in den meisten Fällen.</em>
{
    <em>; Beim Verwenden von "Loop" müssen die Indexe fortlaufende Nummern von 1 bis zur Anzahl
    ; der Elemente im Array sein (oder sie müssen innerhalb der Schleife berechnet werden).
    ; MsgBox % "Elementnummer " . A_Index . " ist " . Array[A_Index]

    ; Beim Verwenden von "for" werden sowohl der Index (oder "Schlüssel") als auch dessen Wert
    ; bereitgestellt, wobei der Index ein *beliebiger* Wert sein kann.</em>
    MsgBox % "Elementnummer " . index . " ist " . element
}</pre>
    <p>Damit wird nur ein kleiner Teil der <a href="../Objects.htm">Objekt</a>-<a href="../objects/Object.htm">Funktionalität</a> angezeigt. Elemente können gesetzt, abgerufen, eingefügt, entfernt und enumeriert werden. Neben Zahlen können auch Strings und Objekte als Schlüssel verwendet werden. Objekte können als Werte in andere Objekte gespeichert und als Funktionsparameter oder Rückgabewerte übergeben werden. Zudem können Objekte mit neuer Funktionalität <a href="../Objects.htm#Custom_Objects">erweitert</a> werden.</p>
    <p>Obwohl Insert() und Enumeratoren ihren Nutzen haben, finden es einige Benutzer einfacher, den traditionelleren Ansatz zu verwenden:</p>
    <pre>  <em>; Jedes Array muss vorher initialisiert werden:</em>
  Array := Object()

<em>; Array%j% := A_LoopField</em>
  Array[j] := A_LoopField

<em>; Array%j%_%k% := A_LoopReadLine</em>
  Array[j, k] := A_LoopReadLine

  ArrayAnzahl := 0
  Loop, Read, C:\Gästeliste.txt
  {
      ArrayAnzahl += 1
    <em>; Array%ArrayAnzahl% := A_LoopReadLine</em>
      Array[ArrayAnzahl] := A_LoopReadLine
  }

  Loop %ArrayAnzahl%
  {
    <em>; Element := Array%A_Index%</em>
      Element := Array[A_Index]
    <em>; MsgBox % "Elementnummer " . A_Index . " ist " . Array%A_Index%</em>
      MsgBox % "Elementnummer " . A_Index . " ist " . Array[A_Index]
  }

</pre>
    <p><i>ArrayAnzahl</i> bleibt aus Bequemlichkeit eine Variable, die aber mit <code>Array.Anzahl := <i>n</i></code> in das Array selbst gespeichert oder mit <code>Array.<a href="../objects/Object.htm#MinMaxIndex">_MaxIndex()</a></code> ersetzt werden kann. Falls der Index nicht mit 1 beginnen soll, dann könnte auch <code>Array.<a href="../objects/Object.htm#MinMaxIndex">_MinIndex()</a></code> verwendet werden.</p>
    <h2 id="pseudo">Pseudo-Arrays</h2>
    <p>Pseudo-Arrays sind meistens konzeptionell: Jedes Array ist eigentlich nur eine Sammlung von durchnummerierten <a href="../Variables.htm">Variablen</a> oder <a href="../Functions.htm">Funktionen</a>, die als <em>Elemente</em> des Arrays wahrgenommen werden. In AutoHotkey werden diese Elemente in keiner Weise miteinander verknüpft.</p>
    <p>Zusätzlich zu Befehlen wie <a href="../commands/StringSplit.htm">StringSplit</a> und "<a href="../commands/WinGet.htm">WinGet List</a>", die Arrays erstellen, können auch Befehle zur Erstellung eines Arrays verwendet werden, die eine Ausgabevariable akzeptieren oder einen Wert in eine Variable speichern. Das einfachste Beispiel dafür ist der <a href="../commands/SetExpression.htm">Zuweisungsoperator (:=)</a>, wie unten dargestellt:</p>
    <pre>Array%j% := A_LoopField</pre>
    <p>Außerdem sind auch mehrdimensionale Arrays möglich, indem ein beliebiges Trennzeichen zwischen den Indexen verwendet wird. Zum Beispiel:</p>
    <pre>Array%j%_%k% := A_LoopReadLine</pre>
    <br>
    <p>Das folgende Beispiel verdeutlicht, wie ein Array erstellt und auf ihm zugegriffen werden kann. In diesem Fall werden mehrere Namen aus einer Textdatei abgerufen:</p>
    <pre><em><strong>; Schreibt in das Array:</strong></em>
ArrayAnzahl = 0
Loop, Read, C:\Gästeliste.txt   <em>; Diese Schleife ruft nacheinander jede Zeile der Datei ab.</em>
{
    ArrayAnzahl += 1  <em>; Behält im Blick, wie viele Elemente im Array sind.</em>
    Array%ArrayAnzahl% := A_LoopReadLine  <em>; Speichert diese Zeile ins nächste Array-Element.</em>
}

<strong>; Liest vom Array:</strong>
Loop %ArrayAnzahl%
{
    <em>; Die folgende Zeile verwendet den ":="- Operator, um ein Array-Element abzurufen:</em>
    Element := Array%A_Index%  <em>; <a href="../Variables.htm#Index">A_Index</a> ist eine interne Variable.</em>
    <em>; Alternativ kann auch der "%"-Präfix verwendet werden, damit ein MsgBox oder andere Befehle <a href="../Variables.htm#Expressions">ausdrucksfähig</a> sind:</em>
    MsgBox % "Elementnummer" . A_Index . " ist " . Array%A_Index%
}</pre>
    <p>Ein ähnliches Konzept wird mit <a href="../Functions.htm#NumPut">NumPut()</a> und <a href="../Functions.htm#NumGet">NumGet()</a> erreicht, mit denen mehrere Zahlen im Binärformat gespeichert oder abgerufen werden können. Das ist besonders hilfreich, falls die Performance und/oder Speicherauslastung von entscheidender Bedeutung sind.</p>
  </div>
  </section>
</div>
<script type="text/javascript">WriteFooter(1);</script>
</body>
</html>