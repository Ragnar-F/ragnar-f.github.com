<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>AutoHotkey-Tutorial: Makro- und Hotkey-Erstellung</title>
<meta name="keywords" content="Grundlage">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<link href="static/font.css" rel="stylesheet" type="text/css" />
<script src="static/ga.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="static/html5.js"></script>
<![endif]-->
<script src="navbar/NavScript.js" type="text/javascript"></script>
<style type="text/css">
<!--
.style1 {
	font-size: 133%;
	font-weight: bold
}
-->
</style>
</head>
<body>
<script type="text/javascript">WriteHeader(0);</script>
<div id="content">
  <section>
    <article>
    <h1>Tutorial und &Uuml;bersicht</h1>
    <p>Diese kurze Einf&uuml;hrung hilft dabei, eigene Makros und Hotkeys auf Anhieb zu programmieren.</p>
    <h2>Inhaltsverzeichnis</h2>
    <ul>
      <li class="style1"><a href="#Create">Erstellen eines Scripts</a></li>
      <li class="style1"><a href="#Launch">Ausf&uuml;hren eines Programms oder Dokuments</a></li>
      <li class="style1"><a href="#Send">Senden von Tastatureingaben und Mausklicks</a></li>
      <li class="style1"><a href="#Activate">Aktivieren und Bearbeiten von Fenstern</a></li>
      <li class="style1"><a href="#Dialogs">Abrufen von Benutzereingaben mit MsgBox, InputBox, usw.</a></li>
      <li class="style1"><a href="#Variables">Verwenden von Variablen und der Zwischenablage</a></li>
      <li class="style1"><a href="#Loop">Wiederholen von mehreren Aktionen</a></li>
      <li class="style1"><a href="#Files">Bearbeiten von Dateien und Ordnern</a></li>
      <li class="style1"><a href="#Overview">&Uuml;bersicht &uuml;ber weitere Funktionen</a></li>
    </ul>
    <h2 id="Create">Erstellen eines Scripts</h2>
    <p>Jedes Script ist eine reine Textdatei mit Befehlen, die vom Programm (AutoHotkey.exe) ausgef&uuml;hrt werden. Ein Script kann auch <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten, oder sogar nur aus diesen bestehen. Allerdings wird ein Script ohne Hotkeys und Hotstrings seine Befehle von oben nach unten nacheinander ausf&uuml;hren, sobald es gestartet wird.</p>
    <p>Ein neues Script kann wie folgt erstellt werden:</p>
    <ol>
      <li>AutoHotkey <a href="http://www.autohotkey.com/download/">herunterladen</a> und installieren.</li>
      <li>Mit der rechten Maustaste auf eine leere Stelle im Desktop oder in einem beliebigen Ordner klicken.</li>
      <li>Im dabei entstandenen Men&uuml; "<em>Neu -&gt; AutoHotkey Script</em>" ausw&auml;hlen.</li>
      <li>Dateiname eingeben und dabei beachten, dass er mit <strong>.ahk</strong> endet. Zum Beispiel: Test.ahk</li>
      <li>Mit der rechten Maustaste auf die Datei klicken und "Edit Script" ausw&auml;hlen.</li>
      <li>Auf einer neuen leeren Zeile Folgendes eingeben: <code>#space::Run www.google.de</code></li>
    </ol>
    <p>In der oberen Zeile ist das erste Zeichen "#" die Taste <kbd>Win</kbd>; das hei&szlig;t, dass die Taste <kbd>Win</kbd> gedr&uuml;ckt gehalten und danach die Leertaste gedr&uuml;ckt werden muss, um den Hotkey zu aktivieren. Das Doppelpunkt-Paar (::) hat die Bedeutung, dass nachfolgende Befehle ausgef&uuml;hrt werden sollen, sobald dieser Hotkey gedr&uuml;ckt wird. In diesem Fall wird die Webseite von Google ge&ouml;ffnet. Um dieses Script auszuprobieren, macht wie folgt weiter:</p>
    <ol>
      <li>Die Datei speichern und schlie&szlig;en.</li>
      <li>Auf die Datei doppelt klicken, um sie auszuf&uuml;hren. Dabei erscheint ein neues Icon im Benachrichtigungsfeld der Taskleiste.</li>
      <li> Haltet die Taste <kbd>Win</kbd> gedr&uuml;ckt und dr&uuml;ckt die Leertaste. Dabei &ouml;ffnet sich eine Webseite im Standard-Browser.</li>
      <li>Um das Script zu beenden oder zu bearbeiten, klickt mit der rechten Maustaste auf das gr&uuml;ne "H" im Benachrichtigungsfeld der Taskleiste.</li>
    </ol>
    <p>Hinweise:</p>
    <ul>
      <li>Es k&ouml;nnen mehrere Scripts gleichzeitig ausgef&uuml;hrt werden, jeweils mit eigenem Icon im Benachrichtigungsfeld der Taskleiste.</li>
      <li>Jedes Script kann mehrere <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten.</li>
      <li>Damit ein Script automatisch beim Start des Computers ausgef&uuml;hrt wird, <a href="FAQ.htm#Startup">erstellt eine Verkn&uuml;pfung im Autostart-Ordner des Startmen&uuml;s</a>.</li>
    </ul>
    <h2 id="Launch">Ausf&uuml;hren eines Programms oder Dokuments</h2>
    <p>Der <a href="commands/Run.htm">Run</a>-Befehl dient dazu, bestimmte Programme, Dokumente, URLs, oder Verkn&uuml;pfungen zu starten. Hier ein paar weitere Beispiele:</p>
    <pre>Run Notepad
Run C:\Eigene Dokumente\Adressliste.doc
Run C:\Eigene Dokumente\Eigene Verkn&uuml;pfung.lnk
Run www.yahoo.de
Run mailto:someone@somedomain.com</pre>
    <p>Es ist m&ouml;glich, den oben genannten Beispielen ein Hotkey zuzuweisen, indem ein <a href="Hotkeys.htm">Hotkey-Label</a> zugeordnet wird. Dem ersten unten genannten Beispiel wird der Hotkey <kbd>Win</kbd>+<kbd>N</kbd> zugewiesen, dem zweiten <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd>:</p>
    <pre>#n::Run Notepad
^!c::Run calc.exe</pre>
    <p>Die oben genannten Beispiele werden auch als einzeilige Hotkeys bezeichnet, da sie jeweils nur einen Befehl enthalten. Damit ein Hotkey mehrere Befehle ausf&uuml;hren kann, setzt die erste Zeile <u>unter</u> der Hotkeydefinition und schreibt auf der letzten Zeile ein <a href="commands/Return.htm">Return</a>. Zum Beispiel:</p>
    <pre>#n::
Run http://www.google.de
Run Notepad.exe
Return</pre>
    <p>Falls das Programm oder Dokument nicht mit dem System verkn&uuml;pft ist, muss der vollst&auml;ndige Pfad angegeben werden, damit sie ausgef&uuml;hrt werden k&ouml;nnen:</p>
    <pre>Run %A_ProgramFiles%\Winamp\Winamp.exe</pre>
    <p>Im oben genannten Beispiel ist %A_ProgramFiles% eine <a href="Variables.htm#BuiltIn">interne Variable</a>. Diese Variable macht das Script portabler, das hei&szlig;t, dass die Chance erh&ouml;ht wird, dass die Datei auch auf anderen Computern funktioniert. Hinweis: Die Namen der Befehle und Variablen sind nicht von der Gro&szlig;- und Kleinschreibung abh&auml;ngig. Zum Beispiel ist "Run" das Gleiche wie "run" und "A_ProgramFiles" das Gleiche wie "a_programfiles".</p>
    <p>Im Gegensatz zu Run wartet <a href="commands/Run.htm">RunWait</a> darauf, bis das Programm oder Dokument geschlossen wird, um danach das Script fortzusetzen. Im folgenden Beispiel wird der <a href="commands/MsgBox.htm">MsgBox</a>-Befehl erst ausgef&uuml;hrt, wenn der Benutzer den Editor schlie&szlig;t:</p>
    <pre>RunWait Notepad
MsgBox Der Benutzer ist fertig (Editor wurde geschlossen).</pre>
    <p>Um mehr &uuml;ber das Starten von Programmen zu erfahren (z. B. Parameter &uuml;bergeben, Arbeitsverzeichnis bestimmen und den Exitcode des Programms ermitteln), siehe <a href="TutorialLaunch.htm">hier</a>.</p>
    <h2 id="Send">Senden von Tastatureingaben und Mausklicks</h2>
    <p>Mithilfe des <a href="commands/Send.htm">Send</a>-Befehls k&ouml;nnen Tastatureingaben an das aktive (vorderste) Fenster gesendet werden. Im folgenden Beispiel wird mit <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd> eine Signatur eingegeben (stellt aber sicher, dass ein Fenster wie der Editor oder E-Mail-Entwurf aktiv ist, bevor dieser Hotkey gedr&uuml;ckt wird):</p>
    <pre>^!s::
Send Mit freundlichen Gr&uuml;&szlig;en,{Enter}John Smith
return</pre>
    <p>Im oben genannten Beispiel werden alle Zeichen direkt gesendet, au&szlig;er {Enter}, das ein <kbd>Enter</kbd> simuliert. Das n&auml;chste Beispiel zeigt weitere Sonderzeichen, die h&auml;ufig verwendet werden:</p>
    <pre>Send ^c!{tab}eingef&uuml;gt:^v</pre>
    <p>Diese Zeile sendet <kbd>Strg</kbd>+<kbd>C</kbd>, danach <kbd>Alt</kbd>+<kbd>Tab</kbd>, danach den String "eingef&uuml;gt:" und zum Schluss <kbd>Strg</kbd>+<kbd>V</kbd>. Siehe <a href="commands/Send.htm">Send</a> f&uuml;r eine komplette Liste von Sonderzeichen und Tasten.</p>
    <p>Letztendlich werden Tastatureingaben auch gesendet, sobald bestimmte Abk&uuml;rzungen eingegeben werden - auch bekannt als <a href="Hotstrings.htm">Hotstring</a>. Sobald der Benutzer zum Beispiel "bzw" mit einem Leerzeichen oder Komma danach eingibt, wird diese Abk&uuml;rzung durch folgende Zeile mit "beziehungsweise" ersetzt:</p>
    <pre>::bzw::beziehungsweise</pre>
    <h3>Mausklicks</h3>
    <p>Bevor ein Mausklick an ein Fenster gesendet werden kann, m&uuml;ssen zuerst die Koordinaten X und Y f&uuml;r die Klickposition ermittelt werden. Verwendet daf&uuml;r "Window Spy", das in AutoHotkey enthalten ist. Die folgenden Schritte gelten f&uuml;r die Methode mit "Window Spy":</p>
    <ol>
      <li>Startet "Window Spy" &uuml;ber das Tray-Icon-Men&uuml; des Scripts oder &uuml;ber das Startmen&uuml;.</li>
      <li>Aktiviert das gew&uuml;nschte Fenster entweder durch Klicken auf die Titelleiste, mit Alt-Tab oder andersweitig ("Window Spy" selbst bleibt "immer im Vordergrund").</li>
      <li>Bewegt den Mauszeiger auf die gew&uuml;nschte Position im Zielfenster und notiert euch die Mauskoordinaten, die vom "Window Spy" angezeigt werden (oder dr&uuml;ckt in Windows XP und niedriger <kbd>Umschalt</kbd>+<kbd>Alt</kbd>+<kbd>Tab</kbd>, um "Window Spy" zu aktivieren, damit die "eingefrorenen" Koordinaten kopiert und eingef&uuml;gt werden k&ouml;nnen).</li>
      <li>&Uuml;bertragt die ermittelten Koordinaten auf den <a href="commands/Click.htm">Click</a>-Befehl. Das folgende Beispiel klickt die linke Maustaste: <code>Click 112, 223</code></li>
    </ol>
    <p>Um die Maus ohne Klicken zu verschieben, verwendet <a href="commands/MouseMove.htm">MouseMove</a>. Um die Maus zu ziehen, verwendet <a href="commands/MouseClickDrag.htm">MouseClickDrag</a>.</p>
    <h2 id="Activate">Aktivieren und Bearbeiten von Fenstern</h2>
    <p>Um das Fenster zu aktivieren (in den Vordergrund setzen), verwendet <a href="commands/WinActivate.htm">WinActivate</a>. Um zu &uuml;berpr&uuml;fen, ob das Fenster vorhanden ist, verwendet <a href="commands/IfWinExist.htm">IfWinExist</a> oder <a href="commands/WinWait.htm">WinWait</a>. Das folgende Beispiel verdeutlicht diese Befehle:</p>
    <pre>IfWinExist Unbenannt - Editor
{
    WinActivate
}
else
{
    Run Notepad
    WinWait Unbenannt - Editor
    WinActivate
}</pre>
    <p>Das obere Beispiel sucht zuerst nach vorhandenen Fenstern, deren Titel mit "Unbenannt - Editor" beginnt (von der Gro&szlig;- und Kleinschreibung abh&auml;ngig). Sobald so ein Fenster gefunden wird, wird es aktiviert. Ansonsten startet das Script den Editor und wartet darauf, bis das Fenster "Unbenannt - Editor" erscheint, um es dann zu aktivieren. Das obere Beispiel nutzt auch das <a href="LastFoundWindow.htm">zuletzt gefundene Fenster</a>, um zu verhindern, dass bei WinActivate jedesmal der Fenstertitel angegeben werden muss.</p>
    <p>Weitere h&auml;ufig verwendete Fensterbefehle:</p>
    <ul>
      <li><a href="commands/IfWinActive.htm">IfWinActive</a>: &Uuml;berpr&uuml;ft, ob das angegebene Fenster zurzeit aktiv ist.</li>
      <li><a href="commands/WinWaitActive.htm">WinWaitActive</a>: Wartet darauf, bis das angegebene Fenster aktiv ist (in der Regel nach dem Senden einer fensteraktivierenden Tastatureingabe wie <kbd>Strg</kbd>+<kbd>F</kbd> f&uuml;r "Suchen").</li>
      <li><a href="commands/WinClose.htm">WinClose</a>: Schlie&szlig;t das angegebene Fenster.</li>
      <li><a href="commands/WinMove.htm">WinMove</a>: Verschiebt das Fenster und/oder &auml;ndert dessen Gr&ouml;&szlig;e.</li>
      <li><a href="commands/WinMinimize.htm">WinMinimize</a>, <a href="commands/WinMaximize.htm">WinMaximize</a>, <a href="commands/WinRestore.htm">WinRestore</a>: Minimieren, Maximieren oder Wiederherstellen des angegebenen Fensters.</li>
    </ul>
    <h2 id="Dialogs">Abrufen von Benutzereingaben mit MsgBox, InputBox, usw.</h2>
    <p>Das folgende Beispiel zeigt ein Dialogfenster mit zwei Schaltfl&auml;chen an (JA und NEIN):</p>
    <pre><a href="commands/MsgBox.htm">MsgBox</a>, 4, , M&ouml;chten Sie fortfahren?
<a href="commands/IfMsgBox.htm">IfMsgBox</a>, No
    return
<em>; Ansonsten hat der Benutzer JA gedr&uuml;ckt.</em>
MsgBox Es wurde JA gedr&uuml;ckt.</pre>
    <p>Verwendet den <a href="commands/InputBox.htm">InputBox</a>-Befehl, um den Benutzer aufzufordern, einen String einzugeben. Verwendet <a href="commands/FileSelectFile.htm">FileSelectFile</a> oder <a href="commands/FileSelectFolder.htm">FileSelectFolder</a>, um den Benutzer dazu zu bringen, eine Datei oder einen Ordner auszuw&auml;hlen. F&uuml;r komplexere Aufgaben kann der <a href="commands/Gui.htm">Gui</a>-Befehl verwendet werden, um benutzerdefinierte Dateneingabeformulare und Benutzeroberfl&auml;chen zu erstellen.</p>
    <p>Tipp: Wie bereits bemerkt, kann bei jedem Befehl das erste Komma weggelassen werden (au&szlig;er wenn der erste Parameter leer ist oder mit := oder = beginnt, oder der Befehl am Anfang eines <a href="Scripts.htm#continuation">Fortsetzungsbereichs</a> alleine vorkommt). Zum Beispiel:</p>
    <pre>MsgBox Das ist ok.
MsgBox<strong>,</strong> Das ist auch ok (es hat ein direktes Komma).</pre>
    <h2 id="Variables">Verwenden von Variablen und der Zwischenablage</h2>
    <p>Eine <em>Variable</em> ist ein Speicherbereich, in der Text oder Zahlen vom Script gespeichert werden. Sobald eine Variable nur Ziffern enth&auml;lt (optional mit einem Dezimalpunkt), wird sie bei einer mathematischen Operation oder bei einem Vergleich automatisch als Zahl interpretiert.</p>
    <p>Mit Ausnahme von lokalen Variablen in <a href="Functions.htm#Locals">Funktionen</a> sind alle Variablen global; das hei&szlig;t, dass deren Inhalte jederzeit vom Script gelesen oder ge&auml;ndert werden k&ouml;nnen. Dar&uuml;ber hinaus m&uuml;ssen Variablen nicht deklariert werden; sie stehen zur Verf&uuml;gung, sobald sie verwendet werden (au&szlig;erdem ist jede Variable anfangs leer).</p>
    <p>Um der Variable einen String zuzuweisen, befolgt diese Beispiele:</p>
    <pre>EigeneVar1 = 123
EigeneVar2 = Eigener String</pre>
    Um den Inhalt einer Variable mit einer Zahl oder mit einem String zu vergleichen, befolgt diese Beispiele:
    <pre>if EigeneVar2 = Eigener String
{
    MsgBox EigeneVar2 enth&auml;lt den String "Eigener String".
}
if EigeneVar1 &gt;= 100
{
    MsgBox EigeneVar1 enth&auml;lt %EigeneVar1%, eine Zahl gr&ouml;&szlig;er gleich 100.
}</pre>
    <p>Beachtet bei der oben genannten MsgBox-Zeile, dass das zweite Vorkommen von <em>EigeneVar1</em> in Prozentzeichen gesetzt ist. Dadurch wird der Inhalt von <em>EigeneVar1</em> an dieser Position angezeigt. Mit der gleichen Technik ist es m&ouml;glich, den Inhalt einer Variable in eine andere Variable zu kopieren. Zum Beispiel:</p>
    <pre>EigeneVarVerkettung = %EigeneVar1% %EigeneVar2%</pre>
    <p>Die obere Zeile speichert den String "123 Eigener String" (ohne Anf&uuml;hrungszeichen) in <em>EigeneVarVerkettung</em>.</p>
    <p>Um den Inhalt einer Variable mit dem Inhalt einer anderen Variable zu vergleichen, siehe dieses Beispiel:</p>
    <pre>if (Elementz&auml;hlung &gt; Elementmaximum)
{
    MsgBox Der Wert von Elementz&auml;hlung (%Elementz&auml;hlung%) ist gr&ouml;&szlig;er als %Elementmaximum%.
}</pre>
    <p>Beachtet, dass die erste Zeile im obigen Beispiel Klammern enth&auml;lt. Diese Klammern verdeutlichen, dass die If-Anweisung ein <a href="Variables.htm#Expressions">Ausdruck</a> enth&auml;lt. Sollten sie nicht vorhanden sein, w&uuml;rde diese Zeile als eine "If-Anweisung ohne Ausdruck" behandelt werden. Das hei&szlig;t, dass <em>Elementmaximum</em> in Prozentzeichen gesetzt werden m&uuml;sste (solche If-Anweisungen sind auf einen Vergleichsoperator beschr&auml;nkt; das hei&szlig;t, dass sie weder mathematische Operatoren noch Bindew&ouml;rter wie "AND" und "OR" enthalten k&ouml;nnen).</p>
    <h3>Berechnung</h3>
    <p>Mathematische Operationen k&ouml;nnen durchgef&uuml;hrt werden, indem der Doppelpunkt-Gleich-Operator (:=) dazu verwendet wird, das Ergebnis eines <a href="Variables.htm#Expressions">Ausdrucks</a> in einer Variable zu speichern. Zum Beispiel:</p>
    <pre>Nettopreis := Preis * (1 - Rabatt/100)</pre>
    <p>Siehe <a href="Variables.htm#Expressions">Ausdr&uuml;cke</a> f&uuml;r eine komplette Liste von mathematischen Operatoren.</p>
    <h3>Zwischenablage</h3>
    <p>Die Variable namens <em>Clipboard</em> hat eine besondere Bedeutung, da sie den aktuellen Text der Windows-Zwischenablage enth&auml;lt. Dennoch kann sie weiterhin als normale Variable verwendet werden. Das folgende Beispiel zeigt den aktuellen Inhalt der Zwischenablage an:</p>
    <pre>MsgBox %Clipboard%</pre>
    <p>Das n&auml;chste Beispiel verdeutlicht, wie der aktuelle Inhalt der Zwischenablage mit neuem Text ersetzt werden kann:</p>
    <pre>Clipboard = Erste Textzeile.`r`nZweite Textzeile.`r`n</pre>
    <p>In der oberen Zeile werden `r und `n (Akzent, gefolgt vom Buchstaben "r" oder "n") dazu verwendet, zwei Sonderzeichen zu kennzeichnen: CR und LF. Diese zwei Zeichen beginnen eine neue Textzeile, als h&auml;tte der Benutzer <kbd>Enter</kbd> gedr&uuml;ckt.</p>
    <p>Im n&auml;chsten Beispiel wird gezeigt, wie ein beliebiger Text an die Zwischenablage angef&uuml;gt wird (oder an einer anderen Variable):</p>
    <pre>Clipboard = %Clipboard% und der angef&uuml;gte Text.</pre>
    <p>Siehe <a href="misc/Clipboard.htm">Clipboard</a> und <a href="Variables.htm">Variablen</a> f&uuml;r weitere Details.</p>
    <h2 id="Loop">Wiederholen von mehreren Aktionen </h2>
    <p>Um etwas mehr als einmal nacheinander auszuf&uuml;hren, verwendet eine <a href="commands/Loop.htm">Schleife</a>. Mit der folgenden Schleife wird eine <a href="commands/MsgBox.htm">MsgBox</a> dreimal angezeigt:</p>
    <pre>Loop 3
{
    MsgBox Dieses Fenster wird dreimal angezeigt.
}</pre>
    <p>Au&szlig;erdem ist es m&ouml;glich, eine Variable nach dem Wort Loop anzugeben. Besonders n&uuml;tzlich in Situationen, wo die Anzahl an Iterationen (Durchl&auml;ufe) irgendwo innerhalb des Scripts bestimmt wurde:</p>
    <pre>Loop %Ausf&uuml;hrungsanzahl%
{
    Run C:\Serverstatus&uuml;berpr&uuml;fung.exe
    Sleep 60000  <em>; Wartet 60 Sekunden.</em>
}</pre>
    <p>Im oberen Beispiel wird die Schleife je nach Anzahl mehrfach durchgef&uuml;hrt, es sei denn, Ausf&uuml;hrungsanzahl enth&auml;lt 0, in diesem Fall wird die Schleife komplett &uuml;bersprungen.</p>
    <p>Eine Schleife kann sich auch selbst beenden, sobald sich eine oder mehrere Bedingungen &auml;ndern. Das folgende Beispiel klickt mehrmals mit der linken Maustaste, w&auml;hrend der Benutzer die Taste <kbd>F1</kbd> gedr&uuml;ckt h&auml;lt:</p>
    <pre>$F1::  <em>; Macht die  F1-Taste zu einem Hotkey (das $-Symbol unterst&uuml;tzt den "P"-Modus von GetKeyState unten).</em>
Loop  <em>; Da hier keine Z&auml;hlung angegeben wird, erfolgt eine Endlosschleife, es sei denn, "break" oder "return" tritt auf.</em>
{
    if not GetKeyState("F1", "P")  <em>; Wenn diese Anweisung wahr ist, dann hat der Benutzer die F1-Taste losgelassen.</em>
        break  <em>; Schleife unterbrechen.</em>
    <em>; Ansonsten die Maustaste gedr&uuml;ckt halten (da sie oben nicht "unterbrochen" wird).</em>
    Click  <em>; Klickt mit der linken Maustaste einmal auf die aktuelle Position des Mauszeigers.</em>
}
Return</pre>
    <p>Sobald der Benutzer beim oberen Beispiel die Taste <kbd>F1</kbd> losl&auml;sst, stoppt sich die Schleife mithilfe des <a href="commands/Break.htm">Break</a>-Befehls selbst. <em>Break</em> bewirkt, dass die Ausf&uuml;hrung auf die Zeile nach der schlie&szlig;enden Klammer der Schleife springt.</p>
    <p>Um den gleichen Effekt auf anderem Wege zu erzielen, verwendet eine <a href="commands/While.htm">"While"-Schleife</a>:</p>
    <pre>$F1::
While GetKeyState("F1", "P")  <em>; W&auml;hrend die F1-Taste physisch gedr&uuml;ckt gehalten wird.</em>
{
    Click
}
return</pre>
    <p>Die oben genannten Beispiele sind Schleifen, die f&uuml;r mehrere Zwecke geeignet sind. F&uuml;r speziellere Anforderungen k&ouml;nnen folgende Schleifen in Betracht gezogen werden:</p>
    <p><a href="commands/LoopReadFile.htm">Dateilesende/schreibende Schleife</a>: Ermittelt nacheinander die Zeilen einer Textdatei. Mit so einer Schleife kann eine Datei Zeile f&uuml;r Zeile in ein anderes Format umgewandelt werden. Sie kann auch dazu verwendet werden, nach Zeilen zu suchen, die den eigenen Kriterien entsprechen.</p>
    <p><a href="commands/LoopFile.htm">Schleife f&uuml;r Dateien und Ordnern</a>: Ermittelt nacheinander die angegebenen Dateien oder Ordner. Dadurch k&ouml;nnen Operationen auf Dateien oder Ordner ausgef&uuml;hrt werden, die die eigenen Kriterien erf&uuml;llen.</p>
    <p><a href="commands/LoopParse.htm">Parsing-Schleife</a>: Ermittelt nacheinander Teilstrings aus einem String. Dadurch kann ein String wie "Rot,Gr&uuml;n,Blau" einfach in drei Felder aufgeteilt werden.</p>
    <p><a href="commands/LoopReg.htm">Registrierung-Schleife</a>: Ermittelt nacheinander den Inhalt des angegebenen Unterschl&uuml;ssels.</p>
    <h2 id="Files">Bearbeiten von Dateien und Ordnern</h2>
    <p>Um Text ans Ende einer Datei anzuf&uuml;gen (oder eine neue Datei zu erstellen), verwendet <a href="commands/FileAppend.htm">FileAppend</a> wie im folgenden Beispiel. Beachtet, dass `n (LF) verwendet wird, um nachfolgend eine neue Textzeile zu beginnen:</p>
    <pre>FileAppend, Eine anf&uuml;gende Textzeile.`n, C:\Eigene Dokumente\Eigene Textdatei.txt</pre>
    <p>Um eine vorhandene Datei zu &uuml;berschreiben, l&ouml;scht sie vorher mit <a href="commands/FileDelete.htm">FileDelete</a>. Zum Beispiel:</p>
    <pre>FileDelete, C:\Eigene Dokumente\Eigene Textdatei.txt</pre>
    <p>Weitere Datei- oder Ordnerbefehle, die h&auml;ufig verwendet werden:</p>
    <ul>
      <li><a href="commands/FileRead.htm">FileRead</a>: Liest den Inhalt einer Datei in eine Variable.</li>
      <li><a href="commands/LoopReadFile.htm">Dateilesende Schleife</a>: Ermittelt nacheinander die Zeilen einer Textdatei.</li>
      <li><a href="commands/IfExist.htm">IfExist</a>: &Uuml;berpr&uuml;ft, ob eine Datei oder ein Ordner vorhanden ist.</li>
      <li><a href="commands/FileSelectFile.htm">FileSelectFile</a> und <a href="commands/FileSelectFolder.htm">FileSelectFolder</a>: Zeigt ein Dialogfenster f&uuml;r den Benutzer an, um eine Datei oder einen Ordner auszuw&auml;hlen.</li>
      <li><a href="commands/FileDelete.htm">FileDelete</a>/<a href="commands/FileRecycle.htm">FileRecycle</a>: L&ouml;scht/recycelt beliebig viele Dateien. Verwendet <a href="commands/FileRemoveDir.htm">FileRemoveDir</a>, um einen ganzen Ordner zu l&ouml;schen.</li>
      <li><a href="commands/FileCopy.htm">FileCopy</a>/<a href="commands/FileMove.htm">FileMove</a>: Kopiert/verschiebt beliebig viele Dateien. Verwendet <a href="commands/FileCopyDir.htm">FileCopyDir</a>/<a href="commands/FileMoveDir.htm">FileMoveDir</a>, um einen ganzen Ordner zu kopieren/verschieben. </li>
      <li><a href="commands/LoopFile.htm">Schleife f&uuml;r Dateien und Ordnern</a>: Ermittelt nacheinander die angegebenen Dateien oder Ordner. </li>
      <li><a href="commands/FileSetAttrib.htm">FileSetAttrib</a> und <a href="commands/FileSetTime.htm">FileSetTime</a>: &Auml;ndert die Attribute oder Zeitstempel von beliebig vielen Dateien oder Ordnern.</li>
      <li><a href="commands/IniRead.htm">IniRead</a>, <a href="commands/IniWrite.htm">IniWrite</a> und <a href="commands/IniDelete.htm">IniDelete</a>: Erstellt, ermittelt und verwaltet INI-Dateien im Standardformat.</li>
      <li><a href="commands/RegRead.htm">RegRead</a>, <a href="commands/RegWrite.htm">RegWrite</a>, <a href="commands/RegDelete.htm">RegDelete</a> und <a href="commands/LoopReg.htm">Registrierung-Schleife</a>: Bearbeitet die Windows-Registrierung.</li>
    </ul>
    <h2 id="Overview">&Uuml;bersicht &uuml;ber weitere Funktionen</h2>
    <p>Siehe <a href="commands/index.htm">Befehlsliste</a> f&uuml;r eine &Uuml;bersicht &uuml;ber alle Befehle.</p>
    <p>&nbsp;</p>
  </article>
  </section>
</div>
<script type="text/javascript">WriteFooter(0);</script>
</body>
</html>