<!DOCTYPE html>
<html lang="de">
	<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8"><!--Tutorial by tidbit, from http://ahkscript.github.io/AHK_Tutorial/
				Modified to fit with the AutoHotkey documentation.-->
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		
		<meta name="author" content="tidbit" />
		<meta name="description" content="Ein AutoHotkey-Tutorial, geschrieben von tidbit"/>
		<meta name="keywords" content="ahk, autohotkey, tutorial, anfänger guide"/>
		<title>AutoHotkey Anfänger-Tutorial</title>
		<link href="static/theme.css" rel="stylesheet" type="text/css" />
		<script src="static/ga.js" type="text/javascript"></script>
<script src="static/content.js" type="text/javascript"></script>
		<style type="text/css">
		.key
		{
			background-color: #f7f7f7;
			border: 1px solid #ccc;
			border-radius: 3px;
			box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 0 0 2px #fff inset;
			color: #333;
			display: inline-block;
			font-size: 90%;
			line-height: 1.4;
			margin: 0 0.1em;
			padding: 0.1em 0.5em;
			text-shadow: 0 1px 0 #fff;
			white-space: nowrap;
		}
		.indented {
			text-indent: 1.5em;
			margin-bottom: 1em;
		}
		</style>
	</head>
	<body>
		<div class="page">
			<h1>AutoHotkey Anfänger-Tutorial <span style="opacity:0.4">von tidbit</span></h1>
			<div id="toc" class="section">
				<h3>Inhaltsverzeichnis</h3>
				<ol>
					<li><a href="#s1" class="toci">Die Grundlagen</a>
						<ol>
							<li><a href="#s11" class="toci">AutoHotkey herunterladen</a></li>
							<li><a href="#s12" class="toci">Wie erstellt man ein Script</a></li>
							<li><a href="#s13" class="toci">Befehle kann man nicht zusammenführen</a></li>
							<li><a href="#s14" class="toci">Sonstige grundlegende Informationen</a></li>
						</ol>
					</li>
					<li><a href="#s2" class="toci">Hotkeys &amp; Hotstrings</a>
						<ol>
							<li><a href="#s21" class="toci">Tasten und Symbole</a></li>
							<li><a href="#s22" class="toci">Fenster-spezifisch</a></li>
							<li><a href="#s23" class="toci">Mehrere Hotkeys pro Datei</a></li>
							<li><a href="#s24" class="toci">Beispiele</a></li>
						</ol>
					</li>
					<li><a href="#s3" class="toci">Senden von Tastatureingaben</a>
						<ol>
							<li><a href="#s31" class="toci">Spiele</a></li>
						</ol>
					</li>
					<li><a href="#s4" class="toci">Starten von Programmen &amp; Webseiten</a></li>
					<li><a href="#s5" class="toci">Befehle vs. Funktionen()</a>
						<ol>
							<li><a href="#s51" class="toci">Code-Blöcke</a></li>
						</ol>
					</li>
					<li><a href="#s6" class="toci">Variablen</a>
						<ol>
							<li><a href="#s61" class="toci">Wann und wo Prozentzeichen verwendet werden</a></li>
							<li><a href="#s62" class="toci">Abrufen von Benutzereingaben</a></li>
							<li><a href="#s63" class="toci">Weitere Beispiele</a></li>
						</ol>
					</li>
					<li><a href="#s7" class="toci">Objekte</a>
						<ol>
							<li><a href="#s71" class="toci">Erstellen von Objekten</a></li>
							<li><a href="#s72" class="toci">Verwenden von Objekten</a></li>
						</ol>
					</li>
					<li><a href="#s8" class="toci">Andere hilfreiche Goodies</a>
						<ol>
							<li><a href="#s81" class="toci">Die mysteriösen []'s</a></li>
							<li><a href="#s82" class="toci">Herausfinden deiner AHK-Version</a></li>
							<li><a href="#s83" class="toci">Trial-and-Error-Prinzip</a></li>
							<li><a href="#s84" class="toci">Einrückung</a></li>
							<li><a href="#s85" class="toci">Um Hilfe bitten</a></li>
							<li><a href="#s86" class="toci">Andere Links</a></li>
						</ol>
					</li>
				</ol>
			</div>
			<div id="bodyContent">
				<div id="basics" class="section">
					<h2 id="s1">1 - Die Grundlagen</h2>
					<p class="note">
						Bevor wir unsere Reise beginnen, solltest du folgendes beachten. Über das ganze Tutorial hinweg wirst du auf viel Text und Code treffen. Für das optimale Lernen ist es ratsam, den Text zu lesen und den Code <b>auszuprobieren</b>. Untersuche dann den Code.
						<br />Die meisten Beispiele auf dieser Seite kannst du kopieren und einfügen.
						<br />Wenn du durcheinander kommst, versuche den Abschnitt nochmals zu lesen.
					</p>

					<h3 id="s11">a. AutoHotkey herunterladen und installieren</h3>

					<script type="text/javascript">
					if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
						document.write('<p class="note">Since you\'re viewing this documentation locally, you\'ve probably already installed AutoHotkey and can skip to section b.</p>');
					</script>
					<p>
						Bevor du lernst, wie man AutoHotkey (AHK) verwendet, muss du es herunterladen. Nachdem du es heruntergeladen hast, musst du es möglicherweise erst installieren. Aber das ist abhängig davon, welche Version du willst. In diesem Guide verwenden wir den Installer, da er am einfachsten einzurichten ist.
					</p>


					<h3>Anleitung:</h3>
					<ol>
						<li>Öffne die Hauptseite von AutoHotkey. <a href="http://ahkscript.org/">http://ahkscript.org/</a>
						</li>
						<li>Klicke auf Download. <a href="http://ahkscript.org/download/ahk-install.exe">http://ahkscript.org/download/ahk-install.exe</a>
						</li>
						<li>
							Während der Installation von AutoHotkey erscheint die Auswahl zwischen UNICODE oder ANSI. In den meisten Fällen wirst du wahrscheinlich UNICODE benötigen. Es unterstützt nicht-englische Buchstaben und Zahlen (Zeichen). Mache weiter, bis du den Install-Button siehst.
						</li>
						<li>Sobald das erledigt ist, großartig! Weiter geht's mit Abschnitt b.</li>
					</ol>
					<p class="note">Video-Anleitung (englisch):<br />
						
						Frankie's "Install and Hello World"<br />
						<a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>
					</p>

					<h3 id="s12">b. Wie erstellt man ein Script</h3>
					<p>
						Nachdem du AutoHotkey installiert hast, möchtest du es wahrscheinlich dazu bringen, irgendetwas zu tun. AutoHotkey ist keine Zauberei - wir alle wünschten, es wäre so, ist es aber nicht. Also müssen wir AutoHotkey sagen, was zu tun ist. Diesen Vorgang nennt man "Scripting".
					</p>

					<h3>Anleitung:</h3>
					<ul>
						<li>1. Mache einen Rechtsklick auf deinem Desktop.</li>
						<li>2. Finde "Neu" im Menü.</li>
						<li>3. Klicke auf "AutoHotkey Script" innerhalb des "Neu"-Menüs.</li>
						<li>4. Gebe dem Script einen neuen Namen. Hinweis: Es muss mit der Erweiterung .ahk enden. Beispiel: MeinScript.ahk</li>
						<li>5. Finde die neu erstellte Datei auf deinem Desktop und mache einen Rechtsklick darauf.</li>
						<li>6. Klicke auf "Edit Script".</li>
						<li>7. Es müsste ein Fenster erscheinen, wahrscheinlich der Texteditor. Wenn ja, ERFOLG!
						<hr />
						<p>
							Nun, da du ein Script erstellt hast, müssen wir also Dinge in die Datei einfügen. Eine Liste von allen integrierten Befehlen, Funktionen und Variablen findest du im <a href="#s5">Abschnitt 5</a>.<br />
						</p>
						<p>
							Hier ein sehr einfaches Script, das Text mithilfe des <a href="commands/Send.htm">Send</a>-Befehls schreibt, sobald man den Hotkey drückt.
						</p>

<pre>
^j::
   Send, Mein erstes Script
Return
</pre>
						<p>
							Später werden wir mehr darüber erfahren. Bis dahin erkläre ich dir, was der obige Code bedeutet.<br />

							- Die erste Zeile. <code>^j::</code> ist der Hotkey. <code>^</code> bedeutet <span class="key">STRG</span>, <code>j</code> ist die Taste <span class="key">j</span>. Alles was sich auf der <b>linken</b> Seite von <code>::</code> befindet, sind Tasten, die du drücken musst.<br />

							- Die zweite Zeile. <code>Send, Mein erstes Script</code> ist der Vorgang zum SENDEN von Tastatureingaben. <code>SEND</code> ist der Befehl, alles nach dem Komma (,) wird geschrieben.<br />

							- Die dritte Zeile. <code>Return</code>. Return wird dein bester Freund werden. Es STOPPT sprichwörtlich dein Code, bei den Zeilen danach weiterzumachen. Dies wird viele Probleme verhindern, wenn dein Script sich immer mehr füllt.
						</p>
						<hr />
						</li><li>8. Speichere die Datei.</li>
						<li>9. Mache einen Doppelklick auf die Datei / das Icon im Desktop, um das Script zu starten. Öffne den Texteditor (oder wo auch immer du etwas schreiben kannst) und drücke <span class="key">STRG</span> und <span class="key">J</span>.</li>
						<li>10. Hip Hip Hurra! Dein erstes Script ist fertig. Hole dir ein paar Belohnungs-Snacks und komme dann zurück, um den Rest dieses Tutorials zu lesen.</li>
					</ul>

					<p class="note">
						Video-Anleitung (englisch):<br />
						
						Frankie's "Install and Hello World"<br /><a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>

					</p>
					<h3 id="s13">c. Befehle kann man nicht zusammenführen</h3>
					<p>
						Beim Erstellen deines Codes hast du vielleicht schon den Drang gehabt, mehrere Befehle auf einer Zeile oder sogar ineinander zu setzen - lasse es. Im <a href="#s5">Abschnitt 5</a> reden wir darüber, warum das so nicht funktioniert, wie man es erwarten würde, und was man stattdessen tun könnte.
					</p>

					<h3 id="s14">d. Sonstige grundlegende Informationen</h3>
					<div>
						So findest du die englische Hilfe-Datei auf deinem Computer:<br />
						Es gibt dafür mehrere Möglichkeiten, sofern AutoHotkey in den voreingestellten Standorten installiert wurde.<br /><br />
						Methode 1:
						<ol>
							<li>Finde das Startmenü oder Windows-Symbol auf deinem Bildschirm, üblicherweise unten links.</li>
							<li>Klicke auf <b>Programme</b> oder <b>Alle Programme</b>.</li>
							<li>Finde <b>AutoHotkey</b> in der Liste.</li>
							<li>Nun müsstest du <b>AutoHotkey Help File</b> sehen. Klicke darauf.</li>
							<li>Fertig!</li>
						</ol>
						Methode 2:
						<ol>
							<li>Gehe auf deinem Desktop.</li>
							<li>Finde <b>Arbeitsplatz</b> oder <b>Computer</b>. Öffne es.</li>
							<li>Gehe in deine Festplatte, die <b>AutoHotkey</b> enthält. Wahrscheinlich das Laufwerk <b>C:\</b>.</li>
							<li>Suche in allen "<b>Program Files</b>"-Ordnern nach <b>AutoHotkey</b>.</li>
							<li>Suche nach <b>AutoHotkey.chm</b> oder einer Datei, die AutoHotkey heißt und ein gelbes Fragezeichen hat.</li>
							<li>Fertig!</li>
						</ol>
					</div>
					<p class="note">
						Online-Links:<br />
						<a href="http://ahkscript.org/docs/">Dokumentation</a><br />
						<a href="http://ahkscript.org/docs/commands/">Befehlsliste</a><br />
						<a href="http://ahkscript.org/docs/Functions.htm#BuiltIn">Funktionen</a><br />
						<a href="http://ahkscript.org/docs/Variables.htm">Variablen</a>
					</p>
				</div>
				<div id="hotkeys_and_hotstrings" class="section">
					<h2 id="s2">2 - Hotkeys &amp; Hotstrings</h2>

					<p>
						Was ist ein Hotkey? Ein Hotkey ist eine Taste, die verdammt heiß ist. ... war nur ein Scherz. Ein Hotkey ist eine Taste oder Tastenkombination, die der Benutzer auf der Tastatur drücken kann, um einige Aktionen auszulösen.<br />
						Was ist ein Hotstring? Hotstrings werden hauptsächlich verwendet, um Abkürzungen bei Eingabe zu erweitern (Auto-Ersetzen); sie können auch verwendet werden, um eine gescriptete Aktion zu starten.
					</p>

					<p>Hier ein Hotkey:</p>

<pre>
^j::
   Send, Mein erstes Script
Return
</pre>

					<p>Hier ein Hotstring:</p>

<pre>
::ftw::Free the whales
</pre>

					<p>Der Unterschied zwischen den beiden Beispielen ist, dass der Hotkey ausgelöst wird, wenn du <span class="key">STRG+J</span> drückst, während der Hotstring dein geschriebenes "ftw" in "Free the whales" umwandelt.</p>
					<p>
						<i>"Also, wie genau kann man einen Hotkey erstellen?"</i> Gute Frage. Ein Hotkey erstellt man mithilfe eines einzelnen Paares von ::'s. Die Taste oder Tastenkombination muss auf die <b>linke</b> Seite von <code>::</code>. Der Inhalt muss darunter stehen, gefolgt von einem <code>Return</code>.<br />
					</p>
					<p class="note">Hinweis: Es gibt Ausnahmen, allerdings führen sie oft zu Verwechslungen. Daher werden sie erst einmal im Tutorial nicht erwähnt.</p>
<pre>
esc::
   MsgBox Escape!!!!
Return
</pre>
					<p>Ein Hotstring hat auf jeder Seite des Textes, der das Ersetzen des Textes auslösen soll, ein Paar von ::'s. Während der Text, der dein geschriebenen Text ersetzen soll, auf der <b>rechten</b> Seite des zweiten Paares von ::'s erfolgt.</p>
					<p>Hotstrings können, wie bereits erwähnt, auch gescriptete Aktionen starten. Eine ausgefallene Bezeichnung für <i>"tut so ziemlich alles"</i>. Das gleiche gilt für Hotkeys.</p>
<pre>
::bzw::
MsgBox Du hast "bzw" eingegeben.
Return
</pre>

					<p>
						Auch muss erwähnt werden, dass jeder Hotkey, Hotstring, Label und andere Dinge, über die wir noch nicht geredet haben, viele Codezeilen enthalten kann.
					</p>

<pre>
^j::
   MsgBox Wow!
   MsgBox Das sind
   Run, Notepad.exe
   winactivate, Unbenannt - Editor
   WinWaitActive, Unbenannt - Editor
   send, 7 Zeilen{!}{enter}
   sendinput, innerhalb des STRG{+}J-Hotkeys
Return
</pre>

					<h3 id="s21">a. Tasten und ihre mysteriösen Symbole</h3>

					<div>
						Vielleicht hast du dich schon gefragt <i>"Woher zum Teufel soll ich wissen, dass ^ STRG bedeutet?!"</i>. Nun, gute Frage. Um dir beizubringen, was ^ und andere Symbole bedeuten, solltest du einen Blick auf diese Tabelle werfen:<br />
						<table class="info">
							<tr><th>Symbol</th><th>Beschreibung</th></tr>
							<tr><td><strong>#</strong></td><td>WIN-Taste (Windows-Logo-Taste)</td></tr>
							<tr><td><strong>!</strong></td><td>ALT-Taste</td></tr>
							<tr><td><strong>^</strong></td><td>STRG-Taste</td></tr>
							<tr><td><strong>+</strong></td><td>UMSCHALT-Taste</td></tr>
							<tr>
								<td>
									<strong>&amp;</strong>
								</td>
								<td>
									Ein Und-Zeichen kann zwischen zwei beliebigen Tasten oder Maustasten verwendet werden, um diese zu einem benutzerdefinierten Hotkey zu verbinden.
								</td>
							</tr>
						</table>
						<p>
							<strong>
								(Die vollständige Liste der Symbole findest du auf der <a href="Hotkeys.htm">Hotkey</a> -Seite)
							</strong>
						</p>
					</div>
					<p>
						Desweiteren findest du hier eine Liste von allen / der meisten Hotkey-Namen, die auf der <b>linken</b> Seite von Hotkey's ::-Symbol verwendet werden können:<br /><a href="KeyList.htm">KeyList.htm</a>
					</p>
					<p>
						Mithilfe von <b>&amp;</b> kann eine benutzerdefinierte Kombination von zwei (und nur zwei) Tasten (außer Joystick-Tasten) definiert werden. Im folgenden Beispiel würde der Hotkey ausgelöst werden, wenn man <span class="key">Numpad0</span> gedrückt hält und danach die zweite Taste drückt:
					</p>

<pre>
Numpad0 &amp; Numpad1::
   MsgBox, Sie haben Numpad1 gedrückt, während Numpad0 gedrückt wurde.
Return

Numpad0 &amp; Numpad2::
	Run Notepad
Return
</pre>

					<p>
						Aber du wirst dich bestimmt jetzt fragen, ob Hotstrings irgendwelche coolen Modifikatoren haben, so wie Hotkeys auch. Ja, das tun sie!<br />
						Hotstring-Modifikatoren werden in den ersten Satz von ::'s eingefügt. Zum Beispiel:
					</p>

<pre>
:*:ftw::Free the whales
</pre>

					<p class="note">
						Weitere Hotkey- und Hotstring-Modifikatoren, Informationen und Beispiele findest du auf:<br />
						<a href="Hotkeys.htm">Hotkeys</a><br />
						<a href="Hotstrings.htm">Hotstrings</a>
					</p>
					<h3 id="s22">b. Fenster-spezifische Hotkeys/Hotstrings</h3>

					<p>Manchmal könntest du wollen, dass ein Hotkey oder Hotstring nur in einem bestimmten Fenster funktioniert (deaktiviert ist). Dazu brauchst du einen dieser ausgefallenen Befehle, die ein # davor haben.</p>
					<p>#IfWinActive<br />
					
					#IfWinExist</p>
					<p>
						Diese speziellen Befehle (auch "Direktiven" genannt) erstellen kontextabhängige Hotkeys und Hotstrings. Gebe einfach einen Fenstertitel an. Aber in einigen Fällen möchtest du vielleicht ein HWND, eine Gruppe oder eine Klasse angeben. Solche erfordern fortgeschrittenes Wissen und werden hier ausführlicher behandelt: <a href="commands/_IfWinActive.htm">#IfWinActive</a>.
					</p>
<pre>
#IfWinActive Unbenannt - Editor
#space::
   MsgBox Du hast WIN+LEERTASTE im Texteditor gedrückt.
Return
#IfWinActive
</pre>
					<p>Um die Kontextabhängigkeit zu deaktivieren, muss eine #IfWin-Direktive ohne Parameter angegeben werden. Zum Beispiel:</p>
<pre>
<em>; Texteditor</em>
#IfWinActive unbenannt - Editor
!q::
   MsgBox, Du hast ALT+Q im Texteditor gedrückt.
Return
#IfWinActive

<em>; Jedes andere Fenster, das nicht "Unbenannt - Editor" ist</em>
!q::
   MsgBox, Du hast ALT+Q in einem beliebigen Fenster gedrückt.
Return
</pre>
					<p>Wenn #IfWin-Befehle deaktiviert (oder nie in einem Script verwendet) wurden, gelten Hotkeys und Hotstrings für alle Fenster.</p><br />
					<p>Die #IfWin-Befehle sind von der Position abhängig: sie beeinflussen nur Hotkeys und Hotstrings, die sich im Script physisch darunter befinden.</p>

<pre>
<em>; Texteditor</em>
#IfWinActive ahk_class Notepad
#space::
   MsgBox, Du hast WIN+LEERTASTE im Texteditor gedrückt.
Return
::msg::Du hast msg in den Texteditor geschrieben
#IfWinActive

<em>; MSPaint</em>
#IfWinActive unbenannt - Paint
#space::
   MsgBox, Du hast WIN+LEERTASTE in MSPaint gedrückt!
Return
::msg::Du hast msg in MSPaint eingegeben!
#IfWinActive
</pre>
					<p class="note">Auf der folgenden Seite findest du ausführlichere Informationen und weitere ähnliche Befehle:<br />
					<a href="commands/_IfWinActive.htm">#IfWinActive</a></p>
					<h3 id="s23">c. Mehrere Hotkeys/Hotstrings pro Datei</h3>			   
					<p>Aus irgendeinem Grund bereitet dies bei einigen Leuten Kopfzerbrechen. Also werde ich es klarstellen: AutoHotkey bietet dir die Möglichkeit, <i>so viele</i> Hotkeys und Hotstrings in einer Datei zu haben, wie du willst. Ob es nun 1 oder 3253 sind (oder mehr).</p>
<pre>
#i::
   run, http://www.google.com/
Return

^p::
   run, notepad.exe
Return

~j::
   send, ack
Return

::acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
::agravat::aggravat
:*:allign::align
::ameria::America
</pre>

					<p>Der obige Code ist durchaus akzeptabel. Mehrere Hotkeys, mehrere Hotstrings. Alle in einer großen glücklichen Script-Datei.</p>


					<h3 id="s24">d. Beispiele</h3>
<pre>::bzw::beziehungsweise                          <em>; Ersetzt "bzw" mit "beziehungsweise", sobald du ein <a href="commands/_Hotstring.htm">Endungszeichen</a> drückst.</em>
:*:bzw::beziehungsweise                         <em>; Ersetzt "bzw" mit "beziehungsweise", ohne dass ein Endungszeichen notwendig ist.</em>

^n::                                       <em>; STRG+N-Hotkey</em>
   run, notepad.exe                        <em>; Startet das Programm notepad.exe, sobald du STRG+N drückst.</em>
Return                                     <em>; Dies endet den Hotkey. Der Code darunter wird nicht ausgelöst.</em>

^b::                                       <em>; STRG+B-Hotkey</em>
   send, {ctrl down}c{ctrl up}             <em>; Kopiert den markierten Text. ^c könnte man auch verwenden, allerdings ist diese Methode sicherer.</em>
   SendInput, [b]{ctrl down}v{ctrl up}[/b] <em>; Umschließt den markierten Text mit BBCode-Bold-Tags (Forum).</em>
Return                                     <em>; Dies endet den Hotkey. Der Code ab diesem Punkt wird nicht ausgelöst.</em>
</pre><!-- PAGE 2 --><!-- PAGE 2 --><!-- PAGE 2 -->

					
					
					
				</div>
				<div id="sending_keystrokes" class="section">
					<h2 id="s3">3 - Senden von Tastatureingaben</h2>
					<p>
						Also hast du dich jetzt entschieden, Tasten an einem Programm zu senden (schreiben). Wir können das tun. Verwende den <a href="commands/Send.htm">Send</a>-Befehl. Dieser Befehl sendet Tastatureingaben, um das Schreiben oder Drücken von Tasten zu simulieren.<br /><br />
						Bevor wir in die Materie einsteigen, müssen einige häufig auftretende Probleme genannt werden:<br />
						So wie Hotkeys auch, hat Send spezielle Tasten. <a href="commands/Send.htm">Sehr, sehr viele davon.</a><br />
						Hier die 4 am häufigsten verwendeten Symbole:
					</p>
					<div>
						<hr />
						<p><span class="red">!</span>: Sendet die ALT-Taste. Zum Beispiel würde <em>Send Das ist ein Text!a</em> die Tasten "Das ist ein Text" senden und dann ALT+A drücken. <strong>Hinweis</strong>: !A hat in einigen Programmen einen anderen Effekt als !a. Das liegt daran, dass !A die Tastenkombination ALT+UMSCHALT+A und !a die Tastenkombination ALT+A drücken würde. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p><p><span class="red">+</span>: Sendet die UMSCHALT-Taste. Zum Beispiel würde <em>Send +abC</em> den Text "AbC" senden, und <em>Send !+a</em> würde ALT+UMSCHALT+A drücken.</p><p><span class="red">^</span>: Sendet die STRG-Taste. Zum Beispiel würde <em>Send ^!a</em> die Tastenkombination STRG+ALT+A drücken, und <em>Send ^{Home}</em> würde STRG+POS1 senden. <strong>Hinweis</strong>: ^A hat in einigen Programmen einen anderen Effekt als ^a. Das liegt daran, dass ^A die Tastenkombination STRG+UMSCHALT+A und ^a die Tastenkombination STRG+A drücken würde. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p><p><span class="red">#</span>: Sendet die WIN-Taste (die Taste mit dem Windows-Logo), demzufolge würde <em>Send #e</em> die WIN-Taste gedrückt halten und dann den Buchstaben "e" drücken.</p>
					</div>
					<p><i><strong>Die nächsten Absätze beziehen sich auf die <a href="commands/Send.htm">Tabelle der Send-Seite</a>.</strong><br /></i></p>
					<p class="note">
						Hinweis:<br />Diese Tabelle gilt <b>nicht</b> für <a href="Hotkeys.htm">Hotkeys</a>. Das heißt, dass du <span class="key">CTRL</span> oder <span class="key">ENTER</span> (oder jede andere Taste) nicht mit {}'s umschließen sollst, während du ein Hotkey erstellst.
					</p><br />

					<div>
						Das folgende Beispiel zeigt, was man nicht mit einem Hotkey machen sollte:
<pre>
<em>; Beim Erstellen eines Hotkeys...
; FALSCH</em>
{LCtrl}::
   send, AutoHotkey
Return

<em>; RICHTIG</em>
LCtrl::
   send, AutoHotkey
Return
</pre>
					</div>
					<hr />
					<div>
						<p>Die oben verlinkte gigantische Tabelle zeigt so ziemlich jede spezielle Taste, die in AHK integriert ist. Zum Beispiel: <code>{enter}</code> und <code>{space}</code>.<br />
						Ein häufiges Problem, das viele Leute haben, ist, dass sie davon ausgehen, dass die geschweiften Klammern auf den Dokumentations-Seiten nur zum Spaß gesetzt wurden. Aber tatsächlich <b>sind sie notwendig</b>. Nur so kann AHK wissen, dass <code>{!}</code> einen "Ausrufezeichen" meint, und nicht "drücke die <span class="key">ALT</span>-Taste". Also vergiss nicht, in der Tabelle der <a href="commands/Send.htm">Send</a>-Seite nachzuschauen, um sicherstellen zu können, dass du deine Klammern richtig gesetzt hast.</p>
<pre>
<em>; Hast du bemerkt, dass das ! in {} gesetzt ist? Wenn es nicht so wäre, würde AHK
; die ALT-Taste drücken.</em>
send, Dieser Text wurde geschrieben{!}
</pre>

<pre>
<em>; Das gleiche wie oben, aber mit der ENTER-Taste. AHK würde "enter" ausschreiben, wenn ...
; ... es nicht mit {} umschlossen wurde.</em>
send, Mehrere enter Zeilen wurden enter gesendet. <em>; FALSCH</em>
send, Mehrere{enter}Zeilen wurden{enter}gesendet. <em>; RICHTIG</em>
</pre>
						<div>
							Ein weiteres häufig auftretendes Problem ist, dass einige Leute denken, dass <b>alles</b> beim Send-Befehl in Klammern gesetzt werden muss. Das ist FALSCH. Wenn es nicht in der Tabelle vorkommt, muss es nicht in Klammern gesetzt werden. Es ist <b>nicht</b> notwendig, normale Buchstaben, Zahlen oder sogar einige Symbole (wie z. B. der Punkt) in {} zu setzen.<br /> 
							Außerdem ist der Send-Befehl in der Lage, mehr als einen Buchstaben, eine Zahl oder einen Symbol zu einem Zeitpunkt zu senden. Daher ist es nicht nötig, massenhaft Send-Befehle mit jeweils nur einem Buchstaben zu verwenden.

<pre>
<em>; Umschließe nur Wörter oder einzelne Buchstaben, die in der oben erwähnten Tabelle vorkommen.</em>
send, {a}       <em>; FALSCH</em>
send, {b}       <em>; FALSCH</em>
send, {c}       <em>; FALSCH</em>
send, {a}{b}{c} <em>; FALSCH</em>
send, {abc}     <em>; FALSCH</em>
send, abc       <em>; RICHTIG</em>
</pre>
						</div>
						<div>
							Um eine Taste gedrückt zu halten oder loszulassen, muss der Tastenname mit Klammern umschlossen und dann das Wort UP oder DOWN verwendet werden.

<pre>
<em>; Dies zeigt, wie du eine Taste gedrückt hälst und eine weitere Taste (oder mehrere) drückst.
; Sollte eine Methode nicht in deinem Programm funktionieren, probiere bitte eine andere aus.</em>
send, ^s                     <em>; Beide von denen senden STRG+S</em>
send, {ctrl down}s{ctrl up}  <em>; Beide von denen senden STRG+S</em>
Send, {ctrl down}c{ctrl up}
Send, {b down}{b up}
Send, {TAB down}{TAB up}
Send, {Up down}  <em>; Drückt die NACH-OBEN-Taste nach unten.</em>
Sleep, 1000      <em>; Hält sie eine Sekunde lang gedrückt.</em>
Send, {Up up}    <em>; Lässt die NACH-OBEN-Taste los.</em>
</pre>
						</div>
					</div>
					<div>
							Aber nun fragst du dich vielleicht <i>"Wie kann ich meine wirklich langen Send-Befehle besser lesbar machen?"</i>. Einfach. Dazu gibt es den sogenannten Fortsetzungsbereich. Schreibe einfach auf einer neuen Zeile eine öffnende Klammern, dann deinen Inhalt, und zum Schluss ein schließende Klammer. Um mehr darüber zu erfahren, siehe <a href="Scripts.htm#continuation">Fortsetzungsbereiche</a>.
<pre>
send,
(
Zeile 1
Zeile 2
Äpfel sind Früchte.
)
</pre>

					</div>
					<p class="note">
						Hinweis: Es gibt verschiedene Formen von Send. Jede hat ihre eigenen Besonderheiten. Wenn eine Form von Send nicht funktioniert, wie sie soll, kannst du einen anderen Typ von Send ausprobieren. Ersetze einfach den Befehlsnamen "Send" mit "SendPlay" oder was auch immer du möchtest.<br />
						Hier die meisten Möglichkeiten zum Senden von Text:<br />
						
						Send<br />
						
						SendRaw<br />
						
						SendInput<br />
						
						SendPlay<br />
						
						SendEvent<br />
						Um mehr über die verschiedenen Methoden zu erfahren, <a href="commands/Send.htm">siehe hier</a>.
					</p>
					<h3 id="s31">a. Spiele </h3>
					<p>
						<b><span style="color:red;">Das ist wichtig!</span></b><br />
						Viele Spiele, vorallem die modernen, haben Software zum Abwehren von Cheats. Dinge wie GameGuard, Hackshield, PunkBuster und einige andere. Wenn ein Spiel ein System zur Cheat-Abwehr hat und wenn deine Hotkeys, Hotstrings und Send-Befehle nicht funktionieren, wirst du kein Glück haben.<br />
						Das Umgehen solcher Systeme verletzt die Richtlinien des Spiels und kann dazu führen, dass du gebannt wirst. Außerdem ist es ziemlich schwierig, solche Systeme zu umgehen. Es gibt Methoden, um die Erfolgschance in einigen Spielen zu erhöhen, aber es gibt keinen magischen <i>"Funktioniere endlich!!!"</i> Button. Also probiere <b>ALLE</b> Methoden aus, bevor du aufgibst.<br />
					</p>

					<p>
						Es gibt auch bekannte Probleme mit DirectX. Wenn du auf Probleme stößt und dein Spiel DirectX verwendet, kannst du folgendes ausprobieren. Du solltest auch versuchen, dass Spiel im Fenstermodus auszuführen, sofern es möglich ist. Dies behebt einige DirectX-Probleme.<br />
						Weitere DirectX-Probleme können auftreten, wenn Pixel- oder Image-Befehle verwendet werden. Farben werden als schwarz (0x000000) erkannt, egal welche Farbe du versuchst abzurufen. Dies ist eine weitere heikle Sache zum Beheben. Versuche, das Spiel im Fenstermodus auszuführen, wenn du kannst.
					</p>
					<p>
						Es gibt keine einheitliche Lösung, um AutoHotkey für alle Programme lauffähig zu machen. Wenn alle Versuche fehlschlagen, ist es sehr wahrscheinlich, dass AutoHotkey für deine Anforderung nicht geeignet ist.
					</p>
					<div>
						<hr />
						Aus der <a href="FAQ.htm#games">FAQ</a>-Seite:<br />
						Einige Spiele verwenden ausschließlich DirectInput. Der Nebeneffekt davon ist, dass sie möglicherweise alle künstlichen Tastatureingaben und Mausklicks ignorieren. Man könnte das umgehen, wenn man eine der folgenden Möglichkeiten (oder in Kombination) ausprobiert:
						<ul>
							<li>Verwende <a href="commands/Send.htm#SendPlayDetail">SendPlay</a> via: 1) SendPlay-Befehl; 2) <a href="commands/SendMode.htm">SendMode</a> Play; und/oder 3) <a href="Hotstrings.htm#SendMode">Hotstring</a>-Option SP.</li>
							<li>Erhöhe <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>. Zum Beispiel:</li>
							<li><code>SetKeyDelay, 0, 50</code></li>
							<li><code>SetKeyDelay, 150, 150, Play</code></li>
							<li>Versuche <a href="commands/ControlSend.htm">ControlSend</a>, das dort funktionieren könnte, wo andere Sendemethoden versagen.</li>
						</ul>
					</div><!-- PAGE 3 --><!-- PAGE 3 --><!-- PAGE 3 -->
					
					
					
				</div>
				<div id="running_programs_and_websites" class="section">
					<h2 id="s4">4 - Öffnen von Programmen &amp; Webseiten</h2>
					<div>
						Um ein Programm wie <i>Mspaint.exe, Calc.exe, script.ahk</i> oder sogar einen Ordner zu starten, kannst du den <a href="commands/Run.htm">Run</a>-Befehl verwenden. Mit diesen Befehl kann man auch URLs wie <a href="http://ahkscript.org/">http://ahkscript.org/</a> öffnen. Wenn dein Computer deinen gewünschten Typ eines Programms starten kann, ist das sehr einfach:

<pre>
<em>; Startet ein Programm. Hinweis: Die meisten Programme benötigen einen VOLLSTÄNDIGEN Dateipfad.</em>
Run, %A_ProgramFiles%\Beliebiges_Programm\Programm.exe

<em>; Öffnet eine Webseite</em>
Run, http://ahkscript.org
</pre>
					</div>
					<div>
						Es gibt noch ein paar weitere Features, wie z. B. Befehlszeilenparameter und CLSID.<br />
						Wenn du mehr darüber erfahren willst, besuche die <a href="commands/Run.htm">Run-Seite</a>.
						<br />
						Hier ein paar weitere Beispiele:
<pre>
<em>; Einige Programme benötigen keinen vollständigen Pfad, wie z. B. die Standardprogramme von Windows.</em>
Run, Notepad.exe
Run, MsPaint.exe

<em>; Öffnet den Ordner "Eigene Dokumente" mithilfe der integrierten <a href="Variables.htm#BuiltIn">AHK-Variable</a></em>
Run, %A_MyDocuments%

<em>; Öffnet einige Webseiten</em>
Run, http://ahkscript.org
Run, http://www.google.com
</pre>
						<br />
						<p class="note">Auf der folgenden Seite findest du ausführlichere Informationen:<br /><a href="commands/Run.htm">commands/Run.htm</a>.</p>
					</div><!-- PAGE 4 --><!-- PAGE 4 --><!-- PAGE 4 -->


					
					
					
				</div>
				<div id="commands_vs_functions" class="section">
					<h2 id="s5">5 - Befehle vs. Funktionen()</h2>
					<div>
						AutoHotkey hat zwei Typen von Dingen, die der Scripter zum Erstellen des Codes verwenden kann:<br />
						Befehle und Funktionen()<br />
						<p class="note">Hilfreiche Links:<br />
							Eine Liste aller Befehle: <a href="commands/index.htm">commands/index.htm</a><br />
							Eine Liste aller integrierten Funktionen: <a href="Functions.htm#BuiltIn">Functions.htm#BuiltIn</a></p>
					</div>
					<h3>Befehle</h3>
					<p>
						Du kannst einen Befehl anhand seiner Syntax (Struktur) erkennen. Befehle verwenden, im Gegensatz zu Funktionen, keine Klammern um ihre Parametern. Also würde ein Befehl wie folgt aussehen:<br />
						<code>Befehl, Parameter1, Parameter2, Parameter3</code><br />

						<br />Es ist nicht möglich, mehrere Befehle auf einer Zeile zu setzen (Ausnahme: <a href="commands/IfEqual.htm">ifEqual</a>).<br />
						Du kannst keine Befehle in den Parametern anderer Befehle setzen.
					</p>

<pre>
Msgbox, Hello Run, Notepad.exe   <em>; Falsch</em>
Msgbox, Hello, Run, Notepad.exe  <em>; Falsch</em>

Msgbox, Hello      <em>; Richtig</em>
Run, Notepad.exe
</pre>

					Befehle unterscheiden sich von Funktionen dahingehend, dass sie die "traditionelle Syntax" verwenden. Bedeutet: Wenn du eine <code>Variable</code> verwendest, MUSST du sie mit %'s umschließen. <code>%Variable%</code>. Text und Zahlen müssen nicht in "Anführungszeichen" gesetzt werden. <code>Das ist ein Text</code>. Desweiteren kannst du, im Gegensatz zu Funktionen(), keine Berechnungen in den Parametern durchführen.
					<p class="note">
						Allerdings gibt es die Möglichkeit, mit einem einzelnen <code>%</code> einen Ausdruck zu erzwingen, um trotzdem Berechnungen in Parametern durchführen zu können.
					</p>
					<h3>Funktionen</h3>
					<div>
						Wie bereits erwähnt, sind Funktionen etwas anders, weil sie Klammern verwenden. Eine typische Funktion sieht wie folgt aus:<br />
						<code>Funktion(Parameter1, Parameter2, Parameter3)</code><br /><br />
						Die Hauptunterschiede der Funktionen sind:
						<ol>
							<li>
								Du kannst Berechnungen in ihnen durchführen.<br />
								
								-- <code>SubStr(37*12, 1, 2)</code><br />
								
								-- <code>SubStr(A_Hour-12, 2)</code>
							</li>
							<li>
								Variablen müssen nicht in Prozentzeichen gesetzt werden.<br />
								
								-- <code>SubStr(A_Now, 7, 2)</code>
							</li>
							<li>
								Funktionen können innerhalb von anderen Funktionen erfolgen.<br />
								
								-- <code>SubStr(A_AHKPath, inStr(A_AHKPath, "AutoHotkey"))</code>
							</li>
							<li>
								Text muss in Anführungszeichen gesetzt werden.<br />
								-- <code>SubStr("Ich programmiere, genial!", 16)</code>
							</li>
						</ol>

						Funktionen geben üblicherweise einen anderen Wert zurück, als es Befehle tun. Befehle benötigen den <i>AusgabeVar</i>-Parameter, Funktionen nicht. Die gängigste Methode, den Wert einer Funktion in eine Variable zu speichern, sieht wie folgt aus:<br />
						<code><span style="color:#ff4400"><b>MeineVariable</b></span>:=Funktion(Parameter)</code>

<pre>
<span style="color:#ff4400"><b>MeineVariable</b></span>:=SubStr("Ich programmiere, genial!", 16)
</pre>
					<p class="note">Dies ist nicht der einzige Weg, aber der häufigste. Man speichert den Wert der Funktion (in diesem Fall <code>SubStr(...)</code>) in <code>MeineVariable</code>, das auf der rechten Seite von := erfolgt.<br />
					<a href="Functions.htm">Mehr zu Funktionen</a></p>
					</div>
					<div>
						Kurz gesagt:

<pre>
<em>; Das sind Befehle</em>
Msgbox, Dies ist etwas Text.
StringReplace, Ausgabe, Eingabe, AutoHotKey, AutoHotkey, ALL
SendInput, Das ist genial{!}{!}{!}

<em>; Das sind Funktionen</em>
SubStr("Ich programmiere, genial!", 16)
FileExist(VariableMitPfad)
Output:=SubStr("Ich programmiere, genial!", 16)
</pre>

					</div>
					<h3 id="s51">a. Code-Blöcke</h3>
					<p>
						<a href="commands/Block.htm">Code-Blöcke</a> sind kleine geschweifte Klammern (<b>{</b> und <b>}</b>), die einen Abschnitt des Codes zusammenfassen, damit AutoHotkey weiß, dass sie eine große Familie sind und dass sie zusammenbleiben müssen. Sie werden sehr häufig in Verbindung mit <i>If</i> und <i>Loop</i>s verwendet. Sind sie nicht vorhanden, wird nur die erste Zeile im Block aufgerufen.<br /><br />
					</p>
					<div>
						Im folgenden Code werden die beiden Zeilen nur ausgeführt, wenn Var gleich 5 ist.
<pre>
if (var=5)
{
   MsgBox, Var ist gleich %var%!!
   Exitapp
}
</pre><br />

						Im folgenden Code wird die Message Box nur angezeigt, wenn Var gleich 5 ist. Das Script wird immer beendet, selbst wenn Var <b>nicht</b> 5 ist.

<pre>
if (var=5)
   MsgBox, Var ist gleich %var%!!
   Exitapp
</pre><br />

						Dies ist völlig in Ordnung, da dem If nur eine Codezeile zugeordnet ist. Dieses Beispiel ist genau das gleiche wie oben, allerdings habe ich die zweite Zeile ausgerückt, um zu zeigen, dass sie vom if getrennt ist.

<pre>
if (var=5)
   MsgBox, Var ist gleich %var%!!
MsgBox, Wir sind nun 'außerhalb' von if. Wir brauchten keine {}'s, weil nur eine Zeile darunter war.
</pre>
					</div><!-- PAGE 5 --><!-- PAGE 5 --><!-- PAGE 5 -->
					
					
					
				</div>
				<div id="variables" class="section">
					<h2 id="s6">6 - Variablen</h2>
					<p>
						<a href="Variables.htm">Variablen</a> sind wie kleine Post-It-Zettel, die einige Informationen enthalten. Sie können zum Speichern von Text, Zahlen, Daten von Funktionen und Befehlen oder mathematischen Gleichungen verwendet werden. Ohne sie wäre Programmieren &amp; Scripting sehr viel anstrengender.
					</p>
					<hr />
					<div>
						Variablen können auf verschiedene Weisen gefüllt werden; wir befassen uns mit den bekanntesten Formen. Bitte achte auf das Gleichheitszeichen (=).
						<ol>
							<li><code>variable=text</code><br />
								<div class="indented">Dies ist die einfachste Form für eine Variable - die traditionelle Zuweisung. Gebe einfach deinen Text ein und fertig.</div>
							</li>
							<li><code>variable=%variable2%</code><br />
								<div class="indented">Das gleiche wie oben, aber der Wert einer Variable wird in eine andere Variable gespeichert.</div>
							</li>
							<li><code>variable:="text"</code><br />
								<div class="indented">Dies ist eine Ausdruckszuweisung, wegen dem : vor dem =. Jeder Text muss in "Anführungszeichen" sein.</div>
							</li>
							<li><code>variable:=variable2</code><br />
								<div class="indented">Im Ausdrucksmodus brauchen Variablen keine %'s.</div>
							</li>
							<li><code>variable:=6+8/3*2-sqrt(9)</code><br />
								<div class="indented">Dank des Ausdrucks kannst du Berechnungen durchführen!</div>
							</li>
						</ol>
						Nummer 1 &amp; 2 können kombiniert werden. <code>var=%var2% etwas Text %var3%.</code><br />
						3, 4 &amp; 5 können auch kombiniert werden. <code>var:="Das Ergebnis von 5+ " Variable " ist: " 5+Variable</code>
					</div>
					<hr />

					<p class="note">
						Jedes Gleichheitszeichen (<b>=</b>) mit einem Symbol davor nennt man einen <b>Zuweisungsoperator</b> - sie sind immer ein Ausdruck. Das heißt also, dass <code>:=</code> <code>+=</code> <code>-=</code> <code>.=</code> usw. immer Ausdrücke verwenden.
					</p>
					<h3 id="s61">a. Wann und wo Prozentzeichen verwendet werden</h3>
					<p>
						Häufig treten Probleme auf, wenn es um Variablen und Prozentzeichen (<b>%</b>) geht. Hoffentlich wird folgendes die Unklarheiten beseitigen.
					</p>
					<div>
						Wann und wo %'s verwendet werden:
						<ol>
							<li>Beim Verwenden von Befehlen (siehe oben).<br />
							-- Außer wenn der Parameter AusgabeVar oder EingabeVar ist.</li>
							<li>Beim Speichern eines Wertes in eine Variable via traditionellem Modus (ein Gleichheitszeichen ohne Symbol davor).</li>
						</ol>

						Wann und wo %'s <b>nicht</b> verwendet werden:
						<ol>
							<li>In Parametern, die Eingabe- oder Ausgabevariablen sind, zum Beispiel: <code>StringLen, <span style="color:red">OutputVar</span>, <span style="color:red">InputVar</span></code></li>
							<li>Auf der linken Seite einer Zuweisung: <code><span style="color:red">Var</span> = 123abc</code></li>
							<li>Auf der linken Seite von traditionellen (Nicht-Ausdrucks-) if-Anweisungen: <code>If <span style="color:red">Var1</span> &lt; %Var2%</code></li>
							<li>Überall in Ausdrücken. Zum Beispiel:
<pre>
If (<span style="color:red">Var1</span> != <span style="color:red">Var2</span>)
   <span style="color:red">Var1</span> := <span style="color:red">Var2</span> + 100
</pre>
							</li>
						</ol>
					</div>



					<h3 id="s62">b. Abrufen von Benutzereingaben</h3>
					<div>
						Manchmal möchtest du den Benutzer den Wert von Etwas auswählen lassen. Dafür gibt es mehrere Möglichkeiten, die einfachste davon ist die <a href="commands/InputBox.htm">InputBox</a>. Hier ein einfaches Beispiel, wie man dem Benutzer ein paar Fragen stellen und die eingegebenen Dinge verarbeiten kann.

<pre>
InputBox, AusgabeVar, Frage 1, Wie heißt du mit Vornamen?
if (AusgabeVar="Bill")
   MsgBox, Du hast einen tollen Namen, %OutputVar%.

InputBox, AusgabeVar2, Frage 2, Magst du AutoHotkey?
if (AusgabeVar2="ja")
   MsgBox, Danke`, dass du %AusgabeVar2% geantwortet hast`, %AusgabeVar%! Wir werden gute Freunde.
else
   MsgBox, %AusgabeVar%`, das macht mich traurig.
</pre>
					</div>

					<h3 id="s63">c. Weitere Beispiele</h3>
					<div>
<pre>
<a href="commands/MsgBox.htm">MsgBox</a>, 4, , Möchtest du fortfahren?
<a href="commands/IfMsgBox.htm">IfMsgBox</a>, No
    Return                <em>; Bei Nein wird der Code genau hier gestoppt.</em>
MsgBox Du hast JA gedrückt.  <em>; Ansonsten hat der Benutzer Ja ausgewählt.</em>
</pre>
<pre>
<em>; Einige Beispiele zeigen, wo Prozentzeichen möglich sind und wo nicht</em>
Variable=text                      <em>; Speichert etwas Text in eine Variable via traditioneller Zuweisung.</em>
VariableZahl:=6                  <em>; Speichert eine Zahl in eine Variable via Ausdruckszuweisung.</em>
Variable2=%Variable%               <em>; Speichert eine Variable in eine andere Variable via traditioneller Zuweisung.</em>
Variable3:=Variable                <em>; Speichert eine Variable in eine andere Variable via Ausdruckszuweisung.</em>
Variable4.=Variable                <em>; Fügt eine Variable an das Ende einer anderen Variable an, via Ausdruckszuweisung.</em>
Variable5+=VariableZahl          <em>; Addiert den Wert einer Variable mit einer anderen Variable via Ausdruckszuweisung.</em>
Variable5-=VariableZahl          <em>; Subtrahiert den Wert einer Variable mit einer anderen Variable via Ausdruckszuweisung.</em>
Variable6:=SubStr(Variable, 2, 2)  <em>; Variable innerhalb einer Funktion. Dies ist immer ein Ausdruck.</em>
Variable7=%Variable% Text          <em>; Speichert eine Variable plus etwas Text in eine andere Variable via traditioneller Zuweisung.</em>
Variable8:=Variable " Text"        <em>; Speichert eine Variable plus etwas Text in eine andere Variable via Ausdruckszuweisung.</em>
MsgBox, %Variable%                 <em>; Variable innerhalb eines Befehls. </em>
StringSplit, Variable, Variable, x <em>; Variable innerhalb eines Befehls, der EingabeVar und AusgabeVar verwendet.</em>
if (VariableZahl=6)              <em>; Immer wenn ein IF Klammern hat, wird es ein Ausdruck sein. Also keine %'s.</em>
If (Variable != VariableZahl)    <em>; Immer wenn ein IF Klammern hat, wird es ein Ausdruck sein. Also keine %'s.</em>
if VariableZahl=6                <em>; Ohne Klammern ist das if traditionell. Allerdings benötigen nur die Variablen auf der 'rechten Seite' %'s. </em>
If Var1 &lt; %Var2%                   <em>; Ohne Klammern ist das if traditionell. Allerdings benötigen nur die Variablen auf der 'rechten Seite' %'s. </em>
</pre>
					</div><!-- PAGE 6 --><!-- PAGE 6 --><!-- PAGE 6 -->
				
				
				
				</div>
				<div id="objects" class="section">
					<h2 id="s7">7 - Objekte</h2>
					<p>
						<a href="Objects.htm">Objekte</a> sind eine Möglichkeit, deine Daten für eine effizientere Nutzung zu organisieren. Manchmal werden Objekte auch als Arrays bezeichnet, aber es ist wichtig zu wissen, dass alle Arrays eigentlich nur Objekte sind. Wir geben den Objekten unterschiedliche Namen, abhängig davon, wo sie verwendet werden, aber prinzipiell sind alle Objekte gleich.
					</p>
					<hr />
					Ein Objekt ist im Grunde eine Sammlung von Variablen. Die Variablennamen sind bekannt als "Keys" (Schlüssel), und die Inhalte der Variablen sind "Values" (Werte).<br />
					<br />
					Wenn Leute ein Objekt als <i>Array</i> oder <i>indexiertes Array</i> bezeichnen, dann meinen sie damit, dass alle Keys fortlaufende Nummern sind, beginnend bei 1.<br />
					Wenn Leute ein Objekt als <i>assoziatives Array</i> bezeichnen, dann meinen sie damit, dass die Keys entweder Strings (Text) oder nicht-fortlaufende Nummern sind. Manchmal ist es eine Mischung aus beidem, auch fortlaufende Nummern!<br />
					<br />
					Es gibt keine Einschränkungen, was ein Key oder Wert sein kann - sie können sogar andere Arrays sein!
					<br />
					Wenn die Werte auch Arrays sind, wird das Objekt als <i>Mehrdimensionales Array</i> bezeichnet, aber dazu später mehr.
					<hr />
					<div>
						Es gibt eine Reihe von Gründen, ein Objekt für etwas zu nutzen. Einige Beispiele:<br />
						<ol>
							<li>Du willst eine nummerierte Liste von Dingen, z. B. eine Einkaufsliste (dies würde man als indexiertes Array bezeichnen)</li>
							<li>Du möchtest etwas gitterförmig darstellen, z. B. für ein Brettspiel (dies würde mit mehrdimensionalen Objekten erfolgen)</li>
							<li>Du hast eine Liste von Dingen, in der jedes Ding eine Bezeichnung hat, wie z. B. die Merkmale einer Frucht (dies würde man als assoziatives Array bezeichnen)</li>
						</ol>
					</div>
					<h3 id="s71">a. Erstellen von Objekten</h3>
					<div>
						Es gibt mehrere Möglichkeiten, ein Objekt zu erstellen, die gängigsten davon sind unten aufgelistet<br />
						<ol>
							<li><code>MeinObjekt := ["eins", "zwei", "drei", 17]</code><br />
								<div class="indented" >
									Syntax mit eckigen Klammern. Dies würde man auch als "indexierten Array" bezeichnen. Ein indexiertes Array ist ein Objekt, das eine Liste von Elementen repräsentiert, nummeriert mit 1 und höher. In diesem Beispiel wird der Wert <code>"eins"</code> in den Objekt-Key <code>1</code> gespeichert (aka Index 1), und der Wert <code>17</code> in den Objekt-Key <code>4</code>  (aka Index 4).
								</div>
							</li>
							<li><code>Banane := {"Form": "Länglich", "Farbe": "Gelb", "Geschmack": "Köstlich", "Preis": 3}</code><br />
								<div class="indented" >
									Syntax mit geschweiften Klammern. Dies würde man auch als "assoziatives Array" bezeichnen. Ein assoziatives Array ist eine Sammlung von Daten, wo jedes Element einen Namen hat. In diesem Beispiel wird der Wert <code>"Gelb"</code> in den Objekt-Key <code>"Farbe"</code> gespeichert. Außerdem wird der Wert <code>3</code> in den Objekt-Key <code>"Preis"</code> gespeichert.
								</div>
							</li>
							<li><code>MeinObjekt := Array("eins", "zwei", "drei", 17)</code><br />
								<div class="indented" >
									Die array-erstellende Funktion. Dies ist das gleiche wie die Syntax mit eckigen Klammern, aber in in einer Funktion verpackt.
								</div>
							</li>
							<li><code>Banane := Object("Form", "Länglich", "Farbe", "Gelb", "Geschmack", "Köstlich", "Preis", 3)</code><br />
								<div class="indented" >
									Die objekt-erstellende Funktion. Dies ist das gleiche wie die Syntax mit geschweiften Klammern, aber in einer Funktion verpackt.
								</div>
							</li>
						</ol>

						Vergiss nicht, dass all diese Definitionen das gleiche erstellen (Objekte), nur mit unterschiedlichen Keys.

					</div>

					<h3 id="s72">b. Verwenden von Objekten</h3>
					Es gibt viele Möglichkeiten, Objekte zu verwenden, wie das Abrufen von Werten, das Setzen von Werten, Hinzufügen von Werten, und mehr.
					<div>
						<br />
						<strong>Setzen von Werten:</strong>
						<div class="indented">
							Das Setzen von Werten in ein Objekt ist genauso einfach wie das Setzen eines Wertes in eine Variable.<br />
							Alles, was du tun musst, ist, deine eckigen Klammern oder Punktschreibweise (wie im Abrufen-Abschnitt gezeigt) auf die linke Seite eines Ausdruckszuweisungssymbols <code>:=</code> zu setzen.<br />
							<br />
							Zum Beispiel:<br />
							<code>Banane.Konsistenz := "Matschig"</code><br />
							<code>Banane["Eingelegt"] := True <em>; Diese Banane wurde eingelegt. Bäh.</em></code>
						</div>
						<br />
						<strong>Abrufen von Werten:</strong>
						<ol>
							<li><code>Wert := Banane["Farbe"]</code><br />
								<div class="indented" >Schreibweise mit eckigen Klammern. Dies erlaubt dir, ein Ausdruck als Key zu verwenden, um an den Wert deines Objekts zu kommen. In diesem Fall habe ich den einfachen Ausdruck <code>"Farbe"</code> verwendet, das (wenig überraschend) der Key <code>Farbe</code> ist. Du wirst eine Message Box mit dem Wort "Gelb" erhalten, weil wir diesen Wert dem Key <code>Farbe</code> im <a href="#s71">vorherigen Abschnitt</a> zugewiesen haben.
								</div>
							</li>
							<li><code>Wert := Banane.Farbe</code><br />
								<div class="indented" >
									Punktschreibweise. Diese lässt dich nur literale Strings als Keys verwenden. Du kannst in deinen Keys keine Variablen mit der Punktschreibweise verwenden.
								</div>
							</li>
						</ol>
						<br />
						<strong>Hinzufügen neuer Keys und Werte:</strong>
						<ol>
							<li>Direktes Hinzufügen von Werten
								<div class="indented" >
									Um einen Wert oder Key direkt hinzuzufügen, solltest du einfach einen Key anlegen, der noch nicht existiert. Zum Beispiel:<br />
									<code>MeinObjekt.NeuerKey := "Glänzend"</code><br />
									<code>MeinObjekt["NeuerKey"] := 3.1415</code>
								</div>
							</li>
							<li>Einfügen von Werten
								<div class="indented" >
									Keys und Werte können auch über die <code>Insert</code>-"Methode" in ein Objekt eingefügt werden. Eine Methode ist so etwas wie eine Funktion, aber sie gehört zu einem Objekt.<br />
									<br />
									Die Insert-Methode kann auf drei Arten aufgerufen werden:<br />
									<br />
									<code>MeinObjekt.Insert(Index, Wert1, Wert2, Wert3...)</code><br />
									Fehlt der Index/Key, wird standardmäßig der höchste Integer-Key plus eins verwendet.<br />
									<br />
									<code>MeinObjekt.Insert(Wert)</code><br />
									Wenn du einen Integer-Key angibst, werden ALLE höheren Integer-Keys auf die nächst höhere Nummer verschoben, selbst wenn Lücken vorhanden sind (wenn beispielsweise nur die Keys 1 und 100 existieren, wird, sobald du einen Wert in Key 50 speicherst, Key 100 auf Key 101 verschoben.<br />
									<br />
									<code>MeinObjekt.Insert(Key, Wert)</code><br />
									Wenn du einen Integer-Key verwendest und mehrere Werte hast, wäre jeder zusätzliche Wert der Index des vorherigen Wertes, plus eins. Es verschiebt ALLE höheren Integer-Keys um die Anzahl der angegebenen Werte, nach den gleichen Regeln, als würdest du nur einen einzelnen Wert hinzufügen.
								</div>
							</li>
						</ol>
						<br />
						<strong>Entfernen von Keys und Werte:</strong>
						<ol>
							<li>Leermachen des Wertes.<br />
								<div class="indented" >
									Die einfachste Möglichkeit zum Entfernen eines Wertes ist es, ihn einfach leer zu machen. Dazu musst man "" setzen, auch bekannt als <i>leerer String</i>. Zwar wird dadurch der Key nicht entfernt, aber es lässt den Wert so erscheinen, als wäre er ein ungesetzter Wert.<br />
									Der Key wird weiterhin als vorhanden angezeigt, wenn man die <code>HasKey</code>-Methode verwendet, und taucht weiterhin in einer <code>For</code>-Schleife auf. (For-Schleifen werden später erklärt)
								</div>
							</li>
							<li>Entfernen des Keys<br />
								<div class="indented" >
									Ein weitere Möglichkeit zum Entfernen des Keys <i>und</i> des Wertes ist es, den Key gemeinsam zu entfernen. Dazu muss die <code>Remove</code>-Methode aufgerufen werden. Es gibt mehrere Möglichkeiten, wie man diese Methode verwendet, aber im Prinzip tun sie alle das gleiche.
								</div>
								<ol>
									<li><code>EntfernterWert := MeinObjekt.Remove(BeliebigerKey)</code>
										<div class="indented">
											Wenn du die Remove-Methode auf diese Weise verwendest, wird sie den angegebenen Key löschen und dann, sofern er ein Integer-Key ist, jeden höheren Key um 1 nach unten verschieben (ähnlich wie die Insert-Methode, die die Keys um 1 nach oben verschiebt).<br />
											<br />
											Der zurückgegebene Wert wird der Inhalt des Keys "BeliebigerKey" sein.
										</div>
									</li>
									<li><code>AnzahlEntfernterKeys := MeinObjekt.Remove(ErsterKey, LetzterKey)</code>
										<div class="indented">
											Das Verwenden der Remove-Methode auf diese Weise erlaubt es dir, einen Bereich von Nummer/Integer-Keys zwischen ErsterKey und LetzterKey zu entfernen. Nach dem Entfernen der Keys werden alle höheren Nummer/Integer-Keys nach unten verschoben, um die Lücke zu füllen, so dass der Key direkt über LastKey jetzt FirstKey ist. Dies ist vergleichbar mit der Funktionsweise der Insert-Methode, wenn es um mehrere Werte geht.<br />
											<br />
											Der zurückgegebene Wert ist die Anzahl der Keys, die entfernt wurden - du kannst sie gebrauchen, wenn du eine Lücke zwischen deinen Keys hast (wenn du z. B. Keys von 1 bis 4 angegeben hast, aber Key-Nummer 2 existiert nicht, dann würde AnzahlEntfernterKeys auf 3 gesetzt werden, weil nur 3 Keys vorhanden waren, die entfernt werden konnten)
										</div>
									</li>
									<li><code>MeinObjekt.Remove()</code>
										<div class="indented">
											Dies entfernt den höchsten Integer-Key, und gibt den Wert zurück. Es gibt keine höheren Keys, die davon betroffen sein könnten.
										</div>
									</li>
									<li><code>MeinObjekt.Remove(BeliebigerKey, "")</code>
										<div class="indented">
											Beim Verwenden der ErsterKey-LetzterKey-Syntax, aber "" als LetzterKey, kannst du einen Integer-Key löschen, ohne dass alle anderen Keys um 1 nach unten verschoben werden müssen. Dies kann sehr hilfreich sein, wenn du dein Objekt als assoziatives Array mit numerischen Keys behandeln willst, anstatt als indexiertes Array.
										</div>
									</li>
								</ol>
							</li>
						</ol>
					</div><!-- PAGE 7 --><!-- PAGE 7 --><!-- PAGE 7 -->

					
					
					
				</div>
				<div id="helpful_goodies" class="section">
					<h2 id="s8">8 - Andere hilfreiche Goodies</h2>
					<p>
						Wir haben das Ende unserer Reise erreicht, werter Freund. Ich hoffe, dass du etwas gelernt hast. Aber bevor wir gehen, solltest du dir noch ein paar wissenswerte Dinge anschauen. Viel Spaß!
					</p>
					<h3 id="s81">a. Die mysteriösen []'s</h3>
					<div>
						Auf nahezu jeder Seite in der Dokumentation wirst du auf diese beiden Symbole (<b>[</b> und <b>]</b>) treffen, die den Code in der gelben Syntax-Box umschließen. Alles, was sich innerhalb dieser eckigen Klammern befindet, ist <b><i>OPTIONAL</i></b>. Das bedeutet, dass das Zeug darin weggelassen werden kann, wenn du es nicht benötigst. Beim Schreiben deines Codes ist es sehr wichtig, <b>NICHT</b> die []'s in deinem Code zu verwenden.<br /><br />
						Auf der <a href="commands/ControlGetText.htm">ControlGetText</a>-Seite kannst du folgendes sehen (ohne Farben):<br />
						<code>ControlGetText, AusgabeVar <span style="color:red"><b>[</b></span><span style="color:navy">, Steuerelement, Fenstertitel, Fenstertext, Titelausnahme, Textausnahme</span><span style="color:red"><b>]</b></span></code><br /><br />
						Also könntest du folgendes tun:<br />
						<code>ControlGetText, AusgabeVar</code><br /><br />

						Oder weitere Details einfügen:<br />
						<code>ControlGetText, AusgabeVar, Steuerelement, Fenstertitel</code><br /><br />

						Was ist, wenn du nur Titelausnahme verwenden willst, aber nicht Fenstertext oder Fenstertitel? Einfach!<br />
						<code>ControlGetText, AusgabeVar, Steuerelement,,, Titelausnahme</code><br /><br />
						<p class="Note">
							Bitte beachte, dass du Parameter nicht IGNORIEREN kannst, allerdings kannst du sie leer lassen.<br />
							Wenn du "Fenstertitel, Fenstertext" ignorierst, würde es wie folgt aussehen und Probleme verursachen:<br />
							<code>ControlGetText, AusgabeVar, Steuerelement, Titelausnahme</code><br />
							Dies wäre gültig.<br />
							<code>ControlGetText, AusgabeVar, Steuerelement,,, Titelausnahme</code>
						</p>
					</div>
					<h3 id="s82">b. Herausfinden deiner AHK-Version</h3>
					<div>
						Führe den folgenden Code aus, um deine aktuelle AHK-Version anzeigen zu lassen:
<pre>
MsgBox, %A_AHKVersion%
</pre>

						Oder suche nach "AutoHotkey Help File" oder "AutoHotkey.chm" im Startmenü oder Installationsverzeichnis.
					</div>

					<h3 id="s83">c. Trial-and-Error-Prinzip</h3>
					<p>
						Trial-and-Error (Versuch und Irrtum) ist eine sehr häufige und effektive Möglichkeit des Lernens. Statt für jede Kleinigkeit um Hilfe zu bitten, ist es sinnvoller, manchmal etwas Zeit alleine zu verbringen (manchmal Stunden oder Tage) und dabei etwas selbst auf die Reihe zu kriegen - dies wird dir helfen, schneller zu lernen.
					</p>
					<p>
						Wenn du etwas ausprobierst, das einen Fehler verursacht, solltest du diesen Fehler untersuchen. Dann versuche deinen Code zu korrigieren. Dann versuche ihn nochmals auszuführen. Bekommst du immer noch einen Fehler, modifiziere deinen Code etwas mehr. Setze dieses Verfahren fort, bis dein Code funktioniert. Du erfährst viel auf diese Weise, während du die Dokumentation liest und kennenlernst, was funktioniert und was nicht. <span class="InlineCode">Versuch, Fehlschlag, Versuch, Fehlschlag, Versuch, Versuch, Versuch, Fehlschlag, Fehlschlag, <b>Erfolg!</b></span>
					</p>
					<p>
						Dies ist der Weg, den viele "Profis" gegangen sind. Aber fürchte dich nicht, um Hilfe zu bitten, wir beißen nicht (zumindest nicht fest). Der Lernprozess benötigt Zeit; Die "Profis", auf die du triffst, haben AutoHotkey nicht in einem Tag gemeistert.
					</p>
					<p class="Note">"Wenn es beim ersten Mal nicht klappt, versuchen, versuchen Sie es erneut." - William E. Hickson</p>
					<h3 id="s84">d. Einrückung</h3>
					<div>
						Dieses Einrücken ist sehr wichtig! Zwar läuft dein Code auch ohne ganz gut, allerdings könnte es dir und anderen beim Lesen Kopfschmerzen bereiten. Ein kleines Script (25 Zeilen oder weniger) ohne Einrückung wird wahrscheinlich keine Probleme beim Lesen verursachen, aber man wird schnell nachlässig. Am besten versuchst du baldmöglichst zu lernen, wie man einrückt.<br />
						Einrückung hat keinen festgelegten Stil, aber es empfiehlt sich, alles konsistent zu halten.<br />
						"<b>Was ist Einrückung?</b>", fragst du dich? Man erschafft einfach Leerräume im Code, um sehen zu können, was zu was gehört. Die meisten Leute verwenden 3 oder 4 Leerzeichen oder einen Tabulatorzeichen pro "Stufe".<br /><br />
						Ohne Einrückung:

<pre>
if (Auto="alt")
{
msgbox, Das Auto ist wirklich alt.
if (Räder="platt")
{
msgbox, Das Auto ist nicht zum Fahren geeignet.
Return
}
else
{
msgbox, Sei vorsichtig! Dieses alte Auto ist zu gefährlich`, um es zu fahren.
}
}
else
{
msgbox, Meine Güte`, wie dein neues Fahrzeug glänzt.
}
</pre>

						Eingerückt:

<pre>
if (Auto="alt")
{
   msgbox, Das Auto ist wirklich alt.
   if (Räder="platt")
   {
      msgbox, Das Auto ist nicht zum Fahren geeignet.
      Return
   }
   else
   {
      msgbox, Sei vorsichtig! Dieses alte Auto ist zu gefährlich`, um es zu fahren.
   }
}
else
{
   msgbox, Meine Güte`, wie dein neues Fahrzeug glänzt.
}
</pre>
						Wiki zeigt verschiedene Styles und Beispiele. Entscheide selber, wie du etwas einrücken willst, um es besser lesbar zu machen.<br />
						<a href="http://en.wikipedia.org/wiki/Indent_style">http://en.wikipedia.org/wiki/Indent_style</a>
					</div>

					<h3 id="s85">e. Um Hilfe bitten</h3>
					Bevor du fragst, solltest du selbst versuchen Nachforschungen zu betreiben oder den Code zu testen. Wenn die Ergebnisse nicht zufriedenstellend sind, lies unten weiter.
					<ul>
						<li>Fürchte dich nicht, um Hilfe zu bitten, selbst die intelligentesten Leute tun das.</li>
						<li>Du kannst deine Versuche ruhig zeigen, selbst wenn du denkst, dass es blöd aussieht.</li>
						<li>Poste all deine Versuche.</li>
						<li>Setze einfach voraus, dass <i>jeder außer du selbst</i> ein Vollidiot ist und nichts weiß. Gebe so viele Informationen wie möglich an, um uns Vollidioten mitzuteilen, was du vorhast. Hilf uns, dir zu helfen.</li>
						<li>Sei geduldig.</li>
						<li>Sei höflich.</li>
						<li>Sei offen.</li>
						<li>Sei nett.</li>
						<li>Viel Spaß</li>
					</ul>

					Wenn du nicht sofort eine Antwort bekommst, warte wenigstens 1 Tag (24 Stunden), bevor du weiter um Hilfe bittest. Wir helfen gerne, aber wir tun dies auch kostenlos und in unserer Zeit. Wir könnten gerade arbeiten, schlafen, spielen, mit der Familie zusammen sein, oder zu beschäftigt sein, um zu helfen.<br />
					Und während du auf Hilfe wartest, könntest du es auch weiter selbst versuchen. Es ist ein tolles Gefühl, etwas ohne Hilfe geschafft zu haben.

					<h3 id="s86">f. Andere Links</h3>
					<p>
						<a href="FAQ.htm">Häufig gestellte Fragen (FAQ)</a>
					</p>
				</div>
			</div>
		</div>
	</body>
</html>
