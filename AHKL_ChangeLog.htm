<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Änderungen und neue Funktionen</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Änderungen und neue Funktionen</h1>
<p>Dieses Changelog betrifft nur AutoHotkey_L. Siehe <a href="ChangeLogHelp.htm">Changelog von AutoHotkey</a>.</p>

<!--neue Revisionen erfolgen hier-->
<h2>1.1.02.01 - 13. August 2011</h2>
<p>A_PriorKey geändert, damit die Up-Ereignisse der Tasten ausgeschlossen werden.</p>
<p>Fehler beim Abruf des Prozessnamens/-pfades in bestimmten Fällen behoben:</p>
<ul>
	<li>Name/Pfad eines 64-Bit-Prozesses von einem 32-Bit-Script abrufen.</li>
	<li>Name/Pfad eines erhöhten Prozesses von einem nicht erhöhten Prozess (UAC) abrufen.</li>
</ul>

<h2>1.1.02.00 - 6. August 2011</h2>
<p>TV_SetImageList() hinzugefügt.</p>
<p>Zeichen, die nicht standardmäßige Umschaltzustände 16 und 32 benötigen, verwenden nun eine Rückfallmethode, anstatt falsche Tastatureingaben zu erzeugen.</p>
<p>Umgang mit toten Tasten überarbeitet, um Probleme zu verhindern, wenn mehrere Scripts mit Hotstrings aktiv sind.</p>

<h2>1.1.01.00 - 30. Juli 2011</h2>
<p>Zusätzliche Unterstützung für Instanzvariablen in Klassendefinitionen, mit einfache Zuweisungssyntax.</p>
<p>Schlüsselwort <code>var</code> entfernt, das in Klassendefinitionen verwendet wurde; benutzt stattdessen <code>static</code>.</p>
<p>Neue interne Variablen hinzugefügt: A_ScriptHwnd und A_PriorKey.</p>
<p>Neue interne Funktionen hinzugefügt: GetKeyName(), GetKeyVK(), GetKeySC() und IsByRef().</p>
<p>Neuer Unterbefehl hinzugefügt: WinGet, Ausgabevariable, ProcessPath.</p>
<p>Die Fähigkeit hinzugefügt, ein Fenster mithilfe des Prozessnamens oder -pfads anzugeben: <code>ahk_exe %Name%.exe</code> oder <code>ahk_exe %VollständigerPfad%</code>.</p>
<p>ProcessName-Unterbefehl von WinGet optimiert.</p>
<p>SetTimer geändert, indem A_ThisLabel verwendet wird, wenn das Label nicht vorhanden ist.</p>
<p>ComObjConnect() aktualisiert, damit ein Objekt anstelle eines Funktionsnamenpräfix verwendet werden kann.</p>
<p>ComObjConnect() verbessert, damit das Präfix/Objekt aktualisiert werden kann, ohne es erst zu trennen.</p>
<p>Parsing von Fortsetzungsbereiche verbessert, damit Ausdrücke wie <code>(x.y)[z]()</code> möglich sind, ohne "(" schützen zu müssen.</p>
<p>Methode ersetzt, die verwendet wurde, um Script-Texte in 32-Bit-kompilierte Scripts zu speichern; nun in Einklang mit 64-Bit.</p>
<p>Fehler beim Erkennen von AltGr auf der Tastaturbelegung des aktiven Fensters behoben (bei Unicode-Versionen).</p>
<p>Fehler mit SendInput behoben, wobei ein überflüssiges LCtrl-Up-Ereignis nach einem AltGr-Up-Ereignis durchgeführt wurde.</p>

<h2>1.1.00.01 - 17. Juli 2011</h2>
<p>Fehler behoben: Modifikatortasten wurden beim Senden von Sonderzeichen nicht automatisch losgelassen.</p>
<p>Fehler behoben: Konflikte beim Neubelegen mit Scancode/Modifikatortaste wie sc1xx anstelle von ^sc0xx.</p>
<p>Fehler behoben: $ und #UseHook waren unwirksam, wenn sie nur bei der zweiten oder nachfolgenden Instanzen eines Hotkeys verwendet wurden.</p>
<p>Fehler behoben: Potentieller Absturz bei der Rückgabe eines Werts von einer __Delete-Meta-Funktion.</p>
<p>Fehler behoben: Warnungen "Nicht initialisierte Variable" wurden vom Debugger ausgelöst.</p>
<p>Geändert: base.Methode() löst nun nicht mehr eine Standard-Meta-Funktion oder eine Warnung aus.</p>
<p>Geändert: Gui +(Ex)Style versteckt/zeigt nicht länger das GUI-Fenster.</p>
<p>Debugger geändert, damit er bei nicht initialisierten Variablen Typ="undefined" meldet.</p>
<p>Überprüfung hinzugefügt, um das Senden von falschen Zeichen zu verhindern, die die Hankaku-Taste benötigen.
<p>Zusätzliche Unterstützung für Integer als Variablennamen von Klassen.</p>
<p>Das Schlüsselwort "Static" für die Deklaration von Klassenvariablen hinzugefügt.</p>

<h2>1.1.00.00 - 1. Mai 2011</h2>
<h4>Neue Funktionen:</h4>
<p>Einfache <a href="Objects.htm#Custom_Classes">Syntax für Klassendefinition</a> implementiert.</p>
<p>Schlüsselwort <a href="Objects.htm#Custom_NewDelete"><code>new</code></a> für die Erstellung eines verzweigten Objekts.</p>
<p><a href="Functions.htm#Func">Func()</a> für das Abrufen einer Referenz auf einer vorhandenen Funktion hinzugefügt und <a href="Functions.htm#IsFunc">IsFunc</a> verbessert, um <a href="Objects.htm#Function_References">Funktionsreferenzen</a> zu erkennen.</p>
<p>Zusätzliche Unterstützung für <code>++</code> und <code>--</code> mit Objektfeldern, wie z. B. <code>x.y[z]++</code>.</p>

<h4>Änderungen:</h4>
<p>__Delete löst nicht mehr __Call aus.</p>
<p>OnClipboardChange verwendet AddClipboardFormatListener je nach Verfügbarkeit (d. h. in Windows Vista oder höher), um die Zuverlässigkeit zu verbessern.</p>
<p>Autoverkettung mit <code>(</code> ist genauer, daher funktionieren einige ungültige Ausdrücke wie <code>12(34)</code> nicht länger.</p>

<h4>Fehlerbehebungen:</h4>
<p><code>SetTimer Label, -0</code> führt nun dazu, dass das Label "einmal und sehr bald" ausgeführt wird.</p>
<p>A_MyDocuments usw. verwendet nun SHGetFolderPath anstelle eines nicht dokumentierten Registrierungsschlüssels.</p>
<p>Fehler mit nicht leerer Textausnahme behoben, dass Fenster ohne Text ausgeschlossen werden.</p>

<h2>1.0.97.02 - 14. April 2011</h2>
<p>Fehler durch Fehlinterpretation des Kommas als Argument-Trennzeichen behoben, wenn es mit <code>{}</code> in einem Ausdruck umschlossen wird.</p>
<p>For-Loop setzt A_Index erst nach der Auswertung des <i>Ausdruck</i>-Arguments, damit der äußere Wert der Schleife verwendet werden kann.</p>
<p>Standardposition des Scripts basiert nun auf das Verzeichnis mit der EXE (wie dokumentiert) und nicht auf das Arbeitsverzeichnis.</p>
<p>Verbesserte Gültigkeitsprüfung während der Ladezeit, um ungültige Versuche zu erkennen, mit Goto aus einer Funktion "herauszuspringen".</p>

<h2>1.0.97.01 - 2. April 2011</h2>
<p>Fehler in der 64-Bit-Version behoben, um HWNDs oder SendMessage/PostMessage-Parameter nicht auf 32 Bit zu verkürzen.</p>
<p><code>*/::</code> ist nicht länger ein ungültiger Hotkey (fehlerhaft seit L54).</p>
<p>Fehler mit den Icons behoben.</p>
<h2>1.0.97.00 - 28. März 2011</h2>
<p><code>{key: value}</code> als vereinfachte Syntax für <code>Object("key", value)</code>.</p>
<p><code>[x, y, z]</code> als vereinfachte Syntax für <code>Array(x, y, z)</code>, dass  <code>Object(1, x, 2, y, 3, z)</code> entspricht.</p>
<p>Kleine Optimierung: jeder Referenz auf True, False, A_PtrSize oder A_IsUnicode wird während der Ladezeit in Ausdrücke aufgelöst.</p>
<p>Hotkey-Parser behandelt <code>x & ^y</code> nun als Fehler, anstatt <code>^</code> zu ignorieren.</p>

<h2>1.0.96.00 - 21. März 2011</h2>
<h4><b>Neue Funktionen:</b></h4>
<p><a href="commands/ComObjQuery.htm">ComObjQuery</a>: Abfragen eines COM-Objekts für eine Schnittstelle oder Dienst.</p>
<p><a href="commands/ComObjFlags.htm">ComObjFlags</a>: Ermittelt oder ändert Flags, die das Verhalten eines COM-Wrapper-Objekts kontrollieren.</p>
<p><a href="commands/ComObjCreate.htm">ComObjCreate</a> können Non-Dispatch-Objekte erstellen, wenn eine Schnittstelle-ID (IID) gegeben ist.</p>
<p><a href="commands/ComObjArray.htm">COM-Arrays</a> unterstützen For-Schleifen und die Clone()-Methode.</p>
<p>ListVars zeigt zusätzlich zur Adresse des Wrappers den inneren Typ und Wert einer Variante von jedem COM-Wrapper-Objekt an.</p>
<h4><b>Änderungen:</b></h4>
<p>Wenn eine direkt vorhandene Integer oder Variable mit einem numerischen String und zwischengespeicherte Binär-Integer einem Objekt-Feld zugewiesen werden, dann wird eine Integer anstelle eines Strings gespeichert. Dadurch werden insbesondere Scripts beim Aufrufen von COM-Methoden begünstigt, die Integer anstelle von Strings akzeptieren oder sich je nach Werttyp unterschiedlich verhalten.</p>
<p>NULL-Werte können nun mit ComObjParameter für die Typen VT_UNKNOWN und VT_DISPATCH verwendet werden.</p>
<p>Verbesserte Unterstützung für CLR-Objekte (Common Language Runtime [.NET]) mithilfe von COM.</p>
<p>FileRecycle sollte nun vorher warnen, wenn eine Datei gelöscht wird, die zu groß für den Papierkorb ist.</p>
<p>Wenn ein SafeArray, mit ComObjArray erstellt, einem Element eines anderen SafeArrays zugewiesen ist, dann wird eine seperate Kopie erstellt. Dadurch wird verhindert, dass das Script aufgrund des zweiten Versuchs abstürzt, den Array zu "zerstören". Mit ComObjFlags kann dieses Verhalten verhindert werden.</p>
<h4><b>Fehlerbehebungen:</b></h4>
<p>Bei dem Versuch, einem COM-Array des Typs VT_DISPATCH oder VT_UNKNOWN etwas zuzuweisen, stürzte das Script ab.</p>
<p>Break und Pause wurden manchmal außerhalb von Schleifen toleriert.</p>
<p>Ein alleinstehendes CR-Zeichen (`r) wurde nicht korrekt als Zeilenende interpretiert.</p>
<p>MouseMove berechnete negative Koordinaten im SendInput- und SendEvent-Modus falsch.</p>
<p>Das Auswählen von <i>Edit This Script</i> im Tray-Menü oder Verwenden des Edit-Befehls führte zum Absturz des Scripts (fehlerhaft seit v1.0.95).</p>
<p>Fehlermeldungen zeigten manchmal auf irrelevante Codezeilen.</p>

<h2>1.0.95.00 - 12. März 2011</h2>
<p>Alle Datei-Eingaben/Ausgaben wurden stark optimiert.</p>
<p><a href="commands/_Warn.htm">#Warn</a> für Fehleranalyse; ursprüngliches Design von <a href="http://www.autohotkey.com/forum/profile.php?mode=viewprofile&u=48847">ac</a>.</p>
<p>Wenn standardmäßig <i>name_var</i> einen Funktionsnamen enthält, dann ruft <code>name_var.()</code> eine Funktion auf. Das kann wie zuvor mithilfe des <a href="Objects.htm#Default_Base_Object">Standard-Basis-Objekt</a> überschrieben werden.</p>
<p>Run unterstützt nun Verben mit Parametern, wie z. B. <code>Run *RunAs %A_ScriptFullPath% /Param</code>.</p>
<p>Wenn ein Operator nach einem direkt vorhandenen String in Anführungszeichen erfolgt, der entweder einen Operand (<code>&x</code>) oder zwei <i>numerische</i> Operanden (<code>x & y</code>) akzeptieren kann, dann erfolgt die Auto-Verkettung und der Operator nur für den rechten Operanden. Denn direkt vorhandene Strings in Anführungszeichen werden immer als nicht-numerisch betrachtet und sind deshalb keine gültige Eingaben für numerische Operationen. Zum Beispiel funktionieren nun Ausdrücke wie <code>"x" &y</code> und <code>"x" ++y</code>.</p>
<p><b>Fehler behoben:</b></p>
<ul>
<li>Platzhalter-Hotkeys respektieren in bestimmten Fällen keine Modifikatoren wie <code>^!+</code>.</li>
<li>Datei.Pos gab bei nicht-suchenden Dateitypen irgendwelchen Müll zurück; es gibt nun -1 zurück.</li>
<li>Datei.AtEOF war manchmal fälschlicherweise wahr.</li>
<li>COM-Wrapper-Objekte setzten A_LastError manchmal nicht.</li>
<li>GUI-Untermenü-Icons funktionierten nicht in Windows 2000/XP/Server 2003.</li>
<li>SplashImage beschnitt das Bild, falls Höhe > Breite war.</li>
<li>ComObjConnect gab keinen Alarm, wenn der erste Parameter ungültig war.</li>
<li>SplashImage verwendet jetzt nur noch GDI+, wenn die anderen Methoden aus Kompatibilitätsgründen fehlschlagen.</li>
<li>Das Tilde-Zeichen in <code>~x::</code> beeinflusst nun <code>x & y::</code> auf die gleiche Weise wie <code>~x & z::</code>, anstatt ohne Effekt.</li>
<li>A_PriorHotkey und A_TimeSincePriorHotkey haben jetzt die erwarteten Werte, wenn mit #If verwendet.</li>
<li>RegExReplace bearbeite den String nicht richtig weiter, nachdem ein Übereinstimmungsfehler durch Nicht-ASCII-Zeichen im String auftrat.</li>
</ul>
<h2>1.0.92.02 - 19. Januar 2011</h2>
<p>Speicherleck behoben, der auftrat, wenn der Rückgabewert eines Objektaufrufs oder einer internen Funktion nicht verwendet wurde, wie z. B. <code>file.ReadLine()</code> oder <code>SubStr(x,y,z)</code> allein in einer Zeile.</code></p>
<p>Die Fehlerbehebung von v1.0.92.01 wurde mit einer besseren Fehlerbehebung ersetzt, wodurch auch der Fehler bei <code>k::MsgBox(),x:=y</code> behoben wird und <code>If()</code> nicht defekt ist.</p>
<h2>1.0.92.01 - 18. Januar 2011</h2>
<p>Geändert: FileCreateDir setzt nun A_LastError.</p>
<p>Fehler behoben: <code>GuiControl()</code> oder Ähnliches wurde manchmal als Befehl fehlinterpretiert.</p>

<h2>1.0.92.00 - 13. Januar 2011</h2>
<p>Zusätzliche Unterstützung für Verbundzuweisungen wie <code>x.y += z</code>.</p>
<p>IniWrite in Unicode-Versionen verbessert, damit die leere Zeile am Anfang jeder neuen Datei nicht mehr auftaucht.</p>
<p>Der Parser ist nun toleranter damit, was nach <code>{</code>/<code>}</code>/<code>Else</code> folgen kann, besonders wenn sie kombiniert werden.</p>

<h2>1.0.91.05 - 1. Januar 2011</h2>
<p>Fehler behoben: Der Cleanup-Code in COM-Methode-Aufrufen gab die falschen Parameter frei.</p>
<p>Fehler behoben (ANSI): DllCall setzte eine inkorrekte Länge für wstr-Parameter bei der Ausgabe.</p>
<p>Fehler behoben: Variadische Funktionsaufrufe waren instabil, wenn ein param-Objekt leer war.</p>

<h2>1.0.91.04 - 29. Dezember 2010</h2>
<p>Fehler behoben (Unicode): RegExReplace ließ den ganzen Text bis zur Startposition weg (fehlerhaft seit v1.0.90.00).</p>

<h2>1.0.91.03 - 27. Dezember 2010</h2>
<p>Fehler behoben: RegEx-Callout-Teilausdruck-Variablen - fehlerhaft seit v1.0.90.00.</p>

<h2>1.0.91.02 - 26. Dezember 2010</h2>
<p>COM: Zusätzlicher Schutz gegen NULL-IDispatch/IUnknown-Pointer.</p>
<p>COM: QueryInterface für IDispatch überspringen, sobald VT_DISPATCH direkt übergeben wird.</p>
<p>Kleine Fehlerbehebung für die Wartbarkeit: <code>obj.field := var</code> ergibt nun korrekt SYM_STRING, nicht SYM_OPERAND.</p>

<h2>1.0.91.01 - 24. Dezember 2010</h2>
<p>Fehler behoben: Unerwartete Ergebnisse mit <code>File.Write(Str)</code>, nachdem der Text eingelesen wurde.</p>
<p>Fehler behoben: Die Überprüfung der UTF-Stückliste verursachte unerwartete Ergebnisse in Dateien ohne Stückliste.</p>
<p>Fehler behoben (ANSI): Parsing-Schleife und <code>File.ReadLine()</code> behandelten <code>Chr(255)</code> als EOF.</p>
<p>Fehler behoben (Unicode): RegExReplace-Fehler, wo sich UTF-8- und UTF-16-Längen unterschieden.</p>
<p>Fehler behoben: Deaktiviert den Abbruch von Input durch den letzten Hook-Hotkey.</p>
<p>Hinzugefügt: Einfache Optimierungen für RegExMatch/Replace.</p>

<h2>1.0.91.00 - 21. Dezember 2010</h2>
<p><i>Alle Änderungen in dieser Version beziehen sich auf COM.</i></p>
<p>Hinzugefügt: <a href="commands/ComObjError.htm">ComObjError</a> gibt nun die vorherige Einstellung zurück.</p>
<p>Hinzugefügt: <a href="commands/ComObjType.htm">ComObjType(co)</a> und <a href="commands/ComObjValue.htm">ComObjValue(co)</a>.</p>
<p>Hinzugefügt: <a href="commands/ComObjActive.htm">ComObjMissing()</a>.</p>
<p>Hinzugefügt: <a href="commands/ComObjArray.htm">ComObjArray()</a> und einfache SAFEARRAY-Unterstützung.</p>
<p>Hinzugefügt: "Übernehmen"-Parameter für <a href="commands/ComObjActive.htm">ComObjParameter()</a>.</p>
<p>Geändert: Werte, die an COM-Funktionen mithilfe von ComObjParameter übergeben werden, werden nicht länger während dem Aufruf der Funktion freigegeben.</p>
<p>Geändert: <code>ComObj.x()</code> fällt nun auf PROPERTYGET zurück, wenn Element 'x' nicht gefunden wird. Dadurch werden Fehler in For-Schleifen für einige Objekte behoben.</p>
<p>Geändert: Verpackt unbehandelte Variantentypen in ein Objekt, anstatt einen Integer-Wert zurückzugeben.</p>
<p>Geändert: Verwaltet standardmäßig die Lebensdauer von VT_UNKNOWN / VT_ARRAY automatisch.</p>

<h2>1.0.90.00 - 27. November 2010</h2>
<p>Fehler behoben: URLDownloadToFile in Unicode-Versionen niedriger als Windows 7.</p>
<p>Fehler behoben: Großgeschriebene ANSI-Zeichen wurden als Alt+0 in der ANSI-Version gesendet.</p>
<p>Fehler behoben: Datei.Pos wurde nach dem Versuch inkorrekt, das letzte EOF einzulesen.</p>
<p>Fehler behoben: Schutzsequenzen in #If-Ausdrücke und statischen Initialisierungen.</p>
<p>Fehler behoben: ClipboardAll führte manchmal zum Absturz des Scripts in bestimmten Formaten.</p>
<p>Fehler behoben: Transform HTML berechnete die Länge für "&#NNN;"-Entitäten falsch.</p>
<p>Fehler behoben: VarSetCapacity ignoriert nun korrekterweise #MaxMem bei ByRef-Variablen.</p>
<p>Fehler behoben: FileAppend,,Datei.txt setzt ErrorLevel auf 1, selbst bei Erfolg.</p>
<p>Fehler behoben: Übereinstimmungslänge wurde bei RegEx-Callouts mit der P)-Option falsch berechnet.</p>
<p>Sean's Verbesserungen für die Zahlhandhabung in eine COM-Interoperation integriert.</p>
<p>RegExReplace und RegExMatch in Unicode-Versionen optimiert.</p>

<h2>Revision 61 - 3. Oktober 2010</h2>
<p>Hinzugefügt: <code>ObjClone(Object)</code> wurde vergessen, als <code>Object.Clone()</code> implementiert wurde.</p>
<p>Hinzugefügt: Unterstützung für RegEx-Unicode-Eigenschaften in Unicode-Versionen. Außerdem wurde PCRE auf 8.10 aktualisiert.</p>
<p>Hinzugefügt: <code>Object.Remove(int, "")</code> entfernt <code>Object[int]</code> ohne dabei andere Tasten zu beeinflussen.</p>
<p>Geändert: <code>ComObj.xyz()</code> wird nun immer als Methodenaufruf behandelt.</p>
<p>Geändert: <code>Var := 123</code> bleibt nun aus Konsistenzgründen ein Ausdruck. Dadurch sind <code>Var := 123</code> und <code>Var := (123)</code> gleichwertig, während früher dem Vorherigen nur ein String und dem Letzteren sowohl ein String als auch ein zwischengespeicherter Binär-Integer zugewiesen wurde. Insbesondere werden dadurch einige verwirrende Typenunverträglichkeiten mit COM-Objekten verhindert.</p>
<p>Fehler behoben: Dynamische variadische Aufrufe von Funktionen mit vorgeschriebenen Parametern.</p>
<p>Fehler behoben: Der letzte Parameter einer global-angesehenen variadischen Funktion musste eindeutig lokal deklariert werden.</p>
<p>Fehler behoben: Statische Initialisierungen interferieren mit der Einstellung der Haltemarke.</p>
<p>Fehler behoben: Mehr Pointergröße-Fehler bei PCRE-Callouts in x64-Versionen.</p>
<p>Fehler behoben: Eingabe mit 'M'-Option behandelte Strg+M (<code>`r</code>) als Strg+J (<code>`n</code>).</p>
<p>Fehler behoben: <code>Object.Remove(n)</code> gab 0 zurück (nicht ""), wenn <code>Object[n]</code> nicht vorhanden war.</p>

<h2>Revision 60 - 24. September 2010</h2>
<p>Hinzugefügt: <a href="objects/File.htm#Encoding">Datei.Encoding</a> für das Ändern oder Abrufen des Zeichensatzes mithilfe eines Datei-Objekts.</p>
<p>Hinzugefügt: <a href="Functions.htm#Variadic">Variadische Funktionen und Funktionsaufrufe</a> und <a href="commands/RegisterCallback.htm#Indirect">indirekter Modus</a> für Callbacks.</p>
<p>Hinzugefügt: <a href="objects/Object.htm#Clone">Object.Clone()</a></p>
<p>Geändert: ByRef-Parameter benötigen nicht länger den Aufrufer, um eine Variable zu liefern.</p>
<p>Geändert: <code>Obj.foo := ""</code> gibt nun den Inhalt von foo wie vorgesehen frei (aber entfernt immer noch nicht das Feld).</p>
<p>Geändert: OnMessage-Funktionen tolerieren nun optionale Parameter und ByRef-Parameter.</p>
<p>Geändert: RegisterCallback ermöglicht nun Ausführungszugriff auf Callbacks in 32-Bit-Versionen (in 64-Bit-Versionen bereits möglich).</p>
<p>Geändert: RegisterCallback behandelt Parameteranzahl = "" eindeutig als weggelassen.</p>
<p>Fehler behoben: For-Schleife behandelte Nicht-Ausdruck "0" als wahr für gescriptete Enumeratoren.</p>
<p>Fehler behoben: ComEvent (ComObjConnect) funktionierte nicht in der ANSI-Version.</p>
<p>Fehler behoben: ComEvent (ComObjConnect) hat nicht korrekt lokale Variablen abgesichert/wiederhergestellt, wenn eine Funktion aufgerufen wurde, die bereits läuft.</p>
<p>Fehler behoben: Pufferüberlauf in A_EndChar, wenn kein Endzeichen vorhanden ist.</p>
<p>Fehler behoben: Func->mNextFunc nicht auf NULL initialisiert (wird nur von systemnahen Scripts verwendet).</p>
<p>Debugger: Ermöglicht das Abrufen des Inhalts vom Objekt (mit einem unterstützten Debugger-Client).</p>
<p>Debugger: Einige Fehler behoben.</p>

<h2>Revision 59 - 12. September 2010</h2>
<p>Fehler behoben: #If <i>Ausdruck</i> sollte nun jeden <i>Ausdruck</i> höchstens einmal pro Tastatureingabe in allen Fällen auswerten.
<p>Geändert: SplashImage verwendete gängige Bild-ladende Routinen und unterstützt nun PNG und Ähnliches, aber die Ergebnisse unterscheiden sich möglicherweise von Icons.</p>
<p>Hinzugefügt: <code><a href="commands/For.htm">For</a> x,y in z</code>.</p>
<p>Hinzugefügt: <code>Loop .. <a href="commands/Until.htm">Until</a> <i>Ausdruck</i></code>, mit jeder Schleife oder For-Schleife verwendbar.</p>
<p>Hinzugefügt: Benannte Schleifen; <code><a href="commands/Continue.htm">continue</a> äußere_Schleife</code>, <code><a href="commands/Break.htm">break</a> 2</code>, usw.</p>
<p>Debugger: Kodiert stdout- und stderr-Pakete in UTF-8.</p>
<p>Debugger: Erlaubt das Abbrechen, <b>Wiederholen</b> oder Ignorieren, wenn die erste Verbindung fehlschlägt.</p>
<p>Debugger: Erlaubt das <a href="Scripts.htm#debug_attach">Anbringen eines Debugger-Clients</a>, wenn dem Script eine registrierte Fensternachricht gesendet wird.</p>
<p>Debugger: Erlaubt das Abtrennen des Debugger-Clients, wenn der Befehl für das "Abtrennen" von DBGp gesendet wird.</p>

<h2>Revision 58 - 5. September 2010</h2>
<p>Hinzugefügt: <code>static Variable := Ausdruck</code></p>
<h2>Revision 57 - 4. September 2010</h2>
<p>Fehler bei den DllCall-Rückgabetypen Str*, WStr* und AStr* auf x64 behoben.</p>
<p>Zusätzliche Funktionalität für <a href="Functions.htm#InStr">InStr</a>, um es in Einklang mit StringGetPos zubringen:</p>
<ul>
  <li>Wenn die <i>Startposition</i> negativ ist, dann erfolgt die Suche von rechts nach links, beginnend beim Offset am Ende.</li>
  <li>Ein zusätzlicher Parameter ist verfügbar, um das <i>Vorkommen</i> eines Strings zu bestimmen, der gefunden werden soll.</li>
</ul>
<p><code><a href="commands/_Include.htm">#Include</a> <<i>Bibliotheksname</i>></code> hinzugefügt, um ein Script von einem <a href="Functions.htm#lib">Funktionsbibliotheksordner</a> direkt einzufügen.</p>
<p>Zusätzliche Funktionalität für <a href="commands/IniRead.htm">IniRead</a> und <a href="commands/IniWrite.htm">IniWrite</a>, um eine ganze Sektion zu lesen oder zu schreiben.</p>
<p>Zusätzliche Funktionalität für <a href="commands/IniRead.htm">IniRead</a>, um eine Liste mit Sektionen abzurufen.</p>
<p>Zusätzliche Unterstützung von <a href="commands/Run.htm#verbs">benutzerdefinierten Verben</a> in Run/RunWait: <code>Run *<i>Verb Datei</i></code>.</p>
<p><a href="Compat.htm#Run">Verbesserungen</a> für die Vorgehensweise von Run/RunWait, die Aktion und seine Parameter vom <i>Ziel</i>-Parameter zu extrahieren.</p>
<p><a href="Functions.htm#NumGet">NumGet</a>/<a href="Functions.htm#NumPut">NumPut</a> geändert, damit <i>Offset</i> ganz weggelassen werden kann, da der <i>Typ</i> immer nicht-numerisch ist.</p>
<p>Einschränkung entfernt, dass Label nicht auf das Ende eines Blocks verweisen können.</p>

<h2>Revision 56 - 29. August 2010</h2>
<p>Zusätzliche Unterstützung für x64-kompilierte Scripts. Benötigt Ahk2Exe_L und x64 AutoHotkeySC.bin.</p>
<p>Fehler behoben: Deref-Operator (<code>*addr</code>) hat Adressen außerhalb des 32-Bit-Bereichs abgelehnt.</p>
<p>Fehler behoben: <code>#If <i>Ausdruck</i></code> Speicherzuweisungsfehler in der x64-Version.</p>
<p>Fehler behoben: Benutzerdefinierte Hotstring-Endzeichen mit Codepunkte größer als U+00FF.</p>
<p>Fehler behoben: Sonderzeichen wurden nicht in der richtigen Reihenfolge von SendInput/Play gesendet.</p>
<p>Fehler behoben: <code>*/</code> wurde in Fortsetzungsbereichen verworfen (siehe L54).</p>

<h2>Revision 55 - 19. August 2010</h2>
<p>Fehler behoben: GroupActivate setzt ErrorLevel nicht auf 1, wenn kein Label angegeben wurde.</p>
<p>Fehler behoben: Tab-Steuerelemente in x64-Versionen.</p>
<p>Fehler behoben: String-kopierender Modus von StrPut, wenn Länge weggelassen wird; fehlerhaft seit L53.</p>
<p>Fehler behoben: Datenabgleichprobleme in x64-Versionen.</p>
<p>Geändert: A_LastError wird bei mehreren File*-Befehlen gesetzt, um Debuggen zu unterstützen.</p>
<p>Dazu zählen FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version und FileSetAttrib/Time.</p>
<p>Jedoch nicht FileCopyDir, FileRecycle, FileMoveDir, FileRemoveDir, FileRecycleEmpty, FileCreateDir und FileInstall, weil die APIs nicht immer ein Win32-Fehlercode setzen oder zurückgeben.</p>

<h2>Revision 54 - 15. August 2010</h2>
<p>Fehler behoben: RunAs in der Unicode-Version. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=372973#372973">[jackieku]</a></p>
<p>Fehler behoben: RegisterCallback in der x64-Version. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=374773#374773">[fincs]</a></p>
<p>Fehler behoben: Ausführbare Dateien laufen nicht auf Win2k und WinXP unter SP2. Win2k benötigt SP4 und Updates (wahrscheinlich <a href="http://support.microsoft.com/kb/816542">KB 816542</a>). XP nicht getestet.</p>
<p>Fehler behoben: Dialogfenster wie MsgBox reagierten nicht mehr, wenn sie von anderen Script-Threads unterbrochen wurden. Nachrichtenfilter/Übergangslösung von L45 wurde entfernt. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=358029#358029">[Fehlerbericht]</a></p>
<p>Fehler behoben: Multi-Byte-Zeichen im Standard-ANSI-Zeichensatz; verursachte auch ein Speicherleck. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=375342#375342">[Fehlerbericht]</a></p>
<p>Fehler behoben: ComObject erlaubt nun reine numerische Eigenschafts-/Methodennamen. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=375393#375393">[Fehlerbericht]</a></p>
<p>Benutzerfreundlichkeit und Funktionen von FileOpen/Datei-Objekten verbessert.</p>
<ul>
  <li><i>Flags</i>-Parameter von FileOpen akzeptiert einen von Menschen lesbaren String mit Flags.</li>
  <li>Die "update"-Methode von FileOpen wurde in "read/write" umbenannt und erstellt nun die Datei, wenn sie nicht vorhanden ist.</li>
  <li>FileOpen setzt A_LastError wie vorgesehen.</li>
  <li><code>Datei := FileOpen(handle,"h")</code> verpackt eine vorhandene Datei in ein Objekt.</li>
  <li><code>Datei.Seek(n)</code> benutzt standardmäßig SEEK_END, wenn n negativ ist.</li>
  <li><code>Datei.Pos</code> (oder <code>Datei.Position</code>) kann anstelle von Tell und Seek verwendet werden.</li>
  <li><code>Datei.Pos</code>, <code>Datei.Length</code>, <code>Datei.AtEOF</code> und <code>Datei.__Handle</code> kann ohne leere Klammern<code>()</code> verwendet werden.</li>
  <li><code>Datei.Length</code> kann wie in <code>Datei.Length:=n</code> gesetzt werden.</li>
  <li><code>Datei.Read<i>Num</i>()</code> and <code>Datei.Write<i>Num</i>(n)</code> schreibt oder liest eine Zahl, wobei <i>Num</i> ein NumGet-kompatibler Typenname ist.</li>
  <li><code>Datei.WriteLine(s)</code> ist gleichwertig mit <code>Datei.Write(s "`n")</code>, als Ausgleich für <code>File.ReadLine()</code>.</li>
  <li><code>Datei.Read()</code> liest und gibt den Rest der Datei zurück, wenn keine Parameter verwendet werden.</li>
  <li>Datei-Objekte gibt nun "" bei unbekannten Methoden und bei ungültiger Syntax zurück, anstatt die numerische <i>Adresse</i> von "".</li>
</ul>
<p>Geändert: Der Label-Parameter von GroupAdd gilt nun für die gesamte Gruppe. <a href="http://www.autohotkey.com/forum/topic61362.html">[Diskussion]</a></p>
<p>Geändert: GroupActivate setzt ErrorLevel bei Erfolg/Misserfolg. (Die gleiche Diskussion wie oben)</p>
<p>Geändert: <code>*/</code> am Anfang einer Zeile wird ignoriert, wenn kein <code>/*</code> vorhanden ist. <a href="http://www.autohotkey.com/forum/topic61109.html">[Diskussion]</a></p>
<p>Die Unterbefehle ToCodePage und FromCodePage von Transform wurden entfernt.</p>

<h2>Revision 53 - 8. August 2010</h2>

<p><b>Mit AutoHotkey64 zusammengeführt</b> - COM-Unterstützung und x64-Kompatibilität.</p>
<p><b>x64</b> (<i>Änderungen seit AutoHotkey64</i>):</p>
<ul>
  <li>Fehler bei Fließkomma-Rückgabewerten und DllCall-Ausnahmebehandlung behoben.</li>
  <li>Fehler bei RegEx-Callouts behoben.</li>
  <li>GetProcAddress-Optimierung für DllCall wieder aktiviert.</li>
  <li>NumPut und NumGet benutzen standardmäßig "Int64" in x64-Versionen.</li>
</ul>
<p><b>COM</b> (<i>Änderungen seit AutoHotkey64</i>):</p>
<ul>
  <li>Erlaubt ComObjParameter das Verpacken von 64-Bit-Werte in 32-Bit-Versionen.</li>
  <li>Noch mehr Standard-Referenzzählung-Konventionen in ComObjActive implementiert.</li>
  <li>Fremdes AddRef für neue ComObjects werden in bestimmten Fällen verhindert.</li>
  <li>Rückgabewert von pdispVal == NULL wird beim Aufruf nicht als Fehler behandelt.</li>
  <li>Ein Fehlschlag ist vorhersehbarer, wenn ein falscher Typ des Objekts übergeben wird.</li>
  <li>Der zweite Parameter in ComObjType wird direkt benötigt, ohne dabei "IID" zu übernehmen.</li>
  <li>Lokale Variablen werden freigegeben, nachdem ComEvent eine Funktion aufgerufen hat.</li>
  <li>Den pVarResult-Parameter von ComEvent wurde entfernt; verwendet stattdessen den Rückgabewert.</li>
  <li>Das originale Wrapper-ComObject wird bei jedem ComEvent-Aufruf übergeben.</li>
  <li>Kontext bei ComError-Dialogfenster hinzugefügt; die Schaltflächen sind eindeutiger.</li>
</ul>
<p>Gängige Syntaxvalidierung für Enumeratoren implementiert. <code>Enum[]</code> und <code>Enum.Next()</code> werden nun mit oder ohne Parameter unterstützt. <code>Enum[]:=Wert</code> und ähnliche unklare Formen, die in AutoHotkey_COM/AutoHotkey64 funktionierten, sind nicht mehr erlaubt.</p>
<p>"Ptr"-Type ist für maximale Flexibilität und Konsistenz immer noch signed (im Gegensatz zu AutoHotkey64).</p>
<p><b>Weitere Änderungen:</b></p>
<p>Hinzugefügt: <code>Objekt.<b>HasKey</b>(Schlüssel)</code>.</p>
<p>Hinzugefügt: <code>Object(obj)</code>erhöht die Referenzzählung von obj und gibt dessen Adresse zurück.</p>
<p>Hinzugefügt: <code>ObjAddRef()</code> und <code>ObjRelease()</code>.</p>
<p>Fehler behoben: A_ThisHotkey hat jetzt den erwarteten Wert, wenn mit #If verwendet.</p>
<p>Fehler behoben: RunAs in der Unicode-Version (Fehler von jackieku behoben).</p>
<p>Geändert: Standard-Script-Zeichensatz für ANSI-Version ist nun CP0 (ANSI).</p>
<p>Geändert: <code>x.y[]</code> ist nun gleichwertig mit <code>(x.y)[]</code> anstatt mit <code>x["y"]</code>.</p>
<p>Geändert: Interne Methoden können nun mit oder ohne Unterstrich-Präfix aufgerufen werden (z. B. <code>obj.MaxIndex()</code> oder <code>obj._MaxIndex()</code>).</p>

<h2>Revision 52 (nochmal) - 10. Juli 2010</h2>
<p>Zusätzliche Unterstützung für interne Variablen und Umgebungsvariablen in Doppeldereferenzen.</p>
<p>Verbesserte Unterstützung für Multi-Byte-Zeichen in bestimmten Zeichensätzen (bisher wurden nur 932, 936, 949, 950 und 1361 unterstützt).</p>
<p>Fehler behoben: StrPut schlug bei Zeichensätzen fehl, die WC_NO_BEST_FIT_CHARS wie UTF-7 nicht unterstützten.</p>
<p>Fehler behoben: Doppeldereferenz als Objekt - <code>literal%var%.literal</code>.</p>
<p>Fehler behoben: <code>StrPut("", Kodierung)</code> 0-terminierte eine ungültige Adresse.</p>

<h2>Revision 52 - 12. Juni 2010</h2>
<p>Fehler behoben: Der Schlüsselparameter von ObjRemove ist wie bei <a href="objects/Object.htm#Remove">Object._Remove</a> nun optional.</p>
<p>Fehler behoben: Dateien wurden im Gegensatz zu älteren Versionen während des Lesens nicht ordnungsgemäß gesperrt.</p>
<p>Fehler behoben: Großgeschriebenes Hex-Format verursachte negative Integer, dass unsigned zu Folge hatte.</p>
<p>Fehler behoben: RegExMatch machte Ausgabe-Array-Elemente unbrauchbar, wenn bestimmte Bedingungen erfüllt wurden. Siehe <a href="http://www.autohotkey.com/forum/topic59120.html">Fehlerbericht</a>.</p>

<h2>Revision 51 - 11. April 2010</h2>
<p>Geändert: Verwendet <EXENAME>.ahk anstelle von AutoHotkey.ini oder AutoHotkey.ahk.</p>
<p>Geändert: Verwendet standardmäßig UTF-8 für Script-Dateien; mit /CPnnn überschreiben.</p>
<p>Fehler behoben: Hebt die Pause auf, falls das Script beendet wird, damit die __Delete-Metafunktion des Objekts ausgeführt werden kann.</p>

<h2>Revision 50 - 27. März 2010</h2>
<p>Verbesserte Flexibilität für <a href="objects/Object.htm#Insert">Objekt._Insert</a>.
<ul>
  <li><code>Objekt._Insert(x)</code> - x wird bei <code>_MaxIndex()="" ?</code> eingefügt<code> 1 : _MaxIndex() + 1</code>.</li>
  <li><code>Objekt._Insert(i,x,y,z)</code> - <code>x,y,z</code> wird bei <code>i,i+1,i+2</code> eingefügt.</p></li>
</ul>
<p>Verbesserte Flexibilität für <a href="objects/Object.htm#Remove">Objekt._Remove</a>.
<ul>
  <li><code>Objekt._Remove(k)</code> - entfernt und gibt den Wert von k zurück.</li>
  <li><code>Objekt._Remove()</code> - entfernt und gibt den Wert von _MaxIndex() zurück.</p></li>
</ul>
<p>Freigabemodus-Flags für FileOpen hinzugefügt [von jackieku].</p>
<p>Fehler behoben: P-Option von RegExMatch gab fälschlicherweise 1 für Teilausdrücke zurück, dass mit nichts übereinstimmte.</p>
<p>Fehler behoben: <code>Objekt._SetCapacity(Schlüssel,n)</code> wurde in einigen Fällen nicht 0-terminiert.</p>
<p>Fehler behoben: StatusBarGetText gab nur den halben Text in den Unicode-Versionen zurück.</p>

<h2>Revision 49 - 14. März 2010</h2>
<p><a href="objects/Object.htm#NewEnum">obj._NewEnum()</a> hinzugefügt.</p>
<p><a href="objects/Object.htm">ObjMethod(obj)</a> für jede interne <code>obj._Method()</code> hinzugefügt.</p>
<p>Geändert: ObjSet/Get/Call kann nicht länger vom Script aufgerufen/überschrieben werden.</p>
<p>Fehler behoben: Potentieller Absturz durch die VK_PACKET-Überprüfung, die in L48 hinzugefügt wurde.</p>
<p>Fehler behoben: Zeichencodes in VK_PACKET-Ereignisse wurden potenziell als Scancodes fehlinterpretiert.</p>
<p>Fehler behoben: Ausnahmetext wurde nach dem ersten übereinstimmenden Steuerelement ineffektiv.</p>

<h2>Revision 48 - 21. Februar 2010</h2>
<p>Fehler behoben: Alleinstehendes <code>obj.()</code> wurde nicht als gültiger Ausdruck erkannt.</p>
<p>ControlSend verwendet nun WM_CHAR, um Zeichen zu unterstützen, die keinen dazugehörigen Tastencode haben.  Zum Beispiel gilt das für "?" (en-US), Unendlichzeichen in einer Unicode-Version und <code>{U+221e}</code> in jeder Version.</p>
<p>KeyHistory zeigt nun den kompletten 16-Bit-Zeichencode von VK_PACKET-Ereignisse (VK=E7) an.  Mit <a href="commands/Send.htm#Unicode">Send</a> wurden sie möglicherweise für Unicode-Zeichen erzeugt.</p>

<h2>Revision 47 - 13. Februar 2010</h2>
<p>Fehler behoben (Unicode): ControlGet,List mit ListView-Steuerelemente.</p>

<h2>Revision 46 - 11. Februar 2010</h2>
<p>A_FileEncoding hinzugefügt, um die aktuelle Standard-Dateikodierung zurück zugeben.</p>
<p><a href="commands/StrPutGet.htm">StrPut</a> hinzugefügt und <a href="commands/StrPutGet.htm">StrGet</a> mit zusätzlichen Funktionen erweitert.</p>

<h2>Revision 45 - 8. Februar 2010</h2>
<p>_GetAddress hinzugefügt; _SetCapacity/_GetCapacity bearbeitet nun möglicherweise ein gegebenes Feld.  <a href="objects/Object.htm">[mehr Information]</a></p>
<p>Übergangslösung für WM_PAINT-Endlosschleifen hinzugefügt, die häufig durch Unterklassen verursacht wurden.</p>
<p>Erlaubt <code>obj.()</code>, um die Standard-Methode eines Objekts aufzurufen; vergleichbar mit <code>obj[""]()</code>.</p>
<p>Entwickler: Lösung und Projekt-Dateien für MSBuild 4.0 & VS2010 hinzugefügt.  <a href="http://github.com/Lexikos/AutoHotkey_L/commit/ed81ea089c223b46c883036c14454aa4386d3801">[mehr Information]</a></p>
<p>Fehler behoben (Unicode): 'Running'-Spalte in ListHotkeys.</p>

<h2>Revision 44 - 7. Februar 2010</h2>
<p>Fehler behoben: Der Versuch "nichts" zu setzen, führte zum Absturz des Scripts. Zum Beispiel <code>x[]:=z</code>.</p>
<p>Fehler behoben (Unicode): Nicht in der Lage, das Standard-Script zu finden (Documents\AutoHotkey.ahk).</p>
<p>Fehler behoben (Unicode): A_Desktop, A_ProgramFiles und mehrere andere interne Variablen, die deren Wert aus der Registrierung lesen, terminierten Strings nicht richtig.</p>
<p>Fehler behoben (ANSI): Zeichen im Bereich 0x80 bis 0xFF konnten nicht von InStr oder StringReplace gefunden werden.</p>
<p>Geändert (ANSI): Behandelt ToCodePage/FromCodePage wie andere nicht unterstützte/ungültige Unterbefehle.</p>

<h2>Revision 43 - 29. Januar 2010</h2>
<p>Fehler behoben: obj.Func() gibt eine zufällige Integer zurück, wenn es ein leerer String sein soll.</p>

<h2>Revision 42 - 28. Januar 2010</h2>
<p>Mit AutoHotkeyU zusammengeführt.</p>
<p>Zahlreiche Fehlerbehebungen und Verbesserungen, einige im Zusammenhang mit der Zusammenführung.</p>

<h2>Revision 41 - 20. Dezember 2009</h2>
<p>Fehler behoben: Fließkommazahlen waren gleichwertig mit einem leeren String, wenn sie als Schlüssel in Objekten verwendet wurden.  Sie werden nun wie vorgesehen in numerische Strings umgewandelt, abhängig vom <a href="commands/SetFormat.htm">Fließkomma-Format</a>.</p>

<h2>Revision 40 - 13. Dezember 2009</h2>
<p>Das Verhalten von Meta-Funktionen und Multi-Parameter wurde geändert, um die Flexibilität zu verbessern.  Meta-Funktionen werden nun aufgerufen, *bevor* nach einem geeigneten Feld in jedem Basis-Objekt gesucht wird; Werte in x.base werden Meta-Funktionen allerdings überschreiben, die in x.base.base definiert wurden.  Die Verkettung von Meta-Funktionen (Vererbung) ist nun möglich, indem "Return" vermieden wird.</p>
<p>Verbesserte Standardbasis-Funktionalität, um beständiger mit realen Objekten zu sein.</p>
<p>Geändert (Debugger): Während der Code durchlaufen wird, werden alle Klammern übersprungen, nur nicht solche, die eine Funktion beenden.</p>
<p>Geändert (Debugger): Das versteckte "Exit" am Ende des Scripts befindet sich nun *unter* der letzten physischen Zeile, um Verwirrung zu vermeiden.</p>

<h2>Revision 39 - 2. Dezember 2009</h2>
<p>Fehler behoben (Debugger): Fehler in der Base64-Dekodierung, die von property_set verwendet wird.</p>

<h2>Revision 38 - 17. November 2009</h2>
<p>Hinzugefügt: <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a>-Anweisung, um eine Taste zu bestimmen, die Alt/Win-Up-Ereignisse verbirgt.  Siehe <a href="http://www.autohotkey.com/forum/topic22378.html">diesen Thread</a> für Hintergrundinformationen.</p>
<p>Geändert: Wenn <code>x[1,2]:=3</code> ein Objekt für <code>x[1]</code> erstellt, dann wird dessen Basis nicht länger auf <code>x.base</code> gesetzt.  Siehe <a href="Objects.htm#Subclassing_aoa">die Dokumentation</a> für ein Verfahren zur Steuerung dieses Verhaltens.</p>

<h2>Revision 37 - 7. November 2009</h2>
<p>Hinzugefügt: Unterstützung für die Objektaufrufsyntax <code>obj[Methodenname](Parameter)</code>.</p>

<h2>Revision 36 - 4. November 2009</h2>
<p>Geändert: Wenn nach <code>x.y</code> oder Ähnliches unmittelbar eine öffnende eckige Klammer (<code>[</code>) erfolgt, dann wird die Kennung ganz rechts vor der Klammer als erster Parameter der Operation behandelt.  Zum Beispiel ist <code>a.b.c[d]</code> gleichwertig mit <code>ObjGet(a.b,"c",d)</code> und <code>x.y[z]:=v</code> ist gleichwertig mit <code>ObjSet(x,"y",z,v)</code>. Zuvor wurde jeder Unterausdruck vor einer eckigen Klammer separat ausgewertet.</p>
<p>Geändert: Wenn nach einem Methodenaufruf wie <code>x.y()</code> unmittelbar eine Zuweisung erfolgt, dann werden die Klammern als eckige Klammern behandelt. Zum Beispiel ist <code>x.y(z):=v</code> nun gleichwertig mit <code>ObjSet(x,"y",z,v)</code>.</p>
<p>Fehler behoben: If(Ausdruck) und While(Ausdruck) ohne trennendes Leerzeichen oder Komma.</p>

<h2>Revision 35 - 25. Oktober 2009</h2>
<p>Fehler behoben: Alleinstehende Ausdrücke mit zwei oder mehr "Punkten" am Anfang, wie z. B. <code>x.y.z()</code> (fehlerhaft seit L34) Beachtet, dass '(' oder '[' oder ':=' immer noch notwendig ist.</p>

<h2>Revision 34 - 24. Oktober 2009</h2>
<p>Geändert: Das Setzen eines Wertes auf einen leeren String innerhalb eines Objekts speichert nun den leeren String, anstatt das Schlüssel-Wert-Paar vom Objekt zu entfernen.  _Remove kann immer noch verwendet werden, um Schlüssel-Wert-Paare vollständig zu entfernen.</p>
<p>Geändert: Befehlsnamen müssen mit einem Leerzeichen, Tabulator oder Komma terminiert werden.  Die folgenden Zeichen umgehen nicht länger diese Anforderung: <span class="Code"><>:+-*/!~&|^[]</span>.  Zum Beispiel werden Syntaxfehler wie <span class="Code">MsgBox< foo</span> und <code>If!foo</code> nun bei der Ladezeit abgefangen.</p>
<p>Fehler behoben: Return behandelt nun Ausdrücke korrekt, wodurch eine Variable ein Objekt enthalten kann.  Zum Beispiel sollte <code>Return x:=y</code>, <code>Return (x)</code>, <code>Return x,...</code> und ähnliches nun richtig funktionieren (<code>Return x</code> hat bereits funktioniert).</p>
<p>Fehler behoben: Multi-Parameter get/set unterstützte Meta-Funktionen für mehrere Objekte nicht richtig (wie z. B. für <code>x</code> <i>und</i> <code>x[y]</code> im Ausdruck <code>x[y,z]</code>).</p>
<p>Fehler behoben: Hintereinanderfolgende Objektzuweisungen wie z. B. <code>x[y]:=z</code> in <code>r:=x[y]:=z</code> ergaben keine Zahlen oder Objekte - fehlerhaft seit L33.</p>
<p>Fehler behoben: <code>x._Remove(y)</code> führte zum Absturz des Scripts oder entfernte das falsche Element, wenn <code>x</code> nicht <code>y</code> enthielt.</p>
<p>Fehler behoben: <code>x.=y</code>, <code>If x.y=...</code> und Ähnliches.  Betrifft wahrscheinlich auch andere Ausdrücke.</p>
<p>Fehler behoben: Allein stehende ternäre Ausdrücke benötigen nicht länger Leerräume.  Zum Beispiel ist <code>x? F(1) : F(2)</code> nicht länger erlaubt.</p>
<p>Debugger: Beim Beenden des Scripts wird der Debugger getrennt, *nachdem* Objekte freigegeben wurden, um das Debuggen von __Delete-Handler zu ermöglichen.</p>

<h2>Revision 33 - 3. Oktober 2009</h2>
<p>Fehler behoben: Lokale Variablen wurden nicht automatisch für Funktionen freigegeben, die Objekte oder reine Zahlen zurückgaben.</p>
<p>Fehler behoben: Zwei separate Referenzzählungsfehler beim ternären Operator und Object().</p>
<p>Fehler behoben: Wenn einer Variable ein String zugewiesen wurde, der von einer gescripteten Objektfunktion zurückgegeben wurde, dann wurde die Länge der Variable falsch gesetzt.</p>
<p>Fehler behoben: Wenn die letzte Operation in einem Ausdruck einen String aus einem temporären Objekt ermittelte, dann wurde das Objekt und der String vorzeitig freigegeben.</p>
<p>Fehler behoben: Numerische Strings mit speziellen Formatierungen wurden nicht beibehalten, wenn sie von einer Funktion mittels einer Variable zurückgegeben oder an einer rekursiven Funktion weitergegeben wurde.</p>
<p>Fehler behoben: Wenn das Endergebnis eines Ausdrucks (mit Ausnahme von Return) ein Objekt ist, dann wird korrekt ein leerer String ausgegeben, anstatt den Thread unauffällig zu abzubrechen.</p>
<p>Fehler behoben: __Delete-Meta-Funktionen überschrieb manchmal temporäre Werte im Dereferenz-Zwischenspeicher.</p>
<p>Hinzugefügt: Eine ermittelte Adresse mittels &object kehrt möglicherweise mithilfe von Object(Adresse) als Objektreferenz zurück.</p>

<h2>Revision 32 - 26. September 2009</h2>
<p>Fehler behoben: Send/PostMessage führt zum Absturz, wenn weniger als drei Parameter angegeben wurden.</p>

<h2>Revision 31 - 26. September 2009</h2>
<p>Hinzugefügt: Objekt/Array-Unterstützung und zahlreiche kleinere Änderungen, um das zu ermöglichen.</p>
<p>Hinzugefügt: Unterstützung für While(Ausdruck) ohne Leerräume.</p>
<p>Hinzugefügt: Trim, LTrim, RTrim.</p>
<p>Hinzugefügt: A ~= B; entspricht RegExMatch(A, B).  Das wird möglicherweise in einer zukünftigen Version entfernt.</p>
<p>Fehler behoben: Eine Inkompatibilität mit LowLevel.</p>
<p>Geändert: Die Zeichen [, ] und ? sind nicht länger in Variablennamen gültig.  Folglich benötigt ? (ternär) nicht länger ein Leerzeichen auf jeder Seite.</p>
<p>Geändert: Optionale Parameter können nun überall in der Parameterliste eines nicht-dynamischen Funktionsaufrufs weggelassen werden. Da das mittels Einfügen des Parameter-Standardwerts während der Ladezeit funktioniert, wird es nicht unterstützt und ist für dynamische Funktionsaufrufe nicht erlaubt.</p>
<p>Debugger: Verschiedene kleinere Änderungen, um den Programmablauf zu vereinfachen, während der Code durchlaufen wird.</p>
<p>Optimierung: Wenn der erste Parameter von DllCall ein direkt vorhandener String ist, der einer bereits vorhandenen Funktion im Speicher entspricht, dann wird er mit der aktuellen Adresse der Funktion ersetzt.</p>
<p>Von v1.0.48.03 auf v1.0.48.04 aktualisiert.</p>

<h2>Revision 30 - 31. Mai 2009</h2>
<p>Von v1.0.48.02 auf v1.0.48.03 aktualisiert.</p>

<h2>Revision 29 - 2. Mai 2009</h2>
<p>Alle unterstützten Bildformate können jetzt als Menü-Icons verwendet werden.  Derzeit ist es notwendig, die tatsächliche Größe anzugeben, wenn die Transparenz des Icons in Windows Vista oder höher bewahrt werden soll. Zum Beispiel:
<pre>Menu, Menüname, Icon, Menüpunktname, Dateiname.png,, 0</pre></p>

<h2>Revision 28 - 2. Mai 2009</h2>
<p>Verbesserte durchschnittliche Performance von dynamischen Funktionsaufrufen mittels Implementierung von binärer Suche nach Funktionsnamen. Diese Änderung gilt auch für andere Bereiche, wie Auflösung von Funktionsreferenzen in Ausdrücken während der Ladezeit und Auflösung von OnMessage, RegisterCallback, etc. während der Laufzeit.</p>

<h2>Revision 27 - 26. April 2009</h2>
<p>Von v1.0.48.00 auf v1.0.48.02 aktualisiert.</p>

<h2>Revision 26 - 11. April 2009</h2>
<p>Fehler behoben: Menü-Icons wurden nicht bei Elementen gezeichnet, die Untermenüs haben, wenn Owner-Drawing verwendet wurde.</p>
<p>Fehler behoben: Menü-Icons wurden nicht freigegeben, wenn alle Menüpunkte gleichzeitig gelöscht wurden.</p>
<p>Geändert (Source): AutoHotkey.sln in AutoHotkey_L.sln umbenannt, damit das VS-Fenster leichter identifiziert werden kann.</p>

<h2>Revision 25 - 30. März 2009</h2>
<p>Fehler behoben: Send {U+xxxx} setzt nun korrekt den Modifikatorstatus wie bei normalen Tasten.</p>
<p>Fehler behoben: Send {U+..xx} löst nicht länger Hotkey SCxx aus.</p>

<h2>Revision 24 - 30. März 2009</h2>
<p>Hinzugefügt: Unterstützung für Send {U+xxxx}. SendInput() wird verwendet, wenn eine ordnungsgemäße Unicode-Unterstützung verfügbar ist, ansonsten wird wieder Alt+Numpad benutzt.</p>

<h2>Revision 23 - 30. März 2009</h2>
<p>Fehler behoben: GuiControl, Enable/Disable setzt den Fokus nur noch neu, wenn das fokussierte Steuerelement deaktiviert war.</p>

<h2>Revision 22 - 26. März 2009</h2>
<p>If var [not] in/contains Übereinstimmungsliste optimiert, besonders für lange Listen mit kurzen Feldern.</p>

<h2>Revision 21 - 16. März 2009</h2>
<p>Kleinere Optimierungen für While. [Danke, Chris]</p>
<p>Fehler behoben (Debugger): Revisionen 19 und 20 ließ Timer-Threads von der Aufrufliste weg.</p>
<p>Fehler behoben (Debugger): XML-reservierte Zeichen wurden in den meisten Fällen nicht geschützt.</p>
<p>Fehler behoben (Debugger): Falscher Befehl und transaction_id wurden in der letzten Antwort verwendet, bevor das Script beendet wurde.</p>

<h2>Revision 20 - 27. Februar 2009</h2>
<p>Geändert: Wenn ein Icon nicht mit einer neuen Methode geladen werden kann, dann soll die alte Methode wieder verwendet werden.</p>

<h2>Revision 19 - 26. Februar 2009</h2>
<p>Hinzugefügt: Neue Option Gui, Font, qN, um die Schriftartqualität zu setzen bzw. Anti-Aliasing zu kontrollieren, wobei N zwischen 0 und 5 liegt.</p>
<p>Fehler behoben: IL_Add lädt nun Icons in der geeignetsten Größe, wenn mehrere Größen vorhanden sind.</p>
<p>Mit AutoHotkey v1.0.48 zusammengeführt, für Fehlerbehebungen, Optimierungen und anderen Änderungen von Chris. Einige AutoHotkey_L-Funktionen wurden in der Hauptversion integriert; folgende Änderungen wurden an diesen Funktionen seit den vorherigen Revisionen vorgenommen:</p>
<ul>
  <li>Verhaltensmuster gilt nicht länger für While - z. B. wird "While %x%" korrekt als Doppeldereferenz anstelle von "While x" interpretiert.</li>
  <li>One-True-Brace-Stil wird nun für While unterstützt.</li>
  <li>Statische Variablen können nun in statisch-angenommenen Funktionen deklariert und initialisiert werden.</li>
  <li>Die Übergabe von zu <em>wenigen</em> Parametern an einem dynamischen Funktionsaufruf ist nicht mehr zulässig, da der Aufrufer der Funktion den Designer der Funktion im Nachhinein anzweifeln kann, das Erkennen von Script-Fehlern während der Laufzeit einschränkt wird und zum Absturz der Anwendung führen kann, wenn eine interne Funktion aufgerufen wird.</li>
</ul>

<h2>Revision 18 - 21. Februar 2009</h2>
<p>Fehler behoben: Durch die unvollständige Fehlerbehebung in der vorherigen Revision bewirkte eine Verkettung gefolgt von einer Zuweisung, dass der Rest des Ausdrucks in einigen Fällen übersprungen wurde.</p>

<h2>Revision 17 - 20. Februar 2009</h2>
<p>Hinzugefügt: Menü-Icons mithilfe der Unterbefehle Icon und NoIcon im Menu-Befehl.</p>
<p>Geändert: Negative Iconnummern können nun verwendet werden, um einen Ressourcen-Bezeichner innerhalb einer ausführbaren Datei zu kennzeichnen.</p>
<p>Geändert: Standard-Style von Menüs um MNS_CHECKORBMP erweitert.</p>
<p>Geändert: Sowohl die kleinen als auch großen Versionen von benutzerdefinierten Tray-Icons werden geladen, damit die richtigen Icons an den geeigneten Stellen angezeigt werden.</p>
<p>Fehler behoben: Das Laden von Icons von ausführbaren Dateien mit anderen Größen als die Systemgröße klein/groß.</p>

<h2>Revision 16 - 4. Februar 2009</h2>
<p>Fehler behoben: Das Löschen eines Menüpunktes löschte teilweise auch sein dazugehöriges Untermenü.</p>

<h2>Revision 15 - 1. Februar 2009</h2>
<p>Fehler behoben: Die Präsenz von SetFormat in einem *kompiliertem* Script deaktivierte nicht den Binärzahl-Schreibcache. SetFormat sollte nun ordnungsgemäß in kompilierten Scripts funktionieren.</p>

<h2>Revision 14 - 1. Februar 2009</h2>
<p>Zahlreiche Fehlerbehebungen und Optimierungen von Chris (pre-v1.0.48 beta).</p>
<p>Hinzugefügt: Unterstützung für RegEx-Callouts und die Auto-Callout-Option 'C'.</p>
<p>Geändert: A_AhkVersion beinhaltet nun die Revisionsnummer. Zum Beispiel 1.0.47.07.L14.</p>
<p>Fehler behoben: HWND's/Fenster-ID's wurden per Vorzeichen auf 64-Bit erweitert. Zum Beispiel wurde 0xb482057e zu 0xffffffffb482057e.</p>

<h2>Revision 13 - 29. November 2008</h2>
<p>Fehler behoben: Ungültige DllCall-Typen wurden als INT in einigen Versionsumgebungen behandelt.</p>
<p>Hinzugefügt: Übergangslösung für das GuiEscape-Problem beim Deaktivieren des fokussierten Steuerelements.</p>
<p>Geänderte Versionsinformation: InternalName, ProductName und FileDescription sind nun "AutoHotkey_L" anstelle von "AutoHotkey".</p>

<h2>Revision 12 - 6. September 2008</h2>
<p>Fehler behoben: Mögliche Zugriffsverletzung beim Verwenden von property_get in einer internen Variable. -- DBGP</p>

<h2>Revision 11 - 5. September 2008</h2>
<p>Fehler behoben: Prüfsumme von AutoHotkeySC.bin mittels Post-Build-Script entfernt (AutoHotkey muss installiert sein).</p>
<p>Hinzugefügt: .L-Suffix für A_AhkVersion.</p>
<p>Hinzugefügt: Vorläufige Unterstützung für DBGp (interaktives Debuggen).</p>

<h2>Revision 10 - 2. August 2008</h2>
<p>Fehler behoben: WheelLeft/WheelRight-Unterstützung, dass seit Revision 9 fehlerhaft war.</p>

<h2>Revision 9 - 29. Juli 2008</h2>
<p>Fehler behoben: Ermöglicht Break/Continue in While.</p>
<p>Fehler behoben: TrayTip in Windows-Versionen außer Englisch und möglicherweise andere Nebeneffekte beim Verwenden von Vista-Versionen.</p>

<h2>Revision 8 - 27. Juli 2008</h2>
<p>Hinzugefügt: #IfTimeout-Anweisung, um die Zeitüberschreitung für Auswertungen von #If-Ausdrücke zu bestimmen (in Millisekunden). 1000 ist Standard.</p>
<p>Hinzugefügt: Statisch-angenommener Modus für Funktionen. "Static" muss jeder lokalen/globalen Variablendeklaration vorangestellt werden.</p>
<p>Hinzugefügt: One-True-Brace-Unterstützung für While.</p>
<p>Geändert: While setzt nun A_Index, wenn der Durchlauf beginnt.</p>

<h2>Revision 7 - 26. Juli 2008</h2>
<p>Hinzugefügt: IsFunc(Funktionsname) - Gibt eine Zahl ungleich 0 zurück, wenn der Funktionsname im Script oder als interne Funktion existiert.</p>

<h2>Revision 5 - 19. Juli 2008</h2>
<p>Veraltete Referenzen auf Test-Scripts entfernt.</p>
<p>Einfacher Standard-Test-Script hinzugefügt.</p>

<h2>Revision 4 - 18. Juli 2008</h2>
<p>Hinzugefügt: #If (Ausdruck) - Vergleichbar mit #IfWinActive, aber für beliebige Ausdrücke.</p>
<p>Hinzugefügt: WheelLeft, WheelRight - Unterstützung für WM_MOUSEHWHEEL, eingeführt durch Windows Vista. (Benötigt Vista).</p>
<p>Hinzugefügt: While, Ausdruck - Schleife, während eine Bedingung wahr ist.</p>
<p>Hinzugefügt: A_IsPaused - Wahr, wenn der darunterliegende Thread pausiert ist.</p>
<p>Hinzugefügt: A_IsCritical - Wahr, wenn der aktuelle Thread mithilfe des "Critical"-Befehls als unterbrechungsfrei markiert ist.</p>
<p>Geändert: Erlaubt eine beliebige Anzahl an Parametern, die an dynamischen Funktionsaufrufen übergeben werden können.</p>
<p>Fehler behoben: Zugriffsverletzung, verursacht durch WinGetClass und Unterklassenfenster.</p>
<p>Fehler behoben: Zugriffsverletzung, verursacht durch leere dynamische Funktionsreferenzen.</p>

<p>&nbsp;</p>
</div>
</body>
</html>
